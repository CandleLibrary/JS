
    import { ParserFactoryNext as ParserFactory } from "@candlelib/hydrocarbon";
    const recognizer_initializer = (()=>{
        var lookup_table 
var sequence_lookup = new Uint8Array([47,42,42,61,59,125,44,123,40,41,58,61,61,61,91,93,46,46,46,63,46,37,61,43,61,45,61,60,60,61,62,62,62,61,38,38,61,94,61,124,124,61,33,61,61,126,96,36,123,92,34,39,48,88,95,69,78,68,95,79,70,95,80,82,79,68,85,67,84,73,79,78,105,110,115,116,97,110,99,101,111,102,97,119,97,105,116,102,117,110,99,116,105,111,110,101,120,116,101,110,100,115,100,101,98,117,103,103,101,114,119,104,105,108,101,99,111,110,116,105,110,117,101,98,114,101,97,107,114,101,116,117,114,110,116,97,114,103,101,116,115,119,105,116,99,104,118,111,105,100,108,101,116,121,105,101,108,100,110,117,108,108,109,101,116,97,112,114,111,116,101,99,116,101,100,65,66,49,55,50,51,52,53,54,47,47,42,47,63,63,43,43,45,45,48,120,105,109,112,108,101,109,101,110,116,115,97,115,121,110,99,102,105,110,97,108,108,121,101,120,112,111,114,116,100,101,102,97,117,108,116,119,105,116,104,99,97,116,99,104,116,121,112,101,111,102,115,116,97,116,105,99,118,97,114,110,101,119,112,97,99,107,97,103,101,47,61,48,66,48,98,48,79,48,111,105,110,116,101,114,102,97,99,101,105,109,112,111,114,116,105,102,97,108,115,101,102,114,111,109,102,111,114,101,108,115,101,100,101,108,101,116,101,100,111,99,111,110,115,116,99,108,97,115,115,99,97,115,101,116,104,114,111,119,116,104,105,115,116,114,117,101,116,114,121,115,117,112,101,114,112,114,105,118,97,116,101,112,117,98,108,105,99])
var TokenSymbol = 1
var action_ptr = 0
var TokenIdentifier = 2
var TokenSpace = 4
var TokenNewLine = 8
var TokenNumber = 16
var TokenIdentifierUnicode = 32|TokenIdentifier
var TokenFullNumber = 128|TokenNumber
var UNICODE_ID_CONTINUE = 32
var UNICODE_ID_START = 64
var NULL_STATE = 0
var STATE_ALLOW_SKIP = 1
var STATE_ALLOW_OUTPUT = 2
function getUTF8ByteLengthFromCodePoint (code_point ){
    if( ( code_point )==0 ){
    return 1
} else if( ( code_point &0x7F )==code_point ){
    return 1
} else if( ( code_point &0x7FF )==code_point ){
    return 2
} else if( ( code_point &0xFFFF )==code_point ){
    return 3
} else {
    return 4
}
}
function utf8ToCodePoint (index, buffer){
    var a = buffer[index];
    var flag = 14;
    if( a &0x80 ){
    flag = a &0xF0;
    var b = buffer[index + 1];
    if( flag &0xE0 ){
        flag = a &0xF8;
        var c = buffer[index + 2];
        if( ( flag )==0xF0 ){
            return ( ( a &0x7 )<<18 )|( ( b &0x3F )<<12 )|( ( c &0x3F )<<6 )|( buffer[index + 3]&0x3F )
        } else if( ( flag )==0xE0 ){
            return ( ( a &0xF )<<12 )|( ( b &0x3F )<<6 )|( c &0x3F )
        }
    } else if( ( flag )==0xC ){
        return ( ( a &0x1F )<<6 )|b &0x3F
    }
} else return a;
    return 0
}
function getTypeAt (code_point ){
    return ( lookup_table[code_point]&0x1F )
}
function createState(ENABLE_STACK_OUTPUT){
    return STATE_ALLOW_SKIP |( ENABLE_STACK_OUTPUT <<1 )
}
class ParserData{
    constructor(input_len_in, rules_len_in, lexer_in){
        this.lexer = lexer_in;
        this.state = createState( 1 );
        this.prod = 0;
        this.VALID = false;
        this.COMPLETED = false;
        this.stack_ptr = 0;
        this.input_ptr = 0;
        this.rules_ptr = 0;
        this.input_len = input_len_in;
        this.rules_len = rules_len_in;
        this.origin_fork = 0;
        this.origin = 0;
        this.alternate = 0;
        if( input_len_in >0 ){
        this.input = new Uint8Array(input_len_in)
    };
        this.rules = new Uint16Array(rules_len_in);
        this.stash = new Uint32Array(256);
        this.stack = []
    }
}
class DataRef{
    constructor(ptr_in, VALID_in, depth_in, byte_offset_in, byte_length_in, line_in){
        this.byte_offset = byte_offset_in;
        this.byte_length = byte_length_in;
        this.line = line_in;
        this.ptr = ptr_in;
        this.VALID = VALID_in;
        this.depth = depth_in;
        this.command_offset = 0;
        this.command_block =new Uint16Array( 64 )
    }
}
var root_data = 0
var tip_data = 0
var out_array = new Array(64)
var data_array = new Array(64)
var fork_array = new Array(64)
var out_array_len = 0
var data_array_len = 0
var fork_array_len = 0
class Lexer {
    constructor(){
        this.byte_offset = 0;
        this.byte_length = 0;
        this.token_length = 0;
        this.token_offset = 0;
        this.prev_token_offset = 0;
        this.type = 0;
        this.line = 0;
        this.current_byte = 0
    };
    isDiscrete(data, assert_class, offset = 0, USE_UNICODE = false){
        var type = 0;
        offset  += this.byte_offset;
        if( ( offset >=data.input_len ) )return true;;
        var current_byte = data.input[offset];
        if( ( !USE_UNICODE ||current_byte  < 128 ) ){
        type = getTypeAt( current_byte )
    } else type = getTypeAt( utf8ToCodePoint( offset, data.input ) );
        return ( type &assert_class )==0
    };
    setToken(type_in, byte_length_in, token_length_in){
        this.type = type_in;
        this.byte_length = byte_length_in;
        this.token_length = token_length_in
    };
    getType (USE_UNICODE, data){
        if( this.END( data ) )return 0;;
        if( ( this.type )==0 ){
        if( ( !( USE_UNICODE )||this.current_byte  < 128 ) ){
            this.type = getTypeAt( this.current_byte )
        } else {
            var code_point = utf8ToCodePoint( this.byte_offset, data.input );
            this.byte_length = getUTF8ByteLengthFromCodePoint( code_point );
            this.type = getTypeAt( code_point )
        }
    };
        return this.type
    };
    isSym (USE_UNICODE, data){
        return ( !this.END( data ) )&&this.getType( USE_UNICODE, data )==TokenSymbol
    };
    isNL (){
        return ( this.current_byte )==10||( this.current_byte )==13

    };
    isSP (USE_UNICODE, data){
        return ( this.current_byte )==32||USE_UNICODE &&( TokenSpace )==this.getType( USE_UNICODE, data )
    };
    isNum (data){
        if( ( this.type )==0||( this.type )==TokenNumber ){
        if( this.getType( false, data )==TokenNumber ){
            var l = data.input_len;
            var off = this.byte_offset;
            while( ( off++<l )&&47<data.input[off]&&data.input[off]<58 ) {
                    this.byte_length +=1;
                    this.token_length  += 1
                };
            this.type = TokenFullNumber;
            return true
        } else return false
    } else return ( this.type )==TokenFullNumber

    };
    isUniID (data){
        if( ( ( this.type )==0||( this.type )==TokenIdentifier ) ){
        if( ( this.getType( true, data )==TokenIdentifier ) ){
            var l = data.input_len;
            var off = this.byte_offset;
            var prev_byte_len = this.byte_length;
            while( ( off +this.byte_length )<l ) {
                    var code_point = utf8ToCodePoint( this.byte_offset +this.byte_length, data.input );
                    if( ( ( ( UNICODE_ID_START |UNICODE_ID_CONTINUE )&lookup_table[code_point] )>0 ) ){
                        this.byte_length +=getUTF8ByteLengthFromCodePoint( code_point );
                        prev_byte_len = this.byte_length;
                        this.token_length  += 1
                    } else {
                        break
                    }
                };
            this.byte_length = prev_byte_len;
            this.type = TokenIdentifierUnicode;
            return true
        } else return false
    } else return ( this.type )==TokenIdentifierUnicode
    };
    copy(){
        var destination = new Lexer(  );
        var destination_ref = destination;
        destination_ref.byte_offset = this.byte_offset;
        destination_ref.byte_length = this.byte_length;
        destination_ref.token_length = this.token_length;
        destination_ref.token_offset = this.token_offset;
        destination_ref.prev_token_offset = this.prev_token_offset;
        destination_ref.line = this.line;
        destination_ref.byte_length = this.byte_length;
        destination_ref.current_byte = this.current_byte;
        return destination

    };
    copyInPlace(){
        var destination = new Lexer(  );
        destination.byte_offset = this.byte_offset;
        destination.byte_length = this.byte_length;
        destination.token_length = this.token_length;
        destination.token_offset = this.token_offset;
        destination.prev_token_offset = this.prev_token_offset;
        destination.line = this.line;
        destination.byte_length = this.byte_length;
        destination.current_byte = this.current_byte;
        return destination

    };
    sync(source){
        this.byte_offset = source.byte_offset;
        this.byte_length = source.byte_length;
        this.token_length = source.token_length;
        this.token_offset = source.token_offset;
        this.prev_token_offset = source.prev_token_offset;
        this.line = source.line;
        this.type = source.type;
        this.current_byte = source.current_byte;
        return this
    };
    slice(source){
        this.byte_length = this.byte_offset -source.byte_offset;
        this.token_length = this.token_offset -source.token_offset;
        this.byte_offset = source.byte_offset;
        this.token_offset = source.token_offset;
        this.current_byte = source.current_byte;
        this.line = source.line;
        this.type = source.type;
        return this
    };
    next(data){
        this.byte_offset  += this.byte_length;
        this.token_offset  += this.token_length;
        if( ( data.input_len <this.byte_offset ) ){
        this.type = 0;
        this.byte_length = 0;
        this.token_length = 0;
        this.current_byte = 0
    } else {
        this.current_byte = data.input[this.byte_offset];
        if( ( this.current_byte )==10 )this.line  += 1;;
        this.type = 0;
        this.byte_length = 1;
        this.token_length = 1
    };
        return this
    };
    END(data){
        return this.byte_offset >=data.input_len

    }
}
function compare(data, data_offset, sequence_offset, byte_length){
    var i = data_offset;
    var j = sequence_offset;
    var len = j+byte_length;
    for(  ; j<len ; i++, j ++ ) 
if( ( data.input[i]!=sequence_lookup[j] ) )return j -sequence_offset;;
    return byte_length
}
function cmpr_set (l , data, sequence_offset, byte_length, token_length){
    if( ( byte_length )==compare( data, l.byte_offset, sequence_offset, byte_length ) ){
    l.byte_length = byte_length;
    l.token_length = token_length;
    return true
};
    return false
}
function create_parser_data_object(input_len, rules_len){
    var lexer = new Lexer(  );
    var parser_data = new ParserData( input_len, rules_len, lexer );
    return parser_data

}
function fork(data){
    var fork = create_parser_data_object( 0, data.rules_len  - data.rules_ptr
 );
    ( tip_data ) . next = fork;
    tip_data = fork;
    var fork_ref = fork;
    var i = 0;
    for(  ; i <data.stack_ptr +1 ; i++ ) 
{
    fork_ref.stash[i] = data.stash[i];
    fork_ref.stack[i] = data.stack[i]
};
    fork_ref.stack_ptr = data.stack_ptr;
    fork_ref.input_ptr = data.input_ptr;
    fork_ref.input_len = data.input_len;
    fork_ref.origin_fork = data.rules_ptr +data.origin_fork;
    fork_ref.origin = data;
    fork_ref.lexer = ( data.lexer ).copy(  );
    fork_ref.state = data.state;
    fork_ref.prod = data.prod;
    fork_ref.input = data.input;
    while( ( data.alternate ) ) {
        data = data.alternate
    };
    data.alternate = fork;
    data_array[data_array_len] = fork;
    data_array_len ++;
    return fork
}
function assert_ascii(l, a, b, c, d){
    var ascii = l.current_byte;
    if( ascii <32 )return ( ( a &( 1<<ascii ) )!=0 ); else if( ascii <64 )return ( ( b &( 1<<( ascii -32 ) ) )!=0 ); else if( ascii <96 )return ( ( c &( 1<<( ascii -64 ) ) )!=0 ); else if( ascii <128 )return ( ( d &( 1<<( ascii -96 ) ) )!=0 );;
    return false
}
function isOutputEnabled(state){
    return NULL_STATE !=( state &STATE_ALLOW_OUTPUT )
}
function set_action(val, data){
    if( ( data.rules_ptr >data.rules_len ) )return;;
    data.rules[data.rules_ptr ++] = val
}
function add_reduce(state, data, sym_len, body = 0, DNP = false){
    if( isOutputEnabled( state ) ){
    var total = body +sym_len;
    if( ( total )==0 )return;;
    if( body >0xFF||sym_len >0x1F ){
        var low = ( 1<<2 )|( body &0xFFF8 );
        var high = sym_len;
        set_action( low, data );
        set_action( high, data )
    } else {
        var low = ( ( sym_len &0x1F )<<3 )|( ( body &0xFF )<<8 );
        set_action( low, data )
    }
}
}
function add_shift(data, tok_len){
    if( tok_len <0 )return;;
    if( tok_len >0x1FFF ){
    var low = 1|( 1<<2 )|( ( tok_len >>13 )&0xFFF8 );
    var high = ( tok_len &0xFFFF );
    set_action( low, data );
    set_action( high, data )
} else {
    var low = 1|( ( tok_len <<3 )&0xFFF8 );
    set_action( low, data )
}
}
function add_skip(data, skip_delta){
    if( skip_delta <1 )return;;
    if( skip_delta >0x1FFF ){
    var low = 2|( 1<<2 )|( ( skip_delta >>13 )&0xFFF8 );
    var high = ( skip_delta &0xFFFF );
    set_action( low, data );
    set_action( high, data )
} else {
    var low = 2|( ( skip_delta <<3 )&0xFFF8 );
    set_action( low, data )
}
}
function convert_prod_to_token(data, prod_start){
    var prod_end = data.rules_ptr;
    var token_len = 0;
    var i = prod_start;
    for(  ; i <prod_end ; i++ ) 
{
    var rule = data.rules[i];
    if( ( rule &4 )==1 )i ++;;
    if( ( rule &3 )>0 ){
        var length = ( rule >>3 )&0x1FFF;
        if( ( rule &4 )==1 )length = ( ( length <<16 )|data.rules[i] );;
        token_len  += length
    }
};
    data.rules_ptr = prod_start;
    add_shift( data, token_len )
}
function mark(val, data){
    return action_ptr 
}
function reset(mark, origin, advanced, state){
    action_ptr = mark;
    advanced.sync( origin );
    return state

}
function consume(l, data, state){
    if( isOutputEnabled( state ) )add_shift( data, l.token_length );;
    l.next( data );
    return true
}
function pushFN(data, _fn_ref){
    data.stack[++ data.stack_ptr] = _fn_ref
}
function stepKernel(data, lexer, stack_base){
    var ptr = data.stack_ptr;
    var _fn = data.stack[ptr];
    var stash = data.stash[ptr];
    data.stack_ptr --;
    var result = _fn( lexer, data, data.state, data.prod, stash );
    data.stash[ptr] = result;
    data.stash[ptr  + 1] = result;
    data.prod = result;
    if( ( result<0||data.stack_ptr <stack_base ) ){
    data.VALID = ( data.lexer ).END( data )&&( result >=0 );
    return false
};
    return true
}
function addDataToOutArray(data, index){
    var i = out_array_len;
    if( i >63 )i = 63;;
    out_array_len = i +1;
    for(  ; i >index ; i-- ) 
{
    out_array[i] = out_array[i - 1]
};
    out_array[index] = data
}
function removeEntryFromDataArray(index){
    data_array_len --;
    var j = index;
    for(  ; j <data_array_len ; j++ ) 
{
    data_array[j] = data_array[j + 1]
}
}
function insertData(data){
    var in_ref = data;
    var i = 0;
    for(  ; i <out_array_len ; i++ ) 
{
    var exist_ref = out_array[i];
    if( in_ref.VALID ){
        if( ( !exist_ref.VALID ) ){
            break
        }
    } else {
        if( ( !exist_ref.VALID &&( exist_ref.input_ptr <in_ref.input_ptr ) ) ){
            break
        }
    }
};
    if( ( i <64 ) )addDataToOutArray( data, i );
}
function run(){
    while( ( data_array_len >0 ) ) {
        var i = 0;
        for(  ; i <data_array_len ; i++ ) 
        {
            var data = data_array[i];
            if( ( !stepKernel( data, data.lexer, 0 ) ) ){
                data.COMPLETED = true;
                removeEntryFromDataArray( i-- );
                insertData( data )
            }
        }
    }
}
function branch_005a35731f839a19(l, data, state, prod, prod_start){
    pushFN( data, $left_hand_side_expression_goto );
    return 178
}
function branch_00a4c64bb3aae7a1(l, data, state, prod, prod_start){
    return 17
}
function branch_00c0dfd6a3b9ee46(l, data, state, prod, prod_start){
    pushFN( data, $property_definition_goto );
    return 178
}
function branch_00cd2beba9d77227(l, data, state, prod, prod_start){
    pushFN( data, $optional_expression_goto );
    return 83
}
function branch_00fc4e729672fa9e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ;  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '3:6 asi=>• τ; [ τ; ]';
    consume( l, data, state );
    return prod_start
}
function branch_015b66d9ab0329bc(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $statement_goto );
    return 88
}
function branch_01699d202b475eef(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 7, 98 );
    return prod_start
};
    return -1
}
function branch_0169af117c524165(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  0  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '196:658 binary_token_list_941=>• τ0 [ τ0 ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 248 );
    return prod_start
}
function branch_0195f717fff17740(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  )  ]';
    '31:79 if_statement=>τif τ( expression • τ) statement τelse statement [ τ) ]';
    '31:80 if_statement=>τif τ( expression • τ) statement [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==41 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  23  ]';
    '31:79 if_statement=>τif τ( expression τ) • statement τelse statement [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger ]';
    '31:80 if_statement=>τif τ( expression τ) • statement [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_190d6582c3078525 );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_01c072348a2faf3e(l, data, state, prod, prod_start){
    pushFN( data, $binding_property_list_goto );
    return 121
}
function branch_027ec010449b3da8(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 7, 136 );
    return 78
};
    return -1
}
function branch_029cb86c5029b8c0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  num  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '191:623 scientific_token_group_923_0_=>• τE int_token [ τE ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_cfed1dcd23cf06ff );
    pushFN( data, $int_token );
    return data.rules_ptr
}
function branch_02aad4575269c41b(l, data, state, prod, prod_start){
    pushFN( data, $octal_token_list_949_goto );
    return 199
}
function branch_033b48c014aa202b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '59:166 function_declaration=>• τasync τfunction τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    pushFN( data, branch_5825b052c229716c );
    pushFN( data, $function_declaration );
    return prod_start
}
function branch_0379c8d93663d74d(l, data, state, prod, prod_start){
    return 37
}
function branch_044718bfe5a84a9c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_1f0ece73f3e8245a );
    pushFN( data, $new_expression );
    return data.rules_ptr
}
function branch_0455d84bd5c92139(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 100 );
    pushFN( data, $exponentiation_expression_goto );
    return 83
}
function branch_04e6a411b1fc24b1(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  "  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    pushFN( data, branch_ea608060f125d775 );
    pushFN( data, $string_literal );
    return prod_start
}
function branch_052eaa6a4917f041(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '144:454 template_spans=>template_middle_list • template_tail [ τ} ]';
    pushFN( data, branch_05d5667ffcc3687a );
    pushFN( data, $template_tail );
    return data.rules_ptr
}
function branch_053123d6047af1fb(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 57 );
    return 38
}
function branch_057d8d843911862e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  /  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '112:357 multiplicative_expression=>multiplicative_expression • τ/ exponentiation_expression [ τ/ ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6261372b01a04e27 );
    pushFN( data, $exponentiation_expression );
    return data.rules_ptr
}
function branch_0590f08629b40be0(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6333ab7b6846cbf7 );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_0596862a5e66a8ee(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_1015c0dcd0e792f1 );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_05d5667ffcc3687a(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 4 );
    pushFN( data, $template_spans_goto );
    return 144
}
function branch_05d59e554b5b9f0e(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 171 );
    pushFN( data, $assignment_expression_goto );
    return 109
}
function branch_05fbd6e3a04ad8ab(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 169 );
    pushFN( data, $coalesce_expression_head_goto );
    return 107
}
function branch_06a8f1f36e544056(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '32:107 iteration_statement=>τfor τ( expression τ; τ; • τ) statement [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_ba6b161ae230b0bb );
    pushFN( data, $statement );
    return data.rules_ptr
}
function branch_06ac1fda68702ea4(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '91:270 arguments=>τ( • τ, τ) [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 159 );
    return prod_start
};
    return -1
}
function branch_06b6e531c4e941db(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_cfdf9cad02979bdd );
        pushFN( data, $statement );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_071caf1d21c59110(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  .  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '87:259 new_target=>τnew • τ. τtarget [ τ. ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 134, 6, 6 ) )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 153 );
    return prod_start
};
    return -1
}
function branch_078a0f21956f9410(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    add_reduce( state, data, 1, 236 );
    pushFN( data, $left_hand_side_expression_goto );
    return 83
}
function branch_08675110fd2c9be0(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 167 );
    return prod_start
}
function branch_08bc7ab5983151cc(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 110, 5, 5 ) )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==40 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_65d4c94eb48be65c );
        pushFN( data, $expression );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_097b95b32499553b(l, data, state, prod, prod_start){
    return 132
}
function branch_09a11a79b3a5aa7c(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_87d87179af2e53ee );
    pushFN( data, $template_tail );
    return data.rules_ptr
}
function branch_09a1f4d0e3f2987f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '142:451 no_substitute_template=>τ` • τ` [ τ` ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 220 );
    return prod_start
}
function branch_09affa6b4ac6662f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '148:461 template_tail=>τ} no_substitute_template_list_846 • τ` [ τ` ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 227 );
    add_reduce( state, data, 1, 3 );
    return prod_start
}
function branch_09cdc148a6029e81(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_dfe24944e7452335 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_09f63b47290001fa(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  class function let const  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '22:53 statement_list_item=>• declaration [ τclass, τasync, τfunction, τlet, τconst ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $declaration );
    return data.rules_ptr
}
function branch_0a68333b2c4e0dc6(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ${  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '146:458 template_head=>τ` • τ${ [ τ${ ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 224 );
    return prod_start
}
function branch_0a7a8f81274d2482(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 160 );
    pushFN( data, $exponentiation_expression_goto );
    return 93
}
function branch_0ad7df8e276c4d5c(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 7, 125 );
    return 78
};
    return -1
}
function branch_0ae8797efc20fac9(l, data, state, prod, prod_start){
    pushFN( data, $int_token_list_931_goto );
    return 193
}
function branch_0ae9c672f1310f8c(l, data, state, prod, prod_start){
    add_reduce( state, data, 5, 59 );
    return 40
}
function branch_0b236a2ce8f0b143(l, data, state, prod, prod_start){
    return 99
}
function branch_0b551eb1243c38d7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '76:214 class_body=>• class_element [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic ]';
    pushFN( data, branch_46d539f60c6e4574 );
    pushFN( data, $class_element );
    return data.rules_ptr
}
function branch_0b8ace6ffdfb6734(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  )  ]';
    '78:228 method_definition=>property_name τ( unique_formal_parameters • τ) τ{ function_body τ} [ τ) ]';
    '78:235 method_definition=>property_name τ( unique_formal_parameters • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==41 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '78:228 method_definition=>property_name τ( unique_formal_parameters τ) • τ{ function_body τ} [ τ{ ]';
    '78:235 method_definition=>property_name τ( unique_formal_parameters τ) • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==123 ){
        consume( l, data, state );
        'Number of end groups0 [    ]';
        'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
        '78:228 method_definition=>property_name τ( unique_formal_parameters τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
        '78:235 method_definition=>property_name τ( unique_formal_parameters τ) τ{ • τ} [ τ} ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        switch(sym_map_deb09f8b969b503a( l, data )){
            case 0: 
            {
                '"--LEAF--"';
                'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                '78:228 method_definition=>property_name τ( unique_formal_parameters τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                pushFN( data, branch_c884b13f2aab77f5 );
                pushFN( data, $function_body );
                return data.rules_ptr
            }
            case 1: 
            {
                '"--LEAF--"';
                'Leaf [  }  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '78:235 method_definition=>property_name τ( unique_formal_parameters τ) τ{ • τ} [ τ} ]';
                consume( l, data, state );
                add_reduce( state, data, 6, 140 );
                return 78
            }
            default: 
            break
        }
    }
};
    return -1
}
function branch_0bbab1bec96141fb(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 9 );
    return prod_start
}
function branch_0bc998f41660642d(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_f5b80fc4b5e01bb9 );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_0bcafa0540b31dc5(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 145 );
    pushFN( data, $assignment_expression_goto );
    return 81
}
function branch_0bd90676c49b6464(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_39083e9fa4fd9df7 );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_0bef6f8c3f7e5877(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 154 );
    pushFN( data, $optional_expression_goto );
    return 88
}
function branch_0c244f08e9bb6366(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $statement_goto );
    return 83
};
    return -1
}
function branch_0c3ff712fd67ee0c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  finally  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '47:138 try_statement=>τtry block catch • finally [ τfinally ]';
    pushFN( data, branch_6a8089d17010bab4 );
    pushFN( data, $finally );
    return data.rules_ptr
}
function branch_0c7f0c30693ecfb4(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 200 );
    pushFN( data, $template_middle_list_goto );
    return 145
}
function branch_0c8d3c6dc575d2b3(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  n . E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE ,  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '161:508 int_token=>• θnum [ θnum ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $int_token );
    return prod_start
}
function branch_0c9d97682b645001(l, data, state, prod, prod_start){
    return 6
}
function branch_0cb70511329ff225(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '41:125 case_block=>τ{ default_clause • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 65 );
    return prod_start
}
function branch_0cd90dbcaf8d17df(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 169 );
    pushFN( data, $short_circuit_expression_goto );
    return 107
}
function branch_0d0105337a8e4c53(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d034e70ccf98a691 );
    pushFN( data, $template_spans );
    return data.rules_ptr
}
function branch_0d17bd4ff7c4954b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ... _ $ id { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '59:160 function_declaration=>τasync τfunction binding_identifier τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_564cb1465ddb49da );
    pushFN( data, $formal_parameters );
    return data.rules_ptr
}
function branch_0d2a9b893187ffe6(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $assignment_expression_goto );
    return 88
};
    return -1
}
function branch_0d632a445dffa4c9(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 174 );
    pushFN( data, $shift_expression_goto );
    return 110
}
function branch_0d86127da7a2651f(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 160
}
function branch_0ddc7908e03c0cc6(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  . [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '88:265 call_expression=>• cover_call_expression_and_async_arrow_head [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $cover_call_expression_and_async_arrow_head );
    return data.rules_ptr
}
function branch_0dee96e137c612bd(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 247 );
    return 184
}
function branch_0e394b3aa6e9c2ba(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 171 );
    pushFN( data, $short_circuit_expression_goto );
    return 109
}
function branch_0e4132c1b77b1825(l, data, state, prod, prod_start){
    add_reduce( state, data, 2 );
    return 188
}
function branch_0e5d378edec341b5(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  **  ]';
    '113:360 exponentiation_expression=>update_expression • τ** exponentiation_expression [ τ** ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 1, 2, 2 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  **  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '113:360 exponentiation_expression=>update_expression τ** • exponentiation_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_fe0261860308cd80 );
    pushFN( data, $exponentiation_expression );
    return data.rules_ptr
}
}
function branch_0edf2a0d55e3eebe(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  +  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '111:353 additive_expression=>additive_expression • τ+ multiplicative_expression [ τ+ ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6096241b0e1355d4 );
    pushFN( data, $multiplicative_expression );
    return data.rules_ptr
}
function branch_0eecca07b8aa7644(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 236 );
    pushFN( data, $assignment_expression_goto );
    return 83
}
function branch_0ef8b509580d6d86(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 146
}
function branch_0f2ec6ebb29efd5d(l, data, state, prod, prod_start){
    return 46
}
function branch_0f40b4330887923d(l, data, state, prod, prod_start){
    add_reduce( state, data, 4, 67 );
    return prod_start
}
function branch_0f5723928c65bb9f(l, data, state, prod, prod_start){
    pushFN( data, $property_definition_goto );
    return 132
}
function branch_0f6223832f385a63(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  let  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '56:151 let_or_const=>• τlet [ τlet ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 82 );
    return prod_start
}
function branch_0f77330c2c101028(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '88:265 call_expression=>• cover_call_expression_and_async_arrow_head [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $cover_call_expression_and_async_arrow_head );
    return data.rules_ptr
}
function branch_0f803b7d8d52ad07(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 248 );
    pushFN( data, $binary_token_list_942_goto );
    return 197
}
function branch_0fcbc655e289dd83(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 106
}
function branch_0fd564215daaa6fc(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '53:146 variable_declaration_list=>variable_declaration_list • τ, variable_declaration [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d8a8aa453ec53718 );
    pushFN( data, $variable_declaration );
    return data.rules_ptr
}
function branch_0fdc95da20340cdb(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 47, 2, 2 ) )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 223 );
    return prod_start
};
    return -1
}
function branch_1015c0dcd0e792f1(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 222 );
    return prod_start
}
function branch_1027848920127da6(l, data, state, prod, prod_start){
    pushFN( data, $statement_goto );
    return 102
}
function branch_102eb2d46ad5eb43(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_49c741966e7e61ee );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_10818f49f3d1f4a8(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ;  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '73:201 class_declaration=>τclass τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    pushFN( data, branch_23eaed5600ea0092 );
    pushFN( data, $class_body );
    return data.rules_ptr
}
function branch_10f65a6d9edf559c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ; } nl END_OF_FILE  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '36:114 break_statement=>τbreak • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    pushFN( data, branch_1d323cb2eadea169 );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_1133f1d0244ad060(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_2a08b58b0fa15fe9 );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_11629f8bfa59afd5(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==44 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_2cc04fe80faca872 );
    pushFN( data, $elision );
    return data.rules_ptr
};
    return -1
}
function branch_116e24b421da2712(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_e15dc418632e6208 );
        pushFN( data, $function_body );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_11e8de85e7063922(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_59c29cae59159bfb );
    pushFN( data, $new_expression );
    return data.rules_ptr
}
function branch_11fb4671d504444e(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  /  ]';
    '151:473 regular_expression_literal=>τ/ regular_expression_literal_list_884 • τ/ default_productions__js_identifier [ τ/ ]';
    '151:475 regular_expression_literal=>τ/ regular_expression_literal_list_884 • τ/ [ τ/ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==47 ){
    consume( l, data, state );
    'Number of end groups1 [    ]';
    'All symbols [  _ $ id ?. ( ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '151:473 regular_expression_literal=>τ/ regular_expression_literal_list_884 τ/ • default_productions__js_identifier [ τ_, τ$, θid ]';
    '151:475 regular_expression_literal=>τ/ regular_expression_literal_list_884 τ/ • [ τ?., τ(, τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
        pushFN( data, branch_fd678aaae08c31e0 );
        return branch_db263beaadc60f64( l, data, state, prod, prod_start )
    } else {
        '"--LEAF--"';
        'Leaf [  ?. ( ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
        '151:475 regular_expression_literal=>τ/ regular_expression_literal_list_884 τ/ • [ τ?., τ(, τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
        add_reduce( state, data, 3, 232 );
        return 151
    }
};
    return -1
}
function branch_125427ae5c0d710c(l, data, state, prod, prod_start){
    pushFN( data, $property_definition_goto );
    return 131
}
function branch_127cdc6d00f03664(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 231 );
    return prod_start
}
function branch_12b87485c81b9d67(l, data, state, prod, prod_start){
    pushFN( data, $variable_declaration_list_goto );
    return 53
}
function branch_137b7d7d3b35e2cd(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 71 );
    pushFN( data, $statement_goto );
    return 23
}
function branch_142c572bdf7f50ac(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 5, 115 );
    return prod_start
};
    return -1
}
function branch_144319f8bd59d868(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 168 );
    pushFN( data, $short_circuit_expression_goto );
    return 103
}
function branch_146aa626b72c1bde(l, data, state, prod, prod_start){
    return 162
}
function branch_151ce5f54265ba2b(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_c886d2b373e3b1f0 );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_15899a2266db037b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '17:44 export_clause=>τ{ export_clause_list_82 • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 23 );
    return prod_start
}
function branch_15983b672ba825fe(l, data, state, prod, prod_start){
    add_reduce( state, data, 4, 18 );
    return 16
}
function branch_15fc90d9f2016b5a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '59:168 function_declaration=>τasync τfunction τ* τ( • τ) τ{ function_body τ} [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_f1e7f2f66efd6388 );
    pushFN( data, $function_body );
    return data.rules_ptr
};
    return -1
}
function branch_15fd5294795436e0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ws  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '150:470 template_escaped_sequence=>τf:s • θws [ θws ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_164c1fc9d99ef4c5(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a8189b064b0721b3 );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_164d30571dd79823(l, data, state, prod, prod_start){
    pushFN( data, $left_hand_side_expression_goto );
    return 146
}
function branch_165acea5aca717c6(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  case }  ]';
    '41:120 case_block=>τ{ case_clauses default_clause • case_clauses τ} [ τcase ]';
    '41:123 case_block=>τ{ case_clauses default_clause • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 325, 4, 4 ) ){
    pushFN( data, branch_b2deab1df605866e );
    return branch_8e9e7da253530602( l, data, state, prod, prod_start )
} else if( l.current_byte ==125 ){
    pushFN( data, branch_b2deab1df605866e );
    return branch_460c2b6fdcd1d700( l, data, state, prod, prod_start )
};
    return -1
}
function branch_166c55ce8a72f285(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '193:627 int_token_list_931=>int_token_list_931 • int_token_list_931_group_1110_0_ [ τ_ ]';
    pushFN( data, branch_cfed1dcd23cf06ff );
    pushFN( data, $int_token_list_931_group_1110_0_ );
    return data.rules_ptr
}
function branch_178f766f2a0130c7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  .  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_c225dfa353bb6999 );
    pushFN( data, $identifier_name );
    return data.rules_ptr
}
function branch_17e0c36504632435(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_1133f1d0244ad060 );
    pushFN( data, $member_expression );
    return data.rules_ptr
}
function branch_1808542a907a4b6f(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  , ) END_OF_PRODUCTION  ]';
    '62:177 formal_parameters=>formal_parameter_list • τ, [ τ, ]';
    '62:178 formal_parameters=>formal_parameter_list • τ, function_rest_parameter [ τ, ]';
    '62:179 formal_parameters=>formal_parameter_list • [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  ) ...  ]';
    '62:177 formal_parameters=>formal_parameter_list • τ, [ τ, ]';
    '62:178 formal_parameters=>formal_parameter_list • τ, function_rest_parameter [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==41 ){
        pushFN( data, branch_561f4369ac978c0b );
        return branch_a07b6ba1c2198d17( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_561f4369ac978c0b );
        return branch_cdeb6f177ffa3d0f( l, data, state, prod, prod_start )
    }
} else {
    '"--LEAF--"';
    'Leaf [  ) END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '62:179 formal_parameters=>formal_parameter_list • [ τ) ]';
    add_reduce( state, data, 1, 102 );
    return 62
};
    return -1
}
function branch_18609f2741e46dde(l, data, state, prod, prod_start){
    add_reduce( state, data, 8, 40 );
    return 32
}
function branch_18cc2f383566c0be(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:83 iteration_statement=>τfor τ( • iteration_statement_group_162_1_ τ; expression τ; expression τ) statement [ τvar ]';
    pushFN( data, branch_46b602a537fe6e41 );
    pushFN( data, $iteration_statement_group_162_1_ );
    return data.rules_ptr
}
function branch_18f351d88311162a(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ` ${  ]';
    '142:450 no_substitute_template=>τ` no_substitute_template_list_846 • τ` [ τ` ]';
    '146:457 template_head=>τ` no_substitute_template_list_846 • τ${ [ τ${ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==96 ){
    pushFN( data, branch_e46c1e61f91ef88e );
    return branch_4d0ed4e9ef1d6340( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 47, 2, 2 ) ){
    pushFN( data, branch_a768b1029796cac7 );
    return branch_7c3bc3e67acae729( l, data, state, prod, prod_start )
};
    return -1
}
function branch_190d6582c3078525(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  else while { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do for switch continue break return with throw try debugger class function let const } default case export END_OF_FILE END_OF_PRODUCTION  ]';
    '31:79 if_statement=>τif τ( expression τ) statement • τelse statement [ τelse ]';
    '31:80 if_statement=>τif τ( expression τ) statement • [ τelse, τwhile, τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, τ}, τdefault, τcase, τexport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    switch(sym_map_b405d67c36a2e8a6( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  else  ]';
        '"⤋⤋⤋  assert-peek-vp ⤋⤋⤋"';
        '31:79 if_statement=>τif τ( expression τ) statement • τelse statement [ τelse ]';
        consume( l, data, state );
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_22fb7fb5b6b97ee3 );
        pushFN( data, $statement );
        return data.rules_ptr
    }
    default:
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  while { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do for switch continue break return with throw try debugger class function let const } default case export END_OF_FILE else END_OF_PRODUCTION  ]';
        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
        '31:80 if_statement=>τif τ( expression τ) statement • [ τelse, τwhile, τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, τ}, τdefault, τcase, τexport ]';
        add_reduce( state, data, 5, 32 );
        return 31
    }
};
    return -1
}
function branch_19a085842515ff66(l, data, state, prod, prod_start){
    return 35
}
function branch_19bf421166d6ae17(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '32:106 iteration_statement=>τfor τ( τ; τ; • τ) statement [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_38d44b59f5b47a79 );
    pushFN( data, $statement );
    return data.rules_ptr
}
function branch_19c88b1b35c139ba(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '17:43 export_clause=>τ{ • τ, τ} [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 24 );
    return prod_start
};
    return -1
}
function branch_1a106d6f43e9c2fc(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 151 );
    return prod_start
};
    return -1
}
function branch_1ae113579359e553(l, data, state, prod, prod_start){
    return 79
}
function branch_1aeb92f44cc64cf8(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $left_hand_side_expression_goto );
    return 83
}
function branch_1b5a9eda331c734c(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  ? ; } nl END_OF_FILE ) : ] , END_OF_PRODUCTION  ]';
    '99:319 conditional_expression=>short_circuit_expression • [ τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
    '99:320 conditional_expression=>short_circuit_expression • τ? assignment_expression τ: assignment_expression [ τ? ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==63 ){
    pushFN( data, branch_0b236a2ce8f0b143 );
    return branch_7e91dfc3645106f3( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ; } nl END_OF_FILE ) : ] , END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '99:319 conditional_expression=>short_circuit_expression • [ τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
    return 99
};
    return -1
}
function branch_1b958e7f242617a2(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 97
}
function branch_1b9a0aedb94a4b3c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  sym  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '180:599 comments_list_6=>• θsym [ θsym ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 3 );
    return prod_start
}
function branch_1be5e3cd91cf0927(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $statement_goto );
    return 83
}
function branch_1c4aebd31e9fd14b(l, data, state, prod, prod_start){
    add_reduce( state, data, 5, 166 );
    return prod_start
}
function branch_1c4c3f0ebbb1ad5e(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 112 );
    pushFN( data, $short_circuit_expression_goto );
    return 88
}
function branch_1c506044841d35a0(l, data, state, prod, prod_start){
    return 7
}
function branch_1c8c936c10ee17f4(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_24950eb30373035b );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function branch_1cb7c2e2b96088aa(l, data, state, prod, prod_start){
    pushFN( data, $binding_list_goto );
    return 57
}
function branch_1cc964e033661548(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  )  ]';
    '78:221 method_definition=>τset property_name τ( property_set_parameter_list • τ) τ{ function_body τ} [ τ) ]';
    '78:227 method_definition=>τset property_name τ( property_set_parameter_list • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==41 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '78:221 method_definition=>τset property_name τ( property_set_parameter_list τ) • τ{ function_body τ} [ τ{ ]';
    '78:227 method_definition=>τset property_name τ( property_set_parameter_list τ) • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==123 ){
        consume( l, data, state );
        'Number of end groups0 [    ]';
        'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
        '78:221 method_definition=>τset property_name τ( property_set_parameter_list τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
        '78:227 method_definition=>τset property_name τ( property_set_parameter_list τ) τ{ • τ} [ τ} ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        switch(sym_map_deb09f8b969b503a( l, data )){
            case 0: 
            {
                '"--LEAF--"';
                'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                '78:221 method_definition=>τset property_name τ( property_set_parameter_list τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                pushFN( data, branch_6565a7e6dd81d368 );
                pushFN( data, $function_body );
                return data.rules_ptr
            }
            case 1: 
            {
                '"--LEAF--"';
                'Leaf [  }  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '78:227 method_definition=>τset property_name τ( property_set_parameter_list τ) τ{ • τ} [ τ} ]';
                consume( l, data, state );
                add_reduce( state, data, 7, 132 );
                return 78
            }
            default: 
            break
        }
    }
};
    return -1
}
function branch_1cf9d3e98ea4f8e1(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 209 );
    return 135
}
function branch_1d18600937259d27(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '116:375 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • τ) [ τ) ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 185 );
    return prod_start
}
function branch_1d323cb2eadea169(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 54 );
    return prod_start
}
function branch_1d35538ea043d8f5(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 109 );
    pushFN( data, $statement_goto );
    return 80
}
function branch_1d6b8bae41c395f4(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_aaa47be9c7a839c5 );
    pushFN( data, $binding_element );
    return data.rules_ptr
}
function branch_1d82a8131449965b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '123:403 binding_elision_element=>• elision binding_element [ τ, ]';
    pushFN( data, branch_1d6b8bae41c395f4 );
    pushFN( data, $elision );
    return data.rules_ptr
}
function branch_1d992d5b88873c5c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $int_token );
    return prod_start
}
function branch_1da7998a7f2ac8ca(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $assignment_expression_goto );
    return 88
}
function branch_1dbdac19ac28186d(l, data, state, prod, prod_start){
    pushFN( data, $regular_expression_literal_list_884_goto );
    return 190
}
function branch_1ddd94c6909151eb(l, data, state, prod, prod_start){
    return 36
}
function branch_1e34f4cbf8cebffe(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 106
}
function branch_1e3776334c2e9421(l, data, state, prod, prod_start){
    return 119
}
function branch_1e7f93a5799c8e48(l, data, state, prod, prod_start){
    add_reduce( state, data, 4, 216 );
    return prod_start
}
function branch_1f0ece73f3e8245a(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 145 );
    pushFN( data, $new_expression_goto );
    return 82
}
function branch_1f1cf7bed843c17e(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  **  ]';
    '113:360 exponentiation_expression=>update_expression • τ** exponentiation_expression [ τ** ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 1, 2, 2 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  **  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '113:360 exponentiation_expression=>update_expression τ** • exponentiation_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_f7b034d99ea40d10 );
    pushFN( data, $exponentiation_expression );
    return data.rules_ptr
}
}
function branch_1f4101a568d31a47(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_1cf9d3e98ea4f8e1 );
    pushFN( data, $initializer );
    return data.rules_ptr
}
function branch_201749fb59b9bc9a(l, data, state, prod, prod_start){
    pushFN( data, $bitwise_or_expression_goto );
    return 105
}
function branch_204390ba7bc065de(l, data, state, prod, prod_start){
    pushFN( data, $formal_parameter_list_goto );
    return 63
}
function branch_207198f74a9c062f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '83:252 member_expression=>• meta_property [ τnew, τimport ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $meta_property );
    return data.rules_ptr
}
function branch_209aa4c7adf816a5(l, data, state, prod, prod_start){
    pushFN( data, $statement_goto );
    return 23
}
function branch_215bcab6524484e2(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  **  ]';
    '113:360 exponentiation_expression=>update_expression • τ** exponentiation_expression [ τ** ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 1, 2, 2 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  **  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '113:360 exponentiation_expression=>update_expression τ** • exponentiation_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_621c08e4cccb7364 );
    pushFN( data, $exponentiation_expression );
    return data.rules_ptr
}
}
function branch_223035d3da6767b4(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 17 );
    return 15
}
function branch_2257b4ffff7bba52(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:105 iteration_statement=>τfor τ( • lexical_declaration τ; τ) statement [ τlet, τconst ]';
    pushFN( data, branch_8efe979f4abd7c14 );
    pushFN( data, $lexical_declaration );
    return data.rules_ptr
}
function branch_22a56d8742a7d504(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  _ ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '164:517 octal_token=>τ0O octal_token_list_948 • octal_token_list_949 [ τ_ ]';
    '164:519 octal_token=>τ0O octal_token_list_948 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==95 ){
    pushFN( data, branch_f006afcfed60bdeb );
    return branch_3656f17b1ca1ba60( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '164:519 octal_token=>τ0O octal_token_list_948 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    add_reduce( state, data, 2, 229 );
    return 164
};
    return -1
}
function branch_22aecdb99afef6f1(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  0X 0x  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '157:499 numeric_literal=>• hex_token [ τ0X, τ0x ]';
    pushFN( data, branch_5bb890753356de8d );
    pushFN( data, $hex_token );
    return data.rules_ptr
}
function branch_22f7cbf2b28018d3(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '163:513 binary_token=>τ0B binary_token_list_941 • binary_token_list_942 [ τ_ ]';
    pushFN( data, branch_d5ae766ac3614f87 );
    pushFN( data, $binary_token_list_942 );
    return data.rules_ptr
}
function branch_22fb7fb5b6b97ee3(l, data, state, prod, prod_start){
    add_reduce( state, data, 7, 31 );
    return 31
}
function branch_2387b6d1ee96694b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '57:154 binding_list=>binding_list • τ, lexical_binding [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d8a8aa453ec53718 );
    pushFN( data, $lexical_binding );
    return data.rules_ptr
}
function branch_23eaed5600ea0092(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 117 );
    return prod_start
};
    return -1
}
function branch_23fc3ce9ce429674(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    pushFN( data, $variable_declaration_list_goto );
    return 53
}
function branch_243aed410514dea4(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '58:157 lexical_binding=>• binding_pattern initializer [ τ{, τ[ ]';
    pushFN( data, branch_43d8ae4c49a98333 );
    pushFN( data, $binding_pattern );
    return data.rules_ptr
}
function branch_2460ca21a9546c6f(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 209 );
    return prod_start
}
function branch_24950eb30373035b(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_fa1aab05a5ccafdc );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_24a3dfbe51dae26f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  function  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '22:53 statement_list_item=>• declaration [ τclass, τasync, τfunction, τlet, τconst ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $declaration );
    return data.rules_ptr
}
function branch_24e22962aacd1064(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 201 );
    pushFN( data, $binding_property_goto );
    return 124
}
function branch_250b86a095b93df8(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 105
}
function branch_2516ffd54f409b1b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '119:388 object_binding_pattern=>τ{ binding_property_list • τ, binding_rest_property τ} [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_45148ca4d012cf3c );
    pushFN( data, $binding_rest_property );
    return data.rules_ptr
}
function branch_2521c6c6f85ceb73(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 111
}
function branch_25822b1e31f44227(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '138:443 element_list=>element_list • τ, assignment_expression [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_2ad8fdd04ed51fb0 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_25d782bed23c8e5b(l, data, state, prod, prod_start){
    pushFN( data, $left_hand_side_expression_goto );
    return 83
}
function branch_25dfcc138ad1b27b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  *  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '8:19 import_clause=>• name_space_import [ τ* ]';
    pushFN( data, branch_2df431db2fabf592 );
    pushFN( data, $name_space_import );
    return data.rules_ptr
}
function branch_25f7d64d730241c9(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 243 );
    return 168
}
function branch_2602dec1a0ddf093(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '117:382 parenthesized=>τ( expression • τ) [ τ) ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 186 );
    return prod_start
}
function branch_26030e38d9b5346d(l, data, state, prod, prod_start){
    return 77
}
function branch_263835df2591dfc6(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '50:142 catch_parameter=>• binding_pattern [ τ{, τ[ ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $binding_pattern );
    return data.rules_ptr
}
function branch_267864f3c17107a4(l, data, state, prod, prod_start){
    return 47
}
function branch_269bb466b53d4bd0(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==110 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 2, 238 );
    return 158
};
    return -1
}
function branch_26a8296f3023077e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_1133f1d0244ad060 );
    pushFN( data, $member_expression );
    return data.rules_ptr
}
function branch_26bc95062ea8884a(l, data, state, prod, prod_start){
    return 73
}
function branch_271f33061baccb7f(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 6, 194 );
    return 120
};
    return -1
}
function branch_2755a0e6fa959baa(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 189 );
    return prod_start
};
    return -1
}
function branch_2793256ba3cb3698(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:85 iteration_statement=>τfor τ( • for_declaration τin expression τ) statement [ τlet, τconst ]';
    pushFN( data, branch_3357d80dcfa1ec28 );
    pushFN( data, $for_declaration );
    return data.rules_ptr
}
function branch_279ca809e55e95cf(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    return 159
}
function branch_27b85206f616617a(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_ee27da02167f6aa5 );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_281811b093c75ede(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '83:250 member_expression=>member_expression • template_literal [ τ` ]';
    pushFN( data, branch_594abed47efdcf4e );
    pushFN( data, $template_literal );
    return data.rules_ptr
}
function branch_282713f7fcb233b4(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 180 );
    return 114
}
function branch_2840d6e7c348c57a(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 8, 92 );
    return prod_start
};
    return -1
}
function branch_2851798a138af48c(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  :  ]';
    '43:129 case_clause=>τcase expression • τ: statement_list [ τ: ]';
    '43:130 case_clause=>τcase expression • τ: [ τ: ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==58 ){
    consume( l, data, state );
    'Number of end groups1 [    ]';
    'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const default } case END_OF_PRODUCTION  ]';
    '43:129 case_clause=>τcase expression τ: • statement_list [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    '43:130 case_clause=>τcase expression τ: • [ τdefault, τ}, τcase ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0x800a996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_c61fc477a6fe204c );
        return branch_c42ba8eb938a80e1( l, data, state, prod, prod_start )
    } else {
        '"--LEAF--"';
        'Leaf [  default } case END_OF_PRODUCTION  ]';
        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
        '43:130 case_clause=>τcase expression τ: • [ τdefault, τ}, τcase ]';
        add_reduce( state, data, 3, 68 );
        return 43
    }
};
    return -1
}
function branch_2865b9f541983081(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_a3eecb5be1ad79f0 );
    pushFN( data, $member_expression );
    return data.rules_ptr
}
function branch_28937e18d8a2f90f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_0bcafa0540b31dc5 );
    pushFN( data, $new_expression );
    return data.rules_ptr
}
function branch_28ad0cb88bc67c2f(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 165 );
    pushFN( data, $assignment_expression_goto );
    return 97
}
function branch_28ca79c4c58c4b1f(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  , from END_OF_PRODUCTION  ]';
    '8:18 import_clause=>imported_default_binding • [ τfrom ]';
    '8:21 import_clause=>imported_default_binding • τ, name_space_import [ τ, ]';
    '8:22 import_clause=>imported_default_binding • τ, named_imports [ τ, ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  * {  ]';
    '8:21 import_clause=>imported_default_binding • τ, name_space_import [ τ, ]';
    '8:22 import_clause=>imported_default_binding • τ, named_imports [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==42 ){
        pushFN( data, branch_ded893b92fe51418 );
        return branch_adfe583f245122e0( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_ded893b92fe51418 );
        return branch_b79bda1539f9fe4b( l, data, state, prod, prod_start )
    }
} else {
    '"--LEAF--"';
    'Leaf [  from END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '8:18 import_clause=>imported_default_binding • [ τfrom ]';
    add_reduce( state, data, 1, 8 );
    return 8
};
    return -1
}
function branch_28d20d26ce640ce2(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '32:98 iteration_statement=>τfor τ( τ; τ; • expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_81d36c51b120eada );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_28d65fbcaba59417(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '78:228 method_definition=>property_name • τ( unique_formal_parameters τ) τ{ function_body τ} [ τ( ]';
    '78:234 method_definition=>property_name • τ( τ) τ{ function_body τ} [ τ( ]';
    '78:235 method_definition=>property_name • τ( unique_formal_parameters τ) τ{ τ} [ τ( ]';
    '78:238 method_definition=>property_name • τ( τ) τ{ τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ... _ $ id { [ )  ]';
    '78:228 method_definition=>property_name τ( • unique_formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '78:235 method_definition=>property_name τ( • unique_formal_parameters τ) τ{ τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '78:234 method_definition=>property_name τ( • τ) τ{ function_body τ} [ τ) ]';
    '78:238 method_definition=>property_name τ( • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  61  ]';
        '78:228 method_definition=>property_name τ( • unique_formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
        '78:235 method_definition=>property_name τ( • unique_formal_parameters τ) τ{ τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_0b8ace6ffdfb6734 );
        pushFN( data, $unique_formal_parameters );
        return data.rules_ptr
    } else if( l.current_byte ==41 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  )  ]';
        '78:234 method_definition=>property_name τ( • τ) τ{ function_body τ} [ τ) ]';
        '78:238 method_definition=>property_name τ( • τ) τ{ τ} [ τ) ]';
        'Number of end groups0 [    ]';
        'All symbols [  {  ]';
        '78:234 method_definition=>property_name τ( τ) • τ{ function_body τ} [ τ{ ]';
        '78:238 method_definition=>property_name τ( τ) • τ{ τ} [ τ{ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( l.current_byte ==123 ){
            consume( l, data, state );
            'Number of end groups0 [    ]';
            'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
            '78:234 method_definition=>property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
            '78:238 method_definition=>property_name τ( τ) τ{ • τ} [ τ} ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            switch(sym_map_deb09f8b969b503a( l, data )){
                case 0: 
                {
                    '"--LEAF--"';
                    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                    '78:234 method_definition=>property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                    pushFN( data, branch_c48f381c6a26acef );
                    pushFN( data, $function_body );
                    return data.rules_ptr
                }
                case 1: 
                {
                    '"--LEAF--"';
                    'Leaf [  }  ]';
                    '"⤋⤋⤋  assert ⤋⤋⤋"';
                    '78:238 method_definition=>property_name τ( τ) τ{ • τ} [ τ} ]';
                    consume( l, data, state );
                    add_reduce( state, data, 5, 143 );
                    return 78
                }
                default: 
                break
            }
        }
    }
};
    return -1
}
function branch_292e3496700ab77e(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 157 );
    return 90
};
    return -1
}
function branch_294f036931ed4100(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '115:371 update_expression=>left_hand_side_expression • τ++ [ τ++ ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 183 );
    return prod_start
}
function branch_295030f79af61f61(l, data, state, prod, prod_start){
    pushFN( data, $numeric_literal_goto );
    return 157
}
function branch_29625183d7ef12e2(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 202 );
    return prod_start
}
function branch_2989bd181844e552(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_0bd90676c49b6464 );
    pushFN( data, $member_expression );
    return data.rules_ptr
}
function branch_29b51b30c64492b0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, τ) [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 186 );
    return prod_start
};
    return -1
}
function branch_2a08b58b0fa15fe9(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 149 );
    return prod_start
}
function branch_2a0e1f81f4ea638d(l, data, state, prod, prod_start){
    add_reduce( state, data, 7, 47 );
    return 32
}
function branch_2a24173dd20f4e43(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 210 );
    return 136
}
function branch_2a3f4aa750720a5f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ... _ $ id { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '59:166 function_declaration=>τasync τfunction τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_b6415c655c4258c6 );
    pushFN( data, $formal_parameters );
    return data.rules_ptr
}
function branch_2a7853405cc2ba76(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '70:193 arrow_parameters=>• cover_parenthesized_expression_and_arrow_parameter_list [ τ( ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $cover_parenthesized_expression_and_arrow_parameter_list );
    return data.rules_ptr
}
function branch_2a88901248e67254(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ${  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '141:449 template_literal=>• substitute_template [ τ` ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $substitute_template );
    return data.rules_ptr
}
function branch_2ac6998114f13dd1(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 171 );
    pushFN( data, $statement_goto );
    return 109
}
function branch_2ad8fdd04ed51fb0(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 198 );
    return prod_start
}
function branch_2ada74ff859678cc(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ;  ]';
    '32:87 iteration_statement=>τfor τ( τ; expression • τ; expression τ) statement [ τ; ]';
    '32:99 iteration_statement=>τfor τ( τ; expression • τ; τ) statement [ τ; ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==59 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- )  ]';
    '32:87 iteration_statement=>τfor τ( τ; expression τ; • expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '32:99 iteration_statement=>τfor τ( τ; expression τ; • τ) statement [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_8e45f000096e2702 );
        return branch_b8230e7f736e9fec( l, data, state, prod, prod_start )
    } else if( l.current_byte ==41 ){
        pushFN( data, branch_8e45f000096e2702 );
        return branch_cd5bf4ecf9c8925a( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_2afe194015f18aca(l, data, state, prod, prod_start){
    return 59
}
function branch_2b13925b2d798c85(l, data, state, prod, prod_start){
    return 22
}
function branch_2b189c1676b0d7e4(l, data, state, prod, prod_start){
    pushFN( data, $exponentiation_expression_goto );
    return 83
}
function branch_2b2c79909f5d4abc(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 4 );
    pushFN( data, $case_clauses_goto );
    return 42
}
function branch_2b45eec226647759(l, data, state, prod, prod_start){
    return 146
}
function branch_2b7a00bb5c3e83fd(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  .  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '88:265 call_expression=>• cover_call_expression_and_async_arrow_head [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $cover_call_expression_and_async_arrow_head );
    return data.rules_ptr
}
function branch_2b9e11a10dec8567(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 50 );
    return 33
}
function branch_2c1333feedd24507(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '59:158 function_declaration=>τasync τfunction τ* binding_identifier • τ( formal_parameters τ) τ{ function_body τ} [ τ( ]';
    '59:162 function_declaration=>τasync τfunction τ* binding_identifier • τ( τ) τ{ function_body τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ... _ $ id { [ )  ]';
    '59:158 function_declaration=>τasync τfunction τ* binding_identifier τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '59:162 function_declaration=>τasync τfunction τ* binding_identifier τ( • τ) τ{ function_body τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
        pushFN( data, branch_2afe194015f18aca );
        return branch_cb0d2c037ea3ebf0( l, data, state, prod, prod_start )
    } else if( l.current_byte ==41 ){
        pushFN( data, branch_2afe194015f18aca );
        return branch_d00ea468b9573e73( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_2c24bd495161b9e5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  [  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_8f24bf7171e31ffc );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_2c99e5f8819fe835(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 112 );
    pushFN( data, $coalesce_expression_head_goto );
    return 88
}
function branch_2c9d590b4f607882(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  -  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '191:622 scientific_token_group_923_0_=>• τe τ- int_token [ τe ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==45 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d5ae766ac3614f87 );
    pushFN( data, $int_token );
    return data.rules_ptr
};
    return -1
}
function branch_2cada92abd3b3d42(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 102
}
function branch_2cc04fe80faca872(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_271f33061baccb7f );
    pushFN( data, $binding_rest_element );
    return data.rules_ptr
}
function branch_2cfa8163faabe1e6(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  **  ]';
    '113:360 exponentiation_expression=>update_expression • τ** exponentiation_expression [ τ** ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 1, 2, 2 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  **  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '113:360 exponentiation_expression=>update_expression τ** • exponentiation_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_39bc15976d2ea624 );
    pushFN( data, $exponentiation_expression );
    return data.rules_ptr
}
}
function branch_2d0eb7542829bce1(l, data, state, prod, prod_start){
    pushFN( data, $optional_chain_goto );
    return 94
}
function branch_2d40fd030758e0bd(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 112
}
function branch_2df431db2fabf592(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 8 );
    return prod_start
}
function branch_2df7df99e7a4cdcd(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_77dc97f7ba7bd07f );
    pushFN( data, $block );
    return data.rules_ptr
};
    return -1
}
function branch_2e18050e60fbc07c(l, data, state, prod, prod_start){
    add_reduce( state, data, 7, 33 );
    return prod_start
}
function branch_2e42c6dbe4587081(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_bb22a73f491f9390 );
    pushFN( data, $template_spans );
    return data.rules_ptr
}
function branch_2e6dd80ccd410494(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id " " num 0X 0x 0O 0o 0B 0b  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '132:424 property_name=>• literal_property_name [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b ]';
    pushFN( data, branch_ea608060f125d775 );
    pushFN( data, $literal_property_name );
    return data.rules_ptr
}
function branch_2eb3189865ab19b0(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 100 );
    return 60
}
function branch_2ec6eeffc4827195(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '132:425 property_name=>• computed_property_name [ τ[ ]';
    pushFN( data, branch_ea608060f125d775 );
    pushFN( data, $computed_property_name );
    return data.rules_ptr
}
function branch_2ee3026b9cff7f7e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '91:269 arguments=>τ( argument_list • τ, τ) [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 158 );
    return prod_start
};
    return -1
}
function branch_2fc2afa111fe7899(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '3:7 asi=>• τ} [ τ}-ns ]';
    consume( l, data, state );
    return prod_start
}
function branch_2fcf636cb7c10e90(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
    {
    '"--LEAF--"';
    'Leaf [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
    pushFN( data, $statement_goto );
    return 112
}
}
function branch_30053563ee916a38(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 6, 194 );
    return prod_start
};
    return -1
}
function branch_30e19b49751327d5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:95 iteration_statement=>τfor τ( • lexical_declaration τ; expression τ) statement [ τlet, τconst ]';
    pushFN( data, branch_1c8c936c10ee17f4 );
    pushFN( data, $lexical_declaration );
    return data.rules_ptr
}
function branch_30eef6505311bd3b(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '74:205 class_expression=>τclass binding_identifier class_heritage • τ{ class_body τ} [ τ{ ]';
    '74:208 class_expression=>τclass binding_identifier class_heritage • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==123 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ; }  ]';
    '74:205 class_expression=>τclass binding_identifier class_heritage τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    '74:208 class_expression=>τclass binding_identifier class_heritage τ{ • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8000494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_77d3508deb16fc05 );
        return branch_5f30efa8f4cdbb3f( l, data, state, prod, prod_start )
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_77d3508deb16fc05 );
        return branch_bacfab5366c7c5f4( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_31494253d36ff260(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||=  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '97:303 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression [ τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||= ]';
    pushFN( data, branch_5780d1fedbbbfb6f );
    pushFN( data, $assignment_operator );
    return data.rules_ptr
}
function branch_31eeb0d769052e81(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 80, 2, 2 ) )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_4747c546eb5d01e0 );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function branch_31f8d9aa8cd41130(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 221 );
    pushFN( data, $short_circuit_expression_goto );
    return 83
}
function branch_326d11f865ae0642(l, data, state, prod, prod_start){
    return 65
}
function branch_328537b07cc6a1d1(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    pushFN( data, branch_ea608060f125d775 );
    pushFN( data, $string_literal );
    return prod_start
}
function branch_32c5ed17050d6d9d(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  from ; } nl END_OF_FILE  ]';
    '16:35 export_declaration=>τexport export_clause • from_clause asi [ τfrom ]';
    '16:41 export_declaration=>τexport export_clause • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 296, 4, 4 ) ){
    pushFN( data, branch_c1d1fe6803526df3 );
    return branch_a38c4c764fd2718d( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_c1d1fe6803526df3 );
    return branch_5df2d604975e79fc( l, data, state, prod, prod_start )
};
    return -1
}
function branch_331ab0e7a16a7d62(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '92:273 argument_list=>• argument_list_group_507_1_ [ τ... ]';
    pushFN( data, branch_46d539f60c6e4574 );
    pushFN( data, $argument_list_group_507_1_ );
    return data.rules_ptr
}
function branch_33201f23fc4b5bf0(l, data, state, prod, prod_start){
    add_reduce( state, data, 2 );
    return 75
}
function branch_333d0330f1056ffd(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ${  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '147:459 template_middle=>τ} no_substitute_template_list_846 • τ${ [ τ${ ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 225 );
    return prod_start
}
function branch_3357d80dcfa1ec28(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 72, 2, 2 ) )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_b2a4c699cf68919f );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function branch_3362d77953932103(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 168 );
    pushFN( data, $assignment_expression_goto );
    return 103
}
function branch_341bc98f64174b8d(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 178
}
function branch_347e4fcdbb70e35e(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 52 );
    return prod_start
}
function branch_34dfdcff7dee67d9(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '141:448 template_literal=>• no_substitute_template [ τ` ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $no_substitute_template );
    return data.rules_ptr
}
function branch_354cfeba9b7f4977(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  , _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '122:402 binding_element_list=>binding_element_list τ, • binding_elision_element [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_6c9c7403d1cf2743 );
    pushFN( data, $binding_elision_element );
    return data.rules_ptr
}
function branch_35aa6e49b479b4b2(l, data, state, prod, prod_start){
    pushFN( data, $exponentiation_expression_goto );
    return 113
}
function branch_35b86235e665224f(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 8, 89 );
    return prod_start
};
    return -1
}
function branch_35f0b7237adc590f(l, data, state, prod, prod_start){
    return 128
}
function branch_3656f17b1ca1ba60(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '164:517 octal_token=>τ0O octal_token_list_948 • octal_token_list_949 [ τ_ ]';
    pushFN( data, branch_d5ae766ac3614f87 );
    pushFN( data, $octal_token_list_949 );
    return data.rules_ptr
}
function branch_36989306ede825c5(l, data, state, prod, prod_start){
    pushFN( data, $argument_list_goto );
    return 92
}
function branch_36c3743f55efb781(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  --  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '115:372 update_expression=>left_hand_side_expression • τ-- [ τ-- ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 183 );
    return prod_start
}
function branch_36d7651d5f6ca9e7(l, data, state, prod, prod_start){
    pushFN( data, $left_hand_side_expression_goto );
    return 160
}
function branch_36e4ea25622c419e(l, data, state, prod, prod_start){
    pushFN( data, $exponentiation_expression_goto );
    return 146
}
function branch_377f22bf35e95d6b(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 78 );
    return 52
}
function branch_37d6f2fa015eee1d(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_bc256a8d93b0947d );
        pushFN( data, $expression );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_37d9726f974da545(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  case  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '41:121 case_block=>τ{ default_clause • case_clauses τ} [ τcase ]';
    pushFN( data, branch_59ac3e3f220c7999 );
    pushFN( data, $case_clauses );
    return data.rules_ptr
}
function branch_37fbaab3b0f24a88(l, data, state, prod, prod_start){
    pushFN( data, $logical_and_expression_goto );
    return 102
}
function branch_38591c3c243d9380(l, data, state, prod, prod_start){
    pushFN( data, $additive_expression_goto );
    return 111
}
function branch_386966eae2543779(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 248 );
    pushFN( data, $octal_token_list_949_goto );
    return 199
}
function branch_38a1c7d9b9b20011(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 168 );
    pushFN( data, $coalesce_expression_head_goto );
    return 104
}
function branch_38babd164bfdccfe(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_9a2d8d6df00bd316 );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function branch_38d44b59f5b47a79(l, data, state, prod, prod_start){
    add_reduce( state, data, 6, 49 );
    return prod_start
}
function branch_39083e9fa4fd9df7(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 149 );
    pushFN( data, $short_circuit_expression_goto );
    return 83
}
function branch_390a36ea8fbc2488(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '73:204 class_declaration=>τclass τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 120 );
    return prod_start
}
function branch_39bc15976d2ea624(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 177 );
    pushFN( data, $statement_goto );
    return 112
}
function branch_39dd01f7caa1e137(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '16:40 export_declaration=>τexport τdefault • assignment_expression asi [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τ/, τ`, τsuper, τimport ]';
    pushFN( data, branch_dc117bd4153e8435 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_39e95f80450dcd13(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  )  ]';
    '78:222 method_definition=>τasync property_name τ( unique_formal_parameters • τ) τ{ function_body τ} [ τ) ]';
    '78:230 method_definition=>τasync property_name τ( unique_formal_parameters • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==41 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '78:222 method_definition=>τasync property_name τ( unique_formal_parameters τ) • τ{ function_body τ} [ τ{ ]';
    '78:230 method_definition=>τasync property_name τ( unique_formal_parameters τ) • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==123 ){
        consume( l, data, state );
        'Number of end groups0 [    ]';
        'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
        '78:222 method_definition=>τasync property_name τ( unique_formal_parameters τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
        '78:230 method_definition=>τasync property_name τ( unique_formal_parameters τ) τ{ • τ} [ τ} ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        switch(sym_map_deb09f8b969b503a( l, data )){
            case 0: 
            {
                '"--LEAF--"';
                'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                '78:222 method_definition=>τasync property_name τ( unique_formal_parameters τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                pushFN( data, branch_b13bbb1a2770bb62 );
                pushFN( data, $function_body );
                return data.rules_ptr
            }
            case 1: 
            {
                '"--LEAF--"';
                'Leaf [  }  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '78:230 method_definition=>τasync property_name τ( unique_formal_parameters τ) τ{ • τ} [ τ} ]';
                consume( l, data, state );
                add_reduce( state, data, 7, 135 );
                return 78
            }
            default: 
            break
        }
    }
};
    return -1
}
function branch_39f4b383461584e4(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 155 );
    pushFN( data, $coalesce_expression_head_goto );
    return 88
}
function branch_3a78937bb58ef00e(l, data, state, prod, prod_start){
    return 68
}
function branch_3a81a45eec117b61(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 188, 2, 2 ) )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a377d6b20b6ee0f2 );
    pushFN( data, $bitwise_or_expression );
    return data.rules_ptr
};
    return -1
}
function branch_3a9cf313492e2097(l, data, state, prod, prod_start){
    return 155
}
function branch_3adf1b4606bd20ce(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 123 );
    return prod_start
}
function branch_3b293f03be9feee1(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $left_hand_side_expression_goto );
    return 88
}
function branch_3b9ac2a7a444d007(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 195 );
    return 120
};
    return -1
}
function branch_3be50e5ba84a7ce5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_9107dc6e4144ff52 );
    pushFN( data, $cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ );
    return data.rules_ptr
}
function branch_3bf1300f50f53db1(l, data, state, prod, prod_start){
    return 129
}
function branch_3c5c4ce58935c259(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '59:160 function_declaration=>• τasync τfunction binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    pushFN( data, branch_5825b052c229716c );
    pushFN( data, $function_declaration );
    return prod_start
}
function branch_3c839dbb7ae71e4c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id (  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '69:190 arrow_function=>• τasync arrow_parameters τ=> concise_body [ τasync ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $arrow_function );
    return prod_start
}
function branch_3d73bb9836dd8b1d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  $  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
    consume( l, data, state );
    return prod_start
}
function branch_3d7430464df9ddf2(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 9, 124 );
    return 78
};
    return -1
}
function branch_3dee9708442520d5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  --  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '115:374 update_expression=>• τ-- unary_expression [ τ-- ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_bcb8428f668fba42 );
    pushFN( data, $unary_expression );
    return data.rules_ptr
}
function branch_3e3d00100c9e9be5(l, data, state, prod, prod_start){
    pushFN( data, $exponentiation_expression_goto );
    return 93
}
function branch_3e5a96f7d45e7357(l, data, state, prod, prod_start){
    pushFN( data, $binary_token_list_942_goto );
    return 197
}
function branch_3e72ae2a9a0a18a2(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '78:220 method_definition=>τget property_name • τ( τ) τ{ function_body τ} [ τ( ]';
    '78:226 method_definition=>τget property_name • τ( τ) τ{ τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  )  ]';
    '78:220 method_definition=>τget property_name τ( • τ) τ{ function_body τ} [ τ) ]';
    '78:226 method_definition=>τget property_name τ( • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==41 ){
        consume( l, data, state );
        'Number of end groups0 [    ]';
        'All symbols [  {  ]';
        '78:220 method_definition=>τget property_name τ( τ) • τ{ function_body τ} [ τ{ ]';
        '78:226 method_definition=>τget property_name τ( τ) • τ{ τ} [ τ{ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( l.current_byte ==123 ){
            consume( l, data, state );
            'Number of end groups0 [    ]';
            'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
            '78:220 method_definition=>τget property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
            '78:226 method_definition=>τget property_name τ( τ) τ{ • τ} [ τ} ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            switch(sym_map_deb09f8b969b503a( l, data )){
                case 0: 
                {
                    '"--LEAF--"';
                    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                    '78:220 method_definition=>τget property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                    pushFN( data, branch_0ad7df8e276c4d5c );
                    pushFN( data, $function_body );
                    return data.rules_ptr
                }
                case 1: 
                {
                    '"--LEAF--"';
                    'Leaf [  }  ]';
                    '"⤋⤋⤋  assert ⤋⤋⤋"';
                    '78:226 method_definition=>τget property_name τ( τ) τ{ • τ} [ τ} ]';
                    consume( l, data, state );
                    add_reduce( state, data, 6, 131 );
                    return 78
                }
                default: 
                break
            }
        }
    }
};
    return -1
}
function branch_3ebb1e949e387b8a(l, data, state, prod, prod_start){
    pushFN( data, $template_spans_goto );
    return 145
}
function branch_3f182fbcc5dde582(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 93
}
function branch_3f51476e0eed9a09(l, data, state, prod, prod_start){
    pushFN( data, $statement_list_goto );
    return 21
}
function branch_3f753c469c280c34(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  )  ]';
    '78:223 method_definition=>τ* property_name τ( unique_formal_parameters • τ) τ{ function_body τ} [ τ) ]';
    '78:232 method_definition=>τ* property_name τ( unique_formal_parameters • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==41 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '78:223 method_definition=>τ* property_name τ( unique_formal_parameters τ) • τ{ function_body τ} [ τ{ ]';
    '78:232 method_definition=>τ* property_name τ( unique_formal_parameters τ) • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==123 ){
        consume( l, data, state );
        'Number of end groups0 [    ]';
        'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
        '78:223 method_definition=>τ* property_name τ( unique_formal_parameters τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
        '78:232 method_definition=>τ* property_name τ( unique_formal_parameters τ) τ{ • τ} [ τ} ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        switch(sym_map_deb09f8b969b503a( l, data )){
            case 0: 
            {
                '"--LEAF--"';
                'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                '78:223 method_definition=>τ* property_name τ( unique_formal_parameters τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                pushFN( data, branch_eb47d1d465c15b6c );
                pushFN( data, $function_body );
                return data.rules_ptr
            }
            case 1: 
            {
                '"--LEAF--"';
                'Leaf [  }  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '78:232 method_definition=>τ* property_name τ( unique_formal_parameters τ) τ{ • τ} [ τ} ]';
                consume( l, data, state );
                add_reduce( state, data, 7, 137 );
                return 78
            }
            default: 
            break
        }
    }
};
    return -1
}
function branch_3f8ee405d3a9919b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  {  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '71:195 concise_body=>• τ{ function_statement_list τ} [ τ{ ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_f92274a08f46f28c );
    pushFN( data, $function_statement_list );
    return data.rules_ptr
}
function branch_3fff83e5476573e2(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 164 );
    pushFN( data, $assignment_expression_goto );
    return 97
}
function branch_40174fe3efd15613(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ... _ $ id { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '59:161 function_declaration=>τasync τfunction τ* τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_fb8b62feac12b837 );
    pushFN( data, $formal_parameters );
    return data.rules_ptr
}
function branch_40208049dc8da7ca(l, data, state, prod, prod_start){
    return 50
}
function branch_402c1ab3e730479d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '69:190 arrow_function=>• τasync arrow_parameters τ=> concise_body [ τasync ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_9c9d510b645c7ab6 );
    pushFN( data, $arrow_parameters );
    return data.rules_ptr
}
function branch_403ade1b204d6df5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '76:215 class_body=>class_body • class_element [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic ]';
    pushFN( data, branch_922f9c543d3d713e );
    pushFN( data, $class_element );
    return data.rules_ptr
}
function branch_404abfa56085bc54(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_cf6f8487ea17d7f7 );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_406dacee7331eeb9(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $optional_expression_goto );
    return 83
};
    return -1
}
function branch_4113f336b21c05ca(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 14 );
    return 12
}
function branch_41b1a7d8fb67e008(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '120:392 array_binding_pattern=>τ[ binding_element_list τ, elision • binding_rest_element τ] [ τ... ]';
    pushFN( data, branch_30053563ee916a38 );
    pushFN( data, $binding_rest_element );
    return data.rules_ptr
}
function branch_41f348043a729264(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  import export { yield async new ( super this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '5:12 module_body=>module_body • module_item [ τimport, τexport, τ{, τyield, τasync, τnew, τ(, τsuper, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_87d87179af2e53ee );
    pushFN( data, $module_item );
    return data.rules_ptr
}
function branch_4272b37a2f6405c1(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '125:408 binding_element=>• binding_pattern initializer [ τ{, τ[ ]';
    pushFN( data, branch_7e491f06d3aa02e4 );
    pushFN( data, $binding_pattern );
    return data.rules_ptr
}
function branch_42fa1e2b71de3087(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '137:434 array_literal=>τ[ element_list • τ, elision τ] [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_e6590cc2db9ebd5c );
    pushFN( data, $elision );
    return data.rules_ptr
}
function branch_433e5b7a152965f2(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  num 0X 0x 0O 0o 0B 0b  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '153:481 literal=>• numeric_literal [ θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $numeric_literal );
    return data.rules_ptr
}
function branch_4345ceb6a995bce3(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 8, 93 );
    return prod_start
};
    return -1
}
function branch_43a89ba3acf8e8f2(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  , yield async new ... ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '137:433 array_literal=>τ[ • element_list τ] [ τ,, τyield, τasync, τnew, τ..., τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_be3bb9f9fe5f65b7 );
    pushFN( data, $element_list );
    return data.rules_ptr
}
function branch_43d8ae4c49a98333(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_547531ad284679b1 );
    pushFN( data, $initializer );
    return data.rules_ptr
}
function branch_43fb080787afcb31(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  , )  ]';
    '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, τ) [ τ, ]';
    '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ, ]';
    '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ, ]';
    '117:382 parenthesized=>τ( expression • τ) [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  ) ...  ]';
    '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, τ) [ τ, ]';
    '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ, ]';
    '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==41 ){
        pushFN( data, branch_b874a508ae3c56e3 );
        return branch_29b51b30c64492b0( l, data, state, prod, prod_start )
    } else {
        'Number of end groups0 [    ]';
        'All symbols [  _ $ id { [  ]';
        '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ, ]';
        '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ, ]';
        skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
        if( pk.current_byte ==95||pk.current_byte  == 36 || pk.isUniID( data ) ){
            pushFN( data, branch_b874a508ae3c56e3 );
            return branch_3be50e5ba84a7ce5( l, data, state, prod, prod_start )
        } else {
            pushFN( data, branch_b874a508ae3c56e3 );
            return branch_451b8f8fe4234778( l, data, state, prod, prod_start )
        }
    }
} else if( l.current_byte ==41 ){
    pushFN( data, branch_b874a508ae3c56e3 );
    return branch_2602dec1a0ddf093( l, data, state, prod, prod_start )
};
    return -1
}
function branch_443881d830e8161d(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==44 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_8cf6e39d1438e8a7 );
    pushFN( data, $binding_rest_element );
    return data.rules_ptr
};
    return -1
}
function branch_45065f96ec9b943e(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    pushFN( data, $module_body_goto );
    return 5
}
function branch_45148ca4d012cf3c(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 5, 191 );
    return prod_start
};
    return -1
}
function branch_451b8f8fe4234778(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { [  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_9107dc6e4144ff52 );
    pushFN( data, $cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ );
    return data.rules_ptr
}
function branch_452ee10c802a9356(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id " " num 0X 0x 0O 0o 0B 0b [  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '121:400 binding_property_list=>binding_property_list • τ, binding_property [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_2ad8fdd04ed51fb0 );
    pushFN( data, $binding_property );
    return data.rules_ptr
}
function branch_452f44b16e34215c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '118:384 binding_pattern=>• array_binding_pattern [ τ[ ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $array_binding_pattern );
    return data.rules_ptr
}
function branch_453b9740ffb4cd55(l, data, state, prod, prod_start){
    pushFN( data, $class_body_goto );
    return 76
}
function branch_453f5411abf145eb(l, data, state, prod, prod_start){
    return 175
}
function branch_4543f8f32cea3cd7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id async get set * " " num 0X 0x 0O 0o 0B 0b [ ...  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '130:418 property_definition_list=>property_definition_list • τ, property_definition [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d8a8aa453ec53718 );
    pushFN( data, $property_definition );
    return data.rules_ptr
}
function branch_45d066fe5afcbb4f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  false  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '166:523 boolean_literal=>• τfalse [ τfalse ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 241 );
    return prod_start
}
function branch_45fc3b2eeec973e0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  " " num 0X 0x 0O 0o 0B 0b [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '124:406 binding_property=>• property_name τ: binding_element [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    pushFN( data, branch_8e95aa90292f162b );
    pushFN( data, $property_name );
    return data.rules_ptr
}
function branch_46079e9eaae06332(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ;  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '74:206 class_expression=>τclass class_heritage τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    pushFN( data, branch_b9093793c07c84f3 );
    pushFN( data, $class_body );
    return data.rules_ptr
}
function branch_460c2b6fdcd1d700(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '41:123 case_block=>τ{ case_clauses default_clause • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 4, 63 );
    return prod_start
}
function branch_4614162348f77822(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:101 iteration_statement=>τfor τ( • expression τ; expression τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_8e2059bd5e47c1ae );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_4625454c6de33ba5(l, data, state, prod, prod_start){
    return 3
}
function branch_463a77c28e2f6f03(l, data, state, prod, prod_start){
    add_reduce( state, data, 4, 108 );
    return prod_start
}
function branch_465aad50ecdf4b34(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '2:5 comments=>• τ// θnl [ τ// ]';
    consume( l, data, state );
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( ( ( ( l.isNL(  ) )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 2 );
    return prod_start
};
    return -1
}
function branch_46738b129c26c9ad(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_4d533db2ec629fe9 );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_46b602a537fe6e41(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_58e4d2ef858504fc );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function branch_46d20adffd98e352(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  "  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==34 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 2, 235 );
    return prod_start
};
    return -1
}
function branch_46d539f60c6e4574(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    return prod_start
}
function branch_46f195f784e1b9e5(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_053123d6047af1fb );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_4747c546eb5d01e0(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_96719c2b5029997e );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_47dc069469c2cce0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ;  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '74:209 class_expression=>τclass τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    pushFN( data, branch_23eaed5600ea0092 );
    pushFN( data, $class_body );
    return data.rules_ptr
}
function branch_47e3b3b1decd05f2(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:102 iteration_statement=>τfor τ( • left_hand_side_expression τof expression τ) statement [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_31eeb0d769052e81 );
    pushFN( data, $left_hand_side_expression );
    return data.rules_ptr
}
function branch_485b011eccb500e8(l, data, state, prod, prod_start){
    pushFN( data, $statement_goto );
    return 93
}
function branch_48687fdbcb72052e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '129:416 object_literal=>τ{ property_definition_list • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 206 );
    return prod_start
}
function branch_48ad57ebf23821cf(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    add_reduce( state, data, 1, 236 );
    add_reduce( state, data, 1, 207 );
    pushFN( data, $property_definition_goto );
    return 132
}
function branch_48dd6e73122a544c(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 100 );
    pushFN( data, $left_hand_side_expression_goto );
    return 83
}
function branch_48fe1ee40e22d53b(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 25 );
    return 19
}
function branch_4920d66bf0ccfcf7(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 160 );
    pushFN( data, $short_circuit_expression_goto );
    return 93
}
function branch_49506cbdbee1de1f(l, data, state, prod, prod_start){
    pushFN( data, $optional_expression_goto );
    return 93
}
function branch_49524dcd704559d7(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 5, 60 );
    return prod_start
};
    return -1
}
function branch_49ad9d404a04d2f8(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 1 );
    return 0
}
function branch_49c741966e7e61ee(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 149 );
    pushFN( data, $assignment_expression_goto );
    return 83
}
function branch_49ff39882aa25615(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    add_reduce( state, data, 1, 236 );
    pushFN( data, $optional_expression_goto );
    return 83
}
function branch_4a1ba3d2167f408a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  -  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '191:621 scientific_token_group_923_0_=>• τE τ- int_token [ τE ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==45 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d5ae766ac3614f87 );
    pushFN( data, $int_token );
    return data.rules_ptr
};
    return -1
}
function branch_4a1febbf64e84dc7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  =  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '126:409 single_name_binding=>binding_identifier • initializer [ τ= ]';
    pushFN( data, branch_29625183d7ef12e2 );
    pushFN( data, $initializer );
    return data.rules_ptr
}
function branch_4a3dd91347c1bdab(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 26 );
    return prod_start
}
function branch_4a97cefe93646f66(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 160 );
    pushFN( data, $statement_goto );
    return 93
}
function branch_4abf4b237f12917b(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 16 );
    return prod_start
}
function branch_4b1d4c65cfd64ecc(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '133:426 literal_property_name=>• identifier_name [ τ_, τ$, θid ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $identifier_name );
    return data.rules_ptr
}
function branch_4b23a64b954a4cc5(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 242 );
    return 167
}
function branch_4b700977725f12de(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  |  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '105:331 bitwise_or_expression=>bitwise_or_expression • τ| bitwise_xor_expression [ τ| ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_72ec2c6b149c2afd );
    pushFN( data, $bitwise_xor_expression );
    return data.rules_ptr
}
function branch_4be8250bab24976c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  id  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '180:602 comments_list_6=>• θid [ θid ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 3 );
    return prod_start
}
function branch_4c1f03655a1ccdf2(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 146
}
function branch_4c6db5bc7899ad19(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 145 );
    pushFN( data, $left_hand_side_expression_goto );
    return 81
}
function branch_4c7992638f18d663(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '28:76 block=>τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 28 );
    return prod_start
}
function branch_4c7a85bee4b4231e(l, data, state, prod, prod_start){
    return 118
}
function branch_4c7fb96b085b92df(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  null  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '153:479 literal=>• null_literal [ τnull ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $null_literal );
    return data.rules_ptr
}
function branch_4c81b057025dc3ed(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '3:8 asi=>• θnl [ θnl ]';
    consume( l, data, state );
    return prod_start
}
function branch_4d057fede7ad79be(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 160
}
function branch_4d0ed4e9ef1d6340(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '142:450 no_substitute_template=>τ` no_substitute_template_list_846 • τ` [ τ` ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 219 );
    return prod_start
}
function branch_4d1e8ca3dd3169d3(l, data, state, prod, prod_start){
    return 27
}
function branch_4d533db2ec629fe9(l, data, state, prod, prod_start){
    add_reduce( state, data, 4, 6 );
    return prod_start
}
function branch_4d672ab77607046d(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 30 );
    return prod_start
}
function branch_4d72b3009d68f33d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ${  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '144:454 template_spans=>• template_middle_list template_tail [ τ} ]';
    pushFN( data, branch_09a11a79b3a5aa7c );
    pushFN( data, $template_middle_list );
    return data.rules_ptr
}
function branch_4e0c84d2b1071977(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( super import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '82:245 new_expression=>• member_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $member_expression );
    return data.rules_ptr
}
function branch_4e32617fbdde1337(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 5, 213 );
    return 137
};
    return -1
}
function branch_4e694aaaae6aadd8(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 155 );
    pushFN( data, $short_circuit_expression_goto );
    return 88
}
function branch_4e6963b8408028b5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '182:610 export_clause_list_82=>export_clause_list_82 • τ, export_specifier [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d8a8aa453ec53718 );
    pushFN( data, $export_specifier );
    return data.rules_ptr
}
function branch_4ec2171d02f330f3(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==58 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_c422d15b8a9f25d7 );
    pushFN( data, $labeled_item );
    return data.rules_ptr
};
    return -1
}
function branch_4ee6c235990bc0b9(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $left_hand_side_expression_goto );
    return 88
};
    return -1
}
function branch_4eff7f495f5f71a7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  case  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '41:122 case_block=>τ{ case_clauses • case_clauses τ} [ τcase ]';
    pushFN( data, branch_8a7a1ff04edb119d );
    pushFN( data, $case_clauses );
    return data.rules_ptr
}
function branch_4f55634a5bc030a5(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_0ae9c672f1310f8c );
    pushFN( data, $case_block );
    return data.rules_ptr
};
    return -1
}
function branch_4f868414c88760a2(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '11:25 named_imports=>τ{ named_imports_list_41 • τ, τ} [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 12 );
    return prod_start
};
    return -1
}
function branch_4fa82519908b01dc(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  const  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '56:152 let_or_const=>• τconst [ τconst ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 83 );
    return prod_start
}
function branch_4fb300bf654ac57c(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 10 );
    return 9
}
function branch_4fc8b4ac3bb9087f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ]  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '120:391 array_binding_pattern=>τ[ binding_element_list • τ] [ τ] ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 193 );
    return prod_start
}
function branch_4ff8c3e05be8ff85(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 195 );
    return prod_start
};
    return -1
}
function branch_5026a315ff21acd7(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '59:163 function_declaration=>τfunction binding_identifier • τ( formal_parameters τ) τ{ function_body τ} [ τ( ]';
    '59:170 function_declaration=>τfunction binding_identifier • τ( τ) τ{ function_body τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ... _ $ id { [ )  ]';
    '59:163 function_declaration=>τfunction binding_identifier τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '59:170 function_declaration=>τfunction binding_identifier τ( • τ) τ{ function_body τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
        pushFN( data, branch_2afe194015f18aca );
        return branch_b23b2b3ff4428f03( l, data, state, prod, prod_start )
    } else if( l.current_byte ==41 ){
        pushFN( data, branch_2afe194015f18aca );
        return branch_8e381dadd58a28b5( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_5039cff9313d4b05(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||=  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '97:303 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression [ τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||= ]';
    pushFN( data, branch_70f2f1f5c1617eb9 );
    pushFN( data, $assignment_operator );
    return data.rules_ptr
}
function branch_5045bde9fb59e239(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  num  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_50540fa37be3ecc2(l, data, state, prod, prod_start){
    return 71
}
function branch_505aa7490b3126cd(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ]  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '120:396 array_binding_pattern=>τ[ binding_element_list τ, elision • τ] [ τ] ]';
    consume( l, data, state );
    add_reduce( state, data, 5, 196 );
    return prod_start
}
function branch_50f049c0672687bb(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  :  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '131:423 property_definition=>property_name • τ: assignment_expression [ τ: ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6c592b67ed2c220d );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_5138162b65a93da1(l, data, state, prod, prod_start){
    pushFN( data, $no_substitute_template_list_846_goto );
    return 189
}
function branch_514a3f1f23c720f9(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '195:655 hex_token_list_935=>hex_token_list_935 • hex_token_list_935_group_1158_0_ [ τ_ ]';
    pushFN( data, branch_cfed1dcd23cf06ff );
    pushFN( data, $hex_token_list_935_group_1158_0_ );
    return data.rules_ptr
}
function branch_519f210764090b39(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '35:111 continue_statement=>τcontinue • label_identifier asi [ τ_, τ$, θid ]';
    pushFN( data, branch_bbf7b13d69f14355 );
    pushFN( data, $label_identifier );
    return data.rules_ptr
}
function branch_51d704e96e814462(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '73:203 class_declaration=>τclass binding_identifier τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 4, 119 );
    return prod_start
}
function branch_51eb8bf50fd34763(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
    {
    '"--LEAF--"';
    'Leaf [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
    pushFN( data, $coalesce_expression_head_goto );
    return 112
}
}
function branch_527b5705a13bdd39(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '120:395 array_binding_pattern=>τ[ binding_element_list • τ, binding_rest_element τ] [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_f344909ab1cf45ab );
    pushFN( data, $binding_rest_element );
    return data.rules_ptr
}
function branch_528464bc640e6a43(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '54:149 variable_declaration=>• binding_pattern initializer [ τ{, τ[ ]';
    pushFN( data, branch_43d8ae4c49a98333 );
    pushFN( data, $binding_pattern );
    return data.rules_ptr
}
function branch_5292e5772cf9c5bd(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '17:45 export_clause=>τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 24 );
    return prod_start
}
function branch_538be061ff85122d(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 236 );
    add_reduce( state, data, 1, 207 );
    pushFN( data, $property_definition_goto );
    return 132
}
function branch_53f0ea822d5272dd(l, data, state, prod, prod_start){
    pushFN( data, $statement_goto );
    return 178
}
function branch_544245bd621469f7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '138:440 element_list=>element_list τ, elision • spread_element [ τ... ]';
    pushFN( data, branch_1e7f93a5799c8e48 );
    pushFN( data, $spread_element );
    return data.rules_ptr
}
function branch_5464961d69dccbba(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id { [  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '63:181 formal_parameter_list=>formal_parameter_list • τ, formal_parameter [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d8a8aa453ec53718 );
    pushFN( data, $formal_parameter );
    return data.rules_ptr
}
function branch_547531ad284679b1(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 80 );
    return prod_start
}
function branch_55135a02211b8bfc(l, data, state, prod, prod_start){
    pushFN( data, $relational_expression_goto );
    return 109
}
function branch_5521448249364729(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '59:172 function_declaration=>τasync τfunction τ( • τ) τ{ function_body τ} [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_01699d202b475eef );
    pushFN( data, $function_body );
    return data.rules_ptr
};
    return -1
}
function branch_5575e8896e0a7325(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 109 );
    return prod_start
}
function branch_55bf6fb2b8601d61(l, data, state, prod, prod_start){
    add_reduce( state, data, 7, 46 );
    return prod_start
}
function branch_55dcbd2b7e7ebf29(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 163 );
    return 96
}
function branch_561f4369ac978c0b(l, data, state, prod, prod_start){
    return 62
}
function branch_564cb1465ddb49da(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_93872aa9bc16e66f );
        pushFN( data, $function_body );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_566319b55b514cd8(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 20 );
    return 16
}
function branch_567940d2cb3e688c(l, data, state, prod, prod_start){
    return 85
}
function branch_56e84bec16951e78(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  do while for  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '26:72 breakable_statement=>• iteration_statement [ τdo, τwhile, τfor ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $iteration_statement );
    return data.rules_ptr
}
function branch_5719a0652ea5b21b(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 100 );
    pushFN( data, $optional_expression_goto );
    return 83
}
function branch_5778f62915925d63(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '59:165 function_declaration=>τfunction τ* binding_identifier τ( • τ) τ{ function_body τ} [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_83d020240204a848 );
    pushFN( data, $function_body );
    return data.rules_ptr
};
    return -1
}
function branch_5780d1fedbbbfb6f(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_28ad0cb88bc67c2f );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_5825b052c229716c(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 100 );
    return prod_start
}
function branch_5864560064181f8f(l, data, state, prod, prod_start){
    return 67
}
function branch_587ee71e84987476(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  , }  ]';
    '129:415 object_literal=>τ{ property_definition_list • τ, τ} [ τ, ]';
    '129:416 object_literal=>τ{ property_definition_list • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    pushFN( data, branch_3bf1300f50f53db1 );
    return branch_e8143a123edd7513( l, data, state, prod, prod_start )
} else if( l.current_byte ==125 ){
    pushFN( data, branch_3bf1300f50f53db1 );
    return branch_48687fdbcb72052e( l, data, state, prod, prod_start )
};
    return -1
}
function branch_58b5e1501dcd84e8(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 88
}
function branch_58d3d5fc91c69932(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ... ]';
    pushFN( data, branch_626c31a9841211f1 );
    pushFN( data, $cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ );
    return data.rules_ptr
}
function branch_58e4d2ef858504fc(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_151ce5f54265ba2b );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function branch_5901c44d41165102(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  num 0X 0x 0O 0o 0B 0b  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '133:428 literal_property_name=>• numeric_literal [ θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $numeric_literal );
    return data.rules_ptr
}
function branch_594abed47efdcf4e(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 148 );
    return prod_start
}
function branch_59ac3e3f220c7999(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 61 );
    return prod_start
};
    return -1
}
function branch_59c29cae59159bfb(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 145 );
    pushFN( data, $coalesce_expression_head_goto );
    return 81
}
function branch_59d29be59acdfd05(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 161
}
function branch_5a0dae5a7e0f9412(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 107 );
    return prod_start
}
function branch_5a2dc7112f69e41d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '164:518 octal_token=>τ0o octal_token_list_948 • octal_token_list_949 [ τ_ ]';
    pushFN( data, branch_d5ae766ac3614f87 );
    pushFN( data, $octal_token_list_949 );
    return data.rules_ptr
}
function branch_5a7cfb2764612167(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  case }  ]';
    '41:121 case_block=>τ{ default_clause • case_clauses τ} [ τcase ]';
    '41:125 case_block=>τ{ default_clause • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 325, 4, 4 ) ){
    pushFN( data, branch_b2deab1df605866e );
    return branch_37d9726f974da545( l, data, state, prod, prod_start )
} else if( l.current_byte ==125 ){
    pushFN( data, branch_b2deab1df605866e );
    return branch_0cb70511329ff225( l, data, state, prod, prod_start )
};
    return -1
}
function branch_5b0c24a93253c6d8(l, data, state, prod, prod_start){
    pushFN( data, $default_productions__js_id_symbols_goto );
    return 178
}
function branch_5b19b5d1ed186a70(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '94:280 optional_chain=>τ?. • arguments [ τ( ]';
    pushFN( data, branch_6e2f4522ca6129c9 );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_5b6d9fd5ab48e217(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 56 );
    return prod_start
}
function branch_5b7236d9ff19727e(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  extends {  ]';
    '73:197 class_declaration=>τclass binding_identifier • class_heritage τ{ class_body τ} [ τextends ]';
    '73:200 class_declaration=>τclass binding_identifier • class_heritage τ{ τ} [ τextends ]';
    '73:199 class_declaration=>τclass binding_identifier • τ{ class_body τ} [ τ{ ]';
    '73:203 class_declaration=>τclass binding_identifier • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 95, 7, 7 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  75  ]';
    '73:197 class_declaration=>τclass binding_identifier • class_heritage τ{ class_body τ} [ τextends ]';
    '73:200 class_declaration=>τclass binding_identifier • class_heritage τ{ τ} [ τextends ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_da5ad61df92205e2 );
    pushFN( data, $class_heritage );
    return data.rules_ptr
} else if( l.current_byte ==123 ){
    consume( l, data, state );
    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '73:199 class_declaration=>τclass binding_identifier • τ{ class_body τ} [ τ{ ]';
    '73:203 class_declaration=>τclass binding_identifier • τ{ τ} [ τ{ ]';
    'Number of end groups0 [    ]';
    'All symbols [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ; }  ]';
    '73:199 class_declaration=>τclass binding_identifier τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    '73:203 class_declaration=>τclass binding_identifier τ{ • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8000494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_26bc95062ea8884a );
        return branch_dea6c0aed6ca6684( l, data, state, prod, prod_start )
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_26bc95062ea8884a );
        return branch_51d704e96e814462( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_5bb0a42616156d0a(l, data, state, prod, prod_start){
    return 133
}
function branch_5bb890753356de8d(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 236 );
    return prod_start
}
function branch_5bd979e8c1f7abd7(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_791313a90ed7285c );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_5be156d5b19256ce(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $left_hand_side_expression_goto );
    return 83
};
    return -1
}
function branch_5c2c520b0eb29753(l, data, state, prod, prod_start){
    pushFN( data, $exponentiation_expression_goto );
    return 88
}
function branch_5c558e917b5b9e9f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    pushFN( data, branch_5825b052c229716c );
    pushFN( data, $function_declaration );
    return prod_start
}
function branch_5ccc35967f0fcaf0(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 221 );
    pushFN( data, $exponentiation_expression_goto );
    return 83
}
function branch_5d5e91e967da61e2(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 165 );
    pushFN( data, $statement_goto );
    return 80
}
function branch_5dcc914a4dc01157(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '181:608 named_imports_list_41=>named_imports_list_41 • τ, import_specifier [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d8a8aa453ec53718 );
    pushFN( data, $import_specifier );
    return data.rules_ptr
}
function branch_5df2d604975e79fc(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ; } nl END_OF_FILE  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '16:41 export_declaration=>τexport export_clause • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    pushFN( data, branch_954f826d147f6929 );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_5e05faa39fa354cd(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ] ,  ]';
    '120:391 array_binding_pattern=>τ[ binding_element_list • τ] [ τ] ]';
    '120:392 array_binding_pattern=>τ[ binding_element_list • τ, elision binding_rest_element τ] [ τ, ]';
    '120:395 array_binding_pattern=>τ[ binding_element_list • τ, binding_rest_element τ] [ τ, ]';
    '120:396 array_binding_pattern=>τ[ binding_element_list • τ, elision τ] [ τ, ]';
    '120:398 array_binding_pattern=>τ[ binding_element_list • τ, τ] [ τ, ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==93 ){
    pushFN( data, branch_7227848e659607a6 );
    return branch_4fc8b4ac3bb9087f( l, data, state, prod, prod_start )
} else if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  , ... ]  ]';
    '120:392 array_binding_pattern=>τ[ binding_element_list • τ, elision binding_rest_element τ] [ τ, ]';
    '120:396 array_binding_pattern=>τ[ binding_element_list • τ, elision τ] [ τ, ]';
    '120:395 array_binding_pattern=>τ[ binding_element_list • τ, binding_rest_element τ] [ τ, ]';
    '120:398 array_binding_pattern=>τ[ binding_element_list • τ, τ] [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==44 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  ,  ]';
        '120:392 array_binding_pattern=>τ[ binding_element_list • τ, elision binding_rest_element τ] [ τ, ]';
        '120:396 array_binding_pattern=>τ[ binding_element_list • τ, elision τ] [ τ, ]';
        'Number of end groups0 [    ]';
        'All symbols [  139  ]';
        '120:392 array_binding_pattern=>τ[ binding_element_list τ, • elision binding_rest_element τ] [ τ, ]';
        '120:396 array_binding_pattern=>τ[ binding_element_list τ, • elision τ] [ τ, ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_5f114a1ec6d0e10e );
        pushFN( data, $elision );
        return data.rules_ptr
    } else if( cmpr_set( pk, data, 16, 3, 3 ) ){
        pushFN( data, branch_7227848e659607a6 );
        return branch_527b5705a13bdd39( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_7227848e659607a6 );
        return branch_f3635dfa7178f6ca( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_5e151e2c1b848123(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
    {
    '"--LEAF--"';
    'Leaf [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
    pushFN( data, $assignment_expression_goto );
    return 112
}
}
function branch_5ef2c73203d4e7f5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:84 iteration_statement=>τfor τ( • lexical_declaration expression τ; expression τ) statement [ τlet, τconst ]';
    pushFN( data, branch_bdbaf04d0e5605e6 );
    pushFN( data, $lexical_declaration );
    return data.rules_ptr
}
function branch_5f114a1ec6d0e10e(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ... ]  ]';
    '120:392 array_binding_pattern=>τ[ binding_element_list τ, elision • binding_rest_element τ] [ τ... ]';
    '120:396 array_binding_pattern=>τ[ binding_element_list τ, elision • τ] [ τ] ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 ) ){
    pushFN( data, branch_7227848e659607a6 );
    return branch_41b1a7d8fb67e008( l, data, state, prod, prod_start )
} else if( l.current_byte ==93 ){
    pushFN( data, branch_7227848e659607a6 );
    return branch_505aa7490b3126cd( l, data, state, prod, prod_start )
};
    return -1
}
function branch_5f30efa8f4cdbb3f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ;  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '74:205 class_expression=>τclass binding_identifier class_heritage τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    pushFN( data, branch_8a2307b8b683ecc3 );
    pushFN( data, $class_body );
    return data.rules_ptr
}
function branch_5f3f90e64f3867cb(l, data, state, prod, prod_start){
    add_reduce( state, data, 8, 36 );
    return 32
}
function branch_5f64c9bdf5897364(l, data, state, prod, prod_start){
    pushFN( data, $new_expression_goto );
    return 82
}
function branch_5f93f4a540bf672c(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==39 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 234 );
    return prod_start
};
    return -1
}
function branch_5fa6088c02a79c21(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '125:407 binding_element=>• single_name_binding [ τ_, τ$, θid ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $single_name_binding );
    return data.rules_ptr
}
function branch_5fb14268543e295b(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 88
}
function branch_604e109f8f09c42c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '74:211 class_expression=>τclass binding_identifier τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 4, 119 );
    return prod_start
}
function branch_60754a6e74fc0bfc(l, data, state, prod, prod_start){
    return 4
}
function branch_608777cc1795c0b1(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '115:373 update_expression=>• τ++ unary_expression [ τ++ ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_bcb8428f668fba42 );
    pushFN( data, $unary_expression );
    return data.rules_ptr
}
function branch_608cc47398532a71(l, data, state, prod, prod_start){
    add_reduce( state, data, 4, 21 );
    return prod_start
}
function branch_6096241b0e1355d4(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 175 );
    return prod_start
}
function branch_60d9dbdf605f414c(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 170 );
    pushFN( data, $statement_goto );
    return 108
}
function branch_6161bf8e8b13b8bc(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $short_circuit_expression_goto );
    return 88
};
    return -1
}
function branch_618e04daf76f50ae(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
    {
    '"--LEAF--"';
    'Leaf [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
    pushFN( data, $short_circuit_expression_goto );
    return 112
}
}
function branch_618f20377efaa3fe(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $short_circuit_expression_goto );
    return 83
}
function branch_619ab2c39ce086f5(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    add_reduce( state, data, 1, 236 );
    pushFN( data, $short_circuit_expression_goto );
    return 83
}
function branch_621c08e4cccb7364(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 177 );
    pushFN( data, $exponentiation_expression_goto );
    return 113
}
function branch_6261372b01a04e27(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 176 );
    return prod_start
}
function branch_626c31a9841211f1(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 186 );
    return prod_start
};
    return -1
}
function branch_626e6371e5dca349(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 200 );
    pushFN( data, $template_spans_goto );
    return 145
}
function branch_627c730bd2637bb1(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 154 );
    pushFN( data, $assignment_expression_goto );
    return 88
}
function branch_6299185c66def7f5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    consume( l, data, state );
    return prod_start
}
function branch_62b08ab2dd8e10ec(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 221 );
    pushFN( data, $template_literal_goto );
    return 141
}
function branch_62b348450a3135fb(l, data, state, prod, prod_start){
    return 95
}
function branch_631bcebe99ec947a(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 160 );
    return prod_start
}
function branch_6328acd549526aff(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 7, 134 );
    return 78
};
    return -1
}
function branch_632c365f029dd246(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ... _ $ id { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '59:164 function_declaration=>τfunction τ* τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_116e24b421da2712 );
    pushFN( data, $formal_parameters );
    return data.rules_ptr
}
function branch_6333ab7b6846cbf7(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_95304ad325b9fa8d );
        pushFN( data, $statement );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_6336a9e32929928e(l, data, state, prod, prod_start){
    pushFN( data, $exponentiation_expression_goto );
    return 178
}
function branch_63656d1b5114f76f(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 10, 84 );
    return prod_start
};
    return -1
}
function branch_63699388bb9a432b(l, data, state, prod, prod_start){
    return 24
}
function branch_63dd927e9b3402f8(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 173 );
    pushFN( data, $statement_goto );
    return 109
}
function branch_646b078462d89457(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $string_literal );
    return prod_start
}
function branch_647c16f644052fc1(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '78:219 method_definition=>τasync τ* property_name • τ( unique_formal_parameters τ) τ{ function_body τ} [ τ( ]';
    '78:224 method_definition=>τasync τ* property_name • τ( τ) τ{ function_body τ} [ τ( ]';
    '78:225 method_definition=>τasync τ* property_name • τ( unique_formal_parameters τ) τ{ τ} [ τ( ]';
    '78:233 method_definition=>τasync τ* property_name • τ( τ) τ{ τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ... _ $ id { [ )  ]';
    '78:219 method_definition=>τasync τ* property_name τ( • unique_formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '78:225 method_definition=>τasync τ* property_name τ( • unique_formal_parameters τ) τ{ τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '78:224 method_definition=>τasync τ* property_name τ( • τ) τ{ function_body τ} [ τ) ]';
    '78:233 method_definition=>τasync τ* property_name τ( • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  61  ]';
        '78:219 method_definition=>τasync τ* property_name τ( • unique_formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
        '78:225 method_definition=>τasync τ* property_name τ( • unique_formal_parameters τ) τ{ τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_f278419e8e000e01 );
        pushFN( data, $unique_formal_parameters );
        return data.rules_ptr
    } else if( l.current_byte ==41 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  )  ]';
        '78:224 method_definition=>τasync τ* property_name τ( • τ) τ{ function_body τ} [ τ) ]';
        '78:233 method_definition=>τasync τ* property_name τ( • τ) τ{ τ} [ τ) ]';
        'Number of end groups0 [    ]';
        'All symbols [  {  ]';
        '78:224 method_definition=>τasync τ* property_name τ( τ) • τ{ function_body τ} [ τ{ ]';
        '78:233 method_definition=>τasync τ* property_name τ( τ) • τ{ τ} [ τ{ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( l.current_byte ==123 ){
            consume( l, data, state );
            'Number of end groups0 [    ]';
            'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
            '78:224 method_definition=>τasync τ* property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
            '78:233 method_definition=>τasync τ* property_name τ( τ) τ{ • τ} [ τ} ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            switch(sym_map_deb09f8b969b503a( l, data )){
                case 0: 
                {
                    '"--LEAF--"';
                    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                    '78:224 method_definition=>τasync τ* property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                    pushFN( data, branch_ae5d8cda35c1beac );
                    pushFN( data, $function_body );
                    return data.rules_ptr
                }
                case 1: 
                {
                    '"--LEAF--"';
                    'Leaf [  }  ]';
                    '"⤋⤋⤋  assert ⤋⤋⤋"';
                    '78:233 method_definition=>τasync τ* property_name τ( τ) τ{ • τ} [ τ} ]';
                    consume( l, data, state );
                    add_reduce( state, data, 7, 138 );
                    return 78
                }
                default: 
                break
            }
        }
    }
};
    return -1
}
function branch_647ef469d3389a1e(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 248 );
    pushFN( data, $int_token_list_931_goto );
    return 193
}
function branch_64cad8a82e331789(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  finally  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '47:137 try_statement=>τtry block • finally [ τfinally ]';
    pushFN( data, branch_da12f6c88f41c59d );
    pushFN( data, $finally );
    return data.rules_ptr
}
function branch_64cc33e7d3cf639a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  sym  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '150:471 template_escaped_sequence=>τf:s • θsym [ θsym ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_650fdafe4c8104b0(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  ++ -- ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
    '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
    '115:371 update_expression=>left_hand_side_expression • τ++ [ τ++ ]';
    '115:372 update_expression=>left_hand_side_expression • τ-- [ τ-- ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 190, 2, 2 ) ){
    pushFN( data, branch_be0975c191cfe942 );
    return branch_294f036931ed4100( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 192, 2, 2 ) ){
    pushFN( data, branch_be0975c191cfe942 );
    return branch_36c3743f55efb781( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
    return 115
};
    return -1
}
function branch_651d80f73d9b3035(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_fcff4c1b93763194 );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_653fd1c93c769024(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '78:222 method_definition=>τasync property_name • τ( unique_formal_parameters τ) τ{ function_body τ} [ τ( ]';
    '78:229 method_definition=>τasync property_name • τ( τ) τ{ function_body τ} [ τ( ]';
    '78:230 method_definition=>τasync property_name • τ( unique_formal_parameters τ) τ{ τ} [ τ( ]';
    '78:236 method_definition=>τasync property_name • τ( τ) τ{ τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ... _ $ id { [ )  ]';
    '78:222 method_definition=>τasync property_name τ( • unique_formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '78:230 method_definition=>τasync property_name τ( • unique_formal_parameters τ) τ{ τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '78:229 method_definition=>τasync property_name τ( • τ) τ{ function_body τ} [ τ) ]';
    '78:236 method_definition=>τasync property_name τ( • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  61  ]';
        '78:222 method_definition=>τasync property_name τ( • unique_formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
        '78:230 method_definition=>τasync property_name τ( • unique_formal_parameters τ) τ{ τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_39e95f80450dcd13 );
        pushFN( data, $unique_formal_parameters );
        return data.rules_ptr
    } else if( l.current_byte ==41 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  )  ]';
        '78:229 method_definition=>τasync property_name τ( • τ) τ{ function_body τ} [ τ) ]';
        '78:236 method_definition=>τasync property_name τ( • τ) τ{ τ} [ τ) ]';
        'Number of end groups0 [    ]';
        'All symbols [  {  ]';
        '78:229 method_definition=>τasync property_name τ( τ) • τ{ function_body τ} [ τ{ ]';
        '78:236 method_definition=>τasync property_name τ( τ) • τ{ τ} [ τ{ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( l.current_byte ==123 ){
            consume( l, data, state );
            'Number of end groups0 [    ]';
            'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
            '78:229 method_definition=>τasync property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
            '78:236 method_definition=>τasync property_name τ( τ) τ{ • τ} [ τ} ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            switch(sym_map_deb09f8b969b503a( l, data )){
                case 0: 
                {
                    '"--LEAF--"';
                    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                    '78:229 method_definition=>τasync property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                    pushFN( data, branch_6328acd549526aff );
                    pushFN( data, $function_body );
                    return data.rules_ptr
                }
                case 1: 
                {
                    '"--LEAF--"';
                    'Leaf [  }  ]';
                    '"⤋⤋⤋  assert ⤋⤋⤋"';
                    '78:236 method_definition=>τasync property_name τ( τ) τ{ • τ} [ τ} ]';
                    consume( l, data, state );
                    add_reduce( state, data, 6, 141 );
                    return 78
                }
                default: 
                break
            }
        }
    }
};
    return -1
}
function branch_6565a7e6dd81d368(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 8, 126 );
    return 78
};
    return -1
}
function branch_65d4c94eb48be65c(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_2e18050e60fbc07c );
    pushFN( data, $asi );
    return data.rules_ptr
};
    return -1
}
function branch_65e135d28d2f5683(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 156 );
    return prod_start
}
function branch_6610b84c5040c32e(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 76 );
    return 49
}
function branch_6660a60ef0746aa7(l, data, state, prod, prod_start){
    return 160
}
function branch_6686c4dd47a29824(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 51 );
    return prod_start
}
function branch_66f5e41897909475(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ; } nl END_OF_FILE  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '37:116 return_statement=>τreturn • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    pushFN( data, branch_5b6d9fd5ab48e217 );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_6749bc620e9bf77a(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '78:221 method_definition=>τset property_name • τ( property_set_parameter_list τ) τ{ function_body τ} [ τ( ]';
    '78:227 method_definition=>τset property_name • τ( property_set_parameter_list τ) τ{ τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  79  ]';
    '78:221 method_definition=>τset property_name τ( • property_set_parameter_list τ) τ{ function_body τ} [ τ_, τ$, θid, τ{, τ[ ]';
    '78:227 method_definition=>τset property_name τ( • property_set_parameter_list τ) τ{ τ} [ τ_, τ$, θid, τ{, τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_1cc964e033661548 );
    pushFN( data, $property_set_parameter_list );
    return data.rules_ptr
};
    return -1
}
function branch_677cef703600b88f(l, data, state, prod, prod_start){
    pushFN( data, $exponentiation_expression_goto );
    return 161
}
function branch_6877ced5aeea492c(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 117
}
function branch_68822d3768b3a34e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '32:92 iteration_statement=>τfor τawait τ( • iteration_statement_group_189_1_ τof expression τ) statement [ τvar ]';
    pushFN( data, branch_73c92684fe594ec0 );
    pushFN( data, $iteration_statement_group_189_1_ );
    return data.rules_ptr
}
function branch_68f1ec8a24bbd818(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '70:192 arrow_parameters=>• identifier_reference [ τ_, τ$, θid ]';
    pushFN( data, branch_f681470690f6dd9c );
    pushFN( data, $identifier_reference );
    return data.rules_ptr
}
function branch_68f5988a6d6d06f6(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 149 );
    pushFN( data, $exponentiation_expression_goto );
    return 83
}
function branch_690e3c852f76b689(l, data, state, prod, prod_start){
    pushFN( data, $template_spans_goto );
    return 147
}
function branch_698a695d172cbcaa(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 7 );
    return prod_start
}
function branch_6a0b2eb63577a0dd(l, data, state, prod, prod_start){
    return 125
}
function branch_6a198f15ec200f85(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '138:439 element_list=>element_list τ, elision • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    pushFN( data, branch_1e7f93a5799c8e48 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_6a8089d17010bab4(l, data, state, prod, prod_start){
    add_reduce( state, data, 4, 74 );
    return prod_start
}
function branch_6a94146ec52dd7b1(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  as , } END_OF_PRODUCTION  ]';
    '18:46 export_specifier=>identifier • [ τ,, τ} ]';
    '18:47 export_specifier=>identifier • τas identifier [ τas ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 206, 2, 2 ) ){
    pushFN( data, branch_99d0131b024d331a );
    return branch_fd98c980e4895455( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  , } END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '18:46 export_specifier=>identifier • [ τ,, τ} ]';
    add_reduce( state, data, 1, 15 );
    return 18
};
    return -1
}
function branch_6ab54fea94809a07(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 106 );
    return prod_start
}
function branch_6acbe4c257998c87(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '32:101 iteration_statement=>τfor τ( expression τ; expression τ; • τ) statement [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a60958a110bffa2e );
    pushFN( data, $statement );
    return data.rules_ptr
}
function branch_6ad6d5b16957a0b2(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  , yield async new ... ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '137:434 array_literal=>τ[ • element_list τ, elision τ] [ τ,, τyield, τasync, τnew, τ..., τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_9ebf7fa2bbf1dbd7 );
    pushFN( data, $element_list );
    return data.rules_ptr
}
function branch_6afc154cd9c6b0d0(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 145 );
    pushFN( data, $short_circuit_expression_goto );
    return 81
}
function branch_6ba9611537fad4e2(l, data, state, prod, prod_start){
    return 114
}
function branch_6c3dc15474002085(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $coalesce_expression_head_goto );
    return 83
};
    return -1
}
function branch_6c592b67ed2c220d(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 201 );
    return prod_start
}
function branch_6c705e6e2f6cdeca(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 174 );
    pushFN( data, $coalesce_expression_head_goto );
    return 110
}
function branch_6c9c7403d1cf2743(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 199 );
    pushFN( data, $binding_element_list_goto );
    return 122
}
function branch_6ca6411c9d78ba1d(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_e1cbe10a4d1d95af );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_6cbbde0a5c35072f(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 112 );
    return 72
}
function branch_6cf41a4b641163cc(l, data, state, prod, prod_start){
    pushFN( data, $comments_list_6_goto );
    return 180
}
function branch_6e2f4522ca6129c9(l, data, state, prod, prod_start){
    add_reduce( state, data, 2 );
    return prod_start
}
function branch_6e759d65221bb9d0(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    pushFN( data, $export_clause_list_82_goto );
    return 182
}
function branch_6e799ff10700ebfd(l, data, state, prod, prod_start){
    pushFN( data, $optional_expression_goto );
    return 88
}
function branch_6e7f74fd0cc7db23(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 83
}
function branch_6e97ed2be5541701(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '91:271 arguments=>τ( argument_list • τ) [ τ) ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 158 );
    return prod_start
}
function branch_6f36132db993d6f3(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  END_OF_FILE  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '3:9 asi=>• END_OF_FILE [ END_OF_FILE ]';
    consume( l, data, state );
    return prod_start
}
function branch_6f48e2b3649e0e39(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  {  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '118:383 binding_pattern=>• object_binding_pattern [ τ{ ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $object_binding_pattern );
    return data.rules_ptr
}
function branch_6f5983b12e75ae61(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    add_reduce( state, data, 1, 236 );
    pushFN( data, $coalesce_expression_head_goto );
    return 83
}
function branch_6f877bb9a9b01cc3(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '128:413 binding_rest_element=>τ... • binding_pattern [ τ{, τ[ ]';
    pushFN( data, branch_9d856643df8ef910 );
    pushFN( data, $binding_pattern );
    return data.rules_ptr
}
function branch_6fb0d322bc3ac350(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 148 );
    pushFN( data, $left_hand_side_expression_goto );
    return 83
}
function branch_6fc7856975210d36(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '74:210 class_expression=>τclass class_heritage τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 4, 118 );
    return prod_start
}
function branch_6ffbb1cf8fe5365c(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 236 );
    pushFN( data, $optional_expression_goto );
    return 83
}
function branch_7015094357d7a54c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '145:456 template_middle_list=>template_middle_list • template_middle expression [ τ} ]';
    pushFN( data, branch_d173572c617b4a2e );
    pushFN( data, $template_middle );
    return data.rules_ptr
}
function branch_703be17e438505d7(l, data, state, prod, prod_start){
    convert_prod_to_token( data, prod_start );
    return 177
}
function branch_7057ee0bc540e1cd(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '41:126 case_block=>τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 66 );
    return prod_start
}
function branch_70f2f1f5c1617eb9(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_5d5e91e967da61e2 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_7177f9c92dcafc22(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:88 iteration_statement=>τfor τ( • expression τ; expression τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_46b602a537fe6e41 );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_71ef319f9900dc2d(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( ( ( ( l.isNL(  ) )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3 );
    return prod_start
};
    return -1
}
function branch_71f8381ec282f9fe(l, data, state, prod, prod_start){
    pushFN( data, $statement_goto );
    return 80
}
function branch_720d66540ffaef39(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '89:267 super_call=>τsuper • arguments [ τ( ]';
    pushFN( data, branch_65e135d28d2f5683 );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_7227848e659607a6(l, data, state, prod, prod_start){
    return 120
}
function branch_729793c6f4c1ee35(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ` ${  ]';
    '142:450 no_substitute_template=>τ` no_substitute_template_list_846 • τ` [ τ` ]';
    '146:457 template_head=>τ` no_substitute_template_list_846 • τ${ [ τ${ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==96 ){
    pushFN( data, branch_2b189c1676b0d7e4 );
    return branch_4d0ed4e9ef1d6340( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 47, 2, 2 ) ){
    pushFN( data, branch_36e4ea25622c419e );
    return branch_7c3bc3e67acae729( l, data, state, prod, prod_start )
};
    return -1
}
function branch_7298cb2d4536144a(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 55 );
    return prod_start
}
function branch_72e3aa722c716a6e(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 244 );
    return 170
}
function branch_72ec2c6b149c2afd(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 169 );
    return prod_start
}
function branch_731d73028155c3d7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  num  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
    pushFN( data, branch_cfed1dcd23cf06ff );
    pushFN( data, $float_token_group_927_0_ );
    return data.rules_ptr
}
function branch_737a561414020814(l, data, state, prod, prod_start){
    pushFN( data, $exponentiation_expression_goto );
    return 115
}
function branch_73c92684fe594ec0(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 80, 2, 2 ) )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_164c1fc9d99ef4c5 );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function branch_73fbbcc984693c41(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  =  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '135:430 cover_initialized_name=>identifier_reference • initializer [ τ= ]';
    pushFN( data, branch_2460ca21a9546c6f );
    pushFN( data, $initializer );
    return data.rules_ptr
}
function branch_740fe5c6ea352889(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
    {
    '"--LEAF--"';
    'Leaf [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
    return 113
}
}
function branch_7420eefadd3a0494(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 172 );
    pushFN( data, $short_circuit_expression_goto );
    return 109
}
function branch_7447fafb2329a869(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ]  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '137:436 array_literal=>τ[ element_list • τ, τ] [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 215 );
    return prod_start
};
    return -1
}
function branch_7462e5f6614e66ee(l, data, state, prod, prod_start){
    add_reduce( state, data, 2 );
    return 186
}
function branch_74f90fd15de0e06a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  " "  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '7:17 import_declaration=>τimport • module_specifier asi [ τ", τ" ]';
    pushFN( data, branch_83422699f7d27bad );
    pushFN( data, $module_specifier );
    return data.rules_ptr
}
function branch_75006597b4ba99f6(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  &&  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '102:326 logical_and_expression=>logical_and_expression • τ&& bitwise_or_expression [ τ&& ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_08675110fd2c9be0 );
    pushFN( data, $bitwise_or_expression );
    return data.rules_ptr
}
function branch_75088a9e7c96fc95(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 173 );
    pushFN( data, $relational_expression_goto );
    return 109
}
function branch_750cb4418c31277c(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_0c7f0c30693ecfb4 );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_7522d6ae523359cf(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  .  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '84:254 super_property=>τsuper • τ. identifier_name [ τ. ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_c620233eb1545898 );
    pushFN( data, $identifier_name );
    return data.rules_ptr
}
function branch_75328a3811b8c78d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    consume( l, data, state );
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    pushFN( data, branch_5f93f4a540bf672c );
    pushFN( data, $regular_expression_literal_list_884 );
    return data.rules_ptr
}
function branch_7591fa263288f068(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '73:198 class_declaration=>τclass class_heritage • τ{ class_body τ} [ τ{ ]';
    '73:202 class_declaration=>τclass class_heritage • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==123 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ; }  ]';
    '73:198 class_declaration=>τclass class_heritage τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    '73:202 class_declaration=>τclass class_heritage τ{ • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8000494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_26bc95062ea8884a );
        return branch_fdef37ff6ef267e0( l, data, state, prod, prod_start )
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_26bc95062ea8884a );
        return branch_f13f0af48bc9d6d7( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_75d42f646d5c699b(l, data, state, prod, prod_start){
    return 173
}
function branch_763a9161897f4960(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '91:272 arguments=>τ( • τ) [ τ) ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 159 );
    return prod_start
}
function branch_764e05523e17dd71(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_b9e7a99e92e1ef5a );
    pushFN( data, $template_spans );
    return data.rules_ptr
}
function branch_76e152f3addb5852(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '148:462 template_tail=>τ} • τ` [ τ` ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 228 );
    return prod_start
}
function branch_7725540ed38d7832(l, data, state, prod, prod_start){
    add_reduce( state, data, 8, 39 );
    return prod_start
}
function branch_7744a01e6610883a(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 236 );
    pushFN( data, $coalesce_expression_head_goto );
    return 83
}
function branch_774b1c3a4a634490(l, data, state, prod, prod_start){
    add_reduce( state, data, 2 );
    return 187
}
function branch_77d3508deb16fc05(l, data, state, prod, prod_start){
    return 74
}
function branch_77dc97f7ba7bd07f(l, data, state, prod, prod_start){
    add_reduce( state, data, 5, 75 );
    return 48
}
function branch_77f1182a982769a0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ; } nl END_OF_FILE  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '35:112 continue_statement=>τcontinue • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    pushFN( data, branch_347e4fcdbb70e35e );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_780c29f4b3de3f75(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 154 );
    pushFN( data, $coalesce_expression_head_goto );
    return 88
}
function branch_7836485105f8511b(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==96 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 227 );
    return prod_start
};
    return -1
}
function branch_78d0041835b27d2c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '138:442 element_list=>• spread_element [ τ... ]';
    pushFN( data, branch_46d539f60c6e4574 );
    pushFN( data, $spread_element );
    return data.rules_ptr
}
function branch_78d81db44b6a097a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '138:441 element_list=>• assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    pushFN( data, branch_46d539f60c6e4574 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_78ee3ee7818ddd20(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '120:390 array_binding_pattern=>τ[ • elision binding_rest_element τ] [ τ, ]';
    pushFN( data, branch_8ee260e95c5ea127 );
    pushFN( data, $elision );
    return data.rules_ptr
}
function branch_791313a90ed7285c(l, data, state, prod, prod_start){
    add_reduce( state, data, 5, 34 );
    return prod_start
}
function branch_793a8f7898367c0d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ; } nl END_OF_FILE  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '30:78 expression_statement=>expression • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    pushFN( data, branch_4d672ab77607046d );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_797b0cb0ecbcec79(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '119:387 object_binding_pattern=>τ{ binding_property_list • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 190 );
    return prod_start
}
function branch_797db0172ef3f539(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_377f22bf35e95d6b );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_79b1631736d0632c(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    return 203
}
function branch_7a347b8a2033ccfc(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  [  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '84:255 super_property=>τsuper • τ[ expression τ] [ τ[ ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_1a106d6f43e9c2fc );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_7a876285b58ed953(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ]  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '137:433 array_literal=>τ[ element_list • τ] [ τ] ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 212 );
    return prod_start
}
function branch_7b1c3dcb8b482d3a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  $  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_7b45906b836c5783(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_9dfcbd9c11e00c41 );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_7b47b71dedd38bc4(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 182 );
    return 114
}
function branch_7b5a2f3f30e2f38f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '41:124 case_block=>τ{ case_clauses • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 64 );
    return prod_start
}
function branch_7b82d5733c1718fd(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  , }  ]';
    '11:25 named_imports=>τ{ named_imports_list_41 • τ, τ} [ τ, ]';
    '11:27 named_imports=>τ{ named_imports_list_41 • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    pushFN( data, branch_cdadc72de97fcb50 );
    return branch_4f868414c88760a2( l, data, state, prod, prod_start )
} else if( l.current_byte ==125 ){
    pushFN( data, branch_cdadc72de97fcb50 );
    return branch_916c7a79d6e9a0c3( l, data, state, prod, prod_start )
};
    return -1
}
function branch_7b9aff7e2bf6357c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '92:276 argument_list=>argument_list • τ, assignment_expression [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d8a8aa453ec53718 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_7bdd5acede1b899b(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 93
}
function branch_7c3bc3e67acae729(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ${  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '146:457 template_head=>τ` no_substitute_template_list_846 • τ${ [ τ${ ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 223 );
    return prod_start
}
function branch_7c730e10496da020(l, data, state, prod, prod_start){
    return 54
}
function branch_7ca0e6aae866ede4(l, data, state, prod, prod_start){
    return 44
}
function branch_7d0fe7f778e0915e(l, data, state, prod, prod_start){
    pushFN( data, $new_expression_goto );
    return 83
}
function branch_7d9bb3fd21526311(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '59:160 function_declaration=>τasync τfunction binding_identifier • τ( formal_parameters τ) τ{ function_body τ} [ τ( ]';
    '59:167 function_declaration=>τasync τfunction binding_identifier • τ( τ) τ{ function_body τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ... _ $ id { [ )  ]';
    '59:160 function_declaration=>τasync τfunction binding_identifier τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '59:167 function_declaration=>τasync τfunction binding_identifier τ( • τ) τ{ function_body τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
        pushFN( data, branch_2afe194015f18aca );
        return branch_0d17bd4ff7c4954b( l, data, state, prod, prod_start )
    } else if( l.current_byte ==41 ){
        pushFN( data, branch_2afe194015f18aca );
        return branch_c1902823abe586c3( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_7da9671c8a707b8f(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $optional_expression_goto );
    return 88
}
function branch_7dceed2d3c5af336(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    pushFN( data, $case_clauses_goto );
    return 42
}
function branch_7e0c55cd5de7eecc(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 179 );
    return 114
}
function branch_7e16a3d3a6b024e3(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '77:217 class_element=>• method_definition [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $method_definition );
    return data.rules_ptr
}
function branch_7e491f06d3aa02e4(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_29625183d7ef12e2 );
    pushFN( data, $initializer );
    return data.rules_ptr
}
function branch_7e5e4836a0d7d1fc(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 192 );
    return 120
};
    return -1
}
function branch_7e7147e1d043c71f(l, data, state, prod, prod_start){
    return 34
}
function branch_7e91dfc3645106f3(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ?  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '99:320 conditional_expression=>short_circuit_expression • τ? assignment_expression τ: assignment_expression [ τ? ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_9f8530bbeda6fdf2 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_7ea4569a429fb3e7(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 149 );
    pushFN( data, $left_hand_side_expression_goto );
    return 83
}
function branch_7ee97bb3d338cea3(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  catch finally  ]';
    '47:136 try_statement=>τtry block • catch [ τcatch ]';
    '47:138 try_statement=>τtry block • catch finally [ τcatch ]';
    '47:137 try_statement=>τtry block • finally [ τfinally ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 235, 5, 5 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  48  ]';
    '47:136 try_statement=>τtry block • catch [ τcatch ]';
    '47:138 try_statement=>τtry block • catch finally [ τcatch ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_da500a62ec64185f );
    pushFN( data, $catch );
    return data.rules_ptr
} else {
    pushFN( data, branch_267864f3c17107a4 );
    return branch_64cad8a82e331789( l, data, state, prod, prod_start )
};
    return -1
}
function branch_7f323c1e55dba215(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  id  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '150:469 template_escaped_sequence=>τf:s • θid [ θid ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_7f595f231204addf(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  , )  ]';
    '91:269 arguments=>τ( argument_list • τ, τ) [ τ, ]';
    '91:271 arguments=>τ( argument_list • τ) [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    pushFN( data, branch_ac87609e1365e0c2 );
    return branch_2ee3026b9cff7f7e( l, data, state, prod, prod_start )
} else if( l.current_byte ==41 ){
    pushFN( data, branch_ac87609e1365e0c2 );
    return branch_6e97ed2be5541701( l, data, state, prod, prod_start )
};
    return -1
}
function branch_7fef8d2a58bd3b2a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '88:261 call_expression=>• super_call [ τsuper ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $super_call );
    return data.rules_ptr
}
function branch_8016db47d10c9f2b(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 160
}
function branch_808a9da358fa2d43(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  [  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '94:281 optional_chain=>τ?. • τ[ expression τ] [ τ[ ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d5ab93ba756dcda8 );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_80a1c7172b9e881c(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 88
}
function branch_8170d964fef370aa(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ]  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '120:397 array_binding_pattern=>τ[ • τ] [ τ] ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 197 );
    return prod_start
}
function branch_81ace1e9aba2b7ae(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 186 );
    return 117
};
    return -1
}
function branch_81d36c51b120eada(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a6953e3cebe0622d );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_8237a685cf72bd45(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 173 );
    pushFN( data, $short_circuit_expression_goto );
    return 109
}
function branch_82c659ce54fae82f(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 29, 2, 2 ) )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_5575e8896e0a7325 );
    pushFN( data, $concise_body );
    return data.rules_ptr
};
    return -1
}
function branch_82d83328e92fa521(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 155 );
    pushFN( data, $assignment_expression_goto );
    return 88
}
function branch_82eae1e2d0a4d97a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ${  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '147:460 template_middle=>τ} • τ${ [ τ${ ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 226 );
    return prod_start
}
function branch_8313698cbc9cf6c0(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 172 );
    pushFN( data, $coalesce_expression_head_goto );
    return 109
}
function branch_832db874432559ff(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ` ${  ]';
    '142:450 no_substitute_template=>τ` no_substitute_template_list_846 • τ` [ τ` ]';
    '146:457 template_head=>τ` no_substitute_template_list_846 • τ${ [ τ${ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==96 ){
    pushFN( data, branch_89ddaca662c70f13 );
    return branch_4d0ed4e9ef1d6340( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 47, 2, 2 ) ){
    pushFN( data, branch_8a078c18755e12e9 );
    return branch_7c3bc3e67acae729( l, data, state, prod, prod_start )
};
    return -1
}
function branch_83422699f7d27bad(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_698a695d172cbcaa );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_83ac9ec37bd1fe3b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '97:300 assignment_expression=>• yield_expression [ τyield ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $yield_expression );
    return data.rules_ptr
}
function branch_83af1b70e76efd1b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '94:283 optional_chain=>τ?. • template_literal [ τ` ]';
    pushFN( data, branch_6e2f4522ca6129c9 );
    pushFN( data, $template_literal );
    return data.rules_ptr
}
function branch_83d020240204a848(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 8, 91 );
    return prod_start
};
    return -1
}
function branch_83e8bc6be78775d3(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '138:438 element_list=>elision • spread_element [ τ... ]';
    pushFN( data, branch_aaa47be9c7a839c5 );
    pushFN( data, $spread_element );
    return data.rules_ptr
}
function branch_83f035f14a381765(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:96 iteration_statement=>τfor τ( • lexical_declaration expression τ; τ) statement [ τlet, τconst ]';
    pushFN( data, branch_0590f08629b40be0 );
    pushFN( data, $lexical_declaration );
    return data.rules_ptr
}
function branch_84a3649cb052a256(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $exponentiation_expression_goto );
    return 83
}
function branch_852135796ab1630c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_6ca6411c9d78ba1d );
    pushFN( data, $member_expression );
    return data.rules_ptr
}
function branch_8524ef5d6e5f042a(l, data, state, prod, prod_start){
    pushFN( data, $property_definition_list_goto );
    return 130
}
function branch_85254f29978fc712(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_7298cb2d4536144a );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_8565df71b2269c02(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ws  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '180:601 comments_list_6=>• θws [ θws ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 3 );
    return prod_start
}
function branch_86030f7ca1ea8395(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id * {  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '7:16 import_declaration=>τimport • import_clause from_clause asi [ τ_, τ$, θid, τ*, τ{ ]';
    pushFN( data, branch_a61329dd20532f8a );
    pushFN( data, $import_clause );
    return data.rules_ptr
}
function branch_868813e841b045e2(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 171 );
    pushFN( data, $coalesce_expression_head_goto );
    return 109
}
function branch_86f61baea5bfad8e(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 155 );
    pushFN( data, $left_hand_side_expression_goto );
    return 88
}
function branch_87b096c937a94475(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    pushFN( data, $statement_list_goto );
    return 21
}
function branch_87d87179af2e53ee(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 4 );
    return prod_start
}
function branch_87f24febc08b3a68(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $statement_goto );
    return 88
};
    return -1
}
function branch_88c440a9defb2c1e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '148:461 template_tail=>τ} • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
    pushFN( data, branch_7836485105f8511b );
    pushFN( data, $no_substitute_template_list_846 );
    return data.rules_ptr
}
function branch_8919f982e3ad939d(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 248 );
    pushFN( data, $no_substitute_template_list_846_goto );
    return 189
}
function branch_8960ac35bb16465f(l, data, state, prod, prod_start){
    pushFN( data, $optional_expression_goto );
    return 146
}
function branch_89bcaf08306e0d22(l, data, state, prod, prod_start){
    pushFN( data, $named_imports_list_41_goto );
    return 181
}
function branch_89ddaca662c70f13(l, data, state, prod, prod_start){
    pushFN( data, $template_literal_goto );
    return 141
}
function branch_8a027ac5997cb78f(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_5ccc35967f0fcaf0 );
    pushFN( data, $template_spans );
    return data.rules_ptr
}
function branch_8a078c18755e12e9(l, data, state, prod, prod_start){
    pushFN( data, $template_literal_goto );
    return 146
}
function branch_8a1fbfbb6115337f(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '59:159 function_declaration=>τfunction τ* binding_identifier • τ( formal_parameters τ) τ{ function_body τ} [ τ( ]';
    '59:165 function_declaration=>τfunction τ* binding_identifier • τ( τ) τ{ function_body τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ... _ $ id { [ )  ]';
    '59:159 function_declaration=>τfunction τ* binding_identifier τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '59:165 function_declaration=>τfunction τ* binding_identifier τ( • τ) τ{ function_body τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
        pushFN( data, branch_2afe194015f18aca );
        return branch_96ef5ee50393131a( l, data, state, prod, prod_start )
    } else if( l.current_byte ==41 ){
        pushFN( data, branch_2afe194015f18aca );
        return branch_5778f62915925d63( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_8a2307b8b683ecc3(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 6, 113 );
    return prod_start
};
    return -1
}
function branch_8a2c6da2ff23c15a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '37:115 return_statement=>τreturn • expression asi [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_85254f29978fc712 );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_8a7a1ff04edb119d(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 62 );
    return prod_start
};
    return -1
}
function branch_8b526547a45a9132(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 186, 2, 2 ) )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3 );
    return prod_start
};
    return -1
}
function branch_8b6b3eb51d268416(l, data, state, prod, prod_start){
    return 70
}
function branch_8c0631fc0506211d(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 160 );
    pushFN( data, $assignment_expression_goto );
    return 93
}
function branch_8cf6e39d1438e8a7(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 5, 196 );
    return 120
};
    return -1
}
function branch_8d0572ef7aa6fe88(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '144:454 template_spans=>template_middle_list • template_tail [ τ} ]';
    pushFN( data, branch_87d87179af2e53ee );
    pushFN( data, $template_tail );
    return data.rules_ptr
}
function branch_8d1d14451230a811(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:89 iteration_statement=>τfor τ( • left_hand_side_expression τin expression τ) statement [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_3357d80dcfa1ec28 );
    pushFN( data, $left_hand_side_expression );
    return data.rules_ptr
}
function branch_8d7b51229b716912(l, data, state, prod, prod_start){
    return 147
}
function branch_8d893f21be0d1de8(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_cd3972c0d4315502 );
    pushFN( data, $new_expression );
    return data.rules_ptr
}
function branch_8dd620f1cb36e785(l, data, state, prod, prod_start){
    add_reduce( state, data, 5, 58 );
    return 39
}
function branch_8dd672bd3bd6324a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ... _ $ id { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '59:169 function_declaration=>τfunction τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_abd398183a470327 );
    pushFN( data, $formal_parameters );
    return data.rules_ptr
}
function branch_8ddd344752efda3f(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ` ${  ]';
    '142:450 no_substitute_template=>τ` no_substitute_template_list_846 • τ` [ τ` ]';
    '146:457 template_head=>τ` no_substitute_template_list_846 • τ${ [ τ${ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==96 ){
    pushFN( data, branch_00cd2beba9d77227 );
    return branch_4d0ed4e9ef1d6340( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 47, 2, 2 ) ){
    pushFN( data, branch_8960ac35bb16465f );
    return branch_7c3bc3e67acae729( l, data, state, prod, prod_start )
};
    return -1
}
function branch_8e180b7a9c4fa605(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  -  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '111:354 additive_expression=>additive_expression • τ- multiplicative_expression [ τ- ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6096241b0e1355d4 );
    pushFN( data, $multiplicative_expression );
    return data.rules_ptr
}
function branch_8e2059bd5e47c1ae(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_06b6e531c4e941db );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function branch_8e263e36bf2b7222(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
    pushFN( data, branch_0fdc95da20340cdb );
    pushFN( data, $no_substitute_template_list_846 );
    return data.rules_ptr
}
function branch_8e381dadd58a28b5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '59:170 function_declaration=>τfunction binding_identifier τ( • τ) τ{ function_body τ} [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_f81e7563876bd527 );
    pushFN( data, $function_body );
    return data.rules_ptr
};
    return -1
}
function branch_8e3cc4f1b1538937(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  [  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '94:285 optional_chain=>optional_chain • τ[ expression τ] [ τ[ ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_8f24bf7171e31ffc );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_8e45f000096e2702(l, data, state, prod, prod_start){
    return 32
}
function branch_8e7039bd952b069b(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==96 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 219 );
    return prod_start
};
    return -1
}
function branch_8e95aa90292f162b(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==58 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6c592b67ed2c220d );
    pushFN( data, $binding_element );
    return data.rules_ptr
};
    return -1
}
function branch_8e9e49dc0caee40f(l, data, state, prod, prod_start){
    return 26
}
function branch_8e9e7da253530602(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  case  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '41:120 case_block=>τ{ case_clauses default_clause • case_clauses τ} [ τcase ]';
    pushFN( data, branch_49524dcd704559d7 );
    pushFN( data, $case_clauses );
    return data.rules_ptr
}
function branch_8ee260e95c5ea127(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_7e5e4836a0d7d1fc );
    pushFN( data, $binding_rest_element );
    return data.rules_ptr
}
function branch_8efe979f4abd7c14(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_da08cfeb027003d0 );
        pushFN( data, $statement );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_8f24bf7171e31ffc(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    return prod_start
};
    return -1
}
function branch_8f3d93fbb8c88444(l, data, state, prod, prod_start){
    return 84
}
function branch_8fa00f1de2282159(l, data, state, prod, prod_start){
    pushFN( data, $property_definition_goto );
    return 161
}
function branch_9105aa549a29c8a4(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 148 );
    pushFN( data, $statement_goto );
    return 83
}
function branch_9107dc6e4144ff52(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 5, 187 );
    return prod_start
};
    return -1
}
function branch_914a73b11429048c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  id  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
    consume( l, data, state );
    return prod_start
}
function branch_916c7a79d6e9a0c3(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '11:27 named_imports=>τ{ named_imports_list_41 • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 12 );
    return prod_start
}
function branch_91cf36e954ec5143(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  "  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    pushFN( data, branch_ea608060f125d775 );
    pushFN( data, $string_literal );
    return prod_start
}
function branch_91f0fe53f3fb02d4(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 112 );
    pushFN( data, $exponentiation_expression_goto );
    return 88
}
function branch_92054d055daa3d9e(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_2b9e11a10dec8567 );
    pushFN( data, $for_binding );
    return data.rules_ptr
}
function branch_922f9c543d3d713e(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 121 );
    return prod_start
}
function branch_9280a5a636656b95(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 110 );
    return 169
}
function branch_92c6fbe158f3e201(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_7725540ed38d7832 );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_92f6ba4fd259d981(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 112 );
    pushFN( data, $assignment_expression_goto );
    return 88
}
function branch_93008e248d6d3173(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 149 );
    pushFN( data, $new_expression_goto );
    return 83
}
function branch_9329a9a9b5c3c033(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $default_productions__js_id_symbols );
    return prod_start
}
function branch_93872aa9bc16e66f(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 9, 86 );
    return prod_start
};
    return -1
}
function branch_93a58455663ae882(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:97 iteration_statement=>τfor τ( • for_declaration τof expression τ) statement [ τlet, τconst ]';
    pushFN( data, branch_31eeb0d769052e81 );
    pushFN( data, $for_declaration );
    return data.rules_ptr
}
function branch_93e448c9e39dda87(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ${  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '145:456 template_middle_list=>template_middle_list • template_middle expression [ τ} ]';
    pushFN( data, branch_0596862a5e66a8ee );
    pushFN( data, $template_middle );
    return data.rules_ptr
}
function branch_93f2d716e05ff6c0(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 154 );
    return prod_start
}
function branch_93f379ee09085390(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_c5c41d18257491c7 );
        pushFN( data, $function_body );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_950ac62eb8debea8(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  =  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '58:156 lexical_binding=>binding_identifier • initializer [ τ= ]';
    pushFN( data, branch_547531ad284679b1 );
    pushFN( data, $initializer );
    return data.rules_ptr
}
function branch_95304ad325b9fa8d(l, data, state, prod, prod_start){
    add_reduce( state, data, 7, 43 );
    return 32
}
function branch_954f826d147f6929(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 22 );
    return prod_start
}
function branch_9557943043197180(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 207 );
    pushFN( data, $property_definition_goto );
    return 132
}
function branch_95769a711df4b4c4(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '128:412 binding_rest_element=>τ... • binding_identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_9d856643df8ef910 );
    pushFN( data, $binding_identifier );
    return data.rules_ptr
}
function branch_95e4a639e21003e4(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 178
}
function branch_95e7aa3e166e09db(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 148 );
    pushFN( data, $exponentiation_expression_goto );
    return 83
}
function branch_9635b8451c84e015(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a0fa066999c72b8c );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_963f86c5c202dc6a(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==59 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            pushFN( data, branch_2a0e1f81f4ea638d );
            pushFN( data, $statement );
            return data.rules_ptr
        };
        return -1
    };
    return -1
};
    return -1
}
function branch_9652f92cf1ae5ae9(l, data, state, prod, prod_start){
    add_reduce( state, data, 4, 230 );
    return prod_start
}
function branch_96719c2b5029997e(l, data, state, prod, prod_start){
    add_reduce( state, data, 7, 44 );
    return 32
}
function branch_9672b2cf7ede104a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  "  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $string_literal );
    return prod_start
}
function branch_968bbdd7d1860504(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '68:187 yield_expression=>τyield • θnl [ θnl ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 105 );
    return prod_start
}
function branch_96b29b36748c4bb9(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ;  ]';
    '32:88 iteration_statement=>τfor τ( expression • τ; expression τ; expression τ) statement [ τ; ]';
    '32:100 iteration_statement=>τfor τ( expression • τ; τ; expression τ) statement [ τ; ]';
    '32:101 iteration_statement=>τfor τ( expression • τ; expression τ; τ) statement [ τ; ]';
    '32:107 iteration_statement=>τfor τ( expression • τ; τ; τ) statement [ τ; ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==59 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- ;  ]';
    '32:88 iteration_statement=>τfor τ( expression τ; • expression τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '32:101 iteration_statement=>τfor τ( expression τ; • expression τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '32:100 iteration_statement=>τfor τ( expression τ; • τ; expression τ) statement [ τ; ]';
    '32:107 iteration_statement=>τfor τ( expression τ; • τ; τ) statement [ τ; ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  80  ]';
        '32:88 iteration_statement=>τfor τ( expression τ; • expression τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        '32:101 iteration_statement=>τfor τ( expression τ; • expression τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_fad62b864c17de6d );
        pushFN( data, $expression );
        return data.rules_ptr
    } else if( l.current_byte ==59 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  ;  ]';
        '32:100 iteration_statement=>τfor τ( expression τ; • τ; expression τ) statement [ τ; ]';
        '32:107 iteration_statement=>τfor τ( expression τ; • τ; τ) statement [ τ; ]';
        'Number of end groups0 [    ]';
        'All symbols [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- )  ]';
        '32:100 iteration_statement=>τfor τ( expression τ; τ; • expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        '32:107 iteration_statement=>τfor τ( expression τ; τ; • τ) statement [ τ) ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
            pushFN( data, branch_8e45f000096e2702 );
            return branch_e5862ccf364c2597( l, data, state, prod, prod_start )
        } else if( l.current_byte ==41 ){
            pushFN( data, branch_8e45f000096e2702 );
            return branch_06a8f1f36e544056( l, data, state, prod, prod_start )
        }
    }
};
    return -1
}
function branch_96ef5ee50393131a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ... _ $ id { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '59:159 function_declaration=>τfunction τ* binding_identifier τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_93f379ee09085390 );
    pushFN( data, $formal_parameters );
    return data.rules_ptr
}
function branch_97a6066f7a724d19(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    return 202
}
function branch_97e341667384df57(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  =  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '54:147 variable_declaration=>binding_identifier • initializer [ τ= ]';
    pushFN( data, branch_547531ad284679b1 );
    pushFN( data, $initializer );
    return data.rules_ptr
}
function branch_97efa12186b512f0(l, data, state, prod, prod_start){
    pushFN( data, $binding_element_list_goto );
    return 122
}
function branch_9857ed7f8666abbb(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  , yield async new ... ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '137:436 array_literal=>τ[ • element_list τ, τ] [ τ,, τyield, τasync, τnew, τ..., τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_b4683058ec601e34 );
    pushFN( data, $element_list );
    return data.rules_ptr
}
function branch_9870e6df1b3e048d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  function  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '16:38 export_declaration=>τexport τdefault • hoistable_declaration [ τasync, τfunction ]';
    pushFN( data, branch_98d591e757a88ccf );
    pushFN( data, $hoistable_declaration );
    return data.rules_ptr
}
function branch_989aa965a35af920(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 148 );
    pushFN( data, $assignment_expression_goto );
    return 83
}
function branch_98d2129f2df6c5da(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 102
}
function branch_98d591e757a88ccf(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 21 );
    return prod_start
}
function branch_98f6a360cab52ec7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  class  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '24:68 declaration=>• class_declaration [ τclass ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $class_declaration );
    return data.rules_ptr
}
function branch_995265d8f0717f4d(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 168 );
    pushFN( data, $statement_goto );
    return 103
}
function branch_99544e68751ff79c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  *  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '68:188 yield_expression=>τyield • τ* assignment_expression [ τ* ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6ab54fea94809a07 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_99d0131b024d331a(l, data, state, prod, prod_start){
    return 18
}
function branch_9a2d8d6df00bd316(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_5f3f90e64f3867cb );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_9aaf4564ccb6b63c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  " "  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '133:427 literal_property_name=>• string_literal [ τ", τ" ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $string_literal );
    return data.rules_ptr
}
function branch_9ab280e0ee87f798(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    consume( l, data, state );
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    pushFN( data, branch_eb8bce61b57ac72e );
    pushFN( data, $regular_expression_literal_list_884 );
    return data.rules_ptr
}
function branch_9ad6f28cf2c5f154(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '151:474 regular_expression_literal=>τ/ τ/ • default_productions__js_identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_127cdc6d00f03664 );
    pushFN( data, $default_productions__js_identifier );
    return data.rules_ptr
}
function branch_9aec1aa5aaed4e05(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '22:52 statement_list_item=>• statement [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $statement );
    return data.rules_ptr
}
function branch_9bb35fffbc100a11(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6cbbde0a5c35072f );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_9bdf426a6f694b55(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:93 iteration_statement=>τfor τ( • iteration_statement_group_162_1_ τ; τ; expression τ) statement [ τvar ]';
    pushFN( data, branch_37d6f2fa015eee1d );
    pushFN( data, $iteration_statement_group_162_1_ );
    return data.rules_ptr
}
function branch_9c2e8809e73510e9(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ` ${  ]';
    '142:450 no_substitute_template=>τ` no_substitute_template_list_846 • τ` [ τ` ]';
    '146:457 template_head=>τ` no_substitute_template_list_846 • τ${ [ τ${ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==96 ){
    pushFN( data, branch_f4542e9d998a2e40 );
    return branch_4d0ed4e9ef1d6340( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 47, 2, 2 ) ){
    pushFN( data, branch_0ef8b509580d6d86 );
    return branch_7c3bc3e67acae729( l, data, state, prod, prod_start )
};
    return -1
}
function branch_9c39bdda92075281(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  num  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '180:606 comments_list_6=>comments_list_6 • θnum [ θnum ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 4 );
    return prod_start
}
function branch_9c6307d985ea8939(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_9c6c51d5f340fdb6(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '34:110 for_binding=>• binding_pattern [ τ{, τ[ ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $binding_pattern );
    return data.rules_ptr
}
function branch_9c9d510b645c7ab6(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 29, 2, 2 ) )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_463a77c28e2f6f03 );
    pushFN( data, $concise_body );
    return data.rules_ptr
};
    return -1
}
function branch_9cb48d8fa58390c5(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 100 );
    pushFN( data, $assignment_expression_goto );
    return 83
}
function branch_9d1d0dea72ea004a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:100 iteration_statement=>τfor τ( • expression τ; τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_37d6f2fa015eee1d );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_9d33653390a4b7b7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '90:268 import_call=>τimport • τ( assignment_expression τ) [ τ( ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_bdf8c837ba9e1f39 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_9d856643df8ef910(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 204 );
    return prod_start
}
function branch_9d9878c1e812bae3(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    pushFN( data, $property_definition_list_goto );
    return 130
}
function branch_9d9a2acd33035cdb(l, data, state, prod, prod_start){
    return 123
}
function branch_9dfcbd9c11e00c41(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 30 );
    return 30
}
function branch_9e07993a29a15344(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 112 );
    pushFN( data, $left_hand_side_expression_goto );
    return 88
}
function branch_9e1df5b0231a0575(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  extends {  ]';
    '74:205 class_expression=>τclass binding_identifier • class_heritage τ{ class_body τ} [ τextends ]';
    '74:208 class_expression=>τclass binding_identifier • class_heritage τ{ τ} [ τextends ]';
    '74:207 class_expression=>τclass binding_identifier • τ{ class_body τ} [ τ{ ]';
    '74:211 class_expression=>τclass binding_identifier • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 95, 7, 7 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  75  ]';
    '74:205 class_expression=>τclass binding_identifier • class_heritage τ{ class_body τ} [ τextends ]';
    '74:208 class_expression=>τclass binding_identifier • class_heritage τ{ τ} [ τextends ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_30eef6505311bd3b );
    pushFN( data, $class_heritage );
    return data.rules_ptr
} else if( l.current_byte ==123 ){
    consume( l, data, state );
    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '74:207 class_expression=>τclass binding_identifier • τ{ class_body τ} [ τ{ ]';
    '74:211 class_expression=>τclass binding_identifier • τ{ τ} [ τ{ ]';
    'Number of end groups0 [    ]';
    'All symbols [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ; }  ]';
    '74:207 class_expression=>τclass binding_identifier τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    '74:211 class_expression=>τclass binding_identifier τ{ • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8000494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_77d3508deb16fc05 );
        return branch_eddcfebd5c3a90d8( l, data, state, prod, prod_start )
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_77d3508deb16fc05 );
        return branch_604e109f8f09c42c( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_9e32b56df0b8a721(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '34:109 for_binding=>• binding_identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $binding_identifier );
    return data.rules_ptr
}
function branch_9e90e28887f45cad(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 173 );
    pushFN( data, $coalesce_expression_head_goto );
    return 109
}
function branch_9ebf7fa2bbf1dbd7(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==44 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_4e32617fbdde1337 );
    pushFN( data, $elision );
    return data.rules_ptr
};
    return -1
}
function branch_9eea0b623172c3ac(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '21:51 statement_list=>statement_list • statement_list_item [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_4a3dd91347c1bdab );
    pushFN( data, $statement_list_item );
    return data.rules_ptr
}
function branch_9f09291b21cab368(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id { [  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '122:402 binding_element_list=>binding_element_list • τ, binding_elision_element [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_eeca18e228c2817a );
    pushFN( data, $binding_elision_element );
    return data.rules_ptr
}
function branch_9f2093e17756c2a6(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '32:91 iteration_statement=>τfor τawait τ( • left_hand_side_expression τof expression τ) statement [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_73c92684fe594ec0 );
    pushFN( data, $left_hand_side_expression );
    return data.rules_ptr
}
function branch_9f766ab8fb21c11f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '163:514 binary_token=>τ0b binary_token_list_941 • binary_token_list_942 [ τ_ ]';
    pushFN( data, branch_d5ae766ac3614f87 );
    pushFN( data, $binary_token_list_942 );
    return data.rules_ptr
}
function branch_9f8530bbeda6fdf2(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==58 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_1c4aebd31e9fd14b );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
};
    return -1
}
function branch_9f8b397fbf1e2555(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 112
}
function branch_9f91ada29c34cf9f(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 27 );
    return prod_start
};
    return -1
}
function branch_a026a219565415a4(l, data, state, prod, prod_start){
    return 14
}
function branch_a02a770eec4af430(l, data, state, prod, prod_start){
    return prod_start
}
function branch_a075d09e7961a50c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ... ]';
    pushFN( data, branch_626c31a9841211f1 );
    pushFN( data, $cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ );
    return data.rules_ptr
}
function branch_a07b5330ad4c35c6(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 148 );
    pushFN( data, $short_circuit_expression_goto );
    return 83
}
function branch_a07b6ba1c2198d17(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '62:177 formal_parameters=>formal_parameter_list • τ, [ τ, ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 102 );
    return prod_start
}
function branch_a081f407a44b4019(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 144 );
    return prod_start
}
function branch_a0fa066999c72b8c(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a679b5e7a761d3fa );
    pushFN( data, $template_spans );
    return data.rules_ptr
}
function branch_a0fc794b78e8287d(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 104 );
    return 66
}
function branch_a11f8ae40c1e55d6(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 148 );
    pushFN( data, $optional_expression_goto );
    return 83
}
function branch_a12da59f81d96e3a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '94:282 optional_chain=>τ?. • identifier_name [ τ_, τ$, θid ]';
    pushFN( data, branch_6e2f4522ca6129c9 );
    pushFN( data, $identifier_name );
    return data.rules_ptr
}
function branch_a1920ce9e2df5626(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:94 iteration_statement=>τfor τ( • iteration_statement_group_162_1_ τ; expression τ; τ) statement [ τvar ]';
    pushFN( data, branch_8e2059bd5e47c1ae );
    pushFN( data, $iteration_statement_group_162_1_ );
    return data.rules_ptr
}
function branch_a223fb2b74da8015(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_dc675b2e10ca0146 );
    pushFN( data, $template_spans );
    return data.rules_ptr
}
function branch_a23fd17e734430ab(l, data, state, prod, prod_start){
    pushFN( data, $module_body_goto );
    return 5
}
function branch_a2442354b8a34a5f(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 112
}
function branch_a25e55604240dfe5(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 6, 139 );
    pushFN( data, $property_definition_goto );
    return 131
};
    return -1
}
function branch_a2b9df016bfdb870(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '88:262 call_expression=>• import_call [ τimport ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $import_call );
    return data.rules_ptr
}
function branch_a2dbbc510f26e04a(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==44 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_8cf6e39d1438e8a7 );
    pushFN( data, $elision );
    return data.rules_ptr
};
    return -1
}
function branch_a30c4882084296cd(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 111
}
function branch_a31c5fb689ac09a8(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  , _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '120:396 array_binding_pattern=>τ[ • binding_element_list τ, elision τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_a2dbbc510f26e04a );
    pushFN( data, $binding_element_list );
    return data.rules_ptr
}
function branch_a35869bc5e963faa(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  id  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_a370216511729554(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '59:171 function_declaration=>τfunction τ* τ( • τ) τ{ function_body τ} [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_f99f884d34cbc1c2 );
    pushFN( data, $function_body );
    return data.rules_ptr
};
    return -1
}
function branch_a377d6b20b6ee0f2(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 168 );
    pushFN( data, $coalesce_expression_goto );
    return 104
}
function branch_a38340fa914da01b(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 172 );
    pushFN( data, $statement_goto );
    return 109
}
function branch_a38c4c764fd2718d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  from  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '16:35 export_declaration=>τexport export_clause • from_clause asi [ τfrom ]';
    pushFN( data, branch_bdd6cd4defc73c41 );
    pushFN( data, $from_clause );
    return data.rules_ptr
}
function branch_a38d7fc61b9220df(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
    {
    '"--LEAF--"';
    'Leaf [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
    pushFN( data, $assignment_expression_goto );
    return 115
}
}
function branch_a3eecb5be1ad79f0(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_68f5988a6d6d06f6 );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_a3ffd7db04c9b4b1(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 100 );
    pushFN( data, $short_circuit_expression_goto );
    return 83
}
function branch_a401ffd24ccb010c(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 156 );
    return 89
}
function branch_a429a93ea4e50c2e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  new  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '85:256 meta_property=>• new_target [ τnew ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $new_target );
    return data.rules_ptr
}
function branch_a49de0694d3119c0(l, data, state, prod, prod_start){
    return 152
}
function branch_a538302a39e5a585(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '97:299 assignment_expression=>• conditional_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $conditional_expression );
    return data.rules_ptr
}
function branch_a558fd05dc7ef55c(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 245 );
    return 171
}
function branch_a589c3e65d2d65b9(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '116:375 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( τ) [ τ( ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 2, 185 );
    return prod_start
};
    return -1
}
function branch_a59e98796acff678(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 246 );
    return 183
}
function branch_a5fb8c802515f878(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ||  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '101:324 logical_or_expression=>logical_or_expression • τ|| logical_and_expression [ τ|| ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_08675110fd2c9be0 );
    pushFN( data, $logical_and_expression );
    return data.rules_ptr
}
function branch_a60958a110bffa2e(l, data, state, prod, prod_start){
    add_reduce( state, data, 8, 41 );
    return prod_start
}
function branch_a61329dd20532f8a(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_46738b129c26c9ad );
    pushFN( data, $from_clause );
    return data.rules_ptr
}
function branch_a65ade685090be3b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  .  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '83:252 member_expression=>• meta_property [ τnew, τimport ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $meta_property );
    return data.rules_ptr
}
function branch_a679b5e7a761d3fa(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 221 );
    return 143
}
function branch_a6953e3cebe0622d(l, data, state, prod, prod_start){
    add_reduce( state, data, 7, 45 );
    return prod_start
}
function branch_a6d973a4f7cf0be1(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '88:266 call_expression=>call_expression • template_literal [ τ` ]';
    pushFN( data, branch_f3aa427af16aca42 );
    pushFN( data, $template_literal );
    return data.rules_ptr
}
function branch_a6facce7938f2ca1(l, data, state, prod, prod_start){
    pushFN( data, $numeric_literal_goto );
    return 160
}
function branch_a74637280c0d4321(l, data, state, prod, prod_start){
    pushFN( data, $export_clause_list_82_goto );
    return 182
}
function branch_a768b1029796cac7(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 146
}
function branch_a8046a91022d80e0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '161:507 int_token=>θnum • int_token_list_931 [ τ_ ]';
    pushFN( data, branch_cfed1dcd23cf06ff );
    pushFN( data, $int_token_list_931 );
    return data.rules_ptr
}
function branch_a80c37b16502984d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '162:509 hex_token=>τ0X hex_token_list_934 • hex_token_list_935 [ τ_ ]';
    pushFN( data, branch_d5ae766ac3614f87 );
    pushFN( data, $hex_token_list_935 );
    return data.rules_ptr
}
function branch_a8189b064b0721b3(l, data, state, prod, prod_start){
    add_reduce( state, data, 8, 38 );
    return prod_start
}
function branch_a85cba0b0edff3b4(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '85:257 meta_property=>• import_meta [ τimport ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $import_meta );
    return data.rules_ptr
}
function branch_a87c228bc0c9b8e7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set *  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '131:421 property_definition=>• method_definition [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $method_definition );
    return data.rules_ptr
}
function branch_a8d5043904b35713(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 101
}
function branch_a9145a3fd336e644(l, data, state, prod, prod_start){
    pushFN( data, $multiplicative_expression_goto );
    return 112
}
function branch_a9b5812eb5387c1d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  0O 0o  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '157:500 numeric_literal=>• octal_token [ τ0O, τ0o ]';
    pushFN( data, branch_5bb890753356de8d );
    pushFN( data, $octal_token );
    return data.rules_ptr
}
function branch_aa79d015c321731e(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import ...  ]';
    '138:437 element_list=>elision • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    '138:438 element_list=>elision • spread_element [ τ... ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
    pushFN( data, branch_df285dd1774f9593 );
    return branch_cc7eb2232ea4cc9a( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_df285dd1774f9593 );
    return branch_83e8bc6be78775d3( l, data, state, prod, prod_start )
};
    return -1
}
function branch_aaa47be9c7a839c5(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 200 );
    return prod_start
}
function branch_aae4fc85bc4af58c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  num  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '191:624 scientific_token_group_923_0_=>• τe int_token [ τe ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_cfed1dcd23cf06ff );
    pushFN( data, $int_token );
    return data.rules_ptr
}
function branch_ab0dc0b4de0edc56(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  %  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '112:358 multiplicative_expression=>multiplicative_expression • τ% exponentiation_expression [ τ% ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6261372b01a04e27 );
    pushFN( data, $exponentiation_expression );
    return data.rules_ptr
}
function branch_ab1ddffcce931b9f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '11:28 named_imports=>τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 13 );
    return prod_start
}
function branch_ab9c437f7b802491(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '97:303 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression [ τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||= ]';
    pushFN( data, branch_09cdc148a6029e81 );
    pushFN( data, $assignment_operator );
    return data.rules_ptr
}
function branch_abd398183a470327(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_df67e6537aa8c73e );
        pushFN( data, $function_body );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_abdff15ba8c72634(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  default case }  ]';
    '41:120 case_block=>τ{ case_clauses • default_clause case_clauses τ} [ τdefault ]';
    '41:123 case_block=>τ{ case_clauses • default_clause τ} [ τdefault ]';
    '41:122 case_block=>τ{ case_clauses • case_clauses τ} [ τcase ]';
    '41:124 case_block=>τ{ case_clauses • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 224, 7, 7 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  44  ]';
    '41:120 case_block=>τ{ case_clauses • default_clause case_clauses τ} [ τdefault ]';
    '41:123 case_block=>τ{ case_clauses • default_clause τ} [ τdefault ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_165acea5aca717c6 );
    pushFN( data, $default_clause );
    return data.rules_ptr
} else if( cmpr_set( l, data, 325, 4, 4 ) ){
    pushFN( data, branch_b2deab1df605866e );
    return branch_4eff7f495f5f71a7( l, data, state, prod, prod_start )
} else if( l.current_byte ==125 ){
    pushFN( data, branch_b2deab1df605866e );
    return branch_7b5a2f3f30e2f38f( l, data, state, prod, prod_start )
};
    return -1
}
function branch_abffcb1d655912dd(l, data, state, prod, prod_start){
    return 163
}
function branch_ac02cabea52e681b(l, data, state, prod, prod_start){
    pushFN( data, $binary_token_list_941_goto );
    return 196
}
function branch_ac2b0882e2154493(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '145:456 template_middle_list=>template_middle_list • template_middle expression [ τ} ]';
    pushFN( data, branch_0bc998f41660642d );
    pushFN( data, $template_middle );
    return data.rules_ptr
}
function branch_ac2fbcdac8db105c(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ] ,  ]';
    '137:433 array_literal=>τ[ element_list • τ] [ τ] ]';
    '137:434 array_literal=>τ[ element_list • τ, elision τ] [ τ, ]';
    '137:436 array_literal=>τ[ element_list • τ, τ] [ τ, ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==93 ){
    pushFN( data, branch_f4f4b78e0efcb7d8 );
    return branch_7a876285b58ed953( l, data, state, prod, prod_start )
} else if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  , ]  ]';
    '137:434 array_literal=>τ[ element_list • τ, elision τ] [ τ, ]';
    '137:436 array_literal=>τ[ element_list • τ, τ] [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==44 ){
        pushFN( data, branch_f4f4b78e0efcb7d8 );
        return branch_42fa1e2b71de3087( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_f4f4b78e0efcb7d8 );
        return branch_7447fafb2329a869( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_ac87609e1365e0c2(l, data, state, prod, prod_start){
    return 91
}
function branch_ac9eb1d2daf65a92(l, data, state, prod, prod_start){
    return 166
}
function branch_ad1ed9285e7440eb(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  , _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '120:398 array_binding_pattern=>τ[ • binding_element_list τ, τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_bd88bbaaa9dfc0cc );
    pushFN( data, $binding_element_list );
    return data.rules_ptr
}
function branch_ad33600ade06ab50(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 101
}
function branch_adec1f40cb4e69ab(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import ...  ]';
    '138:439 element_list=>element_list τ, elision • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    '138:440 element_list=>element_list τ, elision • spread_element [ τ... ]';
    '137:434 array_literal=>τ[ element_list τ, elision • τ] [ τ] ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
    pushFN( data, branch_df285dd1774f9593 );
    return branch_6a198f15ec200f85( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_df285dd1774f9593 );
    return branch_544245bd621469f7( l, data, state, prod, prod_start )
};
    return -1
}
function branch_adfe583f245122e0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  *  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '8:21 import_clause=>imported_default_binding • τ, name_space_import [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_0bbab1bec96141fb );
    pushFN( data, $name_space_import );
    return data.rules_ptr
}
function branch_ae5d8cda35c1beac(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 8, 129 );
    return 78
};
    return -1
}
function branch_ae76ac988e3f20b4(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '74:206 class_expression=>τclass class_heritage • τ{ class_body τ} [ τ{ ]';
    '74:210 class_expression=>τclass class_heritage • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==123 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ; }  ]';
    '74:206 class_expression=>τclass class_heritage τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    '74:210 class_expression=>τclass class_heritage τ{ • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8000494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_77d3508deb16fc05 );
        return branch_46079e9eaae06332( l, data, state, prod, prod_start )
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_77d3508deb16fc05 );
        return branch_6fc7856975210d36( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_ae7ff7d686efde67(l, data, state, prod, prod_start){
    pushFN( data, $member_expression_goto );
    return 83
}
function branch_aeef45877415567f(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 112 );
    pushFN( data, $statement_goto );
    return 88
}
function branch_b132c1d46d314181(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  1  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '196:657 binary_token_list_941=>binary_token_list_941 • τ1 [ τ1 ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_b13bbb1a2770bb62(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 8, 127 );
    return 78
};
    return -1
}
function branch_b1ca056d75963282(l, data, state, prod, prod_start){
    pushFN( data, $optional_expression_goto );
    return 178
}
function branch_b1f705d9c88d1cac(l, data, state, prod, prod_start){
    return 153
}
function branch_b20ac722fd29eefe(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $optional_expression_goto );
    return 88
};
    return -1
}
function branch_b20bfe4ad6bbf549(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
    pushFN( data, branch_8e7039bd952b069b );
    pushFN( data, $no_substitute_template_list_846 );
    return data.rules_ptr
}
function branch_b23b2b3ff4428f03(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ... _ $ id { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '59:163 function_declaration=>τfunction binding_identifier τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_e8ad9c022e66dc7f );
    pushFN( data, $formal_parameters );
    return data.rules_ptr
}
function branch_b2426f3ec404cd50(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 236 );
    pushFN( data, $left_hand_side_expression_goto );
    return 83
}
function branch_b2a4c699cf68919f(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_ea14de050ba65915 );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_b2b65aac3a9b5b74(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '122:402 binding_element_list=>binding_element_list τ, • binding_elision_element [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_eeca18e228c2817a );
    pushFN( data, $binding_elision_element );
    return data.rules_ptr
}
function branch_b2c11d9fd00da96a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  0B 0b  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '157:501 numeric_literal=>• binary_token [ τ0B, τ0b ]';
    pushFN( data, branch_5bb890753356de8d );
    pushFN( data, $binary_token );
    return data.rules_ptr
}
function branch_b2d82103b0bc1e75(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  do  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '32:81 iteration_statement=>• τdo statement τwhile τ( expression τ) asi [ τdo ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_08bc7ab5983151cc );
    pushFN( data, $statement );
    return data.rules_ptr
}
function branch_b2deab1df605866e(l, data, state, prod, prod_start){
    return 41
}
function branch_b33f8e51c92c8959(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 101 );
    return prod_start
}
function branch_b34347e7426a455a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  true false  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '153:478 literal=>• boolean_literal [ τtrue, τfalse ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $boolean_literal );
    return data.rules_ptr
}
function branch_b3a890ee9678f684(l, data, state, prod, prod_start){
    pushFN( data, $statement_goto );
    return 111
}
function branch_b420618ab1b8586c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ]  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '137:435 array_literal=>τ[ • τ] [ τ] ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 214 );
    return prod_start
}
function branch_b446bada8288b8cc(l, data, state, prod, prod_start){
    return 28
}
function branch_b4683058ec601e34(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==44 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
        add_reduce( state, data, 4, 215 );
        return 137
    };
    return -1
};
    return -1
}
function branch_b4b6b880f39839b6(l, data, state, prod, prod_start){
    return 142
}
function branch_b5163b3546c0fbc7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  sym  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '180:600 comments_list_6=>comments_list_6 • θsym [ θsym ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 4 );
    return prod_start
}
function branch_b63a68ec24e2562d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '92:274 argument_list=>argument_list • τ, argument_list_group_507_1_ [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d8a8aa453ec53718 );
    pushFN( data, $argument_list_group_507_1_ );
    return data.rules_ptr
}
function branch_b6415c655c4258c6(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_2840d6e7c348c57a );
        pushFN( data, $function_body );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_b6502915857fa2ba(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 148 );
    pushFN( data, $coalesce_expression_head_goto );
    return 83
}
function branch_b66f9574755094c0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '119:385 object_binding_pattern=>τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 188 );
    return prod_start
}
function branch_b6967d1347d2934e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '94:287 optional_chain=>optional_chain • template_literal [ τ` ]';
    pushFN( data, branch_594abed47efdcf4e );
    pushFN( data, $template_literal );
    return data.rules_ptr
}
function branch_b7320cfec757ef4b(l, data, state, prod, prod_start){
    return 161
}
function branch_b74efa10238c66f5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '68:189 yield_expression=>τyield • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    pushFN( data, branch_5a0dae5a7e0f9412 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_b7997304b20b7708(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:104 iteration_statement=>τfor τ( • iteration_statement_group_162_1_ τ; τ; τ) statement [ τvar ]';
    pushFN( data, branch_963f86c5c202dc6a );
    pushFN( data, $iteration_statement_group_162_1_ );
    return data.rules_ptr
}
function branch_b79bda1539f9fe4b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  {  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '8:22 import_clause=>imported_default_binding • τ, named_imports [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_0bbab1bec96141fb );
    pushFN( data, $named_imports );
    return data.rules_ptr
}
function branch_b7a0719500ee70d4(l, data, state, prod, prod_start){
    add_reduce( state, data, 9, 35 );
    return prod_start
}
function branch_b8230e7f736e9fec(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '32:87 iteration_statement=>τfor τ( τ; expression τ; • expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_92c6fbe158f3e201 );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_b8518102adc40c24(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async function  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '24:69 declaration=>• hoistable_declaration [ τasync, τfunction ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $hoistable_declaration );
    return data.rules_ptr
}
function branch_b874a508ae3c56e3(l, data, state, prod, prod_start){
    return 116
}
function branch_b9093793c07c84f3(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 5, 114 );
    return prod_start
};
    return -1
}
function branch_b92e42924f1ff461(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ` ${  ]';
    '148:461 template_tail=>τ} no_substitute_template_list_846 • τ` [ τ` ]';
    '147:459 template_middle=>τ} no_substitute_template_list_846 • τ${ [ τ${ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==96 ){
    pushFN( data, branch_e64d3c2398b2214f );
    return branch_09affa6b4ac6662f( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 47, 2, 2 ) ){
    pushFN( data, branch_690e3c852f76b689 );
    return branch_333d0330f1056ffd( l, data, state, prod, prod_start )
};
    return -1
}
function branch_b9930cb90501c723(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $short_circuit_expression_goto );
    return 83
};
    return -1
}
function branch_b9e7a99e92e1ef5a(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 221 );
    pushFN( data, $left_hand_side_expression_goto );
    return 83
}
function branch_ba56a1e8631e6368(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 160 );
    pushFN( data, $left_hand_side_expression_goto );
    return 93
}
function branch_ba67f21af7b6fc7e(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 115
}
function branch_ba6b161ae230b0bb(l, data, state, prod, prod_start){
    add_reduce( state, data, 7, 47 );
    return prod_start
}
function branch_baab69c0f98fd2c5(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  " "  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '153:480 literal=>• string_literal [ τ", τ" ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $string_literal );
    return data.rules_ptr
}
function branch_bacfab5366c7c5f4(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '74:208 class_expression=>τclass binding_identifier class_heritage τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 5, 116 );
    return prod_start
}
function branch_bb22a73f491f9390(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 221 );
    pushFN( data, $assignment_expression_goto );
    return 83
}
function branch_bb8964cf04497c58(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 105
}
function branch_bbb08856db0b90ce(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 105
}
function branch_bbf7b13d69f14355(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_6686c4dd47a29824 );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_bc137d7d6ec468aa(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  .  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '82:245 new_expression=>• member_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $member_expression );
    return data.rules_ptr
}
function branch_bc256a8d93b0947d(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_18609f2741e46dde );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_bcb6ea1597bdc114(l, data, state, prod, prod_start){
    pushFN( data, $import_specifier_goto );
    return 178
}
function branch_bcb8428f668fba42(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 184 );
    return prod_start
}
function branch_bcbdbfb31631bd03(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $exponentiation_expression_goto );
    return 88
};
    return -1
}
function branch_bcc324c230525aba(l, data, state, prod, prod_start){
    pushFN( data, $statement_goto );
    return 105
}
function branch_bced74b79dc4b829(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 174 );
    pushFN( data, $statement_goto );
    return 110
}
function branch_bd0847be37e50816(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  static  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '77:218 class_element=>• τstatic method_definition [ τstatic ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_3adf1b4606bd20ce );
    pushFN( data, $method_definition );
    return data.rules_ptr
}
function branch_bd0a107013812bcd(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_15983b672ba825fe );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_bd88bbaaa9dfc0cc(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==44 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
        add_reduce( state, data, 4, 193 );
        return 120
    };
    return -1
};
    return -1
}
function branch_bdbaf04d0e5605e6(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_38babd164bfdccfe );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_bdd6cd4defc73c41(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_f98e24841530bcaa );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_bdf8c837ba9e1f39(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 157 );
    return prod_start
};
    return -1
}
function branch_bdfeae5517084a51(l, data, state, prod, prod_start){
    pushFN( data, $template_middle_list_goto );
    return 145
}
function branch_be01588f1d82a4fa(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  function  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '46:135 labeled_item=>• function_declaration [ τasync, τfunction ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $function_declaration );
    return data.rules_ptr
}
function branch_be0975c191cfe942(l, data, state, prod, prod_start){
    return 115
}
function branch_be16e26b86b0d962(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_63656d1b5114f76f );
        pushFN( data, $function_body );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_be3bb9f9fe5f65b7(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 212 );
    return 137
};
    return -1
}
function branch_bed9c660069791a8(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 9, 88 );
    return prod_start
};
    return -1
}
function branch_bee81754442d1e81(l, data, state, prod, prod_start){
    return 25
}
function branch_bf7d29947ca441f3(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '62:176 formal_parameters=>• function_rest_parameter [ τ... ]';
    pushFN( data, branch_b33f8e51c92c8959 );
    pushFN( data, $function_rest_parameter );
    return data.rules_ptr
}
function branch_bf8b96a06cd8c3ee(l, data, state, prod, prod_start){
    pushFN( data, $bitwise_xor_expression_goto );
    return 106
}
function branch_c01a50d6432dfac7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '144:453 template_spans=>• template_tail [ τ} ]';
    pushFN( data, branch_46d539f60c6e4574 );
    pushFN( data, $template_tail );
    return data.rules_ptr
}
function branch_c06e8e4cff965411(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 69 );
    return prod_start
}
function branch_c07a393d315dad22(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  as  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '13:31 import_specifier=>identifier • τas imported_binding [ τas ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_4abf4b237f12917b );
    pushFN( data, $imported_binding );
    return data.rules_ptr
}
function branch_c0c9df19772a993b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '92:275 argument_list=>• assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    pushFN( data, branch_46d539f60c6e4574 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_c10d1e016d1c1c2f(l, data, state, prod, prod_start){
    pushFN( data, $equality_expression_goto );
    return 108
}
function branch_c132c91741b35989(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_e6e253809906aca1 );
    pushFN( data, $member_expression );
    return data.rules_ptr
}
function branch_c1902823abe586c3(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '59:167 function_declaration=>τasync τfunction binding_identifier τ( • τ) τ{ function_body τ} [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_4345ceb6a995bce3 );
    pushFN( data, $function_body );
    return data.rules_ptr
};
    return -1
}
function branch_c195667e4d57184c(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 154 );
    pushFN( data, $short_circuit_expression_goto );
    return 88
}
function branch_c1956f0c853f1c8f(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 11 );
    return 10
}
function branch_c1aef156f51daecd(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  _ ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '163:513 binary_token=>τ0B binary_token_list_941 • binary_token_list_942 [ τ_ ]';
    '163:515 binary_token=>τ0B binary_token_list_941 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==95 ){
    pushFN( data, branch_abffcb1d655912dd );
    return branch_22f7cbf2b28018d3( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '163:515 binary_token=>τ0B binary_token_list_941 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    add_reduce( state, data, 2, 229 );
    return 163
};
    return -1
}
function branch_c1d1fe6803526df3(l, data, state, prod, prod_start){
    return 16
}
function branch_c225dfa353bb6999(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    return prod_start
}
function branch_c2440213c8b4661a(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    pushFN( data, $named_imports_list_41_goto );
    return 181
}
function branch_c2ef13c4999cbf11(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '28:75 block=>τ{ • statement_list τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_9f91ada29c34cf9f );
    pushFN( data, $statement_list );
    return data.rules_ptr
}
function branch_c309fdfe433f3a05(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  **  ]';
    '113:360 exponentiation_expression=>update_expression • τ** exponentiation_expression [ τ** ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 1, 2, 2 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  **  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '113:360 exponentiation_expression=>update_expression τ** • exponentiation_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_de88964c52e1b255 );
    pushFN( data, $exponentiation_expression );
    return data.rules_ptr
}
}
function branch_c41f4ffa4a77337a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '137:432 array_literal=>τ[ • elision τ] [ τ, ]';
    pushFN( data, branch_dd7b97b8fa5ae7ce );
    pushFN( data, $elision );
    return data.rules_ptr
}
function branch_c422d15b8a9f25d7(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 71 );
    return 45
}
function branch_c42ba8eb938a80e1(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '43:129 case_clause=>τcase expression τ: • statement_list [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_0f40b4330887923d );
    pushFN( data, $statement_list );
    return data.rules_ptr
}
function branch_c48f381c6a26acef(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 6, 139 );
    return 78
};
    return -1
}
function branch_c4b45b0596e5977b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '138:444 element_list=>element_list • τ, spread_element [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_2ad8fdd04ed51fb0 );
    pushFN( data, $spread_element );
    return data.rules_ptr
}
function branch_c5c41d18257491c7(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 9, 85 );
    return prod_start
};
    return -1
}
function branch_c5cace004a08de32(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_6afc154cd9c6b0d0 );
    pushFN( data, $new_expression );
    return data.rules_ptr
}
function branch_c61fc477a6fe204c(l, data, state, prod, prod_start){
    return 43
}
function branch_c620233eb1545898(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 150 );
    return prod_start
}
function branch_c65a3a3ff2b9a8d1(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  1  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '196:656 binary_token_list_941=>• τ1 [ τ1 ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 248 );
    return prod_start
}
function branch_c6817b75407c04aa(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 164 );
    pushFN( data, $statement_goto );
    return 80
}
function branch_c6f1117061c6b8db(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    pushFN( data, $binding_property_list_goto );
    return 121
}
function branch_c79a94e17b64f6ea(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { / ` super import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '16:40 export_declaration=>τexport τdefault • assignment_expression asi [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τ/, τ`, τsuper, τimport ]';
    pushFN( data, branch_dc117bd4153e8435 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_c7c53aede7e429a8(l, data, state, prod, prod_start){
    pushFN( data, $left_hand_side_expression_goto );
    return 161
}
function branch_c839c8c94a6ce912(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_27b85206f616617a );
    pushFN( data, $binding_list );
    return data.rules_ptr
}
function branch_c884b13f2aab77f5(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 7, 133 );
    return 78
};
    return -1
}
function branch_c886d2b373e3b1f0(l, data, state, prod, prod_start){
    add_reduce( state, data, 9, 35 );
    return 32
}
function branch_c8eb0e7687d64b47(l, data, state, prod, prod_start){
    return 149
}
function branch_c9077600f79ebd00(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  .  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '94:286 optional_chain=>optional_chain • τ. identifier_name [ τ. ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_c225dfa353bb6999 );
    pushFN( data, $identifier_name );
    return data.rules_ptr
}
function branch_c950d337915ea6fe(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '46:134 labeled_item=>• statement [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $statement );
    return data.rules_ptr
}
function branch_c99406960e9dacd8(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  *  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '112:356 multiplicative_expression=>multiplicative_expression • τ* exponentiation_expression [ τ* ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6261372b01a04e27 );
    pushFN( data, $exponentiation_expression );
    return data.rules_ptr
}
function branch_c9b4bfa3a9f90fbc(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  export  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '6:14 module_item=>• export_declaration [ τexport ]';
    pushFN( data, branch_d7fdd85038dfaf4e );
    pushFN( data, $export_declaration );
    return data.rules_ptr
}
function branch_ca28cfcf0375df5c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  sym ws nl id num  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '2:2 comments=>• τ/* comments_list_3 τ*/ [ τ/* ]';
    consume( l, data, state );
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    pushFN( data, branch_8b526547a45a9132 );
    pushFN( data, $comments_list_3 );
    return data.rules_ptr
}
function branch_ca641c1bbdcc77e0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '59:173 function_declaration=>τfunction τ( • τ) τ{ function_body τ} [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d1e7b4189e31a643 );
    pushFN( data, $function_body );
    return data.rules_ptr
};
    return -1
}
function branch_ca90f4e8df9fd810(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 111
}
function branch_ca977670c2889428(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '94:284 optional_chain=>optional_chain • arguments [ τ( ]';
    pushFN( data, branch_93f2d716e05ff6c0 );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_cab995d42ef58de6(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_4c6db5bc7899ad19 );
    pushFN( data, $new_expression );
    return data.rules_ptr
}
function branch_cabe7a32d32d6a72(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ws  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '180:604 comments_list_6=>comments_list_6 • θws [ θws ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 4 );
    return prod_start
}
function branch_cad0200362af69be(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  super  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '83:251 member_expression=>• super_property [ τsuper ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $super_property );
    return data.rules_ptr
}
function branch_caff27f836e18a00(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '190:620 regular_expression_literal_list_884=>regular_expression_literal_list_884 • string_data [ θnl, θws, θsym, θnum, θid, τf:s ]';
    pushFN( data, branch_cfed1dcd23cf06ff );
    pushFN( data, $string_data );
    return data.rules_ptr
}
function branch_cb0d2c037ea3ebf0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ... _ $ id { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '59:158 function_declaration=>τasync τfunction τ* binding_identifier τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_be16e26b86b0d962 );
    pushFN( data, $formal_parameters );
    return data.rules_ptr
}
function branch_cb5bcba612260349(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:90 iteration_statement=>τfor τ( • iteration_statement_group_180_1_ τin expression τ) statement [ τvar ]';
    pushFN( data, branch_3357d80dcfa1ec28 );
    pushFN( data, $iteration_statement_group_180_1_ );
    return data.rules_ptr
}
function branch_cbca8ebbfb17f74b(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 170 );
    pushFN( data, $coalesce_expression_head_goto );
    return 108
}
function branch_cbdc840b61c96049(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 161
}
function branch_cbf043a75fcababb(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  while  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '32:82 iteration_statement=>• τwhile τ( expression τ) statement [ τwhile ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==40 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_5bd979e8c1f7abd7 );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function branch_cc1f0c6178d33343(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 169 );
    pushFN( data, $statement_goto );
    return 107
}
function branch_cc486bca1d9c4ca4(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  switch  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '26:73 breakable_statement=>• switch_statement [ τswitch ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $switch_statement );
    return data.rules_ptr
}
function branch_cc4c5e6cbe6eece6(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  _ ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '162:510 hex_token=>τ0x hex_token_list_934 • hex_token_list_935 [ τ_ ]';
    '162:512 hex_token=>τ0x hex_token_list_934 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==95 ){
    pushFN( data, branch_146aa626b72c1bde );
    return branch_f404c99f127debc0( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '162:512 hex_token=>τ0x hex_token_list_934 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    add_reduce( state, data, 2, 229 );
    return 162
};
    return -1
}
function branch_cc6ae262e8f43c6c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $string_literal );
    return prod_start
}
function branch_cc7eb2232ea4cc9a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '138:437 element_list=>elision • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    pushFN( data, branch_aaa47be9c7a839c5 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_cca599bd618657ff(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  , }  ]';
    '17:42 export_clause=>τ{ export_clause_list_82 • τ, τ} [ τ, ]';
    '17:44 export_clause=>τ{ export_clause_list_82 • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    pushFN( data, branch_00a4c64bb3aae7a1 );
    return branch_e538f271e04f34cf( l, data, state, prod, prod_start )
} else if( l.current_byte ==125 ){
    pushFN( data, branch_00a4c64bb3aae7a1 );
    return branch_15899a2266db037b( l, data, state, prod, prod_start )
};
    return -1
}
function branch_ccd659abf5a7b67f(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $coalesce_expression_head_goto );
    return 83
}
function branch_cd331bf00d0398da(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { yield new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '22:52 statement_list_item=>• statement [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $statement );
    return data.rules_ptr
}
function branch_cd3972c0d4315502(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 145 );
    pushFN( data, $exponentiation_expression_goto );
    return 81
}
function branch_cd4d8c0d458cd02e(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 172 );
    pushFN( data, $assignment_expression_goto );
    return 109
}
function branch_cd5bf4ecf9c8925a(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '32:99 iteration_statement=>τfor τ( τ; expression τ; • τ) statement [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_55bf6fb2b8601d61 );
    pushFN( data, $statement );
    return data.rules_ptr
}
function branch_cdadc72de97fcb50(l, data, state, prod, prod_start){
    return 11
}
function branch_cdeb6f177ffa3d0f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '62:178 formal_parameters=>formal_parameter_list • τ, function_rest_parameter [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d549d4a884948b56 );
    pushFN( data, $function_rest_parameter );
    return data.rules_ptr
}
function branch_ce59cd51175952d8(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  = ) , ] } END_OF_PRODUCTION  ]';
    '126:409 single_name_binding=>binding_identifier • initializer [ τ= ]';
    '126:410 single_name_binding=>binding_identifier • [ τ), τ,, τ], τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==61 ){
    pushFN( data, branch_eb1b4cc888fc6573 );
    return branch_4a1febbf64e84dc7( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ) , ] } END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '126:410 single_name_binding=>binding_identifier • [ τ), τ,, τ], τ} ]';
    add_reduce( state, data, 1, 203 );
    return 126
};
    return -1
}
function branch_cf6f8487ea17d7f7(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 53 );
    return prod_start
}
function branch_cf9b0749c3f6f3d9(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  _ ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '162:509 hex_token=>τ0X hex_token_list_934 • hex_token_list_935 [ τ_ ]';
    '162:511 hex_token=>τ0X hex_token_list_934 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==95 ){
    pushFN( data, branch_146aa626b72c1bde );
    return branch_a80c37b16502984d( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '162:511 hex_token=>τ0X hex_token_list_934 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    add_reduce( state, data, 2, 229 );
    return 162
};
    return -1
}
function branch_cf9ddc2c961931ca(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  num  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '180:603 comments_list_6=>• θnum [ θnum ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 3 );
    return prod_start
}
function branch_cfdf9cad02979bdd(l, data, state, prod, prod_start){
    add_reduce( state, data, 8, 41 );
    return 32
}
function branch_cfed1dcd23cf06ff(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_d00ea468b9573e73(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  )  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '59:162 function_declaration=>τasync τfunction τ* binding_identifier τ( • τ) τ{ function_body τ} [ τ) ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_bed9c660069791a8 );
    pushFN( data, $function_body );
    return data.rules_ptr
};
    return -1
}
function branch_d034e70ccf98a691(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 221 );
    pushFN( data, $optional_expression_goto );
    return 83
}
function branch_d08e2115458ac083(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    return 192
}
function branch_d0ec7a6ef7bc63a9(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $exponentiation_expression_goto );
    return 83
};
    return -1
}
function branch_d12fc0b55475d671(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 173 );
    pushFN( data, $assignment_expression_goto );
    return 109
}
function branch_d133ee031fe22ca8(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '147:459 template_middle=>τ} • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
    pushFN( data, branch_e4a74975ed72c88e );
    pushFN( data, $no_substitute_template_list_846 );
    return data.rules_ptr
}
function branch_d173572c617b4a2e(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_ed585fd597b98d3e );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_d1a87dbed634b2bf(l, data, state, prod, prod_start){
    pushFN( data, $expression_goto );
    return 80
}
function branch_d1cc19f7ce1ec6c6(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 248 );
    pushFN( data, $hex_token_list_935_goto );
    return 195
}
function branch_d1e7b4189e31a643(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 6, 99 );
    return prod_start
};
    return -1
}
function branch_d1f960014973cab0(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ` ${  ]';
    '142:450 no_substitute_template=>τ` no_substitute_template_list_846 • τ` [ τ` ]';
    '146:457 template_head=>τ` no_substitute_template_list_846 • τ${ [ τ${ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==96 ){
    pushFN( data, branch_6e7f74fd0cc7db23 );
    return branch_4d0ed4e9ef1d6340( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 47, 2, 2 ) ){
    pushFN( data, branch_4c1f03655a1ccdf2 );
    return branch_7c3bc3e67acae729( l, data, state, prod, prod_start )
};
    return -1
}
function branch_d200bd151f0bb41c(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 247 );
    return 185
}
function branch_d20768be087c69c4(l, data, state, prod, prod_start){
    pushFN( data, $exponentiation_expression_goto );
    return 160
}
function branch_d298b107faacc2eb(l, data, state, prod, prod_start){
    pushFN( data, $import_specifier_goto );
    return 13
}
function branch_d2d88e206473b12b(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 174 );
    pushFN( data, $short_circuit_expression_goto );
    return 110
}
function branch_d35c8593c21c363d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  0  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '196:659 binary_token_list_941=>binary_token_list_941 • τ0 [ τ0 ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_d411ef7636fb91a0(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 248 );
    pushFN( data, $regular_expression_literal_list_884_goto );
    return 190
}
function branch_d47b6a0a8e8f4839(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '131:422 property_definition=>• τ... assignment_expression [ τ... ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_9d856643df8ef910 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_d507770cdffa3d28(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 178
}
function branch_d549d4a884948b56(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 103 );
    return prod_start
}
function branch_d5698a87fe206b85(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ;  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '76:216 class_body=>• τ; [ τ; ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 122 );
    return prod_start
}
function branch_d5ab93ba756dcda8(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 161 );
    return prod_start
};
    return -1
}
function branch_d5ae766ac3614f87(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 239 );
    return prod_start
}
function branch_d5d1a69f0eaea9aa(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 154 );
    pushFN( data, $left_hand_side_expression_goto );
    return 88
}
function branch_d6b1b3359673b8da(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 208 );
    return 134
};
    return -1
}
function branch_d6d42c9c08735146(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  , _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '120:391 array_binding_pattern=>τ[ • binding_element_list τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_f04c0eab8795988d );
    pushFN( data, $binding_element_list );
    return data.rules_ptr
}
function branch_d72fb3a22dcd719b(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    return 201
}
function branch_d7bafdc788a3484a(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    pushFN( data, $formal_parameter_list_goto );
    return 63
}
function branch_d7fdd85038dfaf4e(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 5 );
    return prod_start
}
function branch_d8334662b9edd031(l, data, state, prod, prod_start){
    pushFN( data, $statement_goto );
    return 101
}
function branch_d8597203556ce7e8(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_62b08ab2dd8e10ec );
    pushFN( data, $template_spans );
    return data.rules_ptr
}
function branch_d87fc1bdd7525a62(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '11:26 named_imports=>τ{ • τ, τ} [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 13 );
    return prod_start
};
    return -1
}
function branch_d890621730ff66c9(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 178 );
    return 114
}
function branch_d8a8aa453ec53718(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 79 );
    return prod_start
}
function branch_d8bc879323c7c818(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  _ ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '164:518 octal_token=>τ0o octal_token_list_948 • octal_token_list_949 [ τ_ ]';
    '164:520 octal_token=>τ0o octal_token_list_948 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==95 ){
    pushFN( data, branch_f006afcfed60bdeb );
    return branch_5a2dc7112f69e41d( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '164:520 octal_token=>τ0o octal_token_list_948 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    add_reduce( state, data, 2, 229 );
    return 164
};
    return -1
}
function branch_d8c8486e6a723863(l, data, state, prod, prod_start){
    return 150
}
function branch_d8ce0fbb04f18e6a(l, data, state, prod, prod_start){
    pushFN( data, $optional_expression_goto );
    return 161
}
function branch_d9bfad00f871c280(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  "  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $string_literal );
    return prod_start
}
function branch_d9ffc1012de7821e(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  = ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
    '58:155 lexical_binding=>binding_identifier • [ τ;, τ}-ns, θnl, END_OF_FILE, τ, ]';
    '58:156 lexical_binding=>binding_identifier • initializer [ τ= ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==61 ){
    pushFN( data, branch_e5ebfd002841a52f );
    return branch_950ac62eb8debea8( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '58:155 lexical_binding=>binding_identifier • [ τ;, τ}-ns, θnl, END_OF_FILE, τ, ]';
    return 58
};
    return -1
}
function branch_da08cfeb027003d0(l, data, state, prod, prod_start){
    add_reduce( state, data, 6, 48 );
    return 32
}
function branch_da12f6c88f41c59d(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 73 );
    return prod_start
}
function branch_da21194c7fb6a833(l, data, state, prod, prod_start){
    pushFN( data, $bitwise_and_expression_goto );
    return 107
}
function branch_da2a7411d5ce242e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ^  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '106:333 bitwise_xor_expression=>bitwise_xor_expression • τ^ bitwise_and_expression [ τ^ ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_72ec2c6b149c2afd );
    pushFN( data, $bitwise_and_expression );
    return data.rules_ptr
}
function branch_da500a62ec64185f(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  finally else while { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do for switch continue break return with throw try debugger class function let const } default case export END_OF_FILE END_OF_PRODUCTION  ]';
    '47:136 try_statement=>τtry block catch • [ τelse, τwhile, τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, τ}, τdefault, τcase, τexport ]';
    '47:138 try_statement=>τtry block catch • finally [ τfinally ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 211, 7, 7 ) ){
    pushFN( data, branch_267864f3c17107a4 );
    return branch_0c3ff712fd67ee0c( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  else while { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do for switch continue break return with throw try debugger class function let const } default case export END_OF_FILE END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '47:136 try_statement=>τtry block catch • [ τelse, τwhile, τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, τ}, τdefault, τcase, τexport ]';
    add_reduce( state, data, 3, 72 );
    return 47
};
    return -1
}
function branch_da5ad61df92205e2(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '73:197 class_declaration=>τclass binding_identifier class_heritage • τ{ class_body τ} [ τ{ ]';
    '73:200 class_declaration=>τclass binding_identifier class_heritage • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==123 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ; }  ]';
    '73:197 class_declaration=>τclass binding_identifier class_heritage τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    '73:200 class_declaration=>τclass binding_identifier class_heritage τ{ • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8000494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_26bc95062ea8884a );
        return branch_f127dd1b3d362fe8( l, data, state, prod, prod_start )
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_26bc95062ea8884a );
        return branch_f800724c958977a7( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_da5b451dc6b865ec(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 93
}
function branch_da6445717b572904(l, data, state, prod, prod_start){
    pushFN( data, $numeric_literal_goto );
    return 161
}
function branch_da77cf0f2dea6af0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  class  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '16:39 export_declaration=>τexport τdefault • class_declaration [ τclass ]';
    pushFN( data, branch_98d591e757a88ccf );
    pushFN( data, $class_declaration );
    return data.rules_ptr
}
function branch_db263beaadc60f64(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '151:473 regular_expression_literal=>τ/ regular_expression_literal_list_884 τ/ • default_productions__js_identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_9652f92cf1ae5ae9 );
    pushFN( data, $default_productions__js_identifier );
    return data.rules_ptr
}
function branch_db79e982b7f4c04c(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  . E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
    '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
    '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    switch(sym_map_17f19144665ebbf8( l, data )){
    case 0: 
    {
        'Number of end groups1 [    ]';
        'All symbols [  num _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
        '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
        var pk = l.copyInPlace(  );
        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
        if( pk.isNum( data ) ){
            pushFN( data, branch_6660a60ef0746aa7 );
            return branch_731d73028155c3d7( l, data, state, prod, prod_start )
        } else {
            '"--LEAF--"';
            'Leaf [  _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
            '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
            add_reduce( state, data, 1, 238 );
            return 160
        }
    }
    default:
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , . END_OF_PRODUCTION  ]';
        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
        add_reduce( state, data, 1, 238 );
        return 160
    }
};
    return -1
}
function branch_dbf943dd42defe52(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  = ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
    '54:147 variable_declaration=>binding_identifier • initializer [ τ= ]';
    '54:148 variable_declaration=>binding_identifier • [ τ;, τ}-ns, θnl, END_OF_FILE, τ, ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==61 ){
    pushFN( data, branch_7c730e10496da020 );
    return branch_97e341667384df57( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '54:148 variable_declaration=>binding_identifier • [ τ;, τ}-ns, θnl, END_OF_FILE, τ, ]';
    return 54
};
    return -1
}
function branch_dc117bd4153e8435(l, data, state, prod, prod_start){
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_608cc47398532a71 );
    pushFN( data, $asi );
    return data.rules_ptr
}
function branch_dc1c146f68074b73(l, data, state, prod, prod_start){
    return 191
}
function branch_dc675b2e10ca0146(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 221 );
    pushFN( data, $coalesce_expression_head_goto );
    return 83
}
function branch_dc7e3219843fd275(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 100 );
    pushFN( data, $coalesce_expression_head_goto );
    return 83
}
function branch_dcc9d0b83d080569(l, data, state, prod, prod_start){
    pushFN( data, $call_expression_goto );
    return 88
}
function branch_dd302aa7894f8ec0(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 9, 87 );
    return prod_start
};
    return -1
}
function branch_dd44dc2df82082c5(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_7ea4569a429fb3e7 );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_dd7b97b8fa5ae7ce(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 211 );
    return 137
};
    return -1
}
function branch_ddcc2cfa16116ef3(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 236 );
    pushFN( data, $short_circuit_expression_goto );
    return 83
}
function branch_de3aafe2070e3d43(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    add_reduce( state, data, 1, 236 );
    pushFN( data, $numeric_literal_goto );
    return 157
}
function branch_de45d9aed2978ab5(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 181 );
    return 114
}
function branch_de816431541d5c16(l, data, state, prod, prod_start){
    pushFN( data, $binding_property_goto );
    return 178
}
function branch_de88964c52e1b255(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 177 );
    pushFN( data, $assignment_expression_goto );
    return 112
}
function branch_dea6c0aed6ca6684(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ;  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '73:199 class_declaration=>τclass binding_identifier τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    pushFN( data, branch_142c572bdf7f50ac );
    pushFN( data, $class_body );
    return data.rules_ptr
}
function branch_ded893b92fe51418(l, data, state, prod, prod_start){
    return 8
}
function branch_ded95ac80bdee06b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '129:414 object_literal=>τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 205 );
    return prod_start
}
function branch_deeebd91d60a5089(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '59:161 function_declaration=>• τasync τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    pushFN( data, branch_5825b052c229716c );
    pushFN( data, $function_declaration );
    return prod_start
}
function branch_df0ba29542cfa265(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  } ,  ]';
    '119:387 object_binding_pattern=>τ{ binding_property_list • τ} [ τ} ]';
    '119:388 object_binding_pattern=>τ{ binding_property_list • τ, binding_rest_property τ} [ τ, ]';
    '119:389 object_binding_pattern=>τ{ binding_property_list • τ, τ} [ τ, ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==125 ){
    pushFN( data, branch_1e3776334c2e9421 );
    return branch_797b0cb0ecbcec79( l, data, state, prod, prod_start )
} else if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  ... }  ]';
    '119:388 object_binding_pattern=>τ{ binding_property_list • τ, binding_rest_property τ} [ τ, ]';
    '119:389 object_binding_pattern=>τ{ binding_property_list • τ, τ} [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 16, 3, 3 ) ){
        pushFN( data, branch_1e3776334c2e9421 );
        return branch_2516ffd54f409b1b( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_1e3776334c2e9421 );
        return branch_f87c0dfe30a05013( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_df285dd1774f9593(l, data, state, prod, prod_start){
    pushFN( data, $element_list_goto );
    return 138
}
function branch_df67e6537aa8c73e(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 7, 95 );
    return prod_start
};
    return -1
}
function branch_dfb62cae764add69(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  num  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $int_token );
    return prod_start
}
function branch_dfe24944e7452335(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 165 );
    return prod_start
}
function branch_e0296abd228620e4(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  _ ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '163:514 binary_token=>τ0b binary_token_list_941 • binary_token_list_942 [ τ_ ]';
    '163:516 binary_token=>τ0b binary_token_list_941 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==95 ){
    pushFN( data, branch_abffcb1d655912dd );
    return branch_9f766ab8fb21c11f( l, data, state, prod, prod_start )
} else {
    '"--LEAF--"';
    'Leaf [  ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '163:516 binary_token=>τ0b binary_token_list_941 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    add_reduce( state, data, 2, 229 );
    return 163
};
    return -1
}
function branch_e055954bae76a92a(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ) ,  ]';
    '117:382 parenthesized=>τ( expression • τ) [ τ) ]';
    '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, τ) [ τ, ]';
    '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ, ]';
    '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ, ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==41 ){
    pushFN( data, branch_6877ced5aeea492c );
    return branch_2602dec1a0ddf093( l, data, state, prod, prod_start )
} else if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  ) ...  ]';
    '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, τ) [ τ, ]';
    '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ, ]';
    '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==41 ){
        pushFN( data, branch_fb3c66c25059a7cc );
        return branch_29b51b30c64492b0( l, data, state, prod, prod_start )
    } else {
        'Number of end groups0 [    ]';
        'All symbols [  _ $ id { [  ]';
        '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ, ]';
        '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ, ]';
        skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
        if( pk.current_byte ==95||pk.current_byte  == 36 || pk.isUniID( data ) ){
            pushFN( data, branch_fb3c66c25059a7cc );
            return branch_3be50e5ba84a7ce5( l, data, state, prod, prod_start )
        } else {
            pushFN( data, branch_fb3c66c25059a7cc );
            return branch_451b8f8fe4234778( l, data, state, prod, prod_start )
        }
    }
};
    return -1
}
function branch_e1257d1e9387cec6(l, data, state, prod, prod_start){
    pushFN( data, $left_hand_side_expression_goto );
    return 88
}
function branch_e15dc418632e6208(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 8, 90 );
    return prod_start
};
    return -1
}
function branch_e194ade8a727c95b(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ( .  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '6:15 module_item=>• statement_list_item [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $statement_list_item );
    return data.rules_ptr
}
function branch_e1cbe10a4d1d95af(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 149 );
    pushFN( data, $coalesce_expression_head_goto );
    return 83
}
function branch_e260de290d6adf96(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 154 );
    pushFN( data, $statement_goto );
    return 88
}
function branch_e2a0bd47a89f1b39(l, data, state, prod, prod_start){
    pushFN( data, $hex_token_list_935_goto );
    return 195
}
function branch_e2d224f990ccf4b6(l, data, state, prod, prod_start){
    return 64
}
function branch_e3c0383220c4c358(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '120:393 array_binding_pattern=>τ[ • binding_rest_element τ] [ τ... ]';
    pushFN( data, branch_4ff8c3e05be8ff85 );
    pushFN( data, $binding_rest_element );
    return data.rules_ptr
}
function branch_e40b9d5707a0a2b9(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 236 );
    pushFN( data, $exponentiation_expression_goto );
    return 83
}
function branch_e4351d8993285190(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  )  ]';
    '78:228 method_definition=>property_name τ( unique_formal_parameters • τ) τ{ function_body τ} [ τ) ]';
    '78:235 method_definition=>property_name τ( unique_formal_parameters • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==41 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '78:228 method_definition=>property_name τ( unique_formal_parameters τ) • τ{ function_body τ} [ τ{ ]';
    '78:235 method_definition=>property_name τ( unique_formal_parameters τ) • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==123 ){
        consume( l, data, state );
        'Number of end groups0 [    ]';
        'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
        '78:228 method_definition=>property_name τ( unique_formal_parameters τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
        '78:235 method_definition=>property_name τ( unique_formal_parameters τ) τ{ • τ} [ τ} ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        switch(sym_map_deb09f8b969b503a( l, data )){
            case 0: 
            {
                '"--LEAF--"';
                'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                '78:228 method_definition=>property_name τ( unique_formal_parameters τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                pushFN( data, branch_f7a377846b1dbd78 );
                pushFN( data, $function_body );
                return data.rules_ptr
            }
            case 1: 
            {
                '"--LEAF--"';
                'Leaf [  }  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '78:235 method_definition=>property_name τ( unique_formal_parameters τ) τ{ • τ} [ τ} ]';
                consume( l, data, state );
                add_reduce( state, data, 6, 140 );
                pushFN( data, $property_definition_goto );
                return 131
            }
            default: 
            break
        }
    }
};
    return -1
}
function branch_e45aa88f8f564c73(l, data, state, prod, prod_start){
    pushFN( data, $left_hand_side_expression_goto );
    return 93
}
function branch_e46c1e61f91ef88e(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 83
}
function branch_e480ed3538513854(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id * { " "  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '6:13 module_item=>• import_declaration [ τimport ]';
    pushFN( data, branch_d7fdd85038dfaf4e );
    pushFN( data, $import_declaration );
    return data.rules_ptr
}
function branch_e499b7acc656bd04(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    add_reduce( state, data, 1, 236 );
    pushFN( data, $exponentiation_expression_goto );
    return 83
}
function branch_e4a74975ed72c88e(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 47, 2, 2 ) )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 225 );
    return prod_start
};
    return -1
}
function branch_e4afa0eac698598a(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 172 );
    pushFN( data, $relational_expression_goto );
    return 109
}
function branch_e4e28f9340f72cb7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '50:141 catch_parameter=>• binding_identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $binding_identifier );
    return data.rules_ptr
}
function branch_e50720a172b5793e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  */  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '2:4 comments=>• τ/* τ*/ [ τ/* ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 186, 2, 2 ) )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 2 );
    return prod_start
};
    return -1
}
function branch_e538f271e04f34cf(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '17:42 export_clause=>τ{ export_clause_list_82 • τ, τ} [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 23 );
    return prod_start
};
    return -1
}
function branch_e53975ca46a7cc6a(l, data, state, prod, prod_start){
    pushFN( data, $elision_goto );
    return 139
}
function branch_e55b5ef3fb17f969(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 77 );
    return 51
}
function branch_e57d9f545dfe61b0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  "  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==39 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 2, 235 );
    return prod_start
};
    return -1
}
function branch_e5862ccf364c2597(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '32:100 iteration_statement=>τfor τ( expression τ; τ; • expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_651d80f73d9b3035 );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_e5b05349fe7e0ae6(l, data, state, prod, prod_start){
    return 2
}
function branch_e5c96f196acc5dda(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  , _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '120:395 array_binding_pattern=>τ[ • binding_element_list τ, binding_rest_element τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_443881d830e8161d );
    pushFN( data, $binding_element_list );
    return data.rules_ptr
}
function branch_e5ebfd002841a52f(l, data, state, prod, prod_start){
    return 58
}
function branch_e64d3c2398b2214f(l, data, state, prod, prod_start){
    pushFN( data, $template_spans_goto );
    return 144
}
function branch_e6590cc2db9ebd5c(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 5, 213 );
    return prod_start
};
    return -1
}
function branch_e6a6b620a201fe45(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  let const  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '32:86 iteration_statement=>τfor τawait τ( • for_declaration τof expression τ) statement [ τlet, τconst ]';
    pushFN( data, branch_73c92684fe594ec0 );
    pushFN( data, $for_declaration );
    return data.rules_ptr
}
function branch_e6b6066030cfb5e6(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 115
}
function branch_e6b9b19f80bfe3b3(l, data, state, prod, prod_start){
    pushFN( data, $statement_goto );
    return 106
}
function branch_e6c47e56add41094(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 170 );
    pushFN( data, $equality_expression_goto );
    return 108
}
function branch_e6e253809906aca1(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_93008e248d6d3173 );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_e6ebddcb9698043f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  sym ws id num  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '2:3 comments=>• τ// comments_list_6 θnl [ τ// ]';
    consume( l, data, state );
    skip_1cde7ea7398d3d72( l/*[ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_71ef319f9900dc2d );
    pushFN( data, $comments_list_6 );
    return data.rules_ptr
}
function branch_e6ee630862831318(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 229 );
    add_reduce( state, data, 1, 236 );
    pushFN( data, $assignment_expression_goto );
    return 83
}
function branch_e7f77895561bda1d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '197:661 binary_token_list_942=>binary_token_list_942 • binary_token_list_942_group_1173_0_ [ τ_ ]';
    pushFN( data, branch_cfed1dcd23cf06ff );
    pushFN( data, $binary_token_list_942_group_1173_0_ );
    return data.rules_ptr
}
function branch_e802b4c1af0574e3(l, data, state, prod, prod_start){
    pushFN( data, $logical_or_expression_goto );
    return 101
}
function branch_e80a8071760f9de0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  . n E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE ,  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '161:508 int_token=>• θnum [ θnum ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $int_token );
    return prod_start
}
function branch_e8143a123edd7513(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '129:415 object_literal=>τ{ property_definition_list • τ, τ} [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 206 );
    return prod_start
};
    return -1
}
function branch_e8290ed3897122c9(l, data, state, prod, prod_start){
    pushFN( data, $optional_expression_goto );
    return 160
}
function branch_e8488cef504bbb24(l, data, state, prod, prod_start){
    return 154
}
function branch_e8981f5178969b15(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:107 iteration_statement=>τfor τ( • expression τ; τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_963f86c5c202dc6a );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_e89a0fdfbb80346e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { yield async new ( super this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '6:15 module_item=>• statement_list_item [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $statement_list_item );
    return data.rules_ptr
}
function branch_e8ad9c022e66dc7f(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_35b86235e665224f );
        pushFN( data, $function_body );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_e8add643c37cdf08(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 170 );
    pushFN( data, $short_circuit_expression_goto );
    return 108
}
function branch_e91daffe9c760941(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  .  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '86:258 import_meta=>τimport • τ. τmeta [ τ. ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 162, 4, 4 ) )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 152 );
    return prod_start
};
    return -1
}
function branch_e9349898d2d19110(l, data, state, prod, prod_start){
    return 69
}
function branch_e963930ac36dbf77(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 161
}
function branch_e9970cdfd6b59ec4(l, data, state, prod, prod_start){
    pushFN( data, $property_definition_goto );
    return 160
}
function branch_ea14de050ba65915(l, data, state, prod, prod_start){
    add_reduce( state, data, 7, 37 );
    return 32
}
function branch_ea608060f125d775(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 207 );
    return prod_start
}
function branch_eafc251b0e3f8f6b(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 155 );
    pushFN( data, $exponentiation_expression_goto );
    return 88
}
function branch_eb1b4cc888fc6573(l, data, state, prod, prod_start){
    return 126
}
function branch_eb24acd1de24be3d(l, data, state, prod, prod_start){
    return 56
}
function branch_eb26208817ad0d1d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  num  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '150:472 template_escaped_sequence=>τf:s • θnum [ θnum ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 229 );
    return prod_start
}
function branch_eb47d1d465c15b6c(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 8, 128 );
    return 78
};
    return -1
}
function branch_eb56b36631008710(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  .  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_c225dfa353bb6999 );
    pushFN( data, $identifier_name );
    return data.rules_ptr
}
function branch_eb8bce61b57ac72e(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==34 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 234 );
    return prod_start
};
    return -1
}
function branch_ec51a880ef448577(l, data, state, prod, prod_start){
    return 61
}
function branch_ec7c6bd9017b2d5f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '74:212 class_expression=>τclass τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 3, 120 );
    return prod_start
}
function branch_ecfd1bb731a87e4f(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $short_circuit_expression_goto );
    return 88
}
function branch_ed585fd597b98d3e(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 222 );
    pushFN( data, $template_spans_goto );
    return 145
}
function branch_ed906ec182c64909(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 154 );
    pushFN( data, $exponentiation_expression_goto );
    return 88
}
function branch_edb5415aafd33095(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '80:240 expression=>expression • τ, assignment_expression [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a081f407a44b4019 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_edbb4092a5517341(l, data, state, prod, prod_start){
    pushFN( data, $binding_property_goto );
    return 124
}
function branch_eddcfebd5c3a90d8(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ;  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '74:207 class_expression=>τclass binding_identifier τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    pushFN( data, branch_142c572bdf7f50ac );
    pushFN( data, $class_body );
    return data.rules_ptr
}
function branch_ee27da02167f6aa5(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 81 );
    return 55
}
function branch_ee57f7cf916526c7(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  E e ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
    '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
    '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    switch(sym_map_e32b08cd3c718e6b( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  E e  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
        pushFN( data, branch_279ca809e55e95cf );
        pushFN( data, $scientific_token_group_923_0_ );
        return data.rules_ptr
    }
    default:
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
        '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
        add_reduce( state, data, 1, 238 );
        return 159
    }
};
    return -1
}
function branch_eeca18e228c2817a(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 199 );
    return prod_start
}
function branch_ef4eb1670baf68c5(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_31f8d9aa8cd41130 );
    pushFN( data, $template_spans );
    return data.rules_ptr
}
function branch_ef9a43dcec5d9b00(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { yield new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '46:134 labeled_item=>• statement [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $statement );
    return data.rules_ptr
}
function branch_efd73b3af71c906a(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_b7a0719500ee70d4 );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_f006afcfed60bdeb(l, data, state, prod, prod_start){
    return 164
}
function branch_f04c0eab8795988d(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 193 );
    return 120
};
    return -1
}
function branch_f050e8459e97a276(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 155 );
    pushFN( data, $optional_expression_goto );
    return 88
}
function branch_f05134d99cca1b7e(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ` ${  ]';
    '142:450 no_substitute_template=>τ` no_substitute_template_list_846 • τ` [ τ` ]';
    '146:457 template_head=>τ` no_substitute_template_list_846 • τ${ [ τ${ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==96 ){
    pushFN( data, branch_25d782bed23c8e5b );
    return branch_4d0ed4e9ef1d6340( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 47, 2, 2 ) ){
    pushFN( data, branch_164d30571dd79823 );
    return branch_7c3bc3e67acae729( l, data, state, prod, prod_start )
};
    return -1
}
function branch_f0c3bcb79d8e42d6(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ?.  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '93:279 optional_expression=>optional_expression • optional_chain [ τ?. ]';
    pushFN( data, branch_631bcebe99ec947a );
    pushFN( data, $optional_chain );
    return data.rules_ptr
}
function branch_f1203093171798af(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_8dd620f1cb36e785 );
    pushFN( data, $statement );
    return data.rules_ptr
};
    return -1
}
function branch_f127dd1b3d362fe8(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ;  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '73:197 class_declaration=>τclass binding_identifier class_heritage τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    pushFN( data, branch_8a2307b8b683ecc3 );
    pushFN( data, $class_body );
    return data.rules_ptr
}
function branch_f13f0af48bc9d6d7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '73:202 class_declaration=>τclass class_heritage τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 4, 118 );
    return prod_start
}
function branch_f1e7f2f66efd6388(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 8, 94 );
    return prod_start
};
    return -1
}
function branch_f20b9015e5517e41(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 155 );
    pushFN( data, $statement_goto );
    return 88
}
function branch_f275ba8ec12a12d2(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '44:131 default_clause=>τdefault τ: • statement_list [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_c06e8e4cff965411 );
    pushFN( data, $statement_list );
    return data.rules_ptr
}
function branch_f278419e8e000e01(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  )  ]';
    '78:219 method_definition=>τasync τ* property_name τ( unique_formal_parameters • τ) τ{ function_body τ} [ τ) ]';
    '78:225 method_definition=>τasync τ* property_name τ( unique_formal_parameters • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==41 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '78:219 method_definition=>τasync τ* property_name τ( unique_formal_parameters τ) • τ{ function_body τ} [ τ{ ]';
    '78:225 method_definition=>τasync τ* property_name τ( unique_formal_parameters τ) • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==123 ){
        consume( l, data, state );
        'Number of end groups0 [    ]';
        'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
        '78:219 method_definition=>τasync τ* property_name τ( unique_formal_parameters τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
        '78:225 method_definition=>τasync τ* property_name τ( unique_formal_parameters τ) τ{ • τ} [ τ} ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        switch(sym_map_deb09f8b969b503a( l, data )){
            case 0: 
            {
                '"--LEAF--"';
                'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                '78:219 method_definition=>τasync τ* property_name τ( unique_formal_parameters τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                pushFN( data, branch_3d7430464df9ddf2 );
                pushFN( data, $function_body );
                return data.rules_ptr
            }
            case 1: 
            {
                '"--LEAF--"';
                'Leaf [  }  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '78:225 method_definition=>τasync τ* property_name τ( unique_formal_parameters τ) τ{ • τ} [ τ} ]';
                consume( l, data, state );
                add_reduce( state, data, 8, 130 );
                return 78
            }
            default: 
            break
        }
    }
};
    return -1
}
function branch_f29cd69de989b868(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  id  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '180:605 comments_list_6=>comments_list_6 • θid [ θid ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 4 );
    return prod_start
}
function branch_f2ac1d2e1a99c25e(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $assignment_expression_goto );
    return 83
}
function branch_f32878feee62efe7(l, data, state, prod, prod_start){
    pushFN( data, $statement_goto );
    return 112
}
function branch_f344909ab1cf45ab(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 5, 196 );
    return prod_start
};
    return -1
}
function branch_f3635dfa7178f6ca(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ]  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '120:398 array_binding_pattern=>τ[ binding_element_list • τ, τ] [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 193 );
    return prod_start
};
    return -1
}
function branch_f3973e73f32e5d52(l, data, state, prod, prod_start){
    return 148
}
function branch_f3aa427af16aca42(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 155 );
    return prod_start
}
function branch_f3bc4ca51835f11e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_102eb2d46ad5eb43 );
    pushFN( data, $member_expression );
    return data.rules_ptr
}
function branch_f3d00008ff85d550(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '199:679 octal_token_list_949=>octal_token_list_949 • octal_token_list_949_group_1206_0_ [ τ_ ]';
    pushFN( data, branch_cfed1dcd23cf06ff );
    pushFN( data, $octal_token_list_949_group_1206_0_ );
    return data.rules_ptr
}
function branch_f404c99f127debc0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '162:510 hex_token=>τ0x hex_token_list_934 • hex_token_list_935 [ τ_ ]';
    pushFN( data, branch_d5ae766ac3614f87 );
    pushFN( data, $hex_token_list_935 );
    return data.rules_ptr
}
function branch_f4104cb39d890b9f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  , _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '120:392 array_binding_pattern=>τ[ • binding_element_list τ, elision binding_rest_element τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_11629f8bfa59afd5 );
    pushFN( data, $binding_element_list );
    return data.rules_ptr
}
function branch_f4542e9d998a2e40(l, data, state, prod, prod_start){
    pushFN( data, $coalesce_expression_head_goto );
    return 83
}
function branch_f498972a3e5d12ea(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_dd44dc2df82082c5 );
    pushFN( data, $member_expression );
    return data.rules_ptr
}
function branch_f4cf12b83ff8642e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '69:191 arrow_function=>• arrow_parameters τ=> concise_body [ τ_, τ$, θid, τ( ]';
    pushFN( data, branch_82c659ce54fae82f );
    pushFN( data, $arrow_parameters );
    return data.rules_ptr
}
function branch_f4f4b78e0efcb7d8(l, data, state, prod, prod_start){
    return 137
}
function branch_f521244a1095ec71(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $coalesce_expression_head_goto );
    return 88
};
    return -1
}
function branch_f57d9120edc2ddc7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id { [  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '123:404 binding_elision_element=>• binding_element [ τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_46d539f60c6e4574 );
    pushFN( data, $binding_element );
    return data.rules_ptr
}
function branch_f5a8bf951ce30b1d(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  [  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_8f24bf7171e31ffc );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_f5b80fc4b5e01bb9(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 222 );
    pushFN( data, $template_middle_list_goto );
    return 145
}
function branch_f5c910a4cc54a43b(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==93 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 146 );
    pushFN( data, $assignment_expression_goto );
    return 83
};
    return -1
}
function branch_f5c9fb70f730cb3d(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 2 );
    return 1
}
function branch_f614985ddbe9ef4e(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 160 );
    pushFN( data, $coalesce_expression_head_goto );
    return 93
}
function branch_f63d2f691bb3b521(l, data, state, prod, prod_start){
    pushFN( data, $short_circuit_expression_goto );
    return 106
}
function branch_f681470690f6dd9c(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 110 );
    return prod_start
}
function branch_f7a377846b1dbd78(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 7, 133 );
    pushFN( data, $property_definition_goto );
    return 131
};
    return -1
}
function branch_f7b034d99ea40d10(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 177 );
    pushFN( data, $short_circuit_expression_goto );
    return 112
}
function branch_f7c69e1c5b2c487f(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '83:247 member_expression=>• primary_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ( ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $primary_expression );
    return data.rules_ptr
}
function branch_f7e4f660ad7745a2(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $coalesce_expression_head_goto );
    return 88
}
function branch_f800724c958977a7(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '73:200 class_declaration=>τclass binding_identifier class_heritage τ{ • τ} [ τ} ]';
    consume( l, data, state );
    add_reduce( state, data, 5, 116 );
    return prod_start
}
function branch_f81b6d8195412112(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 112 );
    pushFN( data, $optional_expression_goto );
    return 88
}
function branch_f81e7563876bd527(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 7, 96 );
    return prod_start
};
    return -1
}
function branch_f87c0dfe30a05013(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '119:389 object_binding_pattern=>τ{ binding_property_list • τ, τ} [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 4, 190 );
    return prod_start
};
    return -1
}
function branch_f8cf21f2f6970ad0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '139:446 elision=>elision • τ, [ τ, ]';
    consume( l, data, state );
    add_reduce( state, data, 2, 218 );
    return prod_start
}
function branch_f92274a08f46f28c(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 3, 111 );
    return prod_start
};
    return -1
}
function branch_f931b9f0be377797(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  &  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '107:335 bitwise_and_expression=>bitwise_and_expression • τ& equality_expression [ τ& ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_72ec2c6b149c2afd );
    pushFN( data, $equality_expression );
    return data.rules_ptr
}
function branch_f93c48f2271db4a5(l, data, state, prod, prod_start){
    add_reduce( state, data, 1, 3 );
    pushFN( data, $binding_list_goto );
    return 57
}
function branch_f96ad7874d923b78(l, data, state, prod, prod_start){
    'Number of end groups1 [    ]';
    'All symbols [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
    {
    '"--LEAF--"';
    'Leaf [  nl ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
    '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
    pushFN( data, $statement_goto );
    return 115
}
}
function branch_f97730c42ee82415(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  {  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '8:20 import_clause=>• named_imports [ τ{ ]';
    pushFN( data, branch_2df431db2fabf592 );
    pushFN( data, $named_imports );
    return data.rules_ptr
}
function branch_f98e24841530bcaa(l, data, state, prod, prod_start){
    add_reduce( state, data, 4, 19 );
    return prod_start
}
function branch_f99f884d34cbc1c2(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==125 )&&consume( l, data, state ) ) ) ){
    add_reduce( state, data, 7, 97 );
    return prod_start
};
    return -1
}
function branch_f9f5b011e0795f63(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  true  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '166:522 boolean_literal=>• τtrue [ τtrue ]';
    consume( l, data, state );
    add_reduce( state, data, 1, 241 );
    return prod_start
}
function branch_f9fbf679d6fa826f(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 171 );
    pushFN( data, $relational_expression_goto );
    return 109
}
function branch_fa05bbdac649d03b(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 204 );
    return 127
}
function branch_fa1aab05a5ccafdc(l, data, state, prod, prod_start){
    add_reduce( state, data, 7, 42 );
    return 32
}
function branch_fa2d3a36b2c0976c(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '189:618 no_substitute_template_list_846=>no_substitute_template_list_846 • template_string_data [ θnl, θws, θsym, θnum, θid, τf:s ]';
    pushFN( data, branch_cfed1dcd23cf06ff );
    pushFN( data, $template_string_data );
    return data.rules_ptr
}
function branch_faa1149e296799b8(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '32:103 iteration_statement=>τfor τ( • iteration_statement_group_189_1_ τof expression τ) statement [ τvar ]';
    pushFN( data, branch_31eeb0d769052e81 );
    pushFN( data, $iteration_statement_group_189_1_ );
    return data.rules_ptr
}
function branch_fad62b864c17de6d(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  ;  ]';
    '32:88 iteration_statement=>τfor τ( expression τ; expression • τ; expression τ) statement [ τ; ]';
    '32:101 iteration_statement=>τfor τ( expression τ; expression • τ; τ) statement [ τ; ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==59 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- )  ]';
    '32:88 iteration_statement=>τfor τ( expression τ; expression τ; • expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '32:101 iteration_statement=>τfor τ( expression τ; expression τ; • τ) statement [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_8e45f000096e2702 );
        return branch_ff5bd76cf1000169( l, data, state, prod, prod_start )
    } else if( l.current_byte ==41 ){
        pushFN( data, branch_8e45f000096e2702 );
        return branch_6acbe4c257998c87( l, data, state, prod, prod_start )
    }
};
    return -1
}
function branch_fae227a5b594d9fa(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '119:386 object_binding_pattern=>τ{ • binding_rest_property τ} [ τ... ]';
    pushFN( data, branch_2755a0e6fa959baa );
    pushFN( data, $binding_rest_property );
    return data.rules_ptr
}
function branch_fb3269af3f9fbbe2(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '36:113 break_statement=>τbreak • label_identifier asi [ τ_, τ$, θid ]';
    pushFN( data, branch_404abfa56085bc54 );
    pushFN( data, $label_identifier );
    return data.rules_ptr
}
function branch_fb3c66c25059a7cc(l, data, state, prod, prod_start){
    pushFN( data, $assignment_expression_goto );
    return 70
}
function branch_fb3da76dfbe615f1(l, data, state, prod, prod_start){
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '78:223 method_definition=>τ* property_name • τ( unique_formal_parameters τ) τ{ function_body τ} [ τ( ]';
    '78:231 method_definition=>τ* property_name • τ( τ) τ{ function_body τ} [ τ( ]';
    '78:232 method_definition=>τ* property_name • τ( unique_formal_parameters τ) τ{ τ} [ τ( ]';
    '78:237 method_definition=>τ* property_name • τ( τ) τ{ τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ... _ $ id { [ )  ]';
    '78:223 method_definition=>τ* property_name τ( • unique_formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '78:232 method_definition=>τ* property_name τ( • unique_formal_parameters τ) τ{ τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    '78:231 method_definition=>τ* property_name τ( • τ) τ{ function_body τ} [ τ) ]';
    '78:237 method_definition=>τ* property_name τ( • τ) τ{ τ} [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  61  ]';
        '78:223 method_definition=>τ* property_name τ( • unique_formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
        '78:232 method_definition=>τ* property_name τ( • unique_formal_parameters τ) τ{ τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_3f753c469c280c34 );
        pushFN( data, $unique_formal_parameters );
        return data.rules_ptr
    } else if( l.current_byte ==41 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  )  ]';
        '78:231 method_definition=>τ* property_name τ( • τ) τ{ function_body τ} [ τ) ]';
        '78:237 method_definition=>τ* property_name τ( • τ) τ{ τ} [ τ) ]';
        'Number of end groups0 [    ]';
        'All symbols [  {  ]';
        '78:231 method_definition=>τ* property_name τ( τ) • τ{ function_body τ} [ τ{ ]';
        '78:237 method_definition=>τ* property_name τ( τ) • τ{ τ} [ τ{ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( l.current_byte ==123 ){
            consume( l, data, state );
            'Number of end groups0 [    ]';
            'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
            '78:231 method_definition=>τ* property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
            '78:237 method_definition=>τ* property_name τ( τ) τ{ • τ} [ τ} ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            switch(sym_map_deb09f8b969b503a( l, data )){
                case 0: 
                {
                    '"--LEAF--"';
                    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                    '78:231 method_definition=>τ* property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                    pushFN( data, branch_027ec010449b3da8 );
                    pushFN( data, $function_body );
                    return data.rules_ptr
                }
                case 1: 
                {
                    '"--LEAF--"';
                    'Leaf [  }  ]';
                    '"⤋⤋⤋  assert ⤋⤋⤋"';
                    '78:237 method_definition=>τ* property_name τ( τ) τ{ • τ} [ τ} ]';
                    consume( l, data, state );
                    add_reduce( state, data, 6, 142 );
                    return 78
                }
                default: 
                break
            }
        }
    }
};
    return -1
}
function branch_fb8b62feac12b837(l, data, state, prod, prod_start){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==41 )&&consume( l, data, state ) ) ) ){
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==123 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_dd302aa7894f8ec0 );
        pushFN( data, $function_body );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function branch_fb8d0d708078cfa9(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 204 );
    return 140
}
function branch_fbce621ee82e2cb2(l, data, state, prod, prod_start){
    add_reduce( state, data, 2, 160 );
    pushFN( data, $optional_expression_goto );
    return 93
}
function branch_fc70a0c12584fbac(l, data, state, prod, prod_start){
    return 20
}
function branch_fc7fd38db674bd64(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  assert-peek ⤋⤋⤋"';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    pushFN( data, branch_ea608060f125d775 );
    pushFN( data, $string_literal );
    return prod_start
}
function branch_fcff4c1b93763194(l, data, state, prod, prod_start){
    add_reduce( state, data, 8, 40 );
    return prod_start
}
function branch_fd25183bec9a76aa(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ function class / ` super import  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '71:194 concise_body=>• assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function branch_fd33007bb9bdc0cb(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '120:394 array_binding_pattern=>τ[ • elision τ] [ τ, ]';
    pushFN( data, branch_3b9ac2a7a444d007 );
    pushFN( data, $elision );
    return data.rules_ptr
}
function branch_fd3b9e90c1421b07(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 174 );
    pushFN( data, $assignment_expression_goto );
    return 110
}
function branch_fd43e0ee815c2b13(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '88:263 call_expression=>call_expression • arguments [ τ( ]';
    pushFN( data, branch_93f2d716e05ff6c0 );
    pushFN( data, $arguments );
    return data.rules_ptr
}
function branch_fd5f733caac294a5(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 109 );
    pushFN( data, $assignment_expression_goto );
    return 97
}
function branch_fd678aaae08c31e0(l, data, state, prod, prod_start){
    return 151
}
function branch_fd7011922d4335a8(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 170 );
    pushFN( data, $assignment_expression_goto );
    return 108
}
function branch_fd98c980e4895455(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  as  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '18:47 export_specifier=>identifier • τas identifier [ τas ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_4abf4b237f12917b );
    pushFN( data, $identifier );
    return data.rules_ptr
}
function branch_fdef37ff6ef267e0(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ;  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '73:198 class_declaration=>τclass class_heritage τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
    pushFN( data, branch_b9093793c07c84f3 );
    pushFN( data, $class_body );
    return data.rules_ptr
}
function branch_fe0261860308cd80(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 177 );
    pushFN( data, $coalesce_expression_head_goto );
    return 112
}
function branch_fe2062fbc9fe25cc(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 169 );
    pushFN( data, $assignment_expression_goto );
    return 107
}
function branch_fe36db382f5ac7cd(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $optional_expression_goto );
    return 83
}
function branch_fe41559a4599b03f(l, data, state, prod, prod_start){
    pushFN( data, $shift_expression_goto );
    return 110
}
function branch_feb4337c3f996276(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  let const  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '24:70 declaration=>• lexical_declaration [ τlet, τconst ]';
    pushFN( data, branch_a02a770eec4af430 );
    pushFN( data, $lexical_declaration );
    return data.rules_ptr
}
function branch_ff1b1105095846ad(l, data, state, prod, prod_start){
    add_reduce( state, data, 3, 147 );
    pushFN( data, $exponentiation_expression_goto );
    return 88
}
function branch_ff5bd76cf1000169(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
    '32:88 iteration_statement=>τfor τ( expression τ; expression τ; • expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_efd73b3af71c906a );
    pushFN( data, $expression );
    return data.rules_ptr
}
function branch_ff9c89f6d6cd7ebb(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  case  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '42:128 case_clauses=>case_clauses • case_clause [ τcase ]';
    pushFN( data, branch_2b2c79909f5d4abc );
    pushFN( data, $case_clause );
    return data.rules_ptr
}
function branch_fff5bfc6a940912e(l, data, state, prod, prod_start){
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert ⤋⤋⤋"';
    '80:240 expression=>expression • τ, assignment_expression [ τ, ]';
    consume( l, data, state );
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a081f407a44b4019 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
}
function dt_079864b6b16d53c7(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 52, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 194, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_0c2a044f5eb76df6(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 271, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 273, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_2f6691a653b819d6(l, data){
    if( 5==compare( data, l.byte_offset  + 0, 82, 5 ) ){
    l.setToken( TokenSymbol, 5, 5 );
    return true
} else if( 5==compare( data, l.byte_offset  + 0, 206, 5 ) ){
    l.setToken( TokenSymbol, 5, 5 );
    return true
};
    return false
}
function dt_401d5a540ce6e38a(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 2, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 1, 2 ) ){
    if( data.input[l.byte_offset  + 2]==61 ){
        l.setToken( TokenSymbol, 3, 3 );
        return true
    };
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_4383e5e2e4f915d0(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 19, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 188, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_57f0cbc88859bc5b(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 52, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 194, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 271, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 273, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 267, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 269, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_5b7bef307ef015e7(l, data){
    if( 3==compare( data, l.byte_offset  + 0, 255, 3 ) ){
    l.setToken( TokenSymbol, 3, 3 );
    return true
} else if( 4==compare( data, l.byte_offset  + 0, 158, 4 ) ){
    l.setToken( TokenSymbol, 4, 4 );
    return true
};
    return false
}
function dt_800fc4a73eb55041(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 267, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 269, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_8085a2af496ceedb(l, data){
    if( 3==compare( data, l.byte_offset  + 0, 31, 3 ) ){
    l.setToken( TokenSymbol, 3, 3 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 30, 2 ) ){
    if( data.input[l.byte_offset  + 2]==62 ){
        if( data.input[l.byte_offset  + 3]==61 ){
            l.setToken( TokenSymbol, 4, 4 );
            return true
        };
        l.setToken( TokenSymbol, 3, 3 );
        return true
    };
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 32, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_895ea6ab231b4de8(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 25, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 192, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_a5dbea4c23234f70(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 42, 2 ) ){
    if( data.input[l.byte_offset  + 2]==61 ){
        l.setToken( TokenSymbol, 3, 3 );
        return true
    };
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_a9b4e918ef416a84(l, data){
    if( 4==compare( data, l.byte_offset  + 0, 334, 4 ) ){
    l.setToken( TokenSymbol, 4, 4 );
    return true
} else if( 4==compare( data, l.byte_offset  + 0, 338, 4 ) ){
    l.setToken( TokenSymbol, 4, 4 );
    return true
};
    return false
}
function dt_ab82fc80fc0bee4c(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 35, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 34, 2 ) ){
    if( data.input[l.byte_offset  + 2]==61 ){
        l.setToken( TokenSymbol, 3, 3 );
        return true
    };
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_ac852f1b70ebeb1c(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 40, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 39, 2 ) ){
    if( data.input[l.byte_offset  + 2]==61 ){
        l.setToken( TokenSymbol, 3, 3 );
        return true
    };
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_b20f4716c284a542(l, data){
    if( 6==compare( data, l.byte_offset  + 0, 240, 6 ) ){
    l.setToken( TokenSymbol, 6, 6 );
    return true
} else if( 4==compare( data, l.byte_offset  + 0, 334, 4 ) ){
    l.setToken( TokenSymbol, 4, 4 );
    return true
} else if( 4==compare( data, l.byte_offset  + 0, 338, 4 ) ){
    l.setToken( TokenSymbol, 4, 4 );
    return true
};
    return false
}
function dt_c9742b8c3a6930ba(l, data){
    if( 5==compare( data, l.byte_offset  + 0, 291, 5 ) ){
    l.setToken( TokenSymbol, 5, 5 );
    return true
} else if( 8==compare( data, l.byte_offset  + 0, 87, 8 ) ){
    l.setToken( TokenSymbol, 8, 8 );
    return true
};
    return false
}
function dt_cbd44166691c9d5e(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 72, 2 ) ){
    if( 8==compare( data, l.byte_offset  + 2, 74, 8 ) ){
        l.setToken( TokenSymbol, 10, 10 );
        return true
    };
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_ce174246e31fc79a(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 23, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 190, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_dc86c96572600d23(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 0, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 184, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_f04b852a34910327(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 11, 2 ) ){
    if( data.input[l.byte_offset  + 2]==61 ){
        l.setToken( TokenSymbol, 3, 3 );
        return true
    };
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function dt_f1e2793ad80166c9(l, data){
    if( 5==compare( data, l.byte_offset  + 0, 320, 5 ) ){
    l.setToken( TokenSymbol, 5, 5 );
    return true
} else if( 5==compare( data, l.byte_offset  + 0, 315, 5 ) ){
    l.setToken( TokenSymbol, 5, 5 );
    return true
};
    return false
}
function dt_fd2d9e2aecd5a52d(l, data){
    if( 2==compare( data, l.byte_offset  + 0, 27, 2 ) ){
    if( data.input[l.byte_offset  + 2]==61 ){
        l.setToken( TokenSymbol, 3, 3 );
        return true
    };
    l.setToken( TokenSymbol, 2, 2 );
    return true
} else if( 2==compare( data, l.byte_offset  + 0, 28, 2 ) ){
    l.setToken( TokenSymbol, 2, 2 );
    return true
};
    return false
}
function nocap_0ddb4de20b271ac4(l, data){
    var a = l.token_length;
    var b = l.byte_length;
    if( ( l.current_byte ==125 ) ){
    l.token_length = 0;
    l.byte_length = 0;
    return true
};
    l.token_length = a;
    l.byte_length = b;
    return false
}
function nocap_6725b1140c2474a9(l, data){
    var a = l.token_length;
    var b = l.byte_length;
    if( ( l.isNL(  ) ) ){
    l.token_length = 0;
    l.byte_length = 0;
    return true
};
    l.token_length = a;
    l.byte_length = b;
    return false
}
function nocap_a2074301606e59a8(l, data){
    var a = l.token_length;
    var b = l.byte_length;
    if( ( l.END( data ) ) ){
    l.token_length = 0;
    l.byte_length = 0;
    return true
};
    l.token_length = a;
    l.byte_length = b;
    return false
}
function nocap_ef6036075771b59e(l, data){
    var a = l.token_length;
    var b = l.byte_length;
    if( ( l.current_byte ==125||l.END( data ) || l.isNL(  ) ) ){
    l.token_length = 0;
    l.byte_length = 0;
    return true
};
    l.token_length = a;
    l.byte_length = b;
    return false
}
function skip_15cba70e02d0d1b8(l, data, state){
    if( ( state )==NULL_STATE )return;;
    var off = l.token_offset;
    while( 1 ) {
        if( !( tk_22d4cc8b05af400d( l, data )||l.isNL(  )||l.isSP( true, data ) ) ){
            break
        };
        l.next( data )
    };
    if( isOutputEnabled( state ) )add_skip( data, l.token_offset  - off );
}
function skip_1cde7ea7398d3d72(l, data, state){
    if( ( state )==NULL_STATE )return;;
    var off = l.token_offset;
    while( 1 ) {
        if( !( tk_22d4cc8b05af400d( l, data )||l.isNL(  ) ) ){
            break
        };
        l.next( data )
    };
    if( isOutputEnabled( state ) )add_skip( data, l.token_offset  - off );
}
function skip_1f62e9e1065e9d92(l, data, state){
    if( ( state )==NULL_STATE )return;;
    var off = l.token_offset;
    while( 1 ) {
        if( !( tk_22d4cc8b05af400d( l, data )||l.isSP( true, data ) ) ){
            break
        };
        l.next( data )
    };
    if( isOutputEnabled( state ) )add_skip( data, l.token_offset  - off );
}
function skip_7b7e2bf9d5b8ddf5(l, data, state){
    if( ( state )==NULL_STATE )return;;
    var off = l.token_offset;
    while( 1 ) {
        if( !( tk_22d4cc8b05af400d( l, data ) ) ){
            break
        };
        l.next( data )
    };
    if( isOutputEnabled( state ) )add_skip( data, l.token_offset  - off );
}
function sym_map_00033127db5a7bf0(l, data){
    ; if( l.isNum( data ) ){
    return 4
} else if( l.isUniID( data ) ){
    return 3
} else if( l.isNL(  ) ){
    return 2
} else if( l.isSP( true, data ) ){
    return 1
} else if( l.isSym( true, data ) ){
    return 0
};
    return -1
}
function sym_map_00126370fc441c6c(l, data){
    if( data.input[l.byte_offset  + 0]==69 ){
    if( 16==compare( data, l.byte_offset  + 1, 56, 16 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 17 ) ){
            l.setToken( TokenSymbol, 17, 17 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==101 ){
    if( 6==compare( data, l.byte_offset  + 1, 96, 6 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 7 ) ){
            l.setToken( TokenSymbol, 7, 7 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==61 ){
    if( data.input[l.byte_offset  + 1]==62 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==102 ){
    if( 3==compare( data, l.byte_offset  + 1, 297, 3 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( data.input[l.byte_offset  + 1]==115 ){
        if( l.isDiscrete( data, TokenIdentifier, 2 ) ){
            l.setToken( TokenSymbol, 2, 2 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==44 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==125 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==41 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==58 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==93 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==46 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==124 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==38 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==94 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==33 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==110 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( 7==compare( data, l.byte_offset  + 3, 75, 7 ) ){
                if( l.isDiscrete( data, TokenIdentifier, 10 ) ){
                    l.setToken( TokenSymbol, 10, 10 );
                    return 4
                }
            }
        };
        if( l.isDiscrete( data, TokenIdentifier, 2 ) ){
            l.setToken( TokenSymbol, 2, 2 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==62 ){
        if( data.input[l.byte_offset  + 2]==62 ){
            if( data.input[l.byte_offset  + 3]==61 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 4
            };
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        } else if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==60 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==42 ){
    if( data.input[l.byte_offset  + 1]==42 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==47 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==37 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==111 ){
    if( data.input[l.byte_offset  + 1]==102 ){
        if( l.isDiscrete( data, TokenIdentifier, 2 ) ){
            l.setToken( TokenSymbol, 2, 2 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==46 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    if( nocap_a2074301606e59a8( l, data ) ){
    return 4
} else if( nocap_6725b1140c2474a9( l, data ) ){
    return 4
} else if( l.isNum( data ) ){
    return 3
} else if( l.isUniID( data ) ){
    return 2
};
    return -1
}
function sym_map_0ad057c21199e520(l, data){
    if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==62 ){
        if( data.input[l.byte_offset  + 2]==62 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 2
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( data.input[l.byte_offset  + 1]==60 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
};
    return -1
}
function sym_map_0b9f0aa31f15846b(l, data){
    if( data.input[l.byte_offset  + 0]==69 ){
    if( 16==compare( data, l.byte_offset  + 1, 56, 16 ) ){
        l.setToken( TokenSymbol, 17, 17 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==44 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==125 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==41 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==58 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==93 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==46 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==124 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==38 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==94 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==61 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==33 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==110 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( 7==compare( data, l.byte_offset  + 3, 75, 7 ) ){
                l.setToken( TokenSymbol, 10, 10 );
                return 5
            }
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==62 ){
        if( data.input[l.byte_offset  + 2]==62 ){
            if( data.input[l.byte_offset  + 3]==61 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 5
            };
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        } else if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==60 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==42 ){
    if( data.input[l.byte_offset  + 1]==42 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==47 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==37 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==111 ){
    if( data.input[l.byte_offset  + 1]==102 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==46 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 2
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    if( nocap_a2074301606e59a8( l, data ) ){
    return 5
} else if( nocap_6725b1140c2474a9( l, data ) ){
    return 5
};
    return -1
}
function sym_map_1012bd13e6821850(l, data){
    if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
};
    return -1
}
function sym_map_1317271ae6a8d37f(l, data){
    if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    }
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==118 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( data.input[l.byte_offset  + 2]==114 ){
            if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
                l.setToken( TokenSymbol, 3, 3 );
                return 2
            }
        }
    } else if( data.input[l.byte_offset  + 1]==111 ){
        if( 2==compare( data, l.byte_offset  + 2, 148, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==99 ){
    if( 4==compare( data, l.byte_offset  + 1, 316, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 1
        }
    }
} else if( data.input[l.byte_offset  + 0]==108 ){
    if( 2==compare( data, l.byte_offset  + 1, 151, 2 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
            l.setToken( TokenSymbol, 3, 3 );
            return 1
        }
    }
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 83, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==33 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==126 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( 5==compare( data, l.byte_offset  + 1, 241, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==100 ){
    if( 5==compare( data, l.byte_offset  + 1, 308, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==121 ){
    if( 4==compare( data, l.byte_offset  + 1, 154, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    }
};
    if( l.isNum( data ) ){
    return 3
} else if( l.isUniID( data ) ){
    return 3
};
    return -1
}
function sym_map_17f19144665ebbf8(l, data){
    if( data.input[l.byte_offset  + 0]==46 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    return -1
}
function sym_map_1a4ba89a7e8a0221(l, data){
    if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 24
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 23
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 22
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 21
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 20
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 19
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 18
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 17
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 16
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 15
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 14
    }
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 13
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 12
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 11
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 10
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( 5==compare( data, l.byte_offset  + 1, 285, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 9
        }
    }
} else if( data.input[l.byte_offset  + 0]==115 ){
    if( 4==compare( data, l.byte_offset  + 1, 346, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 8
        }
    }
} else if( data.input[l.byte_offset  + 0]==110 ){
    if( data.input[l.byte_offset  + 1]==101 ){
        if( data.input[l.byte_offset  + 2]==119 ){
            if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
                l.setToken( TokenSymbol, 3, 3 );
                return 7
            }
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 2==compare( data, l.byte_offset  + 2, 160, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 3
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==99 ){
    if( 4==compare( data, l.byte_offset  + 1, 321, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 6
        }
    }
} else if( data.input[l.byte_offset  + 0]==102 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( 3==compare( data, l.byte_offset  + 2, 293, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 2
            }
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 6==compare( data, l.byte_offset  + 2, 89, 6 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 8 ) ){
                l.setToken( TokenSymbol, 8, 8 );
                return 5
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 207, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( data.input[l.byte_offset  + 1]==114 ){
        if( 2==compare( data, l.byte_offset  + 2, 340, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 1
            }
        }
    } else if( data.input[l.byte_offset  + 1]==104 ){
        if( 2==compare( data, l.byte_offset  + 2, 336, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        }
    }
};
    if( l.isNum( data ) ){
    return 26
} else if( l.isUniID( data ) ){
    return 25
};
    return -1
}
function sym_map_21178c73887d2d7d(l, data){
    if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 2
} else if( data.input[l.byte_offset  + 0]==46 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==46 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
};
    return -1
}
function sym_map_33516e712a1c1b37(l, data){
    if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 2
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 207, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    }
};
    if( l.isUniID( data ) ){
    return 4
};
    return -1
}
function sym_map_35da195bc8b4998a(l, data){
    if( data.input[l.byte_offset  + 0]==102 ){
    if( data.input[l.byte_offset  + 1]==111 ){
        if( data.input[l.byte_offset  + 2]==114 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        }
    } else if( data.input[l.byte_offset  + 1]==97 ){
        if( 3==compare( data, l.byte_offset  + 2, 293, 3 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 4
        }
    } else if( data.input[l.byte_offset  + 1]==105 ){
        if( 5==compare( data, l.byte_offset  + 2, 213, 5 ) ){
            l.setToken( TokenSymbol, 7, 7 );
            return 0
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 6==compare( data, l.byte_offset  + 2, 89, 6 ) ){
            l.setToken( TokenSymbol, 8, 8 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( data.input[l.byte_offset  + 1]==114 ){
        if( data.input[l.byte_offset  + 2]==121 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        } else if( data.input[l.byte_offset  + 2]==117 ){
            if( data.input[l.byte_offset  + 3]==101 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 3
            }
        }
    } else if( data.input[l.byte_offset  + 1]==104 ){
        if( data.input[l.byte_offset  + 2]==105 ){
            if( data.input[l.byte_offset  + 3]==115 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        } else if( data.input[l.byte_offset  + 2]==114 ){
            if( 2==compare( data, l.byte_offset  + 3, 332, 2 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 0
            }
        }
    } else if( data.input[l.byte_offset  + 1]==121 ){
        if( 4==compare( data, l.byte_offset  + 2, 242, 4 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==110 ){
    if( data.input[l.byte_offset  + 1]==101 ){
        if( data.input[l.byte_offset  + 2]==119 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 2==compare( data, l.byte_offset  + 2, 160, 2 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 2
        }
    }
} else if( data.input[l.byte_offset  + 0]==112 ){
    if( data.input[l.byte_offset  + 1]==117 ){
        if( 4==compare( data, l.byte_offset  + 2, 359, 4 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 1
        }
    } else if( data.input[l.byte_offset  + 1]==114 ){
        if( data.input[l.byte_offset  + 2]==105 ){
            if( 4==compare( data, l.byte_offset  + 3, 353, 4 ) ){
                l.setToken( TokenSymbol, 7, 7 );
                return 1
            }
        } else if( data.input[l.byte_offset  + 2]==111 ){
            if( 6==compare( data, l.byte_offset  + 3, 169, 6 ) ){
                l.setToken( TokenSymbol, 9, 9 );
                return 1
            }
        }
    } else if( data.input[l.byte_offset  + 1]==97 ){
        if( 5==compare( data, l.byte_offset  + 2, 260, 5 ) ){
            l.setToken( TokenSymbol, 7, 7 );
            return 1
        }
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==110 ){
        if( data.input[l.byte_offset  + 2]==116 ){
            if( 6==compare( data, l.byte_offset  + 3, 278, 6 ) ){
                l.setToken( TokenSymbol, 9, 9 );
                return 1
            }
        } else if( data.input[l.byte_offset  + 2]==115 ){
            if( 7==compare( data, l.byte_offset  + 3, 75, 7 ) ){
                l.setToken( TokenSymbol, 10, 10 );
                return 0
            }
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==102 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==109 ){
        if( data.input[l.byte_offset  + 2]==112 ){
            if( data.input[l.byte_offset  + 3]==111 ){
                if( 2==compare( data, l.byte_offset  + 4, 288, 2 ) ){
                    l.setToken( TokenSymbol, 6, 6 );
                    return 0
                }
            } else if( data.input[l.byte_offset  + 3]==108 ){
                if( 6==compare( data, l.byte_offset  + 4, 200, 6 ) ){
                    l.setToken( TokenSymbol, 10, 10 );
                    return 1
                }
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==121 ){
    if( 4==compare( data, l.byte_offset  + 1, 154, 4 ) ){
        l.setToken( TokenSymbol, 5, 5 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==119 ){
    if( data.input[l.byte_offset  + 1]==105 ){
        if( 2==compare( data, l.byte_offset  + 2, 233, 2 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 0
        }
    } else if( data.input[l.byte_offset  + 1]==104 ){
        if( 3==compare( data, l.byte_offset  + 2, 112, 3 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==118 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( data.input[l.byte_offset  + 2]==114 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        }
    } else if( data.input[l.byte_offset  + 1]==111 ){
        if( 2==compare( data, l.byte_offset  + 2, 148, 2 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==115 ){
    if( data.input[l.byte_offset  + 1]==117 ){
        if( 3==compare( data, l.byte_offset  + 2, 347, 3 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    } else if( data.input[l.byte_offset  + 1]==119 ){
        if( 4==compare( data, l.byte_offset  + 2, 142, 4 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==114 ){
    if( 5==compare( data, l.byte_offset  + 1, 129, 5 ) ){
        l.setToken( TokenSymbol, 6, 6 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==101 ){
    if( data.input[l.byte_offset  + 1]==108 ){
        if( 2==compare( data, l.byte_offset  + 2, 305, 2 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 0
        }
    } else if( data.input[l.byte_offset  + 1]==120 ){
        if( data.input[l.byte_offset  + 2]==112 ){
            if( 3==compare( data, l.byte_offset  + 3, 221, 3 ) ){
                l.setToken( TokenSymbol, 6, 6 );
                return 0
            }
        } else if( data.input[l.byte_offset  + 2]==116 ){
            if( 4==compare( data, l.byte_offset  + 3, 98, 4 ) ){
                l.setToken( TokenSymbol, 7, 7 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==100 ){
    if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==101 ){
        if( data.input[l.byte_offset  + 2]==108 ){
            if( 3==compare( data, l.byte_offset  + 3, 310, 3 ) ){
                l.setToken( TokenSymbol, 6, 6 );
                return 0
            }
        } else if( data.input[l.byte_offset  + 2]==102 ){
            if( 4==compare( data, l.byte_offset  + 3, 227, 4 ) ){
                l.setToken( TokenSymbol, 7, 7 );
                return 0
            }
        } else if( data.input[l.byte_offset  + 2]==98 ){
            if( 5==compare( data, l.byte_offset  + 3, 105, 5 ) ){
                l.setToken( TokenSymbol, 8, 8 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==99 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( data.input[l.byte_offset  + 3]==101 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        } else if( data.input[l.byte_offset  + 2]==116 ){
            if( 2==compare( data, l.byte_offset  + 3, 238, 2 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 0
            }
        }
    } else if( data.input[l.byte_offset  + 1]==111 ){
        if( data.input[l.byte_offset  + 2]==110 ){
            if( data.input[l.byte_offset  + 3]==115 ){
                if( data.input[l.byte_offset  + 4]==116 ){
                    l.setToken( TokenSymbol, 5, 5 );
                    return 0
                }
            } else if( data.input[l.byte_offset  + 3]==116 ){
                if( 4==compare( data, l.byte_offset  + 4, 119, 4 ) ){
                    l.setToken( TokenSymbol, 8, 8 );
                    return 0
                }
            }
        }
    } else if( data.input[l.byte_offset  + 1]==108 ){
        if( 3==compare( data, l.byte_offset  + 2, 322, 3 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==98 ){
    if( 4==compare( data, l.byte_offset  + 1, 124, 4 ) ){
        l.setToken( TokenSymbol, 5, 5 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 83, 4 ) ){
        l.setToken( TokenSymbol, 5, 5 );
        return 0
    }
};
    return -1
}
function sym_map_3d61c0356166b0df(l, data){
    if( data.input[l.byte_offset  + 0]==121 ){
    if( 4==compare( data, l.byte_offset  + 1, 154, 4 ) ){
        l.setToken( TokenSymbol, 5, 5 );
        return 33
    }
} else if( data.input[l.byte_offset  + 0]==119 ){
    if( data.input[l.byte_offset  + 1]==105 ){
        if( 2==compare( data, l.byte_offset  + 2, 233, 2 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 32
        }
    } else if( data.input[l.byte_offset  + 1]==104 ){
        if( 3==compare( data, l.byte_offset  + 2, 112, 3 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 31
        }
    }
} else if( data.input[l.byte_offset  + 0]==118 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( data.input[l.byte_offset  + 2]==114 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 29
        }
    } else if( data.input[l.byte_offset  + 1]==111 ){
        if( 2==compare( data, l.byte_offset  + 2, 148, 2 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 30
        }
    }
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( data.input[l.byte_offset  + 1]==114 ){
        if( data.input[l.byte_offset  + 2]==121 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 27
        }
    } else if( data.input[l.byte_offset  + 1]==104 ){
        if( data.input[l.byte_offset  + 2]==105 ){
            if( data.input[l.byte_offset  + 3]==115 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 25
            }
        } else if( data.input[l.byte_offset  + 2]==114 ){
            if( 2==compare( data, l.byte_offset  + 3, 332, 2 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 26
            }
        }
    } else if( data.input[l.byte_offset  + 1]==121 ){
        if( 4==compare( data, l.byte_offset  + 2, 242, 4 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 28
        }
    }
} else if( data.input[l.byte_offset  + 0]==115 ){
    if( data.input[l.byte_offset  + 1]==117 ){
        if( 3==compare( data, l.byte_offset  + 2, 347, 3 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 23
        }
    } else if( data.input[l.byte_offset  + 1]==119 ){
        if( 4==compare( data, l.byte_offset  + 2, 142, 4 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 24
        }
    }
} else if( data.input[l.byte_offset  + 0]==114 ){
    if( 5==compare( data, l.byte_offset  + 1, 129, 5 ) ){
        l.setToken( TokenSymbol, 6, 6 );
        return 22
    }
} else if( data.input[l.byte_offset  + 0]==110 ){
    if( 2==compare( data, l.byte_offset  + 1, 256, 2 ) ){
        l.setToken( TokenSymbol, 3, 3 );
        return 21
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==110 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( 7==compare( data, l.byte_offset  + 3, 75, 7 ) ){
                l.setToken( TokenSymbol, 10, 10 );
                return 20
            }
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 19
    } else if( data.input[l.byte_offset  + 1]==102 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 17
    } else if( data.input[l.byte_offset  + 1]==109 ){
        if( 4==compare( data, l.byte_offset  + 2, 286, 4 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 18
        }
    }
} else if( data.input[l.byte_offset  + 0]==102 ){
    if( data.input[l.byte_offset  + 1]==111 ){
        if( data.input[l.byte_offset  + 2]==114 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 15
        }
    } else if( data.input[l.byte_offset  + 1]==105 ){
        if( 5==compare( data, l.byte_offset  + 2, 213, 5 ) ){
            l.setToken( TokenSymbol, 7, 7 );
            return 14
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 6==compare( data, l.byte_offset  + 2, 89, 6 ) ){
            l.setToken( TokenSymbol, 8, 8 );
            return 16
        }
    }
} else if( data.input[l.byte_offset  + 0]==101 ){
    if( data.input[l.byte_offset  + 1]==108 ){
        if( 2==compare( data, l.byte_offset  + 2, 305, 2 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 11
        }
    } else if( data.input[l.byte_offset  + 1]==120 ){
        if( data.input[l.byte_offset  + 2]==112 ){
            if( 3==compare( data, l.byte_offset  + 3, 221, 3 ) ){
                l.setToken( TokenSymbol, 6, 6 );
                return 12
            }
        } else if( data.input[l.byte_offset  + 2]==116 ){
            if( 4==compare( data, l.byte_offset  + 3, 98, 4 ) ){
                l.setToken( TokenSymbol, 7, 7 );
                return 13
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==100 ){
    if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 10
    } else if( data.input[l.byte_offset  + 1]==101 ){
        if( data.input[l.byte_offset  + 2]==108 ){
            if( 3==compare( data, l.byte_offset  + 3, 310, 3 ) ){
                l.setToken( TokenSymbol, 6, 6 );
                return 9
            }
        } else if( data.input[l.byte_offset  + 2]==102 ){
            if( 4==compare( data, l.byte_offset  + 3, 227, 4 ) ){
                l.setToken( TokenSymbol, 7, 7 );
                return 8
            }
        } else if( data.input[l.byte_offset  + 2]==98 ){
            if( 5==compare( data, l.byte_offset  + 3, 105, 5 ) ){
                l.setToken( TokenSymbol, 8, 8 );
                return 7
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==99 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( data.input[l.byte_offset  + 3]==101 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 2
            }
        } else if( data.input[l.byte_offset  + 2]==116 ){
            if( 2==compare( data, l.byte_offset  + 3, 238, 2 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 3
            }
        }
    } else if( data.input[l.byte_offset  + 1]==111 ){
        if( data.input[l.byte_offset  + 2]==110 ){
            if( data.input[l.byte_offset  + 3]==115 ){
                if( data.input[l.byte_offset  + 4]==116 ){
                    l.setToken( TokenSymbol, 5, 5 );
                    return 5
                }
            } else if( data.input[l.byte_offset  + 3]==116 ){
                if( 4==compare( data, l.byte_offset  + 4, 119, 4 ) ){
                    l.setToken( TokenSymbol, 8, 8 );
                    return 6
                }
            }
        }
    } else if( data.input[l.byte_offset  + 1]==108 ){
        if( 3==compare( data, l.byte_offset  + 2, 322, 3 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==98 ){
    if( 4==compare( data, l.byte_offset  + 1, 124, 4 ) ){
        l.setToken( TokenSymbol, 5, 5 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 83, 4 ) ){
        l.setToken( TokenSymbol, 5, 5 );
        return 0
    }
};
    return -1
}
function sym_map_46fce72672e9bb66(l, data){
    if( data.input[l.byte_offset  + 0]==92 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    if( l.isUniID( data ) ){
    return 5
} else if( l.isNum( data ) ){
    return 4
} else if( l.isSym( true, data ) ){
    return 3
} else if( l.isSP( true, data ) ){
    return 2
} else if( l.isNL(  ) ){
    return 1
};
    return -1
}
function sym_map_4dff5924106118a9(l, data){
    if( data.input[l.byte_offset  + 0]==69 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 11
} else if( data.input[l.byte_offset  + 0]==68 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 10
} else if( data.input[l.byte_offset  + 0]==67 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 9
} else if( data.input[l.byte_offset  + 0]==66 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 8
} else if( data.input[l.byte_offset  + 0]==65 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 7
} else if( data.input[l.byte_offset  + 0]==102 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 6
} else if( data.input[l.byte_offset  + 0]==101 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==100 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==99 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==98 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 2
} else if( data.input[l.byte_offset  + 0]==97 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==70 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    if( l.isNum( data ) ){
    return 12
};
    return -1
}
function sym_map_5787ad6719a68bc6(l, data){
    if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==42 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==100 ){
    if( 6==compare( data, l.byte_offset  + 1, 225, 6 ) ){
        l.setToken( TokenSymbol, 7, 7 );
        return 2
    }
} else if( data.input[l.byte_offset  + 0]==118 ){
    if( 2==compare( data, l.byte_offset  + 1, 253, 2 ) ){
        l.setToken( TokenSymbol, 3, 3 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==99 ){
    if( data.input[l.byte_offset  + 1]==111 ){
        if( 3==compare( data, l.byte_offset  + 2, 317, 3 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    } else if( data.input[l.byte_offset  + 1]==108 ){
        if( 3==compare( data, l.byte_offset  + 2, 322, 3 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==108 ){
    if( 2==compare( data, l.byte_offset  + 1, 151, 2 ) ){
        l.setToken( TokenSymbol, 3, 3 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==102 ){
    if( 7==compare( data, l.byte_offset  + 1, 88, 7 ) ){
        l.setToken( TokenSymbol, 8, 8 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 207, 4 ) ){
        l.setToken( TokenSymbol, 5, 5 );
        return 0
    }
};
    return -1
}
function sym_map_57d68da3d3a530d9(l, data){
    ; if( l.isNum( data ) ){
    return 4
} else if( l.isSym( true, data ) ){
    return 3
} else if( l.isSP( true, data ) ){
    return 2
} else if( l.isNL(  ) ){
    return 1
} else if( l.isUniID( data ) ){
    return 0
};
    return -1
}
function sym_map_5c1af5aa86972747(l, data){
    if( data.input[l.byte_offset  + 0]==112 ){
    if( data.input[l.byte_offset  + 1]==117 ){
        if( 4==compare( data, l.byte_offset  + 2, 359, 4 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 5
        }
    } else if( data.input[l.byte_offset  + 1]==114 ){
        if( data.input[l.byte_offset  + 2]==105 ){
            if( 4==compare( data, l.byte_offset  + 3, 353, 4 ) ){
                l.setToken( TokenSymbol, 7, 7 );
                return 4
            }
        } else if( data.input[l.byte_offset  + 2]==111 ){
            if( 6==compare( data, l.byte_offset  + 3, 169, 6 ) ){
                l.setToken( TokenSymbol, 9, 9 );
                return 2
            }
        }
    } else if( data.input[l.byte_offset  + 1]==97 ){
        if( 5==compare( data, l.byte_offset  + 2, 260, 5 ) ){
            l.setToken( TokenSymbol, 7, 7 );
            return 1
        }
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==110 ){
        if( 7==compare( data, l.byte_offset  + 2, 277, 7 ) ){
            l.setToken( TokenSymbol, 9, 9 );
            return 3
        }
    } else if( data.input[l.byte_offset  + 1]==109 ){
        if( 8==compare( data, l.byte_offset  + 2, 198, 8 ) ){
            l.setToken( TokenSymbol, 10, 10 );
            return 0
        }
    }
};
    return -1
}
function sym_map_5d7350082ec873c4(l, data){
    if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==61 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 2
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==124 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==38 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==42 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==42 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==94 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==62 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        } else if( data.input[l.byte_offset  + 2]==62 ){
            if( data.input[l.byte_offset  + 3]==61 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( 2==compare( data, l.byte_offset  + 1, 28, 2 ) ){
        l.setToken( TokenSymbol, 3, 3 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==37 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==47 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
};
    return -1
}
function sym_map_62feb1e059504725(l, data){
    if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 26
    }
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 25
    }
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 24
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 23
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 22
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 21
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 20
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 19
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 18
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 17
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 16
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 15
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 14
    }
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 13
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 12
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 11
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 10
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( 5==compare( data, l.byte_offset  + 1, 285, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 9
        }
    }
} else if( data.input[l.byte_offset  + 0]==115 ){
    if( 4==compare( data, l.byte_offset  + 1, 346, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 8
        }
    }
} else if( data.input[l.byte_offset  + 0]==110 ){
    if( data.input[l.byte_offset  + 1]==101 ){
        if( data.input[l.byte_offset  + 2]==119 ){
            if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
                l.setToken( TokenSymbol, 3, 3 );
                return 7
            }
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 2==compare( data, l.byte_offset  + 2, 160, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 3
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==99 ){
    if( 4==compare( data, l.byte_offset  + 1, 321, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 6
        }
    }
} else if( data.input[l.byte_offset  + 0]==102 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( 3==compare( data, l.byte_offset  + 2, 293, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 2
            }
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 6==compare( data, l.byte_offset  + 2, 89, 6 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 8 ) ){
                l.setToken( TokenSymbol, 8, 8 );
                return 5
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 207, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( data.input[l.byte_offset  + 1]==114 ){
        if( 2==compare( data, l.byte_offset  + 2, 340, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 1
            }
        }
    } else if( data.input[l.byte_offset  + 1]==104 ){
        if( 2==compare( data, l.byte_offset  + 2, 336, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        }
    }
};
    if( l.isNum( data ) ){
    return 28
} else if( l.isUniID( data ) ){
    return 27
};
    return -1
}
function sym_map_7ffdb0cf873b6bdc(l, data){
    if( data.input[l.byte_offset  + 0]==102 ){
    if( 3==compare( data, l.byte_offset  + 1, 297, 3 ) ){
        l.setToken( TokenSymbol, 4, 4 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( data.input[l.byte_offset  + 1]==115 ){
        if( data.input[l.byte_offset  + 2]==121 ){
            if( 2==compare( data, l.byte_offset  + 3, 209, 2 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 0
            }
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    }
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( 5==compare( data, l.byte_offset  + 1, 135, 5 ) ){
        l.setToken( TokenSymbol, 6, 6 );
        return 3
    }
} else if( data.input[l.byte_offset  + 0]==115 ){
    if( 2==compare( data, l.byte_offset  + 1, 328, 2 ) ){
        l.setToken( TokenSymbol, 3, 3 );
        return 2
    }
} else if( data.input[l.byte_offset  + 0]==103 ){
    if( 2==compare( data, l.byte_offset  + 1, 138, 2 ) ){
        l.setToken( TokenSymbol, 3, 3 );
        return 1
    }
};
    return -1
}
function sym_map_81114164d157cc71(l, data){
    if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==33 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==126 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
};
    if( l.isNum( data ) ){
    return 1
} else if( l.isUniID( data ) ){
    return 1
};
    l.setToken( TokenSymbol, 0, 0 );
    return 0
}
function sym_map_82c6f0eaa59907f9(l, data){
    if( data.input[l.byte_offset  + 0]==61 ){
    if( data.input[l.byte_offset  + 1]==62 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
};
    return -1
}
function sym_map_880339b2c8d68237(l, data){
    if( data.input[l.byte_offset  + 0]==54 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 7
} else if( data.input[l.byte_offset  + 0]==53 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 6
} else if( data.input[l.byte_offset  + 0]==52 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==51 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==50 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==49 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 2
} else if( data.input[l.byte_offset  + 0]==48 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==55 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    return -1
}
function sym_map_8a1b4c8942bd94ef(l, data){
    if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 31
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 34
} else if( data.input[l.byte_offset  + 0]==33 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 33
} else if( data.input[l.byte_offset  + 0]==126 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 32
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 30
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 29
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 28
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 27
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 26
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 25
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 24
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 23
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 22
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 21
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 20
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 19
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 18
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 17
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 16
    }
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 15
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 14
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( data.input[l.byte_offset  + 1]==119 ){
        if( 3==compare( data, l.byte_offset  + 2, 84, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 13
            }
        }
    } else if( data.input[l.byte_offset  + 1]==115 ){
        if( 3==compare( data, l.byte_offset  + 2, 208, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 4
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( data.input[l.byte_offset  + 1]==114 ){
        if( 2==compare( data, l.byte_offset  + 2, 340, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 1
            }
        }
    } else if( data.input[l.byte_offset  + 1]==104 ){
        if( 2==compare( data, l.byte_offset  + 2, 336, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        }
    } else if( data.input[l.byte_offset  + 1]==121 ){
        if( 4==compare( data, l.byte_offset  + 2, 242, 4 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
                l.setToken( TokenSymbol, 6, 6 );
                return 12
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==118 ){
    if( 3==compare( data, l.byte_offset  + 1, 147, 3 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 11
        }
    }
} else if( data.input[l.byte_offset  + 0]==100 ){
    if( 5==compare( data, l.byte_offset  + 1, 308, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 10
        }
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( 5==compare( data, l.byte_offset  + 1, 285, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 9
        }
    }
} else if( data.input[l.byte_offset  + 0]==115 ){
    if( 4==compare( data, l.byte_offset  + 1, 346, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 8
        }
    }
} else if( data.input[l.byte_offset  + 0]==110 ){
    if( data.input[l.byte_offset  + 1]==101 ){
        if( data.input[l.byte_offset  + 2]==119 ){
            if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
                l.setToken( TokenSymbol, 3, 3 );
                return 7
            }
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 2==compare( data, l.byte_offset  + 2, 160, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 3
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==99 ){
    if( 4==compare( data, l.byte_offset  + 1, 321, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 6
        }
    }
} else if( data.input[l.byte_offset  + 0]==102 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( 3==compare( data, l.byte_offset  + 2, 293, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 2
            }
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 6==compare( data, l.byte_offset  + 2, 89, 6 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 8 ) ){
                l.setToken( TokenSymbol, 8, 8 );
                return 5
            }
        }
    }
};
    if( l.isUniID( data ) ){
    return 36
} else if( l.isNum( data ) ){
    return 35
};
    return -1
}
function sym_map_8dc62205f6348d00(l, data){
    if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 13
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 12
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 11
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 11
} else if( data.input[l.byte_offset  + 0]==100 ){
    if( data.input[l.byte_offset  + 1]==111 ){
        if( l.isDiscrete( data, TokenIdentifier, 2 ) ){
            l.setToken( TokenSymbol, 2, 2 );
            return 1
        }
    } else if( data.input[l.byte_offset  + 1]==101 ){
        if( data.input[l.byte_offset  + 2]==108 ){
            if( 3==compare( data, l.byte_offset  + 3, 310, 3 ) ){
                if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
                    l.setToken( TokenSymbol, 6, 6 );
                    return 0
                }
            }
        } else if( data.input[l.byte_offset  + 2]==98 ){
            if( 5==compare( data, l.byte_offset  + 3, 105, 5 ) ){
                if( l.isDiscrete( data, TokenIdentifier, 8 ) ){
                    l.setToken( TokenSymbol, 8, 8 );
                    return 10
                }
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( data.input[l.byte_offset  + 1]==114 ){
        if( data.input[l.byte_offset  + 2]==121 ){
            if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
                l.setToken( TokenSymbol, 3, 3 );
                return 9
            }
        } else if( data.input[l.byte_offset  + 2]==117 ){
            if( data.input[l.byte_offset  + 3]==101 ){
                if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                    l.setToken( TokenSymbol, 4, 4 );
                    return 0
                }
            }
        }
    } else if( data.input[l.byte_offset  + 1]==104 ){
        if( data.input[l.byte_offset  + 2]==105 ){
            if( data.input[l.byte_offset  + 3]==115 ){
                if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                    l.setToken( TokenSymbol, 4, 4 );
                    return 0
                }
            }
        } else if( data.input[l.byte_offset  + 2]==114 ){
            if( 2==compare( data, l.byte_offset  + 3, 332, 2 ) ){
                if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                    l.setToken( TokenSymbol, 5, 5 );
                    return 8
                }
            }
        }
    } else if( data.input[l.byte_offset  + 1]==121 ){
        if( 4==compare( data, l.byte_offset  + 2, 242, 4 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
                l.setToken( TokenSymbol, 6, 6 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==119 ){
    if( data.input[l.byte_offset  + 1]==105 ){
        if( 2==compare( data, l.byte_offset  + 2, 233, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 7
            }
        }
    } else if( data.input[l.byte_offset  + 1]==104 ){
        if( 3==compare( data, l.byte_offset  + 2, 112, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 1
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==114 ){
    if( 5==compare( data, l.byte_offset  + 1, 129, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 6
        }
    }
} else if( data.input[l.byte_offset  + 0]==98 ){
    if( 4==compare( data, l.byte_offset  + 1, 124, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 5
        }
    }
} else if( data.input[l.byte_offset  + 0]==99 ){
    if( 7==compare( data, l.byte_offset  + 1, 116, 7 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 8 ) ){
            l.setToken( TokenSymbol, 8, 8 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==102 ){
        if( l.isDiscrete( data, TokenIdentifier, 2 ) ){
            l.setToken( TokenSymbol, 2, 2 );
            return 3
        }
    } else if( data.input[l.byte_offset  + 1]==109 ){
        if( 4==compare( data, l.byte_offset  + 2, 286, 4 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
                l.setToken( TokenSymbol, 6, 6 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==118 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( data.input[l.byte_offset  + 2]==114 ){
            if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
                l.setToken( TokenSymbol, 3, 3 );
                return 2
            }
        }
    } else if( data.input[l.byte_offset  + 1]==111 ){
        if( 2==compare( data, l.byte_offset  + 2, 148, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==115 ){
    if( data.input[l.byte_offset  + 1]==117 ){
        if( 3==compare( data, l.byte_offset  + 2, 347, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 0
            }
        }
    } else if( data.input[l.byte_offset  + 1]==119 ){
        if( 4==compare( data, l.byte_offset  + 2, 142, 4 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
                l.setToken( TokenSymbol, 6, 6 );
                return 1
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==102 ){
    if( data.input[l.byte_offset  + 1]==111 ){
        if( data.input[l.byte_offset  + 2]==114 ){
            if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
                l.setToken( TokenSymbol, 3, 3 );
                return 1
            }
        }
    } else if( data.input[l.byte_offset  + 1]==97 ){
        if( 3==compare( data, l.byte_offset  + 2, 293, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( data.input[l.byte_offset  + 1]==119 ){
        if( 3==compare( data, l.byte_offset  + 2, 84, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 0
            }
        }
    } else if( data.input[l.byte_offset  + 1]==115 ){
        if( 3==compare( data, l.byte_offset  + 2, 208, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==33 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==126 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==110 ){
    if( data.input[l.byte_offset  + 1]==101 ){
        if( data.input[l.byte_offset  + 2]==119 ){
            if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
                l.setToken( TokenSymbol, 3, 3 );
                return 0
            }
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 2==compare( data, l.byte_offset  + 2, 160, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==121 ){
    if( 4==compare( data, l.byte_offset  + 1, 154, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    }
};
    if( l.isUniID( data ) ){
    return 11
} else if( l.isNum( data ) ){
    return 0
};
    return -1
}
function sym_map_8e3e34af0018f3d2(l, data){
    if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 8
} else if( data.input[l.byte_offset  + 0]==33 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 7
} else if( data.input[l.byte_offset  + 0]==126 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 6
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 83, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 3
        }
    }
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( 5==compare( data, l.byte_offset  + 1, 241, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 2
        }
    }
} else if( data.input[l.byte_offset  + 0]==118 ){
    if( 3==compare( data, l.byte_offset  + 1, 147, 3 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 1
        }
    }
} else if( data.input[l.byte_offset  + 0]==100 ){
    if( 5==compare( data, l.byte_offset  + 1, 308, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 0
        }
    }
};
    if( l.isNum( data ) ){
    return 5
} else if( l.isUniID( data ) ){
    return 5
};
    return -1
}
function sym_map_9f32aad30074aaf0(l, data){
    if( data.input[l.byte_offset  + 0]==33 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 3
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==61 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 2
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
};
    return -1
}
function sym_map_a1c731d03900f749(l, data){
    if( data.input[l.byte_offset  + 0]==46 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==110 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    return -1
}
function sym_map_a4ed59f4a075ef3d(l, data){
    if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 2
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==110 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( 7==compare( data, l.byte_offset  + 3, 75, 7 ) ){
                l.setToken( TokenSymbol, 10, 10 );
                return 1
            }
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
};
    return -1
}
function sym_map_a854173f322dabc8(l, data){
    if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 83, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==33 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==126 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( 5==compare( data, l.byte_offset  + 1, 241, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==118 ){
    if( 3==compare( data, l.byte_offset  + 1, 147, 3 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==100 ){
    if( 5==compare( data, l.byte_offset  + 1, 308, 5 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 6 ) ){
            l.setToken( TokenSymbol, 6, 6 );
            return 0
        }
    }
};
    if( l.isNum( data ) ){
    return 1
} else if( l.isUniID( data ) ){
    return 1
};
    return -1
}
function sym_map_a944902737640308(l, data){
    if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 10
    } else if( data.input[l.byte_offset  + 1]==124 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 14
        }
    }
} else if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 8
    } else if( data.input[l.byte_offset  + 1]==38 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 13
        }
    }
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 12
    }
} else if( data.input[l.byte_offset  + 0]==42 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==42 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 11
        }
    }
} else if( data.input[l.byte_offset  + 0]==94 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 9
    }
} else if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==62 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 6
        } else if( data.input[l.byte_offset  + 2]==62 ){
            if( data.input[l.byte_offset  + 3]==61 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 7
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( 2==compare( data, l.byte_offset  + 1, 28, 2 ) ){
        l.setToken( TokenSymbol, 3, 3 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    }
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    }
} else if( data.input[l.byte_offset  + 0]==37 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 2
    }
} else if( data.input[l.byte_offset  + 0]==47 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
};
    return -1
}
function sym_map_ab7dd29a8404228c(l, data){
    if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==38 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==124 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==93 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==58 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==41 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==125 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==44 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==69 ){
    if( data.input[l.byte_offset  + 1]==78 ){
        if( data.input[l.byte_offset  + 2]==68 ){
            if( data.input[l.byte_offset  + 3]==95 ){
                if( data.input[l.byte_offset  + 4]==79 ){
                    if( data.input[l.byte_offset  + 5]==70 ){
                        if( data.input[l.byte_offset  + 6]==95 ){
                            if( data.input[l.byte_offset  + 7]==80 ){
                                if( data.input[l.byte_offset  + 8]==82 ){
                                    if( data.input[l.byte_offset  + 9]==79 ){
                                        if( data.input[l.byte_offset  + 10]==68 ){
                                            if( data.input[l.byte_offset  + 11]==85 ){
                                                if( data.input[l.byte_offset  + 12]==67 ){
                                                    if( data.input[l.byte_offset  + 13]==84 ){
                                                        if( data.input[l.byte_offset  + 14]==73 ){
                                                            if( data.input[l.byte_offset  + 15]==79 ){
                                                                if( data.input[l.byte_offset  + 16]==78 ){
                                                                    l.setToken( TokenSymbol, 17, 17 );
                                                                    return 0
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
    if( nocap_6725b1140c2474a9( l, data ) ){
    return 1
} else if( nocap_a2074301606e59a8( l, data ) ){
    return 1
};
    return -1
}
function sym_map_ae0a539a2e7403fb(l, data){
    if( data.input[l.byte_offset  + 0]==58 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
};
    return -1
}
function sym_map_b10b0c1535519359(l, data){
    if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==38 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==124 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    }
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==125 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==41 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==58 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==93 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==44 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==69 ){
    if( data.input[l.byte_offset  + 1]==78 ){
        if( data.input[l.byte_offset  + 2]==68 ){
            if( data.input[l.byte_offset  + 3]==95 ){
                if( data.input[l.byte_offset  + 4]==79 ){
                    if( data.input[l.byte_offset  + 5]==70 ){
                        if( data.input[l.byte_offset  + 6]==95 ){
                            if( data.input[l.byte_offset  + 7]==80 ){
                                if( data.input[l.byte_offset  + 8]==82 ){
                                    if( data.input[l.byte_offset  + 9]==79 ){
                                        if( data.input[l.byte_offset  + 10]==68 ){
                                            if( data.input[l.byte_offset  + 11]==85 ){
                                                if( data.input[l.byte_offset  + 12]==67 ){
                                                    if( data.input[l.byte_offset  + 13]==84 ){
                                                        if( data.input[l.byte_offset  + 14]==73 ){
                                                            if( data.input[l.byte_offset  + 15]==79 ){
                                                                if( data.input[l.byte_offset  + 16]==78 ){
                                                                    l.setToken( TokenSymbol, 17, 17 );
                                                                    return 0
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
    if( nocap_6725b1140c2474a9( l, data ) ){
    return 1
} else if( nocap_a2074301606e59a8( l, data ) ){
    return 1
};
    return -1
}
function sym_map_b405d67c36a2e8a6(l, data){
    if( data.input[l.byte_offset  + 0]==101 ){
    if( data.input[l.byte_offset  + 1]==108 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( data.input[l.byte_offset  + 3]==101 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        }
    }
};
    return -1
}
function sym_map_b5f8d77660477ac1(l, data){
    if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==58 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
};
    return -1
}
function sym_map_bd3dc49275d4a0e9(l, data){
    if( data.input[l.byte_offset  + 0]==42 ){
    if( data.input[l.byte_offset  + 1]==42 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
};
    return -1
}
function sym_map_c4f390da9b9d0165(l, data){
    if( data.input[l.byte_offset  + 0]==69 ){
    if( 16==compare( data, l.byte_offset  + 1, 56, 16 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 17 ) ){
            l.setToken( TokenSymbol, 17, 17 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==102 ){
    if( 3==compare( data, l.byte_offset  + 1, 297, 3 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==58 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==46 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==124 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==38 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==94 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==61 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==62 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==33 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==110 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( 7==compare( data, l.byte_offset  + 3, 75, 7 ) ){
                if( l.isDiscrete( data, TokenIdentifier, 10 ) ){
                    l.setToken( TokenSymbol, 10, 10 );
                    return 4
                }
            }
        };
        if( l.isDiscrete( data, TokenIdentifier, 2 ) ){
            l.setToken( TokenSymbol, 2, 2 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==62 ){
        if( data.input[l.byte_offset  + 2]==62 ){
            if( data.input[l.byte_offset  + 3]==61 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 4
            };
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        } else if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==60 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==42 ){
    if( data.input[l.byte_offset  + 1]==42 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 4
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==47 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==37 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==46 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==93 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==125 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==44 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==41 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==111 ){
    if( data.input[l.byte_offset  + 1]==102 ){
        if( l.isDiscrete( data, TokenIdentifier, 2 ) ){
            l.setToken( TokenSymbol, 2, 2 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==101 ){
    if( 6==compare( data, l.byte_offset  + 1, 96, 6 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 7 ) ){
            l.setToken( TokenSymbol, 7, 7 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( data.input[l.byte_offset  + 1]==115 ){
        if( l.isDiscrete( data, TokenIdentifier, 2 ) ){
            l.setToken( TokenSymbol, 2, 2 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    if( nocap_a2074301606e59a8( l, data ) ){
    return 4
} else if( nocap_6725b1140c2474a9( l, data ) ){
    return 4
} else if( l.isNum( data ) ){
    return 3
} else if( l.isUniID( data ) ){
    return 2
};
    return -1
}
function sym_map_cca60d9a2b40a7b2(l, data){
    if( data.input[l.byte_offset  + 0]==69 ){
    if( 16==compare( data, l.byte_offset  + 1, 56, 16 ) ){
        l.setToken( TokenSymbol, 17, 17 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==44 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==125 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==41 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==58 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==93 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==46 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==124 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==38 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==94 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==61 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==33 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==110 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( 7==compare( data, l.byte_offset  + 3, 75, 7 ) ){
                l.setToken( TokenSymbol, 10, 10 );
                return 5
            }
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==62 ){
        if( data.input[l.byte_offset  + 2]==62 ){
            if( data.input[l.byte_offset  + 3]==61 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 5
            };
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        } else if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==60 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==42 ){
    if( data.input[l.byte_offset  + 1]==42 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==47 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==37 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==111 ){
    if( data.input[l.byte_offset  + 1]==102 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 2
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==46 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    if( nocap_a2074301606e59a8( l, data ) ){
    return 5
} else if( nocap_6725b1140c2474a9( l, data ) ){
    return 5
};
    return -1
}
function sym_map_ce95a4ad2e99665e(l, data){
    if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 2
    }
} else if( data.input[l.byte_offset  + 0]==61 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==124 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==38 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==42 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==42 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        }
    }
} else if( data.input[l.byte_offset  + 0]==94 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==62 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 0
        } else if( data.input[l.byte_offset  + 2]==62 ){
            if( data.input[l.byte_offset  + 3]==61 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( 2==compare( data, l.byte_offset  + 1, 28, 2 ) ){
        l.setToken( TokenSymbol, 3, 3 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==37 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==47 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
};
    return -1
}
function sym_map_d1cae766bca4320c(l, data){
    if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 20
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 19
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 18
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 17
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 16
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 15
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 14
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 13
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 12
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 11
    }
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 10
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 9
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( 5==compare( data, l.byte_offset  + 1, 285, 5 ) ){
        l.setToken( TokenSymbol, 6, 6 );
        return 8
    }
} else if( data.input[l.byte_offset  + 0]==115 ){
    if( 4==compare( data, l.byte_offset  + 1, 346, 4 ) ){
        l.setToken( TokenSymbol, 5, 5 );
        return 7
    }
} else if( data.input[l.byte_offset  + 0]==110 ){
    if( data.input[l.byte_offset  + 1]==101 ){
        if( data.input[l.byte_offset  + 2]==119 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 6
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 2==compare( data, l.byte_offset  + 2, 160, 2 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 3
        }
    }
} else if( data.input[l.byte_offset  + 0]==99 ){
    if( 4==compare( data, l.byte_offset  + 1, 321, 4 ) ){
        l.setToken( TokenSymbol, 5, 5 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==102 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( 3==compare( data, l.byte_offset  + 2, 293, 3 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 2
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 6==compare( data, l.byte_offset  + 2, 89, 6 ) ){
            l.setToken( TokenSymbol, 8, 8 );
            return 4
        }
    }
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( data.input[l.byte_offset  + 1]==114 ){
        if( 2==compare( data, l.byte_offset  + 2, 340, 2 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 1
        }
    } else if( data.input[l.byte_offset  + 1]==104 ){
        if( 2==compare( data, l.byte_offset  + 2, 336, 2 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 0
        }
    }
};
    if( l.isNum( data ) ){
    return 21
};
    return -1
}
function sym_map_deb09f8b969b503a(l, data){
    if( data.input[l.byte_offset  + 0]==125 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==33 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==126 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    if( l.isNum( data ) ){
    return 0
} else if( l.isUniID( data ) ){
    return 0
};
    l.setToken( TokenSymbol, 0, 0 );
    return 0
}
function sym_map_e096ab72a25896b3(l, data){
    if( data.input[l.byte_offset  + 0]==42 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    }
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==115 ){
    if( 2==compare( data, l.byte_offset  + 1, 328, 2 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
            l.setToken( TokenSymbol, 3, 3 );
            return 2
        }
    }
} else if( data.input[l.byte_offset  + 0]==103 ){
    if( 2==compare( data, l.byte_offset  + 1, 138, 2 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 3 ) ){
            l.setToken( TokenSymbol, 3, 3 );
            return 1
        }
    }
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 207, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 0
        }
    }
};
    if( l.isNum( data ) ){
    return 3
} else if( l.isUniID( data ) ){
    return 3
};
    return -1
}
function sym_map_e0aa0d6f406c9358(l, data){
    if( data.input[l.byte_offset  + 0]==69 ){
    if( 16==compare( data, l.byte_offset  + 1, 56, 16 ) ){
        l.setToken( TokenSymbol, 17, 17 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==44 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==125 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==41 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==58 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==93 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==46 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==124 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==38 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==94 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==61 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==33 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==110 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( 7==compare( data, l.byte_offset  + 3, 75, 7 ) ){
                l.setToken( TokenSymbol, 10, 10 );
                return 5
            }
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==62 ){
        if( data.input[l.byte_offset  + 2]==62 ){
            if( data.input[l.byte_offset  + 3]==61 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 5
            };
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        } else if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==60 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==42 ){
    if( data.input[l.byte_offset  + 1]==42 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==47 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==37 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==111 ){
    if( data.input[l.byte_offset  + 1]==102 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 2
} else if( data.input[l.byte_offset  + 0]==46 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    if( nocap_a2074301606e59a8( l, data ) ){
    return 5
} else if( nocap_6725b1140c2474a9( l, data ) ){
    return 5
};
    return -1
}
function sym_map_e32b08cd3c718e6b(l, data){
    if( data.input[l.byte_offset  + 0]==69 ){
    if( data.input[l.byte_offset  + 1]==78 ){
        if( 15==compare( data, l.byte_offset  + 2, 57, 15 ) ){
            l.setToken( TokenSymbol, 17, 17 );
            return 1
        }
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==101 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    return -1
}
function sym_map_e3cc217a4d43796b(l, data){
    if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==46 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 2
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==46 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
};
    return -1
}
function sym_map_eb1ae190d19756d3(l, data){
    if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==38 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 1
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    return -1
}
function sym_map_f000881e6a4cb7bf(l, data){
    if( data.input[l.byte_offset  + 0]==69 ){
    if( 16==compare( data, l.byte_offset  + 1, 56, 16 ) ){
        l.setToken( TokenSymbol, 17, 17 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==44 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==125 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==59 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==41 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==58 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==93 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==63 ){
    if( data.input[l.byte_offset  + 1]==63 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==46 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==124 ){
    if( data.input[l.byte_offset  + 1]==124 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==38 ){
    if( data.input[l.byte_offset  + 1]==38 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==94 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==61 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==33 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==105 ){
    if( data.input[l.byte_offset  + 1]==110 ){
        if( data.input[l.byte_offset  + 2]==115 ){
            if( 7==compare( data, l.byte_offset  + 3, 75, 7 ) ){
                l.setToken( TokenSymbol, 10, 10 );
                return 5
            }
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==62 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==62 ){
        if( data.input[l.byte_offset  + 2]==62 ){
            if( data.input[l.byte_offset  + 3]==61 ){
                l.setToken( TokenSymbol, 4, 4 );
                return 5
            };
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        } else if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==60 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==60 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==45 ){
    if( data.input[l.byte_offset  + 1]==45 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==43 ){
    if( data.input[l.byte_offset  + 1]==43 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==42 ){
    if( data.input[l.byte_offset  + 1]==42 ){
        if( data.input[l.byte_offset  + 2]==61 ){
            l.setToken( TokenSymbol, 3, 3 );
            return 5
        };
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==47 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==37 ){
    if( data.input[l.byte_offset  + 1]==61 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    };
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==111 ){
    if( data.input[l.byte_offset  + 1]==102 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    }
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 3
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 2
} else if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==46 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    if( nocap_a2074301606e59a8( l, data ) ){
    return 5
} else if( nocap_6725b1140c2474a9( l, data ) ){
    return 5
};
    return -1
}
function sym_map_f2a9852fd0c3882c(l, data){
    if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 8
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 7
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 6
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 5
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 4
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 3
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 2
    }
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 1
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
};
    if( l.isNum( data ) ){
    return 9
};
    return -1
}
function sym_map_ff848b963e584b0e(l, data){
    if( data.input[l.byte_offset  + 0]==40 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 9
} else if( data.input[l.byte_offset  + 0]==96 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 8
} else if( data.input[l.byte_offset  + 0]==47 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 7
} else if( data.input[l.byte_offset  + 0]==123 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 6
} else if( data.input[l.byte_offset  + 0]==91 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 5
} else if( data.input[l.byte_offset  + 0]==36 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==95 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 4
} else if( data.input[l.byte_offset  + 0]==99 ){
    if( 4==compare( data, l.byte_offset  + 1, 321, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 3
        }
    }
} else if( data.input[l.byte_offset  + 0]==116 ){
    if( data.input[l.byte_offset  + 1]==104 ){
        if( 2==compare( data, l.byte_offset  + 2, 336, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 2
            }
        }
    } else if( data.input[l.byte_offset  + 1]==114 ){
        if( 2==compare( data, l.byte_offset  + 2, 340, 2 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
                l.setToken( TokenSymbol, 4, 4 );
                return 0
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==102 ){
    if( data.input[l.byte_offset  + 1]==97 ){
        if( 3==compare( data, l.byte_offset  + 2, 293, 3 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
                l.setToken( TokenSymbol, 5, 5 );
                return 0
            }
        }
    } else if( data.input[l.byte_offset  + 1]==117 ){
        if( 6==compare( data, l.byte_offset  + 2, 89, 6 ) ){
            if( l.isDiscrete( data, TokenIdentifier, 8 ) ){
                l.setToken( TokenSymbol, 8, 8 );
                return 1
            }
        }
    }
} else if( data.input[l.byte_offset  + 0]==97 ){
    if( 4==compare( data, l.byte_offset  + 1, 207, 4 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 5 ) ){
            l.setToken( TokenSymbol, 5, 5 );
            return 1
        }
    }
} else if( data.input[l.byte_offset  + 0]==48 ){
    if( data.input[l.byte_offset  + 1]==98 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==66 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==111 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==79 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==120 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    } else if( data.input[l.byte_offset  + 1]==88 ){
        l.setToken( TokenSymbol, 2, 2 );
        return 0
    }
} else if( data.input[l.byte_offset  + 0]==39 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==34 ){
    l.setToken( TokenSymbol, 1, 1 );
    return 0
} else if( data.input[l.byte_offset  + 0]==110 ){
    if( 3==compare( data, l.byte_offset  + 1, 159, 3 ) ){
        if( l.isDiscrete( data, TokenIdentifier, 4 ) ){
            l.setToken( TokenSymbol, 4, 4 );
            return 0
        }
    }
};
    if( l.isUniID( data ) ){
    return 4
} else if( l.isNum( data ) ){
    return 0
};
    return -1
}
function tk_22d4cc8b05af400d(l, data){
    if( ( l.type )==131072 )return true;;
    if( dt_dc86c96572600d23( l, data ) ){
    var stack_ptr = data.stack_ptr;
    var input_ptr = data.input_ptr;
    var state = data.state;
    var copy = l.copyInPlace(  );
    pushFN( data, $comments );
    data.state = NULL_STATE;
    var ACTIVE = true;
    while( ( ACTIVE ) ) {
            ACTIVE = stepKernel( data, l, stack_ptr  + 1 )
        };
    data.state = state;
    if( data.prod ==2 ){
        data.stack_ptr = stack_ptr;
        data.input_ptr = input_ptr;
        l.slice( copy );
        l.type = 131072;
        return true
    } else {
        l.sync( copy );
        data.stack_ptr = stack_ptr;
        data.input_ptr = input_ptr;
        return false
    }
};
    return false
}
function $javascript(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  import export { yield async new ( super this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '0:0 javascript=>• start [ τimport, τexport, τ{, τyield, τasync, τnew, τ(, τsuper, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_49ad9d404a04d2f8 );
    pushFN( data, $start );
    return data.rules_ptr;
    return -1
}
function $start(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  import export { yield async new ( super this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '1:1 start=>• module [ τimport, τexport, τ{, τyield, τasync, τnew, τ(, τsuper, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_f5c9fb70f730cb3d );
    pushFN( data, $module );
    return data.rules_ptr;
    return -1
}
function $comments(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  /* //  ]';
    '2:2 comments=>• τ/* comments_list_3 τ*/ [ τ/* ]';
    '2:4 comments=>• τ/* τ*/ [ τ/* ]';
    '2:3 comments=>• τ// comments_list_6 θnl [ τ// ]';
    '2:5 comments=>• τ// θnl [ τ// ]';
    if( cmpr_set( l, data, 0, 2, 2 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  */ sym ws nl id num  ]';
    '2:2 comments=>• τ/* comments_list_3 τ*/ [ τ/* ]';
    '2:4 comments=>• τ/* τ*/ [ τ/* ]';
    var pk = l.copyInPlace(  );
    skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 186, 2, 2 ) ){
        pushFN( data, branch_e5b05349fe7e0ae6 );
        return branch_e50720a172b5793e( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_e5b05349fe7e0ae6 );
        return branch_ca28cfcf0375df5c( l, data, state, prod, prod_start )
    }
} else if( cmpr_set( l, data, 184, 2, 2 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  sym ws id num nl  ]';
    '2:3 comments=>• τ// comments_list_6 θnl [ τ// ]';
    '2:5 comments=>• τ// θnl [ τ// ]';
    var pk = l.copyInPlace(  );
    skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.isUniID( data )||pk.isNum( data )||pk.isSym( true, data )||pk.isSP( true, data ) ){
        pushFN( data, branch_e5b05349fe7e0ae6 );
        return branch_e6ebddcb9698043f( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_e5b05349fe7e0ae6 );
        return branch_465aad50ecdf4b34( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $asi(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ; } nl END_OF_FILE  ]';
    '3:6 asi=>• τ; [ τ; ]';
    '3:7 asi=>• τ} [ τ}-ns ]';
    '3:8 asi=>• θnl [ θnl ]';
    '3:9 asi=>• END_OF_FILE [ END_OF_FILE ]';
    if( l.current_byte ==59 ){
    pushFN( data, branch_4625454c6de33ba5 );
    return branch_00fc4e729672fa9e( l, data, state, prod, prod_start )
} else if( nocap_0ddb4de20b271ac4( l, data ) ){
    pushFN( data, branch_4625454c6de33ba5 );
    return branch_2fc2afa111fe7899( l, data, state, prod, prod_start )
} else if( nocap_6725b1140c2474a9( l, data ) ){
    pushFN( data, branch_4625454c6de33ba5 );
    return branch_4c81b057025dc3ed( l, data, state, prod, prod_start )
} else if( nocap_a2074301606e59a8( l, data ) ){
    pushFN( data, branch_4625454c6de33ba5 );
    return branch_6f36132db993d6f3( l, data, state, prod, prod_start )
};
    return -1
}
function $module(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  import export { yield async new ( super this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '4:10 module=>• module_body [ τimport, τexport, τ{, τyield, τasync, τnew, τ(, τsuper, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_60754a6e74fc0bfc );
    pushFN( data, $module_body );
    return data.rules_ptr;
    return -1
}
function $module_body(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  import export { yield async new ( super this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '5:11 module_body=>• module_item [ τimport, τexport, τ{, τyield, τasync, τnew, τ(, τsuper, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_45065f96ec9b943e );
    pushFN( data, $module_item );
    return data.rules_ptr;
    return -1
}
function $module_body_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 5: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  import export { yield async new ( super this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
                '5:12 module_body=>module_body • module_item [ τimport, τexport, τ{, τyield, τasync, τnew, τ(, τsuper, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
                '4:10 module=>module_body • [  ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 55, 17, 17 ) ){
                    return 5
                };
                if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0x800a996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
                    pushFN( data, branch_a23fd17e734430ab );
                    return branch_41f348043a729264( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==5 )?prod :-1
}
function $module_item(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  import export { yield async new ( super this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '6:13 module_item=>• import_declaration [ τimport ]';
    '6:15 module_item=>• statement_list_item [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    '6:14 module_item=>• export_declaration [ τexport ]';
    if( cmpr_set( l, data, 284, 6, 6 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id * { " " ( .  ]';
    '6:13 module_item=>• import_declaration [ τimport ]';
    '6:15 module_item=>• statement_list_item [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( assert_ascii( pk, 0x0, 0x494, 0x80000000, 0x8000000 )||pk.isUniID( data ) ){
        pushFN( data, branch_0c9d97682b645001 );
        return branch_e480ed3538513854( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_0c9d97682b645001 );
        return branch_e194ade8a727c95b( l, data, state, prod, prod_start )
    }
} else if( cmpr_set( l, data, 218, 6, 6 ) ){
    pushFN( data, branch_0c9d97682b645001 );
    return branch_c9b4bfa3a9f90fbc( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_0c9d97682b645001 );
    return branch_e89a0fdfbb80346e( l, data, state, prod, prod_start )
};
    return -1
}
function $import_declaration(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  import  ]';
    '7:16 import_declaration=>• τimport import_clause from_clause asi [ τimport ]';
    '7:17 import_declaration=>• τimport module_specifier asi [ τimport ]';
    if( cmpr_set( l, data, 284, 6, 6 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id * { " "  ]';
    '7:16 import_declaration=>τimport • import_clause from_clause asi [ τ_, τ$, θid, τ*, τ{ ]';
    '7:17 import_declaration=>τimport • module_specifier asi [ τ", τ" ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( assert_ascii( l, 0x0, 0x410, 0x80000000, 0x8000000 )||l.isUniID( data ) ){
        pushFN( data, branch_1c506044841d35a0 );
        return branch_86030f7ca1ea8395( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_1c506044841d35a0 );
        return branch_74f90fd15de0e06a( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $import_clause(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id * {  ]';
    '8:18 import_clause=>• imported_default_binding [ τ_, τ$, θid ]';
    '8:21 import_clause=>• imported_default_binding τ, name_space_import [ τ_, τ$, θid ]';
    '8:22 import_clause=>• imported_default_binding τ, named_imports [ τ_, τ$, θid ]';
    '8:19 import_clause=>• name_space_import [ τ* ]';
    '8:20 import_clause=>• named_imports [ τ{ ]';
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  9  ]';
    '8:18 import_clause=>• imported_default_binding [ τ_, τ$, θid ]';
    '8:21 import_clause=>• imported_default_binding τ, name_space_import [ τ_, τ$, θid ]';
    '8:22 import_clause=>• imported_default_binding τ, named_imports [ τ_, τ$, θid ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_28ca79c4c58c4b1f );
    pushFN( data, $imported_default_binding );
    return data.rules_ptr
} else if( l.current_byte ==42 ){
    pushFN( data, branch_ded893b92fe51418 );
    return branch_25dfcc138ad1b27b( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_ded893b92fe51418 );
    return branch_f97730c42ee82415( l, data, state, prod, prod_start )
};
    return -1
}
function $imported_default_binding(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '9:23 imported_default_binding=>• imported_binding [ τ_, τ$, θid ]';
    pushFN( data, branch_4fb300bf654ac57c );
    pushFN( data, $imported_binding );
    return data.rules_ptr;
    return -1
}
function $name_space_import(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  *  ]';
    '10:24 name_space_import=>• τ* τas imported_binding [ τ* ]';
    if( l.current_byte ==42 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  *  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '10:24 name_space_import=>τ* • τas imported_binding [ τas ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( cmpr_set( l, data, 206, 2, 2 ) )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_c1956f0c853f1c8f );
        pushFN( data, $imported_binding );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function $named_imports(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '11:25 named_imports=>• τ{ named_imports_list_41 τ, τ} [ τ{ ]';
    '11:26 named_imports=>• τ{ τ, τ} [ τ{ ]';
    '11:27 named_imports=>• τ{ named_imports_list_41 τ} [ τ{ ]';
    '11:28 named_imports=>• τ{ τ} [ τ{ ]';
    if( l.current_byte ==123 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id , }  ]';
    '11:25 named_imports=>τ{ • named_imports_list_41 τ, τ} [ τ_, τ$, θid ]';
    '11:27 named_imports=>τ{ • named_imports_list_41 τ} [ τ_, τ$, θid ]';
    '11:26 named_imports=>τ{ • τ, τ} [ τ, ]';
    '11:28 named_imports=>τ{ • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  181  ]';
        '11:25 named_imports=>τ{ • named_imports_list_41 τ, τ} [ τ_, τ$, θid ]';
        '11:27 named_imports=>τ{ • named_imports_list_41 τ} [ τ_, τ$, θid ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_7b82d5733c1718fd );
        pushFN( data, $named_imports_list_41 );
        return data.rules_ptr
    } else if( l.current_byte ==44 ){
        pushFN( data, branch_cdadc72de97fcb50 );
        return branch_d87fc1bdd7525a62( l, data, state, prod, prod_start )
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_cdadc72de97fcb50 );
        return branch_ab1ddffcce931b9f( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $from_clause(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  from  ]';
    '12:29 from_clause=>• τfrom module_specifier [ τfrom ]';
    if( cmpr_set( l, data, 296, 4, 4 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  from  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '12:29 from_clause=>τfrom • module_specifier [ τ", τ" ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_4113f336b21c05ca );
    pushFN( data, $module_specifier );
    return data.rules_ptr
};
    return -1
}
function $import_specifier(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    pushFN( data, branch_bcb6ea1597bdc114 );
    pushFN( data, $default_productions__js_id_symbols );
    return prod_start;
    return -1
}
function $import_specifier_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 170: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  as , } from END_OF_PRODUCTION  ]';
                '15:33 imported_binding=>identifier • [ τ,, τ}, τfrom ]';
                '13:31 import_specifier=>identifier • τas imported_binding [ τas ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 206, 2, 2 ) ){
                    pushFN( data, branch_d298b107faacc2eb );
                    return branch_c07a393d315dad22( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  , } from END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '15:33 imported_binding=>identifier • [ τ,, τ}, τfrom ]';
                    add_reduce( state, data, 1, 17 );
                    add_reduce( state, data, 1, 15 );
                    return 13
                };
                break
            }
            case 178: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  _ $ id num as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                switch(sym_map_c4f390da9b9d0165( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  _  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $import_specifier_goto );
                        return 178
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  $  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $import_specifier_goto );
                        return 178
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  id  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $import_specifier_goto );
                        return 178
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  num  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $import_specifier_goto );
                        return 178
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                        add_reduce( state, data, 1, 244 );
                        prod = 170;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==13 )?prod :-1
}
function $module_specifier(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  " "  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '14:32 module_specifier=>• string_literal [ τ", τ" ]';
    pushFN( data, branch_a026a219565415a4 );
    pushFN( data, $string_literal );
    return data.rules_ptr;
    return -1
}
function $imported_binding(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '15:33 imported_binding=>• identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_223035d3da6767b4 );
    pushFN( data, $identifier );
    return data.rules_ptr;
    return -1
}
function $export_declaration(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  export  ]';
    '16:34 export_declaration=>• τexport τ* from_clause asi [ τexport ]';
    '16:35 export_declaration=>• τexport export_clause from_clause asi [ τexport ]';
    '16:36 export_declaration=>• τexport variable_statement [ τexport ]';
    '16:37 export_declaration=>• τexport declaration [ τexport ]';
    '16:38 export_declaration=>• τexport τdefault hoistable_declaration [ τexport ]';
    '16:39 export_declaration=>• τexport τdefault class_declaration [ τexport ]';
    '16:40 export_declaration=>• τexport τdefault assignment_expression asi [ τexport ]';
    '16:41 export_declaration=>• τexport export_clause asi [ τexport ]';
    if( cmpr_set( l, data, 218, 6, 6 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  class async function let const var default * {  ]';
    '16:34 export_declaration=>τexport • τ* from_clause asi [ τ* ]';
    '16:35 export_declaration=>τexport • export_clause from_clause asi [ τ{ ]';
    '16:41 export_declaration=>τexport • export_clause asi [ τ{ ]';
    '16:36 export_declaration=>τexport • variable_statement [ τvar ]';
    '16:37 export_declaration=>τexport • declaration [ τclass, τasync, τfunction, τlet, τconst ]';
    '16:38 export_declaration=>τexport • τdefault hoistable_declaration [ τdefault ]';
    '16:39 export_declaration=>τexport • τdefault class_declaration [ τdefault ]';
    '16:40 export_declaration=>τexport • τdefault assignment_expression asi [ τdefault ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    switch(sym_map_5787ad6719a68bc6( l, data )){
        case 0: 
        {
            '"--LEAF--"';
            'Leaf [  class async function let const  ]';
            '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
            '16:37 export_declaration=>τexport • declaration [ τclass, τasync, τfunction, τlet, τconst ]';
            pushFN( data, branch_566319b55b514cd8 );
            pushFN( data, $declaration );
            return data.rules_ptr
        }
        case 1: 
        {
            '"--LEAF--"';
            'Leaf [  var  ]';
            '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
            '16:36 export_declaration=>τexport • variable_statement [ τvar ]';
            pushFN( data, branch_566319b55b514cd8 );
            pushFN( data, $variable_statement );
            return data.rules_ptr
        }
        case 2: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  default  ]';
            '16:38 export_declaration=>τexport • τdefault hoistable_declaration [ τdefault ]';
            '16:39 export_declaration=>τexport • τdefault class_declaration [ τdefault ]';
            '16:40 export_declaration=>τexport • τdefault assignment_expression asi [ τdefault ]';
            'Number of end groups0 [    ]';
            'All symbols [  async function class ++ -- delete void typeof + ~ ! - await new yield _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { / ` super import  ]';
            '16:38 export_declaration=>τexport τdefault • hoistable_declaration [ τasync, τfunction ]';
            '16:40 export_declaration=>τexport τdefault • assignment_expression asi [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τ/, τ`, τsuper, τimport ]';
            '16:39 export_declaration=>τexport τdefault • class_declaration [ τclass ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( cmpr_set( l, data, 206, 5, 5 ) ){
                'Number of end groups0 [    ]';
                'All symbols [  function _ $ id (  ]';
                '16:38 export_declaration=>τexport τdefault • hoistable_declaration [ τasync, τfunction ]';
                '16:40 export_declaration=>τexport τdefault • assignment_expression asi [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τ/, τ`, τsuper, τimport ]';
                var pk = l.copyInPlace(  );
                skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
                if( cmpr_set( pk, data, 87, 8, 8 ) ){
                    pushFN( data, branch_c1d1fe6803526df3 );
                    return branch_9870e6df1b3e048d( l, data, state, prod, prod_start )
                } else {
                    pushFN( data, branch_c1d1fe6803526df3 );
                    return branch_39dd01f7caa1e137( l, data, state, prod, prod_start )
                }
            } else if( cmpr_set( l, data, 87, 8, 8 ) ){
                pushFN( data, branch_c1d1fe6803526df3 );
                return branch_9870e6df1b3e048d( l, data, state, prod, prod_start )
            } else if( cmpr_set( l, data, 320, 5, 5 ) ){
                pushFN( data, branch_c1d1fe6803526df3 );
                return branch_da77cf0f2dea6af0( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_c1d1fe6803526df3 );
                return branch_c79a94e17b64f6ea( l, data, state, prod, prod_start )
            }
        }
        case 3: 
        {
            '"--LEAF--"';
            'Leaf [  *  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '16:34 export_declaration=>τexport • τ* from_clause asi [ τ* ]';
            consume( l, data, state );
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            pushFN( data, branch_bd0a107013812bcd );
            pushFN( data, $from_clause );
            return data.rules_ptr
        }
        case 4: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  17  ]';
            '16:35 export_declaration=>τexport • export_clause from_clause asi [ τ{ ]';
            '16:41 export_declaration=>τexport • export_clause asi [ τ{ ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            pushFN( data, branch_32c5ed17050d6d9d );
            pushFN( data, $export_clause );
            return data.rules_ptr
        }
        default: 
        break
    }
};
    return -1
}
function $export_clause(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '17:42 export_clause=>• τ{ export_clause_list_82 τ, τ} [ τ{ ]';
    '17:43 export_clause=>• τ{ τ, τ} [ τ{ ]';
    '17:44 export_clause=>• τ{ export_clause_list_82 τ} [ τ{ ]';
    '17:45 export_clause=>• τ{ τ} [ τ{ ]';
    if( l.current_byte ==123 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id , }  ]';
    '17:42 export_clause=>τ{ • export_clause_list_82 τ, τ} [ τ_, τ$, θid ]';
    '17:44 export_clause=>τ{ • export_clause_list_82 τ} [ τ_, τ$, θid ]';
    '17:43 export_clause=>τ{ • τ, τ} [ τ, ]';
    '17:45 export_clause=>τ{ • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  182  ]';
        '17:42 export_clause=>τ{ • export_clause_list_82 τ, τ} [ τ_, τ$, θid ]';
        '17:44 export_clause=>τ{ • export_clause_list_82 τ} [ τ_, τ$, θid ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_cca599bd618657ff );
        pushFN( data, $export_clause_list_82 );
        return data.rules_ptr
    } else if( l.current_byte ==44 ){
        pushFN( data, branch_00a4c64bb3aae7a1 );
        return branch_19c88b1b35c139ba( l, data, state, prod, prod_start )
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_00a4c64bb3aae7a1 );
        return branch_5292e5772cf9c5bd( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $export_specifier(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  170  ]';
    '18:46 export_specifier=>• identifier [ τ_, τ$, θid ]';
    '18:47 export_specifier=>• identifier τas identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_6a94146ec52dd7b1 );
    pushFN( data, $identifier );
    return data.rules_ptr;
    return -1
}
function $script(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '19:48 script=>• script_body [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_48fe1ee40e22d53b );
    pushFN( data, $script_body );
    return data.rules_ptr;
    return -1
}
function $script_body(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '20:49 script_body=>• statement_list [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_fc70a0c12584fbac );
    pushFN( data, $statement_list );
    return data.rules_ptr;
    return -1
}
function $statement_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '21:50 statement_list=>• statement_list_item [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    pushFN( data, branch_87b096c937a94475 );
    pushFN( data, $statement_list_item );
    return data.rules_ptr;
    return -1
}
function $statement_list_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 21: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
                '21:51 statement_list=>statement_list • statement_list_item [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
                '20:49 script_body=>statement_list • [  ]';
                '28:75 block=>τ{ statement_list • τ} [ τ} ]';
                '43:129 case_clause=>τcase expression τ: statement_list • [ τdefault, τ}, τcase ]';
                '44:131 default_clause=>τdefault τ: statement_list • [ τ}, τcase ]';
                '67:185 function_statement_list=>statement_list • [ τ} ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 325, 4, 4 )||cmpr_set( l, data, 224, 7, 7 )||cmpr_set( l, data, 55, 17, 17 ) ){
                    return 21
                };
                if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0x800a996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
                    pushFN( data, branch_3f51476e0eed9a09 );
                    return branch_9eea0b623172c3ac( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==21 )?prod :-1
}
function $statement_list_item(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  class function let const async { yield new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger  ]';
    '22:52 statement_list_item=>• statement [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger ]';
    '22:53 statement_list_item=>• declaration [ τclass, τasync, τfunction, τlet, τconst ]';
    if( dt_f1e2793ad80166c9( l, data )||cmpr_set( l, data, 87, 8, 8 )||cmpr_set( l, data, 150, 3, 3 ) ){
    pushFN( data, branch_2b13925b2d798c85 );
    return branch_09f63b47290001fa( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 206, 5, 5 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  function _ $ id (  ]';
    '22:52 statement_list_item=>• statement [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger ]';
    '22:53 statement_list_item=>• declaration [ τclass, τasync, τfunction, τlet, τconst ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 87, 8, 8 ) ){
        pushFN( data, branch_2b13925b2d798c85 );
        return branch_24a3dfbe51dae26f( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_2b13925b2d798c85 );
        return branch_9aec1aa5aaed4e05( l, data, state, prod, prod_start )
    }
} else {
    pushFN( data, branch_2b13925b2d798c85 );
    return branch_cd331bf00d0398da( l, data, state, prod, prod_start )
};
    return -1
}
function $statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b num delete void typeof + ~ ! - await ++ -- do while for switch var if continue break return with throw try debugger _ $ id { ;  ]';
    '23:54 statement=>• block_statement [ τ{ ]';
    '23:55 statement=>• expression_statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    '23:57 statement=>• variable_statement [ τvar ]';
    '23:58 statement=>• empty_statement [ τ; ]';
    '23:59 statement=>• if_statement [ τif ]';
    '23:60 statement=>• breakable_statement [ τdo, τwhile, τfor, τswitch ]';
    '23:61 statement=>• continue_statement [ τcontinue ]';
    '23:62 statement=>• break_statement [ τbreak ]';
    '23:63 statement=>• return_statement [ τreturn ]';
    '23:64 statement=>• with_statement [ τwith ]';
    '23:65 statement=>• throw_statement [ τthrow ]';
    '23:66 statement=>• try_statement [ τtry ]';
    '23:67 statement=>• debugger_statement [ τdebugger ]';
    switch(sym_map_8dc62205f6348d00( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b num delete void typeof + ~ ! - await ++ --  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:55 statement=>• expression_statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $expression_statement );
        return data.rules_ptr
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  do while for switch  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:60 statement=>• breakable_statement [ τdo, τwhile, τfor, τswitch ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $breakable_statement );
        return data.rules_ptr
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  var  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:57 statement=>• variable_statement [ τvar ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $variable_statement );
        return data.rules_ptr
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  if  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:59 statement=>• if_statement [ τif ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $if_statement );
        return data.rules_ptr
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  continue  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:61 statement=>• continue_statement [ τcontinue ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $continue_statement );
        return data.rules_ptr
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  break  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:62 statement=>• break_statement [ τbreak ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $break_statement );
        return data.rules_ptr
    }
    case 6: 
    {
        '"--LEAF--"';
        'Leaf [  return  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:63 statement=>• return_statement [ τreturn ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $return_statement );
        return data.rules_ptr
    }
    case 7: 
    {
        '"--LEAF--"';
        'Leaf [  with  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:64 statement=>• with_statement [ τwith ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $with_statement );
        return data.rules_ptr
    }
    case 8: 
    {
        '"--LEAF--"';
        'Leaf [  throw  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:65 statement=>• throw_statement [ τthrow ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $throw_statement );
        return data.rules_ptr
    }
    case 9: 
    {
        '"--LEAF--"';
        'Leaf [  try  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:66 statement=>• try_statement [ τtry ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $try_statement );
        return data.rules_ptr
    }
    case 10: 
    {
        '"--LEAF--"';
        'Leaf [  debugger  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:67 statement=>• debugger_statement [ τdebugger ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $debugger_statement );
        return data.rules_ptr
    }
    case 11: 
    {
        '"--LEAF--"';
        'Leaf [  _ $ id  ]';
        '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
        '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
        pushFN( data, branch_53f0ea822d5272dd );
        pushFN( data, $default_productions__js_id_symbols );
        return prod_start
    }
    case 12: 
    {
        '"--LEAF--"';
        'Leaf [  {  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:54 statement=>• block_statement [ τ{ ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $block_statement );
        return data.rules_ptr
    }
    case 13: 
    {
        '"--LEAF--"';
        'Leaf [  ;  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '23:58 statement=>• empty_statement [ τ; ]';
        pushFN( data, branch_209aa4c7adf816a5 );
        pushFN( data, $empty_statement );
        return data.rules_ptr
    }
    default: 
    break
};
    return -1
}
function $statement_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 70: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  =>  ]';
                '69:191 arrow_function=>arrow_parameters • τ=> concise_body [ τ=> ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 29, 2, 2 ) ){
                    consume( l, data, state );
                    '"--LEAF--"';
                    'Leaf [  =>  ]';
                    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
                    '69:191 arrow_function=>arrow_parameters τ=> • concise_body [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τfunction, τclass, τ/, τ`, τsuper, τimport, τ{ ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    pushFN( data, branch_1d35538ea043d8f5 );
                    pushFN( data, $concise_body );
                    return data.rules_ptr
                };
                break
            }
            case 80: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  , ; } nl END_OF_FILE  ]';
                '30:78 expression_statement=>expression • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
                '80:240 expression=>expression • τ, assignment_expression [ τ, ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==44 ){
                    pushFN( data, branch_71f8381ec282f9fe );
                    return branch_fff5bfc6a940912e( l, data, state, prod, prod_start )
                } else if( nocap_ef6036075771b59e( l, data )||l.current_byte ==59 ){
                    pushFN( data, branch_209aa4c7adf816a5 );
                    return branch_793a8f7898367c0d( l, data, state, prod, prod_start )
                };
                break
            }
            case 81: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  *= /= %= += -= <<= >>= >>>= &= ^= |= **= &&= ||= = ?? ++ -- ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '97:302 assignment_expression=>left_hand_side_expression • τ= assignment_expression [ τ= ]';
                '97:303 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression [ τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||= ]';
                '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '115:371 update_expression=>left_hand_side_expression • τ++ [ τ++ ]';
                '115:372 update_expression=>left_hand_side_expression • τ-- [ τ-- ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_ce95a4ad2e99665e( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  *= /= %= += -= <<= >>= >>>= &= ^= |= **= &&= ||=  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '97:303 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression [ τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||= ]';
                        pushFN( data, branch_70f2f1f5c1617eb9 );
                        pushFN( data, $assignment_operator );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  =  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '97:302 assignment_expression=>left_hand_side_expression • τ= assignment_expression [ τ= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_c6817b75407c04aa );
                        pushFN( data, $assignment_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        'Number of end groups0 [    ]';
                        'All symbols [  yield ++ -- delete void typeof + ~ ! - await new async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
                        '97:303 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression [ τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||= ]';
                        '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        var pk = l.copyInPlace(  );
                        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                        if( cmpr_set( pk, data, 153, 5, 5 ) ){
                            pushFN( data, branch_71f8381ec282f9fe );
                            return branch_ab9c437f7b802491( l, data, state, prod, prod_start )
                        } else if( cmpr_set( pk, data, 190, 2, 2 )||cmpr_set( pk, data, 192, 2, 2 )||cmpr_set( pk, data, 307, 6, 6 )||cmpr_set( pk, data, 146, 4, 4 )||dt_b20f4716c284a542( pk, data )||dt_2f6691a653b819d6( pk, data )||dt_5b7bef307ef015e7( pk, data )||dt_c9742b8c3a6930ba( pk, data )||dt_57f0cbc88859bc5b( pk, data )||cmpr_set( pk, data, 320, 5, 5 )||cmpr_set( pk, data, 345, 5, 5 )||cmpr_set( pk, data, 284, 6, 6 )||assert_ascii( pk, 0x0, 0xa996, 0x88000000, 0x48000001 )||pk.isUniID( data )||pk.isNum( data ) ){
                            var fk1 = fork( data );
                            pushFN( fk1, branch_5039cff9313d4b05 );
                            pushFN( data, branch_f96ad7874d923b78 );
                            return 0
                        }
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ++  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '115:371 update_expression=>left_hand_side_expression • τ++ [ τ++ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 183 );
                        pushFN( data, $statement_goto );
                        return 115
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  --  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '115:372 update_expression=>left_hand_side_expression • τ-- [ τ-- ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 183 );
                        pushFN( data, $statement_goto );
                        return 115
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        prod = 115;
                        continue
                    }
                };
                break
            }
            case 83: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ( ?. [ . ` in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_0b9f0aa31f15846b( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                        pushFN( data, branch_aeef45877415567f );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_4a97cefe93646f66 );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_0c244f08e9bb6366 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_1be5e3cd91cf0927 );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                        pushFN( data, branch_9105aa549a29c8a4 );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        prod = 81;
                        continue
                    }
                };
                break
            }
            case 88: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  . ( [ ` ?. -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                '88:263 call_expression=>call_expression • arguments [ τ( ]';
                '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_cca60d9a2b40a7b2( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_015b66d9ab0329bc );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:263 call_expression=>call_expression • arguments [ τ( ]';
                        pushFN( data, branch_e260de290d6adf96 );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_87f24febc08b3a68 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                        pushFN( data, branch_f20b9015e5517e41 );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_4a97cefe93646f66 );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        prod = 81;
                        continue
                    }
                };
                break
            }
            case 93: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ?. -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '93:279 optional_expression=>optional_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 19, 2, 2 ) ){
                    pushFN( data, branch_485b011eccb500e8 );
                    return branch_f0c3bcb79d8e42d6( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                    prod = 81;
                    continue
                };
                break
            }
            case 100: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ? ; } nl END_OF_FILE ) : ] , END_OF_PRODUCTION  ]';
                '99:319 conditional_expression=>short_circuit_expression • [ τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                '99:320 conditional_expression=>short_circuit_expression • τ? assignment_expression τ: assignment_expression [ τ? ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==63 ){
                    pushFN( data, branch_71f8381ec282f9fe );
                    return branch_7e91dfc3645106f3( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  ; } nl END_OF_FILE ) : ] , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '99:319 conditional_expression=>short_circuit_expression • [ τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                    prod = 80;
                    continue
                };
                break
            }
            case 101: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '100:321 short_circuit_expression=>logical_or_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '101:324 logical_or_expression=>logical_or_expression • τ|| logical_and_expression [ τ|| ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 39, 2, 2 ) ){
                    pushFN( data, branch_d8334662b9edd031 );
                    return branch_a5fb8c802515f878( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '100:321 short_circuit_expression=>logical_or_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    prod = 100;
                    continue
                };
                break
            }
            case 102: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '101:323 logical_or_expression=>logical_and_expression • [ τ||, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                '102:326 logical_and_expression=>logical_and_expression • τ&& bitwise_or_expression [ τ&& ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 34, 2, 2 ) ){
                    pushFN( data, branch_1027848920127da6 );
                    return branch_75006597b4ba99f6( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '101:323 logical_or_expression=>logical_and_expression • [ τ||, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                    prod = 101;
                    continue
                };
                break
            }
            case 103: 
            {
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                'Number of end groups2 [    ]';
                'All symbols [  ?? ? ; } nl END_OF_FILE ,  ]';
                '104:329 coalesce_expression_head=>coalesce_expression • [ τ?? ]';
                '100:322 short_circuit_expression=>coalesce_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                if( sym_map_1012bd13e6821850( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  ??  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '104:329 coalesce_expression_head=>coalesce_expression • [ τ?? ]';
                    prod = 104;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  ? ; } nl END_OF_FILE ,  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '100:322 short_circuit_expression=>coalesce_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    prod = 100;
                    continue
                };
                break
            }
            case 104: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ??  ]';
                '103:327 coalesce_expression=>coalesce_expression_head • τ?? bitwise_or_expression [ τ?? ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 188, 2, 2 ) ){
                    consume( l, data, state );
                    '"--LEAF--"';
                    'Leaf [  ??  ]';
                    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
                    '103:327 coalesce_expression=>coalesce_expression_head τ?? • bitwise_or_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    pushFN( data, branch_995265d8f0717f4d );
                    pushFN( data, $bitwise_or_expression );
                    return data.rules_ptr
                };
                break
            }
            case 105: 
            {
                'Number of end groups2 [    ]';
                'All symbols [  | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION ??  ]';
                '102:325 logical_and_expression=>bitwise_or_expression • [ τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '104:328 coalesce_expression_head=>bitwise_or_expression • [ τ?? ]';
                '105:331 bitwise_or_expression=>bitwise_or_expression • τ| bitwise_xor_expression [ τ| ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==124 ){
                    pushFN( data, branch_bcc324c230525aba );
                    return branch_4b700977725f12de( l, data, state, prod, prod_start )
                } else if( sym_map_ab7dd29a8404228c( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '102:325 logical_and_expression=>bitwise_or_expression • [ τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    prod = 102;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '104:328 coalesce_expression_head=>bitwise_or_expression • [ τ?? ]';
                    prod = 104;
                    continue
                };
                break
            }
            case 106: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '105:330 bitwise_or_expression=>bitwise_xor_expression • [ τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '106:333 bitwise_xor_expression=>bitwise_xor_expression • τ^ bitwise_and_expression [ τ^ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==94 ){
                    pushFN( data, branch_e6b9b19f80bfe3b3 );
                    return branch_da2a7411d5ce242e( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '105:330 bitwise_or_expression=>bitwise_xor_expression • [ τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                    prod = 105;
                    continue
                };
                break
            }
            case 107: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '106:332 bitwise_xor_expression=>bitwise_and_expression • [ τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '107:335 bitwise_and_expression=>bitwise_and_expression • τ& equality_expression [ τ& ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_eb1ae190d19756d3( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  &  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '107:335 bitwise_and_expression=>bitwise_and_expression • τ& equality_expression [ τ& ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_cc1f0c6178d33343 );
                        pushFN( data, $equality_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '106:332 bitwise_xor_expression=>bitwise_and_expression • [ τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        prod = 106;
                        continue
                    }
                };
                break
            }
            case 108: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '107:334 bitwise_and_expression=>equality_expression • [ τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '108:337 equality_expression=>equality_expression • τ== relational_expression [ τ== ]';
                '108:338 equality_expression=>equality_expression • τ!= relational_expression [ τ!= ]';
                '108:339 equality_expression=>equality_expression • τ=== relational_expression [ τ=== ]';
                '108:340 equality_expression=>equality_expression • τ!== relational_expression [ τ!== ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_9f32aad30074aaf0( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ==  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:337 equality_expression=>equality_expression • τ== relational_expression [ τ== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_60d9dbdf605f414c );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:338 equality_expression=>equality_expression • τ!= relational_expression [ τ!= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_60d9dbdf605f414c );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ===  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:339 equality_expression=>equality_expression • τ=== relational_expression [ τ=== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_60d9dbdf605f414c );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !==  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:340 equality_expression=>equality_expression • τ!== relational_expression [ τ!== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_60d9dbdf605f414c );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '107:334 bitwise_and_expression=>equality_expression • [ τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 107;
                        continue
                    }
                };
                break
            }
            case 109: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  in instanceof < > <= >= !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '108:336 equality_expression=>relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '109:342 relational_expression=>relational_expression • τ< shift_expression [ τ< ]';
                '109:343 relational_expression=>relational_expression • τ> shift_expression [ τ> ]';
                '109:344 relational_expression=>relational_expression • τ<= shift_expression [ τ<= ]';
                '109:345 relational_expression=>relational_expression • τ>= shift_expression [ τ>= ]';
                '109:346 relational_expression=>relational_expression • τinstanceof shift_expression [ τinstanceof ]';
                '109:347 relational_expression=>relational_expression • τin shift_expression [ τin ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a4ed59f4a075ef3d( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:347 relational_expression=>relational_expression • τin shift_expression [ τin ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_63dd927e9b3402f8 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  instanceof  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:346 relational_expression=>relational_expression • τinstanceof shift_expression [ τinstanceof ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_a38340fa914da01b );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:342 relational_expression=>relational_expression • τ< shift_expression [ τ< ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_2ac6998114f13dd1 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:343 relational_expression=>relational_expression • τ> shift_expression [ τ> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_2ac6998114f13dd1 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:344 relational_expression=>relational_expression • τ<= shift_expression [ τ<= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_2ac6998114f13dd1 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:345 relational_expression=>relational_expression • τ>= shift_expression [ τ>= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_2ac6998114f13dd1 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 6: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '108:336 equality_expression=>relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        prod = 108;
                        continue
                    }
                };
                break
            }
            case 110: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  << >> >>> < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '109:341 relational_expression=>shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '110:349 shift_expression=>shift_expression • τ<< additive_expression [ τ<< ]';
                '110:350 shift_expression=>shift_expression • τ>> additive_expression [ τ>> ]';
                '110:351 shift_expression=>shift_expression • τ>>> additive_expression [ τ>>> ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_0ad057c21199e520( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <<  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:349 shift_expression=>shift_expression • τ<< additive_expression [ τ<< ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_bced74b79dc4b829 );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >>  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:350 shift_expression=>shift_expression • τ>> additive_expression [ τ>> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_bced74b79dc4b829 );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >>>  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:351 shift_expression=>shift_expression • τ>>> additive_expression [ τ>>> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_bced74b79dc4b829 );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '109:341 relational_expression=>shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 109;
                        continue
                    }
                };
                break
            }
            case 111: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  + - << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '110:348 shift_expression=>additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '111:353 additive_expression=>additive_expression • τ+ multiplicative_expression [ τ+ ]';
                '111:354 additive_expression=>additive_expression • τ- multiplicative_expression [ τ- ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==43 ){
                    pushFN( data, branch_b3a890ee9678f684 );
                    return branch_0edf2a0d55e3eebe( l, data, state, prod, prod_start )
                } else if( l.current_byte ==45 ){
                    pushFN( data, branch_b3a890ee9678f684 );
                    return branch_8e180b7a9c4fa605( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '110:348 shift_expression=>additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                    prod = 110;
                    continue
                };
                break
            }
            case 112: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '111:352 additive_expression=>multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '112:356 multiplicative_expression=>multiplicative_expression • τ* exponentiation_expression [ τ* ]';
                '112:357 multiplicative_expression=>multiplicative_expression • τ/ exponentiation_expression [ τ/ ]';
                '112:358 multiplicative_expression=>multiplicative_expression • τ% exponentiation_expression [ τ% ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==42 ){
                    pushFN( data, branch_f32878feee62efe7 );
                    return branch_c99406960e9dacd8( l, data, state, prod, prod_start )
                } else if( l.current_byte ==47 ){
                    pushFN( data, branch_f32878feee62efe7 );
                    return branch_057d8d843911862e( l, data, state, prod, prod_start )
                } else if( l.current_byte ==37 ){
                    pushFN( data, branch_f32878feee62efe7 );
                    return branch_ab0dc0b4de0edc56( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '111:352 additive_expression=>multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                    prod = 111;
                    continue
                };
                break
            }
            case 115: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ** * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '113:360 exponentiation_expression=>update_expression • τ** exponentiation_expression [ τ** ]';
                '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_bd3dc49275d4a0e9( l, data )){
                    case 0: 
                    {
                        var fk1 = fork( data );
                        pushFN( fk1, branch_2cfa8163faabe1e6 );
                        pushFN( data, branch_2fcf636cb7c10e90 );
                        return 0
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || ** END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 112;
                        continue
                    }
                };
                break
            }
            case 167: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  :  ]';
                '45:133 labeled_statement=>label_identifier • τ: labeled_item [ τ: ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==58 ){
                    consume( l, data, state );
                    '"--LEAF--"';
                    'Leaf [  :  ]';
                    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
                    '45:133 labeled_statement=>label_identifier τ: • labeled_item [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τfunction ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    pushFN( data, branch_137b7d7d3b35e2cd );
                    pushFN( data, $labeled_item );
                    return data.rules_ptr
                };
                break
            }
            case 168: 
            {
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                'Number of end groups2 [    ]';
                'All symbols [  => ( ?. [ . ` = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- ** * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | && || ? ; } nl END_OF_FILE ,  ]';
                '95:289 primary_expression=>identifier_reference • [ τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '70:192 arrow_parameters=>identifier_reference • [ τ=> ]';
                if( sym_map_82c6f0eaa59907f9( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  =>  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '70:192 arrow_parameters=>identifier_reference • [ τ=> ]';
                    add_reduce( state, data, 1, 110 );
                    prod = 70;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  ( ?. [ . ` = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- ** * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | && || ? ; } nl END_OF_FILE ,  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '95:289 primary_expression=>identifier_reference • [ τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    prod = 83;
                    continue
                };
                break
            }
            case 170: 
            {
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                'Number of end groups2 [    ]';
                'All symbols [  : => ` . [ ?. ( -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ; } nl END_OF_FILE ,  ]';
                '168:525 identifier_reference=>identifier • [ τ=, τ,, τ}, τ?., τ(, τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ{, τ=> ]';
                '167:524 label_identifier=>identifier • [ τ:, τ;, τ}-ns, θnl, END_OF_FILE ]';
                if( sym_map_ae0a539a2e7403fb( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  :  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '167:524 label_identifier=>identifier • [ τ:, τ;, τ}-ns, θnl, END_OF_FILE ]';
                    add_reduce( state, data, 1, 242 );
                    prod = 167;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  => ` . [ ?. ( -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ; } nl END_OF_FILE ,  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '168:525 identifier_reference=>identifier • [ τ=, τ,, τ}, τ?., τ(, τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ{, τ=> ]';
                    add_reduce( state, data, 1, 243 );
                    prod = 168;
                    continue
                };
                break
            }
            case 178: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  _ $ id num as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                switch(sym_map_c4f390da9b9d0165( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  _  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $statement_goto );
                        return 178
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  $  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $statement_goto );
                        return 178
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  id  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $statement_goto );
                        return 178
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  num  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $statement_goto );
                        return 178
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                        add_reduce( state, data, 1, 244 );
                        prod = 170;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==23 )?prod :-1
}
function $declaration(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  async function let const class  ]';
    '24:68 declaration=>• class_declaration [ τclass ]';
    '24:69 declaration=>• hoistable_declaration [ τasync, τfunction ]';
    '24:70 declaration=>• lexical_declaration [ τlet, τconst ]';
    if( cmpr_set( l, data, 206, 5, 5 )||cmpr_set( l, data, 87, 8, 8 ) ){
    pushFN( data, branch_63699388bb9a432b );
    return branch_b8518102adc40c24( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 150, 3, 3 )||cmpr_set( l, data, 315, 5, 5 ) ){
    pushFN( data, branch_63699388bb9a432b );
    return branch_feb4337c3f996276( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_63699388bb9a432b );
    return branch_98f6a360cab52ec7( l, data, state, prod, prod_start )
};
    return -1
}
function $hoistable_declaration(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  async function  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '25:71 hoistable_declaration=>• function_declaration [ τasync, τfunction ]';
    pushFN( data, branch_bee81754442d1e81 );
    pushFN( data, $function_declaration );
    return data.rules_ptr;
    return -1
}
function $breakable_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  do while for switch  ]';
    '26:72 breakable_statement=>• iteration_statement [ τdo, τwhile, τfor ]';
    '26:73 breakable_statement=>• switch_statement [ τswitch ]';
    if( cmpr_set( l, data, 313, 2, 2 )||cmpr_set( l, data, 110, 5, 5 )||cmpr_set( l, data, 300, 3, 3 ) ){
    pushFN( data, branch_8e9e49dc0caee40f );
    return branch_56e84bec16951e78( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_8e9e49dc0caee40f );
    return branch_cc486bca1d9c4ca4( l, data, state, prod, prod_start )
};
    return -1
}
function $block_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  {  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '27:74 block_statement=>• block [ τ{ ]';
    pushFN( data, branch_4d1e8ca3dd3169d3 );
    pushFN( data, $block );
    return data.rules_ptr;
    return -1
}
function $block(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '28:75 block=>• τ{ statement_list τ} [ τ{ ]';
    '28:76 block=>• τ{ τ} [ τ{ ]';
    if( l.current_byte ==123 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const }  ]';
    '28:75 block=>τ{ • statement_list τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    '28:76 block=>τ{ • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0x800a996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_b446bada8288b8cc );
        return branch_c2ef13c4999cbf11( l, data, state, prod, prod_start )
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_b446bada8288b8cc );
        return branch_4c7992638f18d663( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $empty_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ;  ]';
    '29:77 empty_statement=>• τ; [ τ; ]';
    if( l.current_byte ==59 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  ;  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '29:77 empty_statement=>τ; • [ τelse, τwhile, τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, τ}, τdefault, τcase, τexport ]';
    add_reduce( state, data, 1, 29 );
    return 29
};
    return -1
}
function $expression_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '30:78 expression_statement=>• expression asi [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_7b45906b836c5783 );
    pushFN( data, $expression );
    return data.rules_ptr;
    return -1
}
function $if_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  if  ]';
    '31:79 if_statement=>• τif τ( expression τ) statement τelse statement [ τif ]';
    '31:80 if_statement=>• τif τ( expression τ) statement [ τif ]';
    if( cmpr_set( l, data, 290, 2, 2 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '31:79 if_statement=>τif • τ( expression τ) statement τelse statement [ τ( ]';
    '31:80 if_statement=>τif • τ( expression τ) statement [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==40 ){
        consume( l, data, state );
        'Number of end groups0 [    ]';
        'All symbols [  80  ]';
        '31:79 if_statement=>τif τ( • expression τ) statement τelse statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        '31:80 if_statement=>τif τ( • expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_0195f717fff17740 );
        pushFN( data, $expression );
        return data.rules_ptr
    }
};
    return -1
}
function $iteration_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  do while for  ]';
    '32:81 iteration_statement=>• τdo statement τwhile τ( expression τ) asi [ τdo ]';
    '32:82 iteration_statement=>• τwhile τ( expression τ) statement [ τwhile ]';
    '32:83 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; expression τ; expression τ) statement [ τfor ]';
    '32:84 iteration_statement=>• τfor τ( lexical_declaration expression τ; expression τ) statement [ τfor ]';
    '32:85 iteration_statement=>• τfor τ( for_declaration τin expression τ) statement [ τfor ]';
    '32:86 iteration_statement=>• τfor τawait τ( for_declaration τof expression τ) statement [ τfor ]';
    '32:87 iteration_statement=>• τfor τ( τ; expression τ; expression τ) statement [ τfor ]';
    '32:88 iteration_statement=>• τfor τ( expression τ; expression τ; expression τ) statement [ τfor ]';
    '32:89 iteration_statement=>• τfor τ( left_hand_side_expression τin expression τ) statement [ τfor ]';
    '32:90 iteration_statement=>• τfor τ( iteration_statement_group_180_1_ τin expression τ) statement [ τfor ]';
    '32:91 iteration_statement=>• τfor τawait τ( left_hand_side_expression τof expression τ) statement [ τfor ]';
    '32:92 iteration_statement=>• τfor τawait τ( iteration_statement_group_189_1_ τof expression τ) statement [ τfor ]';
    '32:93 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; τ; expression τ) statement [ τfor ]';
    '32:94 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; expression τ; τ) statement [ τfor ]';
    '32:95 iteration_statement=>• τfor τ( lexical_declaration τ; expression τ) statement [ τfor ]';
    '32:96 iteration_statement=>• τfor τ( lexical_declaration expression τ; τ) statement [ τfor ]';
    '32:97 iteration_statement=>• τfor τ( for_declaration τof expression τ) statement [ τfor ]';
    '32:98 iteration_statement=>• τfor τ( τ; τ; expression τ) statement [ τfor ]';
    '32:99 iteration_statement=>• τfor τ( τ; expression τ; τ) statement [ τfor ]';
    '32:100 iteration_statement=>• τfor τ( expression τ; τ; expression τ) statement [ τfor ]';
    '32:101 iteration_statement=>• τfor τ( expression τ; expression τ; τ) statement [ τfor ]';
    '32:102 iteration_statement=>• τfor τ( left_hand_side_expression τof expression τ) statement [ τfor ]';
    '32:103 iteration_statement=>• τfor τ( iteration_statement_group_189_1_ τof expression τ) statement [ τfor ]';
    '32:104 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; τ; τ) statement [ τfor ]';
    '32:105 iteration_statement=>• τfor τ( lexical_declaration τ; τ) statement [ τfor ]';
    '32:106 iteration_statement=>• τfor τ( τ; τ; τ) statement [ τfor ]';
    '32:107 iteration_statement=>• τfor τ( expression τ; τ; τ) statement [ τfor ]';
    if( cmpr_set( l, data, 313, 2, 2 ) ){
    pushFN( data, branch_8e45f000096e2702 );
    return branch_b2d82103b0bc1e75( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 110, 5, 5 ) ){
    pushFN( data, branch_8e45f000096e2702 );
    return branch_cbf043a75fcababb( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 300, 3, 3 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  await (  ]';
    '32:83 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; expression τ; expression τ) statement [ τfor ]';
    '32:84 iteration_statement=>• τfor τ( lexical_declaration expression τ; expression τ) statement [ τfor ]';
    '32:85 iteration_statement=>• τfor τ( for_declaration τin expression τ) statement [ τfor ]';
    '32:87 iteration_statement=>• τfor τ( τ; expression τ; expression τ) statement [ τfor ]';
    '32:88 iteration_statement=>• τfor τ( expression τ; expression τ; expression τ) statement [ τfor ]';
    '32:89 iteration_statement=>• τfor τ( left_hand_side_expression τin expression τ) statement [ τfor ]';
    '32:90 iteration_statement=>• τfor τ( iteration_statement_group_180_1_ τin expression τ) statement [ τfor ]';
    '32:93 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; τ; expression τ) statement [ τfor ]';
    '32:94 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; expression τ; τ) statement [ τfor ]';
    '32:95 iteration_statement=>• τfor τ( lexical_declaration τ; expression τ) statement [ τfor ]';
    '32:96 iteration_statement=>• τfor τ( lexical_declaration expression τ; τ) statement [ τfor ]';
    '32:97 iteration_statement=>• τfor τ( for_declaration τof expression τ) statement [ τfor ]';
    '32:98 iteration_statement=>• τfor τ( τ; τ; expression τ) statement [ τfor ]';
    '32:99 iteration_statement=>• τfor τ( τ; expression τ; τ) statement [ τfor ]';
    '32:100 iteration_statement=>• τfor τ( expression τ; τ; expression τ) statement [ τfor ]';
    '32:101 iteration_statement=>• τfor τ( expression τ; expression τ; τ) statement [ τfor ]';
    '32:102 iteration_statement=>• τfor τ( left_hand_side_expression τof expression τ) statement [ τfor ]';
    '32:103 iteration_statement=>• τfor τ( iteration_statement_group_189_1_ τof expression τ) statement [ τfor ]';
    '32:104 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; τ; τ) statement [ τfor ]';
    '32:105 iteration_statement=>• τfor τ( lexical_declaration τ; τ) statement [ τfor ]';
    '32:106 iteration_statement=>• τfor τ( τ; τ; τ) statement [ τfor ]';
    '32:107 iteration_statement=>• τfor τ( expression τ; τ; τ) statement [ τfor ]';
    '32:86 iteration_statement=>• τfor τawait τ( for_declaration τof expression τ) statement [ τfor ]';
    '32:91 iteration_statement=>• τfor τawait τ( left_hand_side_expression τof expression τ) statement [ τfor ]';
    '32:92 iteration_statement=>• τfor τawait τ( iteration_statement_group_189_1_ τof expression τ) statement [ τfor ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 82, 5, 5 ) ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  for  ]';
        '32:86 iteration_statement=>• τfor τawait τ( for_declaration τof expression τ) statement [ τfor ]';
        '32:91 iteration_statement=>• τfor τawait τ( left_hand_side_expression τof expression τ) statement [ τfor ]';
        '32:92 iteration_statement=>• τfor τawait τ( iteration_statement_group_189_1_ τof expression τ) statement [ τfor ]';
        'Number of end groups0 [    ]';
        'All symbols [  await  ]';
        '32:86 iteration_statement=>τfor • τawait τ( for_declaration τof expression τ) statement [ τawait ]';
        '32:91 iteration_statement=>τfor • τawait τ( left_hand_side_expression τof expression τ) statement [ τawait ]';
        '32:92 iteration_statement=>τfor • τawait τ( iteration_statement_group_189_1_ τof expression τ) statement [ τawait ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( cmpr_set( l, data, 82, 5, 5 ) ){
            consume( l, data, state );
            'Number of end groups0 [    ]';
            'All symbols [  (  ]';
            '32:86 iteration_statement=>τfor τawait • τ( for_declaration τof expression τ) statement [ τ( ]';
            '32:91 iteration_statement=>τfor τawait • τ( left_hand_side_expression τof expression τ) statement [ τ( ]';
            '32:92 iteration_statement=>τfor τawait • τ( iteration_statement_group_189_1_ τof expression τ) statement [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==40 ){
                consume( l, data, state );
                'Number of end groups0 [    ]';
                'All symbols [  let const var this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
                '32:86 iteration_statement=>τfor τawait τ( • for_declaration τof expression τ) statement [ τlet, τconst ]';
                '32:91 iteration_statement=>τfor τawait τ( • left_hand_side_expression τof expression τ) statement [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
                '32:92 iteration_statement=>τfor τawait τ( • iteration_statement_group_189_1_ τof expression τ) statement [ τvar ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 150, 3, 3 )||cmpr_set( l, data, 315, 5, 5 ) ){
                    pushFN( data, branch_8e45f000096e2702 );
                    return branch_e6a6b620a201fe45( l, data, state, prod, prod_start )
                } else if( cmpr_set( l, data, 252, 3, 3 ) ){
                    pushFN( data, branch_8e45f000096e2702 );
                    return branch_68822d3768b3a34e( l, data, state, prod, prod_start )
                } else {
                    pushFN( data, branch_8e45f000096e2702 );
                    return branch_9f2093e17756c2a6( l, data, state, prod, prod_start )
                }
            }
        }
    } else {
        'Number of end groups0 [    ]';
        'All symbols [  yield delete void typeof + ~ ! - await ++ -- let const var async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num ;  ]';
        '32:83 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; expression τ; expression τ) statement [ τfor ]';
        '32:90 iteration_statement=>• τfor τ( iteration_statement_group_180_1_ τin expression τ) statement [ τfor ]';
        '32:93 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; τ; expression τ) statement [ τfor ]';
        '32:94 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; expression τ; τ) statement [ τfor ]';
        '32:103 iteration_statement=>• τfor τ( iteration_statement_group_189_1_ τof expression τ) statement [ τfor ]';
        '32:104 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; τ; τ) statement [ τfor ]';
        '32:84 iteration_statement=>• τfor τ( lexical_declaration expression τ; expression τ) statement [ τfor ]';
        '32:85 iteration_statement=>• τfor τ( for_declaration τin expression τ) statement [ τfor ]';
        '32:95 iteration_statement=>• τfor τ( lexical_declaration τ; expression τ) statement [ τfor ]';
        '32:96 iteration_statement=>• τfor τ( lexical_declaration expression τ; τ) statement [ τfor ]';
        '32:97 iteration_statement=>• τfor τ( for_declaration τof expression τ) statement [ τfor ]';
        '32:105 iteration_statement=>• τfor τ( lexical_declaration τ; τ) statement [ τfor ]';
        '32:87 iteration_statement=>• τfor τ( τ; expression τ; expression τ) statement [ τfor ]';
        '32:98 iteration_statement=>• τfor τ( τ; τ; expression τ) statement [ τfor ]';
        '32:99 iteration_statement=>• τfor τ( τ; expression τ; τ) statement [ τfor ]';
        '32:106 iteration_statement=>• τfor τ( τ; τ; τ) statement [ τfor ]';
        '32:88 iteration_statement=>• τfor τ( expression τ; expression τ; expression τ) statement [ τfor ]';
        '32:100 iteration_statement=>• τfor τ( expression τ; τ; expression τ) statement [ τfor ]';
        '32:101 iteration_statement=>• τfor τ( expression τ; expression τ; τ) statement [ τfor ]';
        '32:107 iteration_statement=>• τfor τ( expression τ; τ; τ) statement [ τfor ]';
        '32:89 iteration_statement=>• τfor τ( left_hand_side_expression τin expression τ) statement [ τfor ]';
        '32:102 iteration_statement=>• τfor τ( left_hand_side_expression τof expression τ) statement [ τfor ]';
        skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
        switch(sym_map_1317271ae6a8d37f( pk, data )){
            case 0: 
            {
                consume( l, data, state );
                '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                'Number of end groups0 [    ]';
                'All symbols [  for  ]';
                '32:88 iteration_statement=>• τfor τ( expression τ; expression τ; expression τ) statement [ τfor ]';
                '32:100 iteration_statement=>• τfor τ( expression τ; τ; expression τ) statement [ τfor ]';
                '32:101 iteration_statement=>• τfor τ( expression τ; expression τ; τ) statement [ τfor ]';
                '32:107 iteration_statement=>• τfor τ( expression τ; τ; τ) statement [ τfor ]';
                'Number of end groups0 [    ]';
                'All symbols [  (  ]';
                '32:88 iteration_statement=>τfor • τ( expression τ; expression τ; expression τ) statement [ τ( ]';
                '32:100 iteration_statement=>τfor • τ( expression τ; τ; expression τ) statement [ τ( ]';
                '32:101 iteration_statement=>τfor • τ( expression τ; expression τ; τ) statement [ τ( ]';
                '32:107 iteration_statement=>τfor • τ( expression τ; τ; τ) statement [ τ( ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==40 ){
                    consume( l, data, state );
                    'Number of end groups0 [    ]';
                    'All symbols [  80  ]';
                    '32:88 iteration_statement=>τfor τ( • expression τ; expression τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                    '32:100 iteration_statement=>τfor τ( • expression τ; τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                    '32:101 iteration_statement=>τfor τ( • expression τ; expression τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                    '32:107 iteration_statement=>τfor τ( • expression τ; τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    pushFN( data, branch_96b29b36748c4bb9 );
                    pushFN( data, $expression );
                    return data.rules_ptr
                }
            }
            case 1: 
            {
                consume( l, data, state );
                '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                'Number of end groups0 [    ]';
                'All symbols [  for  ]';
                '32:84 iteration_statement=>• τfor τ( lexical_declaration expression τ; expression τ) statement [ τfor ]';
                '32:85 iteration_statement=>• τfor τ( for_declaration τin expression τ) statement [ τfor ]';
                '32:95 iteration_statement=>• τfor τ( lexical_declaration τ; expression τ) statement [ τfor ]';
                '32:96 iteration_statement=>• τfor τ( lexical_declaration expression τ; τ) statement [ τfor ]';
                '32:97 iteration_statement=>• τfor τ( for_declaration τof expression τ) statement [ τfor ]';
                '32:105 iteration_statement=>• τfor τ( lexical_declaration τ; τ) statement [ τfor ]';
                'Number of end groups0 [    ]';
                'All symbols [  (  ]';
                '32:84 iteration_statement=>τfor • τ( lexical_declaration expression τ; expression τ) statement [ τ( ]';
                '32:85 iteration_statement=>τfor • τ( for_declaration τin expression τ) statement [ τ( ]';
                '32:95 iteration_statement=>τfor • τ( lexical_declaration τ; expression τ) statement [ τ( ]';
                '32:96 iteration_statement=>τfor • τ( lexical_declaration expression τ; τ) statement [ τ( ]';
                '32:97 iteration_statement=>τfor • τ( for_declaration τof expression τ) statement [ τ( ]';
                '32:105 iteration_statement=>τfor • τ( lexical_declaration τ; τ) statement [ τ( ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==40 ){
                    consume( l, data, state );
                    'Number of end groups0 [    ]';
                    'All symbols [  let const  ]';
                    '32:84 iteration_statement=>τfor τ( • lexical_declaration expression τ; expression τ) statement [ τlet, τconst ]';
                    '32:85 iteration_statement=>τfor τ( • for_declaration τin expression τ) statement [ τlet, τconst ]';
                    '32:95 iteration_statement=>τfor τ( • lexical_declaration τ; expression τ) statement [ τlet, τconst ]';
                    '32:96 iteration_statement=>τfor τ( • lexical_declaration expression τ; τ) statement [ τlet, τconst ]';
                    '32:97 iteration_statement=>τfor τ( • for_declaration τof expression τ) statement [ τlet, τconst ]';
                    '32:105 iteration_statement=>τfor τ( • lexical_declaration τ; τ) statement [ τlet, τconst ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    if( cmpr_set( l, data, 150, 3, 3 )||cmpr_set( l, data, 315, 5, 5 ) ){
                        var fk1 = fork( data );
                        pushFN( fk1, branch_5ef2c73203d4e7f5 );
                        var fk2 = fork( data );
                        pushFN( fk2, branch_2793256ba3cb3698 );
                        var fk3 = fork( data );
                        pushFN( fk3, branch_30e19b49751327d5 );
                        var fk4 = fork( data );
                        pushFN( fk4, branch_83f035f14a381765 );
                        var fk5 = fork( data );
                        pushFN( fk5, branch_93a58455663ae882 );
                        pushFN( data, branch_2257b4ffff7bba52 );
                        return 0
                    }
                }
            }
            case 2: 
            {
                consume( l, data, state );
                '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                'Number of end groups0 [    ]';
                'All symbols [  for  ]';
                '32:83 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; expression τ; expression τ) statement [ τfor ]';
                '32:90 iteration_statement=>• τfor τ( iteration_statement_group_180_1_ τin expression τ) statement [ τfor ]';
                '32:93 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; τ; expression τ) statement [ τfor ]';
                '32:94 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; expression τ; τ) statement [ τfor ]';
                '32:103 iteration_statement=>• τfor τ( iteration_statement_group_189_1_ τof expression τ) statement [ τfor ]';
                '32:104 iteration_statement=>• τfor τ( iteration_statement_group_162_1_ τ; τ; τ) statement [ τfor ]';
                'Number of end groups0 [    ]';
                'All symbols [  (  ]';
                '32:83 iteration_statement=>τfor • τ( iteration_statement_group_162_1_ τ; expression τ; expression τ) statement [ τ( ]';
                '32:90 iteration_statement=>τfor • τ( iteration_statement_group_180_1_ τin expression τ) statement [ τ( ]';
                '32:93 iteration_statement=>τfor • τ( iteration_statement_group_162_1_ τ; τ; expression τ) statement [ τ( ]';
                '32:94 iteration_statement=>τfor • τ( iteration_statement_group_162_1_ τ; expression τ; τ) statement [ τ( ]';
                '32:103 iteration_statement=>τfor • τ( iteration_statement_group_189_1_ τof expression τ) statement [ τ( ]';
                '32:104 iteration_statement=>τfor • τ( iteration_statement_group_162_1_ τ; τ; τ) statement [ τ( ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==40 ){
                    consume( l, data, state );
                    'Number of end groups0 [    ]';
                    'All symbols [  var  ]';
                    '32:83 iteration_statement=>τfor τ( • iteration_statement_group_162_1_ τ; expression τ; expression τ) statement [ τvar ]';
                    '32:90 iteration_statement=>τfor τ( • iteration_statement_group_180_1_ τin expression τ) statement [ τvar ]';
                    '32:93 iteration_statement=>τfor τ( • iteration_statement_group_162_1_ τ; τ; expression τ) statement [ τvar ]';
                    '32:94 iteration_statement=>τfor τ( • iteration_statement_group_162_1_ τ; expression τ; τ) statement [ τvar ]';
                    '32:103 iteration_statement=>τfor τ( • iteration_statement_group_189_1_ τof expression τ) statement [ τvar ]';
                    '32:104 iteration_statement=>τfor τ( • iteration_statement_group_162_1_ τ; τ; τ) statement [ τvar ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    if( cmpr_set( l, data, 252, 3, 3 ) ){
                        var fk1 = fork( data );
                        pushFN( fk1, branch_18cc2f383566c0be );
                        var fk2 = fork( data );
                        pushFN( fk2, branch_cb5bcba612260349 );
                        var fk3 = fork( data );
                        pushFN( fk3, branch_9bdf426a6f694b55 );
                        var fk4 = fork( data );
                        pushFN( fk4, branch_a1920ce9e2df5626 );
                        var fk5 = fork( data );
                        pushFN( fk5, branch_faa1149e296799b8 );
                        pushFN( data, branch_b7997304b20b7708 );
                        return 0
                    }
                }
            }
            case 3: 
            {
                consume( l, data, state );
                '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                'Number of end groups0 [    ]';
                'All symbols [  for  ]';
                '32:88 iteration_statement=>• τfor τ( expression τ; expression τ; expression τ) statement [ τfor ]';
                '32:89 iteration_statement=>• τfor τ( left_hand_side_expression τin expression τ) statement [ τfor ]';
                '32:100 iteration_statement=>• τfor τ( expression τ; τ; expression τ) statement [ τfor ]';
                '32:101 iteration_statement=>• τfor τ( expression τ; expression τ; τ) statement [ τfor ]';
                '32:102 iteration_statement=>• τfor τ( left_hand_side_expression τof expression τ) statement [ τfor ]';
                '32:107 iteration_statement=>• τfor τ( expression τ; τ; τ) statement [ τfor ]';
                'Number of end groups0 [    ]';
                'All symbols [  (  ]';
                '32:88 iteration_statement=>τfor • τ( expression τ; expression τ; expression τ) statement [ τ( ]';
                '32:89 iteration_statement=>τfor • τ( left_hand_side_expression τin expression τ) statement [ τ( ]';
                '32:100 iteration_statement=>τfor • τ( expression τ; τ; expression τ) statement [ τ( ]';
                '32:101 iteration_statement=>τfor • τ( expression τ; expression τ; τ) statement [ τ( ]';
                '32:102 iteration_statement=>τfor • τ( left_hand_side_expression τof expression τ) statement [ τ( ]';
                '32:107 iteration_statement=>τfor • τ( expression τ; τ; τ) statement [ τ( ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==40 ){
                    consume( l, data, state );
                    'Number of end groups0 [    ]';
                    'All symbols [  yield delete void typeof + ~ ! - await ++ -- async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num  ]';
                    '32:88 iteration_statement=>τfor τ( • expression τ; expression τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                    '32:100 iteration_statement=>τfor τ( • expression τ; τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                    '32:101 iteration_statement=>τfor τ( • expression τ; expression τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                    '32:107 iteration_statement=>τfor τ( • expression τ; τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                    '32:89 iteration_statement=>τfor τ( • left_hand_side_expression τin expression τ) statement [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
                    '32:102 iteration_statement=>τfor τ( • left_hand_side_expression τof expression τ) statement [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    if( cmpr_set( l, data, 153, 5, 5 )||cmpr_set( l, data, 307, 6, 6 )||cmpr_set( l, data, 146, 4, 4 )||cmpr_set( l, data, 240, 6, 6 )||cmpr_set( l, data, 82, 5, 5 )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0x2802, 0x0, 0x40000000 ) ){
                        'Number of end groups0 [    ]';
                        'All symbols [  80  ]';
                        '32:88 iteration_statement=>τfor τ( • expression τ; expression τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                        '32:100 iteration_statement=>τfor τ( • expression τ; τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                        '32:101 iteration_statement=>τfor τ( • expression τ; expression τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                        '32:107 iteration_statement=>τfor τ( • expression τ; τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_96b29b36748c4bb9 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    } else if( cmpr_set( l, data, 206, 5, 5 )||dt_5b7bef307ef015e7( l, data )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||dt_a9b4e918ef416a84( l, data )||dt_c9742b8c3a6930ba( l, data )||cmpr_set( l, data, 320, 5, 5 )||dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
                        var fk1 = fork( data );
                        pushFN( fk1, branch_7177f9c92dcafc22 );
                        var fk2 = fork( data );
                        pushFN( fk2, branch_8d1d14451230a811 );
                        var fk3 = fork( data );
                        pushFN( fk3, branch_9d1d0dea72ea004a );
                        var fk4 = fork( data );
                        pushFN( fk4, branch_4614162348f77822 );
                        var fk5 = fork( data );
                        pushFN( fk5, branch_47e3b3b1decd05f2 );
                        pushFN( data, branch_e8981f5178969b15 );
                        return 0
                    }
                }
            }
            case 4: 
            {
                consume( l, data, state );
                '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                'Number of end groups0 [    ]';
                'All symbols [  for  ]';
                '32:87 iteration_statement=>• τfor τ( τ; expression τ; expression τ) statement [ τfor ]';
                '32:98 iteration_statement=>• τfor τ( τ; τ; expression τ) statement [ τfor ]';
                '32:99 iteration_statement=>• τfor τ( τ; expression τ; τ) statement [ τfor ]';
                '32:106 iteration_statement=>• τfor τ( τ; τ; τ) statement [ τfor ]';
                'Number of end groups0 [    ]';
                'All symbols [  (  ]';
                '32:87 iteration_statement=>τfor • τ( τ; expression τ; expression τ) statement [ τ( ]';
                '32:98 iteration_statement=>τfor • τ( τ; τ; expression τ) statement [ τ( ]';
                '32:99 iteration_statement=>τfor • τ( τ; expression τ; τ) statement [ τ( ]';
                '32:106 iteration_statement=>τfor • τ( τ; τ; τ) statement [ τ( ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==40 ){
                    consume( l, data, state );
                    'Number of end groups0 [    ]';
                    'All symbols [  ;  ]';
                    '32:87 iteration_statement=>τfor τ( • τ; expression τ; expression τ) statement [ τ; ]';
                    '32:98 iteration_statement=>τfor τ( • τ; τ; expression τ) statement [ τ; ]';
                    '32:99 iteration_statement=>τfor τ( • τ; expression τ; τ) statement [ τ; ]';
                    '32:106 iteration_statement=>τfor τ( • τ; τ; τ) statement [ τ; ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    if( l.current_byte ==59 ){
                        consume( l, data, state );
                        'Number of end groups0 [    ]';
                        'All symbols [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- ;  ]';
                        '32:87 iteration_statement=>τfor τ( τ; • expression τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                        '32:99 iteration_statement=>τfor τ( τ; • expression τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                        '32:98 iteration_statement=>τfor τ( τ; • τ; expression τ) statement [ τ; ]';
                        '32:106 iteration_statement=>τfor τ( τ; • τ; τ) statement [ τ; ]';
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
                            'Number of end groups0 [    ]';
                            'All symbols [  80  ]';
                            '32:87 iteration_statement=>τfor τ( τ; • expression τ; expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                            '32:99 iteration_statement=>τfor τ( τ; • expression τ; τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                            pushFN( data, branch_2ada74ff859678cc );
                            pushFN( data, $expression );
                            return data.rules_ptr
                        } else if( l.current_byte ==59 ){
                            consume( l, data, state );
                            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                            'Number of end groups0 [    ]';
                            'All symbols [  ;  ]';
                            '32:98 iteration_statement=>τfor τ( τ; • τ; expression τ) statement [ τ; ]';
                            '32:106 iteration_statement=>τfor τ( τ; • τ; τ) statement [ τ; ]';
                            'Number of end groups0 [    ]';
                            'All symbols [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- )  ]';
                            '32:98 iteration_statement=>τfor τ( τ; τ; • expression τ) statement [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                            '32:106 iteration_statement=>τfor τ( τ; τ; • τ) statement [ τ) ]';
                            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                            if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
                                pushFN( data, branch_8e45f000096e2702 );
                                return branch_28d20d26ce640ce2( l, data, state, prod, prod_start )
                            } else if( l.current_byte ==41 ){
                                pushFN( data, branch_8e45f000096e2702 );
                                return branch_19bf421166d6ae17( l, data, state, prod, prod_start )
                            }
                        }
                    }
                }
            }
            default: 
            break
        }
    }
};
    return -1
}
function $for_declaration(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '33:108 for_declaration=>• let_or_const for_binding [ τlet, τconst ]';
    pushFN( data, branch_92054d055daa3d9e );
    pushFN( data, $let_or_const );
    return data.rules_ptr;
    return -1
}
function $for_binding(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id { [  ]';
    '34:109 for_binding=>• binding_identifier [ τ_, τ$, θid ]';
    '34:110 for_binding=>• binding_pattern [ τ{, τ[ ]';
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
    pushFN( data, branch_7e7147e1d043c71f );
    return branch_9e32b56df0b8a721( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_7e7147e1d043c71f );
    return branch_9c6c51d5f340fdb6( l, data, state, prod, prod_start )
};
    return -1
}
function $continue_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  continue  ]';
    '35:111 continue_statement=>• τcontinue label_identifier asi [ τcontinue ]';
    '35:112 continue_statement=>• τcontinue asi [ τcontinue ]';
    if( cmpr_set( l, data, 115, 8, 8 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id ; } nl END_OF_FILE  ]';
    '35:111 continue_statement=>τcontinue • label_identifier asi [ τ_, τ$, θid ]';
    '35:112 continue_statement=>τcontinue • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
        pushFN( data, branch_19a085842515ff66 );
        return branch_519f210764090b39( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_19a085842515ff66 );
        return branch_77f1182a982769a0( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $break_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  break  ]';
    '36:113 break_statement=>• τbreak label_identifier asi [ τbreak ]';
    '36:114 break_statement=>• τbreak asi [ τbreak ]';
    if( cmpr_set( l, data, 123, 5, 5 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id ; } nl END_OF_FILE  ]';
    '36:113 break_statement=>τbreak • label_identifier asi [ τ_, τ$, θid ]';
    '36:114 break_statement=>τbreak • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
        pushFN( data, branch_1ddd94c6909151eb );
        return branch_fb3269af3f9fbbe2( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_1ddd94c6909151eb );
        return branch_10f65a6d9edf559c( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $return_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  return  ]';
    '37:115 return_statement=>• τreturn expression asi [ τreturn ]';
    '37:116 return_statement=>• τreturn asi [ τreturn ]';
    if( cmpr_set( l, data, 128, 6, 6 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- ; } nl END_OF_FILE  ]';
    '37:115 return_statement=>τreturn • expression asi [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '37:116 return_statement=>τreturn • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_0379c8d93663d74d );
        return branch_8a2c6da2ff23c15a( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_0379c8d93663d74d );
        return branch_66f5e41897909475( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $throw_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  throw  ]';
    '38:117 throw_statement=>• τthrow expression asi [ τthrow ]';
    if( cmpr_set( l, data, 329, 5, 5 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  throw  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '38:117 throw_statement=>τthrow • expression asi [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_46f195f784e1b9e5 );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function $with_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  with  ]';
    '39:118 with_statement=>• τwith τ( expression τ) statement [ τwith ]';
    if( cmpr_set( l, data, 231, 4, 4 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  with  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '39:118 with_statement=>τwith • τ( expression τ) statement [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==40 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_f1203093171798af );
        pushFN( data, $expression );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function $switch_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  switch  ]';
    '40:119 switch_statement=>• τswitch τ( expression τ) case_block [ τswitch ]';
    if( cmpr_set( l, data, 140, 6, 6 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  switch  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '40:119 switch_statement=>τswitch • τ( expression τ) case_block [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==40 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_4f55634a5bc030a5 );
        pushFN( data, $expression );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function $case_block(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '41:120 case_block=>• τ{ case_clauses default_clause case_clauses τ} [ τ{ ]';
    '41:121 case_block=>• τ{ default_clause case_clauses τ} [ τ{ ]';
    '41:122 case_block=>• τ{ case_clauses case_clauses τ} [ τ{ ]';
    '41:123 case_block=>• τ{ case_clauses default_clause τ} [ τ{ ]';
    '41:124 case_block=>• τ{ case_clauses τ} [ τ{ ]';
    '41:125 case_block=>• τ{ default_clause τ} [ τ{ ]';
    '41:126 case_block=>• τ{ τ} [ τ{ ]';
    if( l.current_byte ==123 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  case default }  ]';
    '41:120 case_block=>τ{ • case_clauses default_clause case_clauses τ} [ τcase ]';
    '41:122 case_block=>τ{ • case_clauses case_clauses τ} [ τcase ]';
    '41:123 case_block=>τ{ • case_clauses default_clause τ} [ τcase ]';
    '41:124 case_block=>τ{ • case_clauses τ} [ τcase ]';
    '41:121 case_block=>τ{ • default_clause case_clauses τ} [ τdefault ]';
    '41:125 case_block=>τ{ • default_clause τ} [ τdefault ]';
    '41:126 case_block=>τ{ • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 325, 4, 4 ) ){
        'Number of end groups0 [    ]';
        'All symbols [  42  ]';
        '41:120 case_block=>τ{ • case_clauses default_clause case_clauses τ} [ τcase ]';
        '41:122 case_block=>τ{ • case_clauses case_clauses τ} [ τcase ]';
        '41:123 case_block=>τ{ • case_clauses default_clause τ} [ τcase ]';
        '41:124 case_block=>τ{ • case_clauses τ} [ τcase ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_abdff15ba8c72634 );
        pushFN( data, $case_clauses );
        return data.rules_ptr
    } else if( cmpr_set( l, data, 224, 7, 7 ) ){
        'Number of end groups0 [    ]';
        'All symbols [  44  ]';
        '41:121 case_block=>τ{ • default_clause case_clauses τ} [ τdefault ]';
        '41:125 case_block=>τ{ • default_clause τ} [ τdefault ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_5a7cfb2764612167 );
        pushFN( data, $default_clause );
        return data.rules_ptr
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_b2deab1df605866e );
        return branch_7057ee0bc540e1cd( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $case_clauses(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  case  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '42:127 case_clauses=>• case_clause [ τcase ]';
    pushFN( data, branch_7dceed2d3c5af336 );
    pushFN( data, $case_clause );
    return data.rules_ptr;
    return -1
}
function $case_clauses_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  case  ]';
    '42:128 case_clauses=>case_clauses • case_clause [ τcase ]';
    '41:122 case_block=>τ{ case_clauses • case_clauses τ} [ τcase ]';
    '41:120 case_block=>τ{ case_clauses • default_clause case_clauses τ} [ τdefault ]';
    '41:123 case_block=>τ{ case_clauses • default_clause τ} [ τdefault ]';
    '41:120 case_block=>τ{ case_clauses default_clause case_clauses • τ} [ τ} ]';
    '41:121 case_block=>τ{ default_clause case_clauses • τ} [ τ} ]';
    '41:122 case_block=>τ{ case_clauses case_clauses • τ} [ τ} ]';
    '41:124 case_block=>τ{ case_clauses • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 325, 4, 4 ) ){
    pushFN( data, branch_ff9c89f6d6cd7ebb );
    return 0
};
    return ( prod ==42 )?prod :-1
}
function $case_clause(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  case  ]';
    '43:129 case_clause=>• τcase expression τ: statement_list [ τcase ]';
    '43:130 case_clause=>• τcase expression τ: [ τcase ]';
    if( cmpr_set( l, data, 325, 4, 4 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  80  ]';
    '43:129 case_clause=>τcase • expression τ: statement_list [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '43:130 case_clause=>τcase • expression τ: [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_2851798a138af48c );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function $default_clause(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  default  ]';
    '44:131 default_clause=>• τdefault τ: statement_list [ τdefault ]';
    '44:132 default_clause=>• τdefault τ: [ τdefault ]';
    if( cmpr_set( l, data, 224, 7, 7 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  :  ]';
    '44:131 default_clause=>τdefault • τ: statement_list [ τ: ]';
    '44:132 default_clause=>τdefault • τ: [ τ: ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==58 ){
        consume( l, data, state );
        'Number of end groups1 [    ]';
        'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const } case END_OF_PRODUCTION  ]';
        '44:131 default_clause=>τdefault τ: • statement_list [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
        '44:132 default_clause=>τdefault τ: • [ τ}, τcase ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0x800a996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
            pushFN( data, branch_7ca0e6aae866ede4 );
            return branch_f275ba8ec12a12d2( l, data, state, prod, prod_start )
        } else {
            '"--LEAF--"';
            'Leaf [  } case END_OF_PRODUCTION  ]';
            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
            '44:132 default_clause=>τdefault τ: • [ τ}, τcase ]';
            add_reduce( state, data, 2, 70 );
            return 44
        }
    }
};
    return -1
}
function $labeled_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '45:133 labeled_statement=>• label_identifier τ: labeled_item [ τ_, τ$, θid ]';
    pushFN( data, branch_4ec2171d02f330f3 );
    pushFN( data, $label_identifier );
    return data.rules_ptr;
    return -1
}
function $labeled_item(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  async function { yield new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger  ]';
    '46:134 labeled_item=>• statement [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger ]';
    '46:135 labeled_item=>• function_declaration [ τasync, τfunction ]';
    if( cmpr_set( l, data, 206, 5, 5 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  function _ $ id (  ]';
    '46:134 labeled_item=>• statement [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger ]';
    '46:135 labeled_item=>• function_declaration [ τasync, τfunction ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 87, 8, 8 ) ){
        pushFN( data, branch_0f2ec6ebb29efd5d );
        return branch_be01588f1d82a4fa( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_0f2ec6ebb29efd5d );
        return branch_c950d337915ea6fe( l, data, state, prod, prod_start )
    }
} else if( cmpr_set( l, data, 87, 8, 8 ) ){
    pushFN( data, branch_0f2ec6ebb29efd5d );
    return branch_be01588f1d82a4fa( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_0f2ec6ebb29efd5d );
    return branch_ef9a43dcec5d9b00( l, data, state, prod, prod_start )
};
    return -1
}
function $try_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  try  ]';
    '47:136 try_statement=>• τtry block catch [ τtry ]';
    '47:137 try_statement=>• τtry block finally [ τtry ]';
    '47:138 try_statement=>• τtry block catch finally [ τtry ]';
    if( cmpr_set( l, data, 342, 3, 3 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  28  ]';
    '47:136 try_statement=>τtry • block catch [ τ{ ]';
    '47:137 try_statement=>τtry • block finally [ τ{ ]';
    '47:138 try_statement=>τtry • block catch finally [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_7ee97bb3d338cea3 );
    pushFN( data, $block );
    return data.rules_ptr
};
    return -1
}
function $catch(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  catch  ]';
    '48:139 catch=>• τcatch τ( catch_parameter τ) block [ τcatch ]';
    if( cmpr_set( l, data, 235, 5, 5 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  catch  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '48:139 catch=>τcatch • τ( catch_parameter τ) block [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==40 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_2df7df99e7a4cdcd );
        pushFN( data, $catch_parameter );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function $finally(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  finally  ]';
    '49:140 finally=>• τfinally block [ τfinally ]';
    if( cmpr_set( l, data, 211, 7, 7 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  finally  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '49:140 finally=>τfinally • block [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_6610b84c5040c32e );
    pushFN( data, $block );
    return data.rules_ptr
};
    return -1
}
function $catch_parameter(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id { [  ]';
    '50:141 catch_parameter=>• binding_identifier [ τ_, τ$, θid ]';
    '50:142 catch_parameter=>• binding_pattern [ τ{, τ[ ]';
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
    pushFN( data, branch_40208049dc8da7ca );
    return branch_e4e28f9340f72cb7( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_40208049dc8da7ca );
    return branch_263835df2591dfc6( l, data, state, prod, prod_start )
};
    return -1
}
function $debugger_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  debugger  ]';
    '51:143 debugger_statement=>• τdebugger asi [ τdebugger ]';
    if( cmpr_set( l, data, 102, 8, 8 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  debugger  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '51:143 debugger_statement=>τdebugger • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    pushFN( data, branch_e55b5ef3fb17f969 );
    pushFN( data, $asi );
    return data.rules_ptr
};
    return -1
}
function $variable_statement(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  var  ]';
    '52:144 variable_statement=>• τvar variable_declaration_list asi [ τvar ]';
    if( cmpr_set( l, data, 252, 3, 3 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '52:144 variable_statement=>τvar • variable_declaration_list asi [ τ_, τ$, θid, τ{, τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_797db0172ef3f539 );
    pushFN( data, $variable_declaration_list );
    return data.rules_ptr
};
    return -1
}
function $variable_declaration_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '53:145 variable_declaration_list=>• variable_declaration [ τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_23fc3ce9ce429674 );
    pushFN( data, $variable_declaration );
    return data.rules_ptr;
    return -1
}
function $variable_declaration_list_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '53:146 variable_declaration_list=>variable_declaration_list • τ, variable_declaration [ τ, ]';
    '52:144 variable_statement=>τvar variable_declaration_list • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    '183:611 iteration_statement_group_162_1_=>τvar variable_declaration_list • [ τ; ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 53
};
    if( l.current_byte ==44 ){
    pushFN( data, branch_12b87485c81b9d67 );
    return branch_0fd564215daaa6fc( l, data, state, prod, prod_start )
};
    return ( prod ==53 )?prod :-1
}
function $variable_declaration(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id { [  ]';
    '54:147 variable_declaration=>• binding_identifier initializer [ τ_, τ$, θid ]';
    '54:148 variable_declaration=>• binding_identifier [ τ_, τ$, θid ]';
    '54:149 variable_declaration=>• binding_pattern initializer [ τ{, τ[ ]';
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  169  ]';
    '54:147 variable_declaration=>• binding_identifier initializer [ τ_, τ$, θid ]';
    '54:148 variable_declaration=>• binding_identifier [ τ_, τ$, θid ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_dbf943dd42defe52 );
    pushFN( data, $binding_identifier );
    return data.rules_ptr
} else {
    pushFN( data, branch_7c730e10496da020 );
    return branch_528464bc640e6a43( l, data, state, prod, prod_start )
};
    return -1
}
function $lexical_declaration(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  let const  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '55:150 lexical_declaration=>• let_or_const binding_list asi [ τlet, τconst ]';
    pushFN( data, branch_c839c8c94a6ce912 );
    pushFN( data, $let_or_const );
    return data.rules_ptr;
    return -1
}
function $let_or_const(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  let const  ]';
    '56:151 let_or_const=>• τlet [ τlet ]';
    '56:152 let_or_const=>• τconst [ τconst ]';
    if( cmpr_set( l, data, 150, 3, 3 ) ){
    pushFN( data, branch_eb24acd1de24be3d );
    return branch_0f6223832f385a63( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 315, 5, 5 ) ){
    pushFN( data, branch_eb24acd1de24be3d );
    return branch_4fa82519908b01dc( l, data, state, prod, prod_start )
};
    return -1
}
function $binding_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '57:153 binding_list=>• lexical_binding [ τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_f93c48f2271db4a5 );
    pushFN( data, $lexical_binding );
    return data.rules_ptr;
    return -1
}
function $binding_list_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '57:154 binding_list=>binding_list • τ, lexical_binding [ τ, ]';
    '55:150 lexical_declaration=>let_or_const binding_list • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 57
};
    if( l.current_byte ==44 ){
    pushFN( data, branch_1cb7c2e2b96088aa );
    return branch_2387b6d1ee96694b( l, data, state, prod, prod_start )
};
    return ( prod ==57 )?prod :-1
}
function $lexical_binding(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id { [  ]';
    '58:155 lexical_binding=>• binding_identifier [ τ_, τ$, θid ]';
    '58:156 lexical_binding=>• binding_identifier initializer [ τ_, τ$, θid ]';
    '58:157 lexical_binding=>• binding_pattern initializer [ τ{, τ[ ]';
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  169  ]';
    '58:155 lexical_binding=>• binding_identifier [ τ_, τ$, θid ]';
    '58:156 lexical_binding=>• binding_identifier initializer [ τ_, τ$, θid ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d9ffc1012de7821e );
    pushFN( data, $binding_identifier );
    return data.rules_ptr
} else {
    pushFN( data, branch_e5ebfd002841a52f );
    return branch_243aed410514dea4( l, data, state, prod, prod_start )
};
    return -1
}
function $function_declaration(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  async function  ]';
    '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:160 function_declaration=>• τasync τfunction binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:161 function_declaration=>• τasync τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:162 function_declaration=>• τasync τfunction τ* binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
    '59:166 function_declaration=>• τasync τfunction τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:167 function_declaration=>• τasync τfunction binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
    '59:168 function_declaration=>• τasync τfunction τ* τ( τ) τ{ function_body τ} [ τasync ]';
    '59:172 function_declaration=>• τasync τfunction τ( τ) τ{ function_body τ} [ τasync ]';
    '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '59:163 function_declaration=>• τfunction binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '59:164 function_declaration=>• τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '59:165 function_declaration=>• τfunction τ* binding_identifier τ( τ) τ{ function_body τ} [ τfunction ]';
    '59:169 function_declaration=>• τfunction τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '59:170 function_declaration=>• τfunction binding_identifier τ( τ) τ{ function_body τ} [ τfunction ]';
    '59:171 function_declaration=>• τfunction τ* τ( τ) τ{ function_body τ} [ τfunction ]';
    '59:173 function_declaration=>• τfunction τ( τ) τ{ function_body τ} [ τfunction ]';
    if( cmpr_set( l, data, 206, 5, 5 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  function  ]';
    '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:160 function_declaration=>• τasync τfunction binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:161 function_declaration=>• τasync τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:162 function_declaration=>• τasync τfunction τ* binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
    '59:166 function_declaration=>• τasync τfunction τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:167 function_declaration=>• τasync τfunction binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
    '59:168 function_declaration=>• τasync τfunction τ* τ( τ) τ{ function_body τ} [ τasync ]';
    '59:172 function_declaration=>• τasync τfunction τ( τ) τ{ function_body τ} [ τasync ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 87, 8, 8 ) ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  async  ]';
        '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
        '59:160 function_declaration=>• τasync τfunction binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
        '59:161 function_declaration=>• τasync τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
        '59:162 function_declaration=>• τasync τfunction τ* binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
        '59:166 function_declaration=>• τasync τfunction τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
        '59:167 function_declaration=>• τasync τfunction binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
        '59:168 function_declaration=>• τasync τfunction τ* τ( τ) τ{ function_body τ} [ τasync ]';
        '59:172 function_declaration=>• τasync τfunction τ( τ) τ{ function_body τ} [ τasync ]';
        'Number of end groups0 [    ]';
        'All symbols [  function  ]';
        '59:158 function_declaration=>τasync • τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
        '59:160 function_declaration=>τasync • τfunction binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
        '59:161 function_declaration=>τasync • τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
        '59:162 function_declaration=>τasync • τfunction τ* binding_identifier τ( τ) τ{ function_body τ} [ τfunction ]';
        '59:166 function_declaration=>τasync • τfunction τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
        '59:167 function_declaration=>τasync • τfunction binding_identifier τ( τ) τ{ function_body τ} [ τfunction ]';
        '59:168 function_declaration=>τasync • τfunction τ* τ( τ) τ{ function_body τ} [ τfunction ]';
        '59:172 function_declaration=>τasync • τfunction τ( τ) τ{ function_body τ} [ τfunction ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( cmpr_set( l, data, 87, 8, 8 ) ){
            consume( l, data, state );
            'Number of end groups0 [    ]';
            'All symbols [  _ $ id * (  ]';
            '59:158 function_declaration=>τasync τfunction • τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
            '59:161 function_declaration=>τasync τfunction • τ* τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
            '59:162 function_declaration=>τasync τfunction • τ* binding_identifier τ( τ) τ{ function_body τ} [ τ* ]';
            '59:168 function_declaration=>τasync τfunction • τ* τ( τ) τ{ function_body τ} [ τ* ]';
            '59:160 function_declaration=>τasync τfunction • binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid ]';
            '59:167 function_declaration=>τasync τfunction • binding_identifier τ( τ) τ{ function_body τ} [ τ_, τ$, θid ]';
            '59:166 function_declaration=>τasync τfunction • τ( formal_parameters τ) τ{ function_body τ} [ τ( ]';
            '59:172 function_declaration=>τasync τfunction • τ( τ) τ{ function_body τ} [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
                'Number of end groups0 [    ]';
                'All symbols [  169  ]';
                '59:160 function_declaration=>τasync τfunction • binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid ]';
                '59:167 function_declaration=>τasync τfunction • binding_identifier τ( τ) τ{ function_body τ} [ τ_, τ$, θid ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                pushFN( data, branch_7d9bb3fd21526311 );
                pushFN( data, $binding_identifier );
                return data.rules_ptr
            } else if( l.current_byte ==42 ){
                'Number of end groups0 [    ]';
                'All symbols [  _ $ id (  ]';
                '59:158 function_declaration=>τasync τfunction • τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
                '59:162 function_declaration=>τasync τfunction • τ* binding_identifier τ( τ) τ{ function_body τ} [ τ* ]';
                '59:161 function_declaration=>τasync τfunction • τ* τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
                '59:168 function_declaration=>τasync τfunction • τ* τ( τ) τ{ function_body τ} [ τ* ]';
                var pk = l.copyInPlace(  );
                skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
                if( pk.current_byte ==95||pk.current_byte  == 36 || pk.isUniID( data ) ){
                    consume( l, data, state );
                    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                    'Number of end groups0 [    ]';
                    'All symbols [  *  ]';
                    '59:158 function_declaration=>τasync τfunction • τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
                    '59:162 function_declaration=>τasync τfunction • τ* binding_identifier τ( τ) τ{ function_body τ} [ τ* ]';
                    'Number of end groups0 [    ]';
                    'All symbols [  169  ]';
                    '59:158 function_declaration=>τasync τfunction τ* • binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid ]';
                    '59:162 function_declaration=>τasync τfunction τ* • binding_identifier τ( τ) τ{ function_body τ} [ τ_, τ$, θid ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    pushFN( data, branch_2c1333feedd24507 );
                    pushFN( data, $binding_identifier );
                    return data.rules_ptr
                } else {
                    consume( l, data, state );
                    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                    'Number of end groups0 [    ]';
                    'All symbols [  *  ]';
                    '59:161 function_declaration=>τasync τfunction • τ* τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
                    '59:168 function_declaration=>τasync τfunction • τ* τ( τ) τ{ function_body τ} [ τ* ]';
                    'Number of end groups0 [    ]';
                    'All symbols [  (  ]';
                    '59:161 function_declaration=>τasync τfunction τ* • τ( formal_parameters τ) τ{ function_body τ} [ τ( ]';
                    '59:168 function_declaration=>τasync τfunction τ* • τ( τ) τ{ function_body τ} [ τ( ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    if( l.current_byte ==40 ){
                        consume( l, data, state );
                        'Number of end groups0 [    ]';
                        'All symbols [  ... _ $ id { [ )  ]';
                        '59:161 function_declaration=>τasync τfunction τ* τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
                        '59:168 function_declaration=>τasync τfunction τ* τ( • τ) τ{ function_body τ} [ τ) ]';
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
                            pushFN( data, branch_2afe194015f18aca );
                            return branch_40174fe3efd15613( l, data, state, prod, prod_start )
                        } else if( l.current_byte ==41 ){
                            pushFN( data, branch_2afe194015f18aca );
                            return branch_15fc90d9f2016b5a( l, data, state, prod, prod_start )
                        }
                    }
                }
            } else if( l.current_byte ==40 ){
                consume( l, data, state );
                '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                'Number of end groups0 [    ]';
                'All symbols [  (  ]';
                '59:166 function_declaration=>τasync τfunction • τ( formal_parameters τ) τ{ function_body τ} [ τ( ]';
                '59:172 function_declaration=>τasync τfunction • τ( τ) τ{ function_body τ} [ τ( ]';
                'Number of end groups0 [    ]';
                'All symbols [  ... _ $ id { [ )  ]';
                '59:166 function_declaration=>τasync τfunction τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
                '59:172 function_declaration=>τasync τfunction τ( • τ) τ{ function_body τ} [ τ) ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
                    pushFN( data, branch_2afe194015f18aca );
                    return branch_2a3f4aa750720a5f( l, data, state, prod, prod_start )
                } else if( l.current_byte ==41 ){
                    pushFN( data, branch_2afe194015f18aca );
                    return branch_5521448249364729( l, data, state, prod, prod_start )
                }
            }
        }
    }
} else if( cmpr_set( l, data, 87, 8, 8 ) ){
    consume( l, data, state );
    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
    'Number of end groups0 [    ]';
    'All symbols [  function  ]';
    '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '59:163 function_declaration=>• τfunction binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '59:164 function_declaration=>• τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '59:165 function_declaration=>• τfunction τ* binding_identifier τ( τ) τ{ function_body τ} [ τfunction ]';
    '59:169 function_declaration=>• τfunction τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '59:170 function_declaration=>• τfunction binding_identifier τ( τ) τ{ function_body τ} [ τfunction ]';
    '59:171 function_declaration=>• τfunction τ* τ( τ) τ{ function_body τ} [ τfunction ]';
    '59:173 function_declaration=>• τfunction τ( τ) τ{ function_body τ} [ τfunction ]';
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id * (  ]';
    '59:159 function_declaration=>τfunction • τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
    '59:164 function_declaration=>τfunction • τ* τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
    '59:165 function_declaration=>τfunction • τ* binding_identifier τ( τ) τ{ function_body τ} [ τ* ]';
    '59:171 function_declaration=>τfunction • τ* τ( τ) τ{ function_body τ} [ τ* ]';
    '59:163 function_declaration=>τfunction • binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid ]';
    '59:170 function_declaration=>τfunction • binding_identifier τ( τ) τ{ function_body τ} [ τ_, τ$, θid ]';
    '59:169 function_declaration=>τfunction • τ( formal_parameters τ) τ{ function_body τ} [ τ( ]';
    '59:173 function_declaration=>τfunction • τ( τ) τ{ function_body τ} [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  169  ]';
        '59:163 function_declaration=>τfunction • binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid ]';
        '59:170 function_declaration=>τfunction • binding_identifier τ( τ) τ{ function_body τ} [ τ_, τ$, θid ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_5026a315ff21acd7 );
        pushFN( data, $binding_identifier );
        return data.rules_ptr
    } else if( l.current_byte ==42 ){
        'Number of end groups0 [    ]';
        'All symbols [  _ $ id (  ]';
        '59:159 function_declaration=>τfunction • τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
        '59:165 function_declaration=>τfunction • τ* binding_identifier τ( τ) τ{ function_body τ} [ τ* ]';
        '59:164 function_declaration=>τfunction • τ* τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
        '59:171 function_declaration=>τfunction • τ* τ( τ) τ{ function_body τ} [ τ* ]';
        var pk = l.copyInPlace(  );
        skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
        if( pk.current_byte ==95||pk.current_byte  == 36 || pk.isUniID( data ) ){
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  *  ]';
            '59:159 function_declaration=>τfunction • τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
            '59:165 function_declaration=>τfunction • τ* binding_identifier τ( τ) τ{ function_body τ} [ τ* ]';
            'Number of end groups0 [    ]';
            'All symbols [  169  ]';
            '59:159 function_declaration=>τfunction τ* • binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid ]';
            '59:165 function_declaration=>τfunction τ* • binding_identifier τ( τ) τ{ function_body τ} [ τ_, τ$, θid ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            pushFN( data, branch_8a1fbfbb6115337f );
            pushFN( data, $binding_identifier );
            return data.rules_ptr
        } else {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  *  ]';
            '59:164 function_declaration=>τfunction • τ* τ( formal_parameters τ) τ{ function_body τ} [ τ* ]';
            '59:171 function_declaration=>τfunction • τ* τ( τ) τ{ function_body τ} [ τ* ]';
            'Number of end groups0 [    ]';
            'All symbols [  (  ]';
            '59:164 function_declaration=>τfunction τ* • τ( formal_parameters τ) τ{ function_body τ} [ τ( ]';
            '59:171 function_declaration=>τfunction τ* • τ( τ) τ{ function_body τ} [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==40 ){
                consume( l, data, state );
                'Number of end groups0 [    ]';
                'All symbols [  ... _ $ id { [ )  ]';
                '59:164 function_declaration=>τfunction τ* τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
                '59:171 function_declaration=>τfunction τ* τ( • τ) τ{ function_body τ} [ τ) ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
                    pushFN( data, branch_2afe194015f18aca );
                    return branch_632c365f029dd246( l, data, state, prod, prod_start )
                } else if( l.current_byte ==41 ){
                    pushFN( data, branch_2afe194015f18aca );
                    return branch_a370216511729554( l, data, state, prod, prod_start )
                }
            }
        }
    } else if( l.current_byte ==40 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  (  ]';
        '59:169 function_declaration=>τfunction • τ( formal_parameters τ) τ{ function_body τ} [ τ( ]';
        '59:173 function_declaration=>τfunction • τ( τ) τ{ function_body τ} [ τ( ]';
        'Number of end groups0 [    ]';
        'All symbols [  ... _ $ id { [ )  ]';
        '59:169 function_declaration=>τfunction τ( • formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
        '59:173 function_declaration=>τfunction τ( • τ) τ{ function_body τ} [ τ) ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
            pushFN( data, branch_2afe194015f18aca );
            return branch_8dd672bd3bd6324a( l, data, state, prod, prod_start )
        } else if( l.current_byte ==41 ){
            pushFN( data, branch_2afe194015f18aca );
            return branch_ca641c1bbdcc77e0( l, data, state, prod, prod_start )
        }
    }
};
    return -1
}
function $function_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  async function  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '60:174 function_expression=>• function_declaration [ τasync, τfunction ]';
    pushFN( data, branch_2eb3189865ab19b0 );
    pushFN( data, $function_declaration );
    return data.rules_ptr;
    return -1
}
function $unique_formal_parameters(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  ... _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '61:175 unique_formal_parameters=>• formal_parameters [ τ..., τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_ec51a880ef448577 );
    pushFN( data, $formal_parameters );
    return data.rules_ptr;
    return -1
}
function $formal_parameters(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id { [ ...  ]';
    '62:176 formal_parameters=>• function_rest_parameter [ τ... ]';
    '62:177 formal_parameters=>• formal_parameter_list τ, [ τ_, τ$, θid, τ{, τ[ ]';
    '62:178 formal_parameters=>• formal_parameter_list τ, function_rest_parameter [ τ_, τ$, θid, τ{, τ[ ]';
    '62:179 formal_parameters=>• formal_parameter_list [ τ_, τ$, θid, τ{, τ[ ]';
    if( assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  63  ]';
    '62:177 formal_parameters=>• formal_parameter_list τ, [ τ_, τ$, θid, τ{, τ[ ]';
    '62:178 formal_parameters=>• formal_parameter_list τ, function_rest_parameter [ τ_, τ$, θid, τ{, τ[ ]';
    '62:179 formal_parameters=>• formal_parameter_list [ τ_, τ$, θid, τ{, τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_1808542a907a4b6f );
    pushFN( data, $formal_parameter_list );
    return data.rules_ptr
} else {
    pushFN( data, branch_561f4369ac978c0b );
    return branch_bf7d29947ca441f3( l, data, state, prod, prod_start )
};
    return -1
}
function $formal_parameter_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '63:180 formal_parameter_list=>• formal_parameter [ τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_d7bafdc788a3484a );
    pushFN( data, $formal_parameter );
    return data.rules_ptr;
    return -1
}
function $formal_parameter_list_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 63: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ,  ]';
                '63:181 formal_parameter_list=>formal_parameter_list • τ, formal_parameter [ τ, ]';
                '62:177 formal_parameters=>formal_parameter_list • τ, [ τ, ]';
                '62:178 formal_parameters=>formal_parameter_list • τ, function_rest_parameter [ τ, ]';
                '62:179 formal_parameters=>formal_parameter_list • [ τ) ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==44 ){
                    'Number of end groups0 [    ]';
                    'All symbols [  _ $ id { [  ]';
                    '63:181 formal_parameter_list=>formal_parameter_list • τ, formal_parameter [ τ, ]';
                    '62:177 formal_parameters=>formal_parameter_list • τ, [ τ, ]';
                    '62:178 formal_parameters=>formal_parameter_list • τ, function_rest_parameter [ τ, ]';
                    var pk = l.copyInPlace(  );
                    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
                    if( assert_ascii( pk, 0x0, 0x10, 0x88000000, 0x8000000 )||pk.isUniID( data ) ){
                        pushFN( data, branch_204390ba7bc065de );
                        return branch_5464961d69dccbba( l, data, state, prod, prod_start )
                    }
                }
            }
        };
        break
    };
    return ( prod ==63 )?prod :-1
}
function $function_rest_parameter(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '64:182 function_rest_parameter=>• binding_rest_element [ τ... ]';
    pushFN( data, branch_e2d224f990ccf4b6 );
    pushFN( data, $binding_rest_element );
    return data.rules_ptr;
    return -1
}
function $formal_parameter(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '65:183 formal_parameter=>• binding_element [ τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_326d11f865ae0642 );
    pushFN( data, $binding_element );
    return data.rules_ptr;
    return -1
}
function $function_body(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '66:184 function_body=>• function_statement_list [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
    pushFN( data, branch_a0fc794b78e8287d );
    pushFN( data, $function_statement_list );
    return data.rules_ptr;
    return -1
}
function $function_statement_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [   { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
    '67:185 function_statement_list=>• statement_list [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
    '67:186 function_statement_list=>• ɛ [ ɛ ]';
    switch(sym_map_81114164d157cc71( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [    ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '67:186 function_statement_list=>• ɛ [ ɛ ]';
        consume( l, data, state );
        return 67
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '67:185 function_statement_list=>• statement_list [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst ]';
        pushFN( data, branch_5864560064181f8f );
        pushFN( data, $statement_list );
        return data.rules_ptr
    }
    default: 
    break
};
    return -1
}
function $yield_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  yield  ]';
    '68:187 yield_expression=>• τyield θnl [ τyield ]';
    '68:188 yield_expression=>• τyield τ* assignment_expression [ τyield ]';
    '68:189 yield_expression=>• τyield assignment_expression [ τyield ]';
    if( cmpr_set( l, data, 153, 5, 5 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import * nl  ]';
    '68:187 yield_expression=>τyield • θnl [ θnl ]';
    '68:188 yield_expression=>τyield • τ* assignment_expression [ τ* ]';
    '68:189 yield_expression=>τyield • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
        pushFN( data, branch_3a78937bb58ef00e );
        return branch_b74efa10238c66f5( l, data, state, prod, prod_start )
    } else if( l.current_byte ==42 ){
        pushFN( data, branch_3a78937bb58ef00e );
        return branch_99544e68751ff79c( l, data, state, prod, prod_start )
    } else if( l.isNL(  ) ){
        pushFN( data, branch_3a78937bb58ef00e );
        return branch_968bbdd7d1860504( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $arrow_function(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  async _ $ id (  ]';
    '69:190 arrow_function=>• τasync arrow_parameters τ=> concise_body [ τasync ]';
    '69:191 arrow_function=>• arrow_parameters τ=> concise_body [ τ_, τ$, θid, τ( ]';
    if( cmpr_set( l, data, 206, 5, 5 ) ){
    pushFN( data, branch_e9349898d2d19110 );
    return branch_402c1ab3e730479d( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_e9349898d2d19110 );
    return branch_f4cf12b83ff8642e( l, data, state, prod, prod_start )
};
    return -1
}
function $arrow_parameters(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id (  ]';
    '70:192 arrow_parameters=>• identifier_reference [ τ_, τ$, θid ]';
    '70:193 arrow_parameters=>• cover_parenthesized_expression_and_arrow_parameter_list [ τ( ]';
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
    pushFN( data, branch_8b6b3eb51d268416 );
    return branch_68f1ec8a24bbd818( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_8b6b3eb51d268416 );
    return branch_2a7853405cc2ba76( l, data, state, prod, prod_start )
};
    return -1
}
function $concise_body(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ function class / ` super import {  ]';
    '71:194 concise_body=>• assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    '71:195 concise_body=>• τ{ function_statement_list τ} [ τ{ ]';
    if( cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x40000001 )||l.isUniID( data )||l.isNum( data ) ){
    pushFN( data, branch_50540fa37be3ecc2 );
    return branch_fd25183bec9a76aa( l, data, state, prod, prod_start )
} else if( l.current_byte ==123 ){
    pushFN( data, branch_50540fa37be3ecc2 );
    return branch_3f8ee405d3a9919b( l, data, state, prod, prod_start )
};
    return -1
}
function $cover_call_expression_and_async_arrow_head(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '72:196 cover_call_expression_and_async_arrow_head=>• member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    pushFN( data, branch_9bb35fffbc100a11 );
    pushFN( data, $member_expression );
    return data.rules_ptr;
    return -1
}
function $class_declaration(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  class  ]';
    '73:197 class_declaration=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
    '73:198 class_declaration=>• τclass class_heritage τ{ class_body τ} [ τclass ]';
    '73:199 class_declaration=>• τclass binding_identifier τ{ class_body τ} [ τclass ]';
    '73:200 class_declaration=>• τclass binding_identifier class_heritage τ{ τ} [ τclass ]';
    '73:201 class_declaration=>• τclass τ{ class_body τ} [ τclass ]';
    '73:202 class_declaration=>• τclass class_heritage τ{ τ} [ τclass ]';
    '73:203 class_declaration=>• τclass binding_identifier τ{ τ} [ τclass ]';
    '73:204 class_declaration=>• τclass τ{ τ} [ τclass ]';
    if( cmpr_set( l, data, 320, 5, 5 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  extends _ $ id {  ]';
    '73:197 class_declaration=>τclass • binding_identifier class_heritage τ{ class_body τ} [ τ_, τ$, θid ]';
    '73:199 class_declaration=>τclass • binding_identifier τ{ class_body τ} [ τ_, τ$, θid ]';
    '73:200 class_declaration=>τclass • binding_identifier class_heritage τ{ τ} [ τ_, τ$, θid ]';
    '73:203 class_declaration=>τclass • binding_identifier τ{ τ} [ τ_, τ$, θid ]';
    '73:198 class_declaration=>τclass • class_heritage τ{ class_body τ} [ τextends ]';
    '73:202 class_declaration=>τclass • class_heritage τ{ τ} [ τextends ]';
    '73:201 class_declaration=>τclass • τ{ class_body τ} [ τ{ ]';
    '73:204 class_declaration=>τclass • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 95, 7, 7 ) ){
        'Number of end groups0 [    ]';
        'All symbols [  75  ]';
        '73:198 class_declaration=>τclass • class_heritage τ{ class_body τ} [ τextends ]';
        '73:202 class_declaration=>τclass • class_heritage τ{ τ} [ τextends ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_7591fa263288f068 );
        pushFN( data, $class_heritage );
        return data.rules_ptr
    } else if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  169  ]';
        '73:197 class_declaration=>τclass • binding_identifier class_heritage τ{ class_body τ} [ τ_, τ$, θid ]';
        '73:199 class_declaration=>τclass • binding_identifier τ{ class_body τ} [ τ_, τ$, θid ]';
        '73:200 class_declaration=>τclass • binding_identifier class_heritage τ{ τ} [ τ_, τ$, θid ]';
        '73:203 class_declaration=>τclass • binding_identifier τ{ τ} [ τ_, τ$, θid ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_5b7236d9ff19727e );
        pushFN( data, $binding_identifier );
        return data.rules_ptr
    } else if( l.current_byte ==123 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  {  ]';
        '73:201 class_declaration=>τclass • τ{ class_body τ} [ τ{ ]';
        '73:204 class_declaration=>τclass • τ{ τ} [ τ{ ]';
        'Number of end groups0 [    ]';
        'All symbols [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ; }  ]';
        '73:201 class_declaration=>τclass τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
        '73:204 class_declaration=>τclass τ{ • τ} [ τ} ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8000494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
            pushFN( data, branch_26bc95062ea8884a );
            return branch_10818f49f3d1f4a8( l, data, state, prod, prod_start )
        } else if( l.current_byte ==125 ){
            pushFN( data, branch_26bc95062ea8884a );
            return branch_390a36ea8fbc2488( l, data, state, prod, prod_start )
        }
    }
};
    return -1
}
function $class_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  class  ]';
    '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
    '74:206 class_expression=>• τclass class_heritage τ{ class_body τ} [ τclass ]';
    '74:207 class_expression=>• τclass binding_identifier τ{ class_body τ} [ τclass ]';
    '74:208 class_expression=>• τclass binding_identifier class_heritage τ{ τ} [ τclass ]';
    '74:209 class_expression=>• τclass τ{ class_body τ} [ τclass ]';
    '74:210 class_expression=>• τclass class_heritage τ{ τ} [ τclass ]';
    '74:211 class_expression=>• τclass binding_identifier τ{ τ} [ τclass ]';
    '74:212 class_expression=>• τclass τ{ τ} [ τclass ]';
    if( cmpr_set( l, data, 320, 5, 5 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  extends _ $ id {  ]';
    '74:205 class_expression=>τclass • binding_identifier class_heritage τ{ class_body τ} [ τ_, τ$, θid ]';
    '74:207 class_expression=>τclass • binding_identifier τ{ class_body τ} [ τ_, τ$, θid ]';
    '74:208 class_expression=>τclass • binding_identifier class_heritage τ{ τ} [ τ_, τ$, θid ]';
    '74:211 class_expression=>τclass • binding_identifier τ{ τ} [ τ_, τ$, θid ]';
    '74:206 class_expression=>τclass • class_heritage τ{ class_body τ} [ τextends ]';
    '74:210 class_expression=>τclass • class_heritage τ{ τ} [ τextends ]';
    '74:209 class_expression=>τclass • τ{ class_body τ} [ τ{ ]';
    '74:212 class_expression=>τclass • τ{ τ} [ τ{ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 95, 7, 7 ) ){
        'Number of end groups0 [    ]';
        'All symbols [  75  ]';
        '74:206 class_expression=>τclass • class_heritage τ{ class_body τ} [ τextends ]';
        '74:210 class_expression=>τclass • class_heritage τ{ τ} [ τextends ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_ae76ac988e3f20b4 );
        pushFN( data, $class_heritage );
        return data.rules_ptr
    } else if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  169  ]';
        '74:205 class_expression=>τclass • binding_identifier class_heritage τ{ class_body τ} [ τ_, τ$, θid ]';
        '74:207 class_expression=>τclass • binding_identifier τ{ class_body τ} [ τ_, τ$, θid ]';
        '74:208 class_expression=>τclass • binding_identifier class_heritage τ{ τ} [ τ_, τ$, θid ]';
        '74:211 class_expression=>τclass • binding_identifier τ{ τ} [ τ_, τ$, θid ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_9e1df5b0231a0575 );
        pushFN( data, $binding_identifier );
        return data.rules_ptr
    } else if( l.current_byte ==123 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  {  ]';
        '74:209 class_expression=>τclass • τ{ class_body τ} [ τ{ ]';
        '74:212 class_expression=>τclass • τ{ τ} [ τ{ ]';
        'Number of end groups0 [    ]';
        'All symbols [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ; }  ]';
        '74:209 class_expression=>τclass τ{ • class_body τ} [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic, τ; ]';
        '74:212 class_expression=>τclass τ{ • τ} [ τ} ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8000494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
            pushFN( data, branch_77d3508deb16fc05 );
            return branch_47dc069469c2cce0( l, data, state, prod, prod_start )
        } else if( l.current_byte ==125 ){
            pushFN( data, branch_77d3508deb16fc05 );
            return branch_ec7c6bd9017b2d5f( l, data, state, prod, prod_start )
        }
    }
};
    return -1
}
function $class_heritage(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  extends  ]';
    '75:213 class_heritage=>• τextends left_hand_side_expression [ τextends ]';
    if( cmpr_set( l, data, 95, 7, 7 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  extends  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '75:213 class_heritage=>τextends • left_hand_side_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_33201f23fc4b5bf0 );
    pushFN( data, $left_hand_side_expression );
    return data.rules_ptr
};
    return -1
}
function $class_body(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static ;  ]';
    '76:214 class_body=>• class_element [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic ]';
    '76:216 class_body=>• τ; [ τ; ]';
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
    pushFN( data, branch_453b9740ffb4cd55 );
    return branch_0b551eb1243c38d7( l, data, state, prod, prod_start )
} else if( l.current_byte ==59 ){
    pushFN( data, branch_453b9740ffb4cd55 );
    return branch_d5698a87fe206b85( l, data, state, prod, prod_start )
};
    return -1
}
function $class_body_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [ static  ]';
    '76:215 class_body=>class_body • class_element [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τstatic ]';
    '73:197 class_declaration=>τclass binding_identifier class_heritage τ{ class_body • τ} [ τ} ]';
    '73:198 class_declaration=>τclass class_heritage τ{ class_body • τ} [ τ} ]';
    '73:199 class_declaration=>τclass binding_identifier τ{ class_body • τ} [ τ} ]';
    '73:201 class_declaration=>τclass τ{ class_body • τ} [ τ} ]';
    '74:205 class_expression=>τclass binding_identifier class_heritage τ{ class_body • τ} [ τ} ]';
    '74:206 class_expression=>τclass class_heritage τ{ class_body • τ} [ τ} ]';
    '74:207 class_expression=>τclass binding_identifier τ{ class_body • τ} [ τ} ]';
    '74:209 class_expression=>τclass τ{ class_body • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 55, 17, 17 ) ){
    return 76
};
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
    pushFN( data, branch_453b9740ffb4cd55 );
    return branch_403ade1b204d6df5( l, data, state, prod, prod_start )
};
    return ( prod ==76 )?prod :-1
}
function $class_element(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  static async get set * _ $ id " " num 0X 0x 0O 0o 0B 0b [  ]';
    '77:217 class_element=>• method_definition [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    '77:218 class_element=>• τstatic method_definition [ τstatic ]';
    if( cmpr_set( l, data, 246, 6, 6 ) ){
    pushFN( data, branch_26030e38d9b5346d );
    return branch_bd0847be37e50816( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_26030e38d9b5346d );
    return branch_7e16a3d3a6b024e3( l, data, state, prod, prod_start )
};
    return -1
}
function $method_definition(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  async get set _ $ id " " num 0X 0x 0O 0o 0B 0b [ *  ]';
    '78:219 method_definition=>• τasync τ* property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '78:222 method_definition=>• τasync property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '78:224 method_definition=>• τasync τ* property_name τ( τ) τ{ function_body τ} [ τasync ]';
    '78:225 method_definition=>• τasync τ* property_name τ( unique_formal_parameters τ) τ{ τ} [ τasync ]';
    '78:229 method_definition=>• τasync property_name τ( τ) τ{ function_body τ} [ τasync ]';
    '78:230 method_definition=>• τasync property_name τ( unique_formal_parameters τ) τ{ τ} [ τasync ]';
    '78:233 method_definition=>• τasync τ* property_name τ( τ) τ{ τ} [ τasync ]';
    '78:236 method_definition=>• τasync property_name τ( τ) τ{ τ} [ τasync ]';
    '78:220 method_definition=>• τget property_name τ( τ) τ{ function_body τ} [ τget ]';
    '78:226 method_definition=>• τget property_name τ( τ) τ{ τ} [ τget ]';
    '78:221 method_definition=>• τset property_name τ( property_set_parameter_list τ) τ{ function_body τ} [ τset ]';
    '78:227 method_definition=>• τset property_name τ( property_set_parameter_list τ) τ{ τ} [ τset ]';
    '78:223 method_definition=>• τ* property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τ* ]';
    '78:231 method_definition=>• τ* property_name τ( τ) τ{ function_body τ} [ τ* ]';
    '78:232 method_definition=>• τ* property_name τ( unique_formal_parameters τ) τ{ τ} [ τ* ]';
    '78:237 method_definition=>• τ* property_name τ( τ) τ{ τ} [ τ* ]';
    '78:228 method_definition=>• property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    '78:234 method_definition=>• property_name τ( τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    '78:235 method_definition=>• property_name τ( unique_formal_parameters τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    '78:238 method_definition=>• property_name τ( τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    switch(sym_map_e096ab72a25896b3( l, data )){
    case 0: 
    {
        'Number of end groups0 [    ]';
        'All symbols [  _ $ id " " num 0X 0x 0O 0o 0B 0b [ *  ]';
        '78:219 method_definition=>• τasync τ* property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τasync ]';
        '78:224 method_definition=>• τasync τ* property_name τ( τ) τ{ function_body τ} [ τasync ]';
        '78:225 method_definition=>• τasync τ* property_name τ( unique_formal_parameters τ) τ{ τ} [ τasync ]';
        '78:233 method_definition=>• τasync τ* property_name τ( τ) τ{ τ} [ τasync ]';
        '78:222 method_definition=>• τasync property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τasync ]';
        '78:229 method_definition=>• τasync property_name τ( τ) τ{ function_body τ} [ τasync ]';
        '78:230 method_definition=>• τasync property_name τ( unique_formal_parameters τ) τ{ τ} [ τasync ]';
        '78:236 method_definition=>• τasync property_name τ( τ) τ{ τ} [ τasync ]';
        var pk = l.copyInPlace(  );
        skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
        if( dt_57f0cbc88859bc5b( pk, data )||assert_ascii( pk, 0x0, 0x94, 0x88000000, 0x0 )||pk.isUniID( data )||pk.isNum( data ) ){
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  async  ]';
            '78:222 method_definition=>• τasync property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τasync ]';
            '78:229 method_definition=>• τasync property_name τ( τ) τ{ function_body τ} [ τasync ]';
            '78:230 method_definition=>• τasync property_name τ( unique_formal_parameters τ) τ{ τ} [ τasync ]';
            '78:236 method_definition=>• τasync property_name τ( τ) τ{ τ} [ τasync ]';
            'Number of end groups0 [    ]';
            'All symbols [  132  ]';
            '78:222 method_definition=>τasync • property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
            '78:229 method_definition=>τasync • property_name τ( τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
            '78:230 method_definition=>τasync • property_name τ( unique_formal_parameters τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
            '78:236 method_definition=>τasync • property_name τ( τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            pushFN( data, branch_653fd1c93c769024 );
            pushFN( data, $property_name );
            return data.rules_ptr
        } else {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  async  ]';
            '78:219 method_definition=>• τasync τ* property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τasync ]';
            '78:224 method_definition=>• τasync τ* property_name τ( τ) τ{ function_body τ} [ τasync ]';
            '78:225 method_definition=>• τasync τ* property_name τ( unique_formal_parameters τ) τ{ τ} [ τasync ]';
            '78:233 method_definition=>• τasync τ* property_name τ( τ) τ{ τ} [ τasync ]';
            'Number of end groups0 [    ]';
            'All symbols [  *  ]';
            '78:219 method_definition=>τasync • τ* property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τ* ]';
            '78:224 method_definition=>τasync • τ* property_name τ( τ) τ{ function_body τ} [ τ* ]';
            '78:225 method_definition=>τasync • τ* property_name τ( unique_formal_parameters τ) τ{ τ} [ τ* ]';
            '78:233 method_definition=>τasync • τ* property_name τ( τ) τ{ τ} [ τ* ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==42 ){
                consume( l, data, state );
                'Number of end groups0 [    ]';
                'All symbols [  132  ]';
                '78:219 method_definition=>τasync τ* • property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
                '78:224 method_definition=>τasync τ* • property_name τ( τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
                '78:225 method_definition=>τasync τ* • property_name τ( unique_formal_parameters τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
                '78:233 method_definition=>τasync τ* • property_name τ( τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                pushFN( data, branch_647c16f644052fc1 );
                pushFN( data, $property_name );
                return data.rules_ptr
            }
        }
    }
    case 1: 
    {
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  get  ]';
        '78:220 method_definition=>• τget property_name τ( τ) τ{ function_body τ} [ τget ]';
        '78:226 method_definition=>• τget property_name τ( τ) τ{ τ} [ τget ]';
        'Number of end groups0 [    ]';
        'All symbols [  132  ]';
        '78:220 method_definition=>τget • property_name τ( τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        '78:226 method_definition=>τget • property_name τ( τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_3e72ae2a9a0a18a2 );
        pushFN( data, $property_name );
        return data.rules_ptr
    }
    case 2: 
    {
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  set  ]';
        '78:221 method_definition=>• τset property_name τ( property_set_parameter_list τ) τ{ function_body τ} [ τset ]';
        '78:227 method_definition=>• τset property_name τ( property_set_parameter_list τ) τ{ τ} [ τset ]';
        'Number of end groups0 [    ]';
        'All symbols [  132  ]';
        '78:221 method_definition=>τset • property_name τ( property_set_parameter_list τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        '78:227 method_definition=>τset • property_name τ( property_set_parameter_list τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_6749bc620e9bf77a );
        pushFN( data, $property_name );
        return data.rules_ptr
    }
    case 3: 
    {
        'Number of end groups0 [    ]';
        'All symbols [  132  ]';
        '78:228 method_definition=>• property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        '78:234 method_definition=>• property_name τ( τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        '78:235 method_definition=>• property_name τ( unique_formal_parameters τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        '78:238 method_definition=>• property_name τ( τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_28d65fbcaba59417 );
        pushFN( data, $property_name );
        return data.rules_ptr
    }
    case 4: 
    {
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  *  ]';
        '78:223 method_definition=>• τ* property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τ* ]';
        '78:231 method_definition=>• τ* property_name τ( τ) τ{ function_body τ} [ τ* ]';
        '78:232 method_definition=>• τ* property_name τ( unique_formal_parameters τ) τ{ τ} [ τ* ]';
        '78:237 method_definition=>• τ* property_name τ( τ) τ{ τ} [ τ* ]';
        'Number of end groups0 [    ]';
        'All symbols [  132  ]';
        '78:223 method_definition=>τ* • property_name τ( unique_formal_parameters τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        '78:231 method_definition=>τ* • property_name τ( τ) τ{ function_body τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        '78:232 method_definition=>τ* • property_name τ( unique_formal_parameters τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        '78:237 method_definition=>τ* • property_name τ( τ) τ{ τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_fb3da76dfbe615f1 );
        pushFN( data, $property_name );
        return data.rules_ptr
    }
    default: 
    break
};
    return -1
}
function $property_set_parameter_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '79:239 property_set_parameter_list=>• formal_parameter [ τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_1ae113579359e553 );
    pushFN( data, $formal_parameter );
    return data.rules_ptr;
    return -1
}
function $expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '80:241 expression=>• assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    pushFN( data, branch_d1a87dbed634b2bf );
    pushFN( data, $assignment_expression );
    return data.rules_ptr;
    return -1
}
function $expression_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '80:240 expression=>expression • τ, assignment_expression [ τ, ]';
    '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, τ) [ τ, ]';
    '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ, ]';
    '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ, ]';
    '30:78 expression_statement=>expression • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    '32:83 iteration_statement=>τfor τ( iteration_statement_group_162_1_ τ; expression • τ; expression τ) statement [ τ; ]';
    '32:84 iteration_statement=>τfor τ( lexical_declaration expression • τ; expression τ) statement [ τ; ]';
    '32:87 iteration_statement=>τfor τ( τ; expression • τ; expression τ) statement [ τ; ]';
    '32:88 iteration_statement=>τfor τ( expression • τ; expression τ; expression τ) statement [ τ; ]';
    '32:88 iteration_statement=>τfor τ( expression τ; expression • τ; expression τ) statement [ τ; ]';
    '32:94 iteration_statement=>τfor τ( iteration_statement_group_162_1_ τ; expression • τ; τ) statement [ τ; ]';
    '32:96 iteration_statement=>τfor τ( lexical_declaration expression • τ; τ) statement [ τ; ]';
    '32:99 iteration_statement=>τfor τ( τ; expression • τ; τ) statement [ τ; ]';
    '32:100 iteration_statement=>τfor τ( expression • τ; τ; expression τ) statement [ τ; ]';
    '32:101 iteration_statement=>τfor τ( expression • τ; expression τ; τ) statement [ τ; ]';
    '32:101 iteration_statement=>τfor τ( expression τ; expression • τ; τ) statement [ τ; ]';
    '32:107 iteration_statement=>τfor τ( expression • τ; τ; τ) statement [ τ; ]';
    '37:115 return_statement=>τreturn expression • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    '38:117 throw_statement=>τthrow expression • asi [ τ;, τ}-ns, θnl, END_OF_FILE ]';
    '143:452 substitute_template=>template_head expression • template_spans [ τ} ]';
    '145:455 template_middle_list=>template_middle expression • [ τ} ]';
    '145:456 template_middle_list=>template_middle_list template_middle expression • [ τ} ]';
    '31:79 if_statement=>τif τ( expression • τ) statement τelse statement [ τ) ]';
    '31:80 if_statement=>τif τ( expression • τ) statement [ τ) ]';
    '32:81 iteration_statement=>τdo statement τwhile τ( expression • τ) asi [ τ) ]';
    '32:82 iteration_statement=>τwhile τ( expression • τ) statement [ τ) ]';
    '32:83 iteration_statement=>τfor τ( iteration_statement_group_162_1_ τ; expression τ; expression • τ) statement [ τ) ]';
    '32:84 iteration_statement=>τfor τ( lexical_declaration expression τ; expression • τ) statement [ τ) ]';
    '32:85 iteration_statement=>τfor τ( for_declaration τin expression • τ) statement [ τ) ]';
    '32:86 iteration_statement=>τfor τawait τ( for_declaration τof expression • τ) statement [ τ) ]';
    '32:87 iteration_statement=>τfor τ( τ; expression τ; expression • τ) statement [ τ) ]';
    '32:88 iteration_statement=>τfor τ( expression τ; expression τ; expression • τ) statement [ τ) ]';
    '32:89 iteration_statement=>τfor τ( left_hand_side_expression τin expression • τ) statement [ τ) ]';
    '32:90 iteration_statement=>τfor τ( iteration_statement_group_180_1_ τin expression • τ) statement [ τ) ]';
    '32:91 iteration_statement=>τfor τawait τ( left_hand_side_expression τof expression • τ) statement [ τ) ]';
    '32:92 iteration_statement=>τfor τawait τ( iteration_statement_group_189_1_ τof expression • τ) statement [ τ) ]';
    '32:93 iteration_statement=>τfor τ( iteration_statement_group_162_1_ τ; τ; expression • τ) statement [ τ) ]';
    '32:95 iteration_statement=>τfor τ( lexical_declaration τ; expression • τ) statement [ τ) ]';
    '32:97 iteration_statement=>τfor τ( for_declaration τof expression • τ) statement [ τ) ]';
    '32:98 iteration_statement=>τfor τ( τ; τ; expression • τ) statement [ τ) ]';
    '32:100 iteration_statement=>τfor τ( expression τ; τ; expression • τ) statement [ τ) ]';
    '32:102 iteration_statement=>τfor τ( left_hand_side_expression τof expression • τ) statement [ τ) ]';
    '32:103 iteration_statement=>τfor τ( iteration_statement_group_189_1_ τof expression • τ) statement [ τ) ]';
    '39:118 with_statement=>τwith τ( expression • τ) statement [ τ) ]';
    '40:119 switch_statement=>τswitch τ( expression • τ) case_block [ τ) ]';
    '117:382 parenthesized=>τ( expression • τ) [ τ) ]';
    '43:129 case_clause=>τcase expression • τ: statement_list [ τ: ]';
    '43:130 case_clause=>τcase expression • τ: [ τ: ]';
    '83:248 member_expression=>member_expression τ[ expression • τ] [ τ] ]';
    '84:255 super_property=>τsuper τ[ expression • τ] [ τ] ]';
    '88:264 call_expression=>call_expression τ[ expression • τ] [ τ] ]';
    '94:281 optional_chain=>τ?. τ[ expression • τ] [ τ] ]';
    '94:285 optional_chain=>optional_chain τ[ expression • τ] [ τ] ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 80
};
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import  ]';
    '80:240 expression=>expression • τ, assignment_expression [ τ, ]';
    '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, τ) [ τ, ]';
    '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ, ]';
    '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( expression • τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 190, 2, 2 )||cmpr_set( pk, data, 192, 2, 2 )||cmpr_set( pk, data, 307, 6, 6 )||cmpr_set( pk, data, 146, 4, 4 )||dt_b20f4716c284a542( pk, data )||dt_2f6691a653b819d6( pk, data )||dt_5b7bef307ef015e7( pk, data )||cmpr_set( pk, data, 153, 5, 5 )||dt_c9742b8c3a6930ba( pk, data )||dt_57f0cbc88859bc5b( pk, data )||cmpr_set( pk, data, 320, 5, 5 )||cmpr_set( pk, data, 345, 5, 5 )||cmpr_set( pk, data, 284, 6, 6 )||assert_ascii( pk, 0x0, 0xa996, 0x88000000, 0x48000001 )||pk.isUniID( data )||pk.isNum( data ) ){
        pushFN( data, branch_d1a87dbed634b2bf );
        return branch_edb5415aafd33095( l, data, state, prod, prod_start )
    }
};
    return ( prod ==80 )?prod :-1
}
function $left_hand_side_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '81:242 left_hand_side_expression=>• new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '81:243 left_hand_side_expression=>• call_expression [ τsuper, τimport, τnew, τthis, τasync, τfunction, τclass, τ[, τ{, τ/, τ(, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, θnum, τ_, τ$, θid ]';
    '81:244 left_hand_side_expression=>• optional_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    if( dt_a9b4e918ef416a84( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 206, 5, 5 )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  this true false null async function class new super import _ $ " " 0X 0x 0O 0o 0B 0b [ { / ` ( id num  ]';
    '95:288 primary_expression=>• τthis [ τthis ]';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
    '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
    '166:522 boolean_literal=>• τtrue [ τtrue ]';
    '166:523 boolean_literal=>• τfalse [ τfalse ]';
    '165:521 null_literal=>• τnull [ τnull ]';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
    '161:508 int_token=>• θnum [ θnum ]';
    '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
    '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
    '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
    '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
    '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
    '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
    '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
    '129:414 object_literal=>• τ{ τ} [ τ{ ]';
    '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
    '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
    '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
    '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
    '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
    '146:458 template_head=>• τ` τ${ [ τ` ]';
    '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
    '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
    '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
    '82:246 new_expression=>• τnew new_expression [ τnew ]';
    '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
    '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
    '89:267 super_call=>• τsuper arguments [ τsuper ]';
    '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
    '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    switch(sym_map_1a4ba89a7e8a0221( l, data )){
        case 0: 
        {
            '"--LEAF--"';
            'Leaf [  this  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '95:288 primary_expression=>• τthis [ τthis ]';
            pushFN( data, branch_25d782bed23c8e5b );
            pushFN( data, $primary_expression );
            return prod_start
        }
        case 1: 
        {
            '"--LEAF--"';
            'Leaf [  true  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '166:522 boolean_literal=>• τtrue [ τtrue ]';
            pushFN( data, branch_25d782bed23c8e5b );
            pushFN( data, $boolean_literal );
            return prod_start
        }
        case 2: 
        {
            '"--LEAF--"';
            'Leaf [  false  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '166:523 boolean_literal=>• τfalse [ τfalse ]';
            pushFN( data, branch_25d782bed23c8e5b );
            pushFN( data, $boolean_literal );
            return prod_start
        }
        case 3: 
        {
            '"--LEAF--"';
            'Leaf [  null  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '165:521 null_literal=>• τnull [ τnull ]';
            pushFN( data, branch_25d782bed23c8e5b );
            pushFN( data, $null_literal );
            return prod_start
        }
        case 4: 
        {
            '"--LEAF--"';
            'Leaf [  async  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
            pushFN( data, branch_48dd6e73122a544c );
            pushFN( data, $function_declaration );
            return prod_start
        }
        case 5: 
        {
            '"--LEAF--"';
            'Leaf [  function  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
            pushFN( data, branch_48dd6e73122a544c );
            pushFN( data, $function_declaration );
            return prod_start
        }
        case 6: 
        {
            '"--LEAF--"';
            'Leaf [  class  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
            pushFN( data, branch_25d782bed23c8e5b );
            pushFN( data, $class_expression );
            return prod_start
        }
        case 7: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  new  ]';
            '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
            '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
            '82:246 new_expression=>• τnew new_expression [ τnew ]';
            'Number of end groups0 [    ]';
            'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import .  ]';
            '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
            '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
            '87:259 new_target=>τnew • τ. τtarget [ τ. ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( dt_a9b4e918ef416a84( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 206, 5, 5 )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
                var fk1 = fork( data );
                pushFN( fk1, branch_f498972a3e5d12ea );
                pushFN( data, branch_cab995d42ef58de6 );
                return 0
            } else if( l.current_byte ==46 ){
                pushFN( data, branch_25d782bed23c8e5b );
                return branch_071caf1d21c59110( l, data, state, prod, prod_start )
            }
        }
        case 8: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  super  ]';
            '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
            '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
            '89:267 super_call=>• τsuper arguments [ τsuper ]';
            'Number of end groups0 [    ]';
            'All symbols [  . [ (  ]';
            '84:254 super_property=>τsuper • τ. identifier_name [ τ. ]';
            '84:255 super_property=>τsuper • τ[ expression τ] [ τ[ ]';
            '89:267 super_call=>τsuper • arguments [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==46 ){
                pushFN( data, branch_25d782bed23c8e5b );
                return branch_7522d6ae523359cf( l, data, state, prod, prod_start )
            } else if( l.current_byte ==91 ){
                pushFN( data, branch_25d782bed23c8e5b );
                return branch_7a347b8a2033ccfc( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_e1257d1e9387cec6 );
                return branch_720d66540ffaef39( l, data, state, prod, prod_start )
            }
        }
        case 9: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  import  ]';
            '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
            '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
            'Number of end groups0 [    ]';
            'All symbols [  . (  ]';
            '86:258 import_meta=>τimport • τ. τmeta [ τ. ]';
            '90:268 import_call=>τimport • τ( assignment_expression τ) [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==46 ){
                pushFN( data, branch_25d782bed23c8e5b );
                return branch_e91daffe9c760941( l, data, state, prod, prod_start )
            } else if( l.current_byte ==40 ){
                pushFN( data, branch_e1257d1e9387cec6 );
                return branch_9d33653390a4b7b7( l, data, state, prod, prod_start )
            }
        }
        case 10: 
        {
            '"--LEAF--"';
            'Leaf [  _  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
            pushFN( data, branch_005a35731f839a19 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 11: 
        {
            '"--LEAF--"';
            'Leaf [  $  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
            pushFN( data, branch_005a35731f839a19 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 12: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:484 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==34 ){
                pushFN( data, branch_25d782bed23c8e5b );
                return branch_d9bfad00f871c280( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_25d782bed23c8e5b );
                return branch_646b078462d89457( l, data, state, prod, prod_start )
            }
        }
        case 13: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:485 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==39 ){
                pushFN( data, branch_25d782bed23c8e5b );
                return branch_9672b2cf7ede104a( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_25d782bed23c8e5b );
                return branch_cc6ae262e8f43c6c( l, data, state, prod, prod_start )
            }
        }
        case 14: 
        {
            '"--LEAF--"';
            'Leaf [  0X  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
            pushFN( data, branch_b2426f3ec404cd50 );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 15: 
        {
            '"--LEAF--"';
            'Leaf [  0x  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
            pushFN( data, branch_b2426f3ec404cd50 );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 16: 
        {
            '"--LEAF--"';
            'Leaf [  0O  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
            pushFN( data, branch_b2426f3ec404cd50 );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 17: 
        {
            '"--LEAF--"';
            'Leaf [  0o  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
            pushFN( data, branch_b2426f3ec404cd50 );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 18: 
        {
            '"--LEAF--"';
            'Leaf [  0B  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
            pushFN( data, branch_b2426f3ec404cd50 );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 19: 
        {
            '"--LEAF--"';
            'Leaf [  0b  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
            pushFN( data, branch_b2426f3ec404cd50 );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 20: 
        {
            '"--LEAF--"';
            'Leaf [  [  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
            pushFN( data, branch_25d782bed23c8e5b );
            pushFN( data, $array_literal );
            return prod_start
        }
        case 21: 
        {
            '"--LEAF--"';
            'Leaf [  {  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '129:414 object_literal=>• τ{ τ} [ τ{ ]';
            pushFN( data, branch_25d782bed23c8e5b );
            pushFN( data, $object_literal );
            return prod_start
        }
        case 22: 
        {
            '"--LEAF--"';
            'Leaf [  /  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
            pushFN( data, branch_25d782bed23c8e5b );
            pushFN( data, $regular_expression_literal );
            return prod_start
        }
        case 23: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  `  ]';
            '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
            '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
            '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
            '146:458 template_head=>• τ` τ${ [ τ` ]';
            'Number of end groups0 [    ]';
            'All symbols [  ` ${ nl ws sym num id f:s  ]';
            '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
            '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
            '142:451 no_substitute_template=>τ` • τ` [ τ` ]';
            '146:458 template_head=>τ` • τ${ [ τ${ ]';
            skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
            if( l.current_byte ==96 ){
                pushFN( data, branch_25d782bed23c8e5b );
                return branch_09a1f4d0e3f2987f( l, data, state, prod, prod_start )
            } else if( cmpr_set( l, data, 47, 2, 2 ) ){
                pushFN( data, branch_164d30571dd79823 );
                return branch_0a68333b2c4e0dc6( l, data, state, prod, prod_start )
            } else {
                'Number of end groups0 [    ]';
                'All symbols [  189  ]';
                '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
                '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                pushFN( data, branch_f05134d99cca1b7e );
                pushFN( data, $no_substitute_template_list_846 );
                return data.rules_ptr
            }
        }
        case 24: 
        {
            '"--LEAF--"';
            'Leaf [  (  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
            pushFN( data, branch_25d782bed23c8e5b );
            pushFN( data, $parenthesized );
            return prod_start
        }
        case 25: 
        {
            '"--LEAF--"';
            'Leaf [  id  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
            pushFN( data, branch_005a35731f839a19 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 26: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  _ n . E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE ,  ]';
            '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
            '161:508 int_token=>• θnum [ θnum ]';
            var pk = l.copyInPlace(  );
            skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==95 ){
                pushFN( data, branch_c7c53aede7e429a8 );
                return branch_1d992d5b88873c5c( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_c7c53aede7e429a8 );
                return branch_0c8d3c6dc575d2b3( l, data, state, prod, prod_start )
            }
        }
        default: 
        break
    }
};
    return -1
}
function $left_hand_side_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 83: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  [ . ` ( ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e0aa0d6f406c9358( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_5be156d5b19256ce );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_1aeb92f44cc64cf8 );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                        pushFN( data, branch_6fb0d322bc3ac350 );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                        pushFN( data, branch_9e07993a29a15344 );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_ba56a1e8631e6368 );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        return 81
                    }
                };
                break
            }
            case 88: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  . ( [ ` ?. -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                '88:263 call_expression=>call_expression • arguments [ τ( ]';
                '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_cca60d9a2b40a7b2( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_3b293f03be9feee1 );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:263 call_expression=>call_expression • arguments [ τ( ]';
                        pushFN( data, branch_d5d1a69f0eaea9aa );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_4ee6c235990bc0b9 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                        pushFN( data, branch_86f61baea5bfad8e );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_ba56a1e8631e6368 );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        return 81
                    }
                };
                break
            }
            case 93: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ?. -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '93:279 optional_expression=>optional_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 19, 2, 2 ) ){
                    pushFN( data, branch_e45aa88f8f564c73 );
                    return branch_f0c3bcb79d8e42d6( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                    return 81
                };
                break
            }
            case 146: 
            {
                '"--LEAF--"';
                'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '143:452 substitute_template=>template_head • expression template_spans [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                pushFN( data, branch_764e05523e17dd71 );
                pushFN( data, $expression );
                return data.rules_ptr;
                break
            }
            case 160: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  E e ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e32b08cd3c718e6b( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                        pushFN( data, branch_078a0f21956f9410 );
                        pushFN( data, $scientific_token_group_923_0_ );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        add_reduce( state, data, 1, 238 );
                        add_reduce( state, data, 1, 236 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
            case 161: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  n . E e ( : ?. ` [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '158:502 big_token=>int_token • τn [ τn ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a1c731d03900f749( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  n  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '158:502 big_token=>int_token • τn [ τn ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 238 );
                        add_reduce( state, data, 1, 237 );
                        pushFN( data, $left_hand_side_expression_goto );
                        return 83
                    }
                    case 1: 
                    {
                        'Number of end groups1 [    ]';
                        'All symbols [  num _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                        '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        var pk = l.copyInPlace(  );
                        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                        if( pk.isNum( data ) ){
                            pushFN( data, branch_36d7651d5f6ca9e7 );
                            return branch_731d73028155c3d7( l, data, state, prod, prod_start )
                        } else {
                            '"--LEAF--"';
                            'Leaf [  _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                            '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                            add_reduce( state, data, 1, 238 );
                            prod = 160;
                            continue
                        }
                    }
                    default:
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e ( : ?. ` [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { . END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        add_reduce( state, data, 1, 238 );
                        prod = 160;
                        continue
                    }
                };
                break
            }
            case 178: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  _ $ id num ?. ( ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { as from => extends END_OF_PRODUCTION  ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                switch(sym_map_00126370fc441c6c( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  _  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $left_hand_side_expression_goto );
                        return 178
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  $  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $left_hand_side_expression_goto );
                        return 178
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  id  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $left_hand_side_expression_goto );
                        return 178
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  num  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $left_hand_side_expression_goto );
                        return 178
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?. ( ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { as from => extends END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                        add_reduce( state, data, 1, 244 );
                        add_reduce( state, data, 1, 243 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==81 )?prod :-1
}
function $new_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  new this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( super import  ]';
    '82:245 new_expression=>• member_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '82:246 new_expression=>• τnew new_expression [ τnew ]';
    if( cmpr_set( l, data, 255, 3, 3 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import .  ]';
    '82:245 new_expression=>• member_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '82:246 new_expression=>• τnew new_expression [ τnew ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( dt_a9b4e918ef416a84( pk, data )||dt_c9742b8c3a6930ba( pk, data )||dt_5b7bef307ef015e7( pk, data )||dt_57f0cbc88859bc5b( pk, data )||cmpr_set( pk, data, 206, 5, 5 )||cmpr_set( pk, data, 320, 5, 5 )||cmpr_set( pk, data, 345, 5, 5 )||cmpr_set( pk, data, 284, 6, 6 )||assert_ascii( pk, 0x0, 0x8194, 0x88000000, 0x8000001 )||pk.isUniID( data )||pk.isNum( data ) ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  new  ]';
        '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
        '82:246 new_expression=>• τnew new_expression [ τnew ]';
        'Number of end groups0 [    ]';
        'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
        '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
        '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( dt_a9b4e918ef416a84( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 206, 5, 5 )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
            var fk1 = fork( data );
            pushFN( fk1, branch_c132c91741b35989 );
            pushFN( data, branch_044718bfe5a84a9c );
            return 0
        }
    } else {
        pushFN( data, branch_5f64c9bdf5897364 );
        return branch_bc137d7d6ec468aa( l, data, state, prod, prod_start )
    }
} else {
    pushFN( data, branch_5f64c9bdf5897364 );
    return branch_4e0c84d2b1071977( l, data, state, prod, prod_start )
};
    return -1
}
function $new_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 83: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  [ . ` in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==91 ){
                    pushFN( data, branch_7d0fe7f778e0915e );
                    return branch_2c24bd495161b9e5( l, data, state, prod, prod_start )
                } else if( l.current_byte ==46 ){
                    pushFN( data, branch_7d0fe7f778e0915e );
                    return branch_eb56b36631008710( l, data, state, prod, prod_start )
                } else if( l.current_byte ==96 ){
                    pushFN( data, branch_7d0fe7f778e0915e );
                    return branch_281811b093c75ede( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    return 82
                }
            }
        };
        break
    };
    return ( prod ==82 )?prod :-1
}
function $member_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  super new import this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` (  ]';
    '83:247 member_expression=>• primary_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ( ]';
    '83:251 member_expression=>• super_property [ τsuper ]';
    '83:252 member_expression=>• meta_property [ τnew, τimport ]';
    '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
    if( cmpr_set( l, data, 345, 5, 5 ) ){
    pushFN( data, branch_ae7ff7d686efde67 );
    return branch_cad0200362af69be( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 255, 3, 3 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import .  ]';
    '83:252 member_expression=>• meta_property [ τnew, τimport ]';
    '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( dt_a9b4e918ef416a84( pk, data )||dt_c9742b8c3a6930ba( pk, data )||dt_5b7bef307ef015e7( pk, data )||dt_57f0cbc88859bc5b( pk, data )||cmpr_set( pk, data, 206, 5, 5 )||cmpr_set( pk, data, 320, 5, 5 )||cmpr_set( pk, data, 345, 5, 5 )||cmpr_set( pk, data, 284, 6, 6 )||assert_ascii( pk, 0x0, 0x8194, 0x88000000, 0x8000001 )||pk.isUniID( data )||pk.isNum( data ) ){
        pushFN( data, branch_ae7ff7d686efde67 );
        return branch_26a8296f3023077e( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_ae7ff7d686efde67 );
        return branch_a65ade685090be3b( l, data, state, prod, prod_start )
    }
} else if( cmpr_set( l, data, 284, 6, 6 ) ){
    pushFN( data, branch_ae7ff7d686efde67 );
    return branch_207198f74a9c062f( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_ae7ff7d686efde67 );
    return branch_f7c69e1c5b2c487f( l, data, state, prod, prod_start )
};
    return -1
}
function $member_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 83: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  [ . `  ]';
                '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 83
                };
                if( l.current_byte ==91 ){
                    pushFN( data, branch_ae7ff7d686efde67 );
                    return branch_2c24bd495161b9e5( l, data, state, prod, prod_start )
                } else if( l.current_byte ==46 ){
                    pushFN( data, branch_ae7ff7d686efde67 );
                    return branch_eb56b36631008710( l, data, state, prod, prod_start )
                } else if( l.current_byte ==96 ){
                    pushFN( data, branch_ae7ff7d686efde67 );
                    return branch_281811b093c75ede( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==83 )?prod :-1
}
function $super_property(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  super  ]';
    '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
    '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
    if( cmpr_set( l, data, 345, 5, 5 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  . [  ]';
    '84:254 super_property=>τsuper • τ. identifier_name [ τ. ]';
    '84:255 super_property=>τsuper • τ[ expression τ] [ τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==46 ){
        pushFN( data, branch_8f3d93fbb8c88444 );
        return branch_7522d6ae523359cf( l, data, state, prod, prod_start )
    } else if( l.current_byte ==91 ){
        pushFN( data, branch_8f3d93fbb8c88444 );
        return branch_7a347b8a2033ccfc( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $meta_property(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  new import  ]';
    '85:256 meta_property=>• new_target [ τnew ]';
    '85:257 meta_property=>• import_meta [ τimport ]';
    if( cmpr_set( l, data, 255, 3, 3 ) ){
    pushFN( data, branch_567940d2cb3e688c );
    return branch_a429a93ea4e50c2e( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_567940d2cb3e688c );
    return branch_a85cba0b0edff3b4( l, data, state, prod, prod_start )
};
    return -1
}
function $import_meta(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  import  ]';
    '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
    if( cmpr_set( l, data, 284, 6, 6 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  import  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '86:258 import_meta=>τimport • τ. τmeta [ τ. ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==46 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( ( ( ( cmpr_set( l, data, 162, 4, 4 ) )&&consume( l, data, state ) ) ) ){
            add_reduce( state, data, 3, 152 );
            return 86
        };
        return -1
    };
    return -1
};
    return -1
}
function $new_target(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  new  ]';
    '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
    if( cmpr_set( l, data, 255, 3, 3 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  new  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '87:259 new_target=>τnew • τ. τtarget [ τ. ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==46 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( ( ( ( cmpr_set( l, data, 134, 6, 6 ) )&&consume( l, data, state ) ) ) ){
            add_reduce( state, data, 3, 153 );
            return 87
        };
        return -1
    };
    return -1
};
    return -1
}
function $call_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  super import this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new  ]';
    '88:261 call_expression=>• super_call [ τsuper ]';
    '88:265 call_expression=>• cover_call_expression_and_async_arrow_head [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '88:262 call_expression=>• import_call [ τimport ]';
    if( cmpr_set( l, data, 345, 5, 5 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  . [ (  ]';
    '88:261 call_expression=>• super_call [ τsuper ]';
    '88:265 call_expression=>• cover_call_expression_and_async_arrow_head [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==46||pk.current_byte  == 91 ){
        pushFN( data, branch_dcc9d0b83d080569 );
        return branch_0ddc7908e03c0cc6( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_dcc9d0b83d080569 );
        return branch_7fef8d2a58bd3b2a( l, data, state, prod, prod_start )
    }
} else if( cmpr_set( l, data, 284, 6, 6 ) ){
    'Number of end groups0 [    ]';
    'All symbols [  ( .  ]';
    '88:262 call_expression=>• import_call [ τimport ]';
    '88:265 call_expression=>• cover_call_expression_and_async_arrow_head [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==40 ){
        pushFN( data, branch_dcc9d0b83d080569 );
        return branch_a2b9df016bfdb870( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_dcc9d0b83d080569 );
        return branch_2b7a00bb5c3e83fd( l, data, state, prod, prod_start )
    }
} else {
    pushFN( data, branch_dcc9d0b83d080569 );
    return branch_0f77330c2c101028( l, data, state, prod, prod_start )
};
    return -1
}
function $call_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 88: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  . ( [ `  ]';
                '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                '88:263 call_expression=>call_expression • arguments [ τ( ]';
                '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 88
                };
                if( l.current_byte ==46 ){
                    pushFN( data, branch_dcc9d0b83d080569 );
                    return branch_178f766f2a0130c7( l, data, state, prod, prod_start )
                } else if( l.current_byte ==40 ){
                    pushFN( data, branch_dcc9d0b83d080569 );
                    return branch_fd43e0ee815c2b13( l, data, state, prod, prod_start )
                } else if( l.current_byte ==91 ){
                    pushFN( data, branch_dcc9d0b83d080569 );
                    return branch_f5a8bf951ce30b1d( l, data, state, prod, prod_start )
                } else if( l.current_byte ==96 ){
                    pushFN( data, branch_dcc9d0b83d080569 );
                    return branch_a6d973a4f7cf0be1( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==88 )?prod :-1
}
function $super_call(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  super  ]';
    '89:267 super_call=>• τsuper arguments [ τsuper ]';
    if( cmpr_set( l, data, 345, 5, 5 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  super  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '89:267 super_call=>τsuper • arguments [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a401ffd24ccb010c );
    pushFN( data, $arguments );
    return data.rules_ptr
};
    return -1
}
function $import_call(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  import  ]';
    '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
    if( cmpr_set( l, data, 284, 6, 6 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  import  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '90:268 import_call=>τimport • τ( assignment_expression τ) [ τ( ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.current_byte ==40 )&&consume( l, data, state ) ) ) ){
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_292e3496700ab77e );
        pushFN( data, $assignment_expression );
        return data.rules_ptr
    };
    return -1
};
    return -1
}
function $arguments(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '91:269 arguments=>• τ( argument_list τ, τ) [ τ( ]';
    '91:270 arguments=>• τ( τ, τ) [ τ( ]';
    '91:271 arguments=>• τ( argument_list τ) [ τ( ]';
    '91:272 arguments=>• τ( τ) [ τ( ]';
    if( l.current_byte ==40 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ... yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- , )  ]';
    '91:269 arguments=>τ( • argument_list τ, τ) [ τ..., τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '91:271 arguments=>τ( • argument_list τ) [ τ..., τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '91:270 arguments=>τ( • τ, τ) [ τ, ]';
    '91:272 arguments=>τ( • τ) [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  92  ]';
        '91:269 arguments=>τ( • argument_list τ, τ) [ τ..., τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        '91:271 arguments=>τ( • argument_list τ) [ τ..., τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_7f595f231204addf );
        pushFN( data, $argument_list );
        return data.rules_ptr
    } else if( l.current_byte ==44 ){
        pushFN( data, branch_ac87609e1365e0c2 );
        return branch_06ac1fda68702ea4( l, data, state, prod, prod_start )
    } else if( l.current_byte ==41 ){
        pushFN( data, branch_ac87609e1365e0c2 );
        return branch_763a9161897f4960( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $argument_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import ...  ]';
    '92:273 argument_list=>• argument_list_group_507_1_ [ τ... ]';
    '92:275 argument_list=>• assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    if( cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
    pushFN( data, branch_36989306ede825c5 );
    return branch_c0c9df19772a993b( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_36989306ede825c5 );
    return branch_331ab0e7a16a7d62( l, data, state, prod, prod_start )
};
    return -1
}
function $argument_list_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '92:274 argument_list=>argument_list • τ, argument_list_group_507_1_ [ τ, ]';
    '92:276 argument_list=>argument_list • τ, assignment_expression [ τ, ]';
    '91:269 arguments=>τ( argument_list • τ, τ) [ τ, ]';
    '91:271 arguments=>τ( argument_list • τ) [ τ) ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import ...  ]';
    '92:274 argument_list=>argument_list • τ, argument_list_group_507_1_ [ τ, ]';
    '92:276 argument_list=>argument_list • τ, assignment_expression [ τ, ]';
    '91:269 arguments=>τ( argument_list • τ, τ) [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 190, 2, 2 )||cmpr_set( pk, data, 192, 2, 2 )||cmpr_set( pk, data, 307, 6, 6 )||cmpr_set( pk, data, 146, 4, 4 )||dt_b20f4716c284a542( pk, data )||dt_2f6691a653b819d6( pk, data )||dt_5b7bef307ef015e7( pk, data )||cmpr_set( pk, data, 153, 5, 5 )||dt_c9742b8c3a6930ba( pk, data )||dt_57f0cbc88859bc5b( pk, data )||cmpr_set( pk, data, 320, 5, 5 )||cmpr_set( pk, data, 345, 5, 5 )||cmpr_set( pk, data, 284, 6, 6 )||assert_ascii( pk, 0x0, 0xa996, 0x88000000, 0x48000001 )||pk.isUniID( data )||pk.isNum( data ) ){
        pushFN( data, branch_36989306ede825c5 );
        return branch_7b9aff7e2bf6357c( l, data, state, prod, prod_start )
    } else if( cmpr_set( pk, data, 16, 3, 3 ) ){
        pushFN( data, branch_36989306ede825c5 );
        return branch_b63a68ec24e2562d( l, data, state, prod, prod_start )
    }
};
    return ( prod ==92 )?prod :-1
}
function $optional_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import  ]';
    '93:277 optional_expression=>• member_expression optional_chain [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '93:278 optional_expression=>• call_expression optional_chain [ τsuper, τimport, τnew, τthis, τasync, τfunction, τclass, τ[, τ{, τ/, τ(, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, θnum, τ_, τ$, θid ]';
    if( dt_a9b4e918ef416a84( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 206, 5, 5 )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  this true false null async function class new super import _ $ " " 0X 0x 0O 0o 0B 0b [ { / ` ( id num  ]';
    '95:288 primary_expression=>• τthis [ τthis ]';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
    '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
    '166:522 boolean_literal=>• τtrue [ τtrue ]';
    '166:523 boolean_literal=>• τfalse [ τfalse ]';
    '165:521 null_literal=>• τnull [ τnull ]';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
    '161:508 int_token=>• θnum [ θnum ]';
    '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
    '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
    '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
    '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
    '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
    '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
    '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
    '129:414 object_literal=>• τ{ τ} [ τ{ ]';
    '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
    '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
    '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
    '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
    '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
    '146:458 template_head=>• τ` τ${ [ τ` ]';
    '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
    '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
    '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
    '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
    '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
    '89:267 super_call=>• τsuper arguments [ τsuper ]';
    '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
    '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    switch(sym_map_1a4ba89a7e8a0221( l, data )){
        case 0: 
        {
            '"--LEAF--"';
            'Leaf [  this  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '95:288 primary_expression=>• τthis [ τthis ]';
            pushFN( data, branch_00cd2beba9d77227 );
            pushFN( data, $primary_expression );
            return prod_start
        }
        case 1: 
        {
            '"--LEAF--"';
            'Leaf [  true  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '166:522 boolean_literal=>• τtrue [ τtrue ]';
            pushFN( data, branch_00cd2beba9d77227 );
            pushFN( data, $boolean_literal );
            return prod_start
        }
        case 2: 
        {
            '"--LEAF--"';
            'Leaf [  false  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '166:523 boolean_literal=>• τfalse [ τfalse ]';
            pushFN( data, branch_00cd2beba9d77227 );
            pushFN( data, $boolean_literal );
            return prod_start
        }
        case 3: 
        {
            '"--LEAF--"';
            'Leaf [  null  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '165:521 null_literal=>• τnull [ τnull ]';
            pushFN( data, branch_00cd2beba9d77227 );
            pushFN( data, $null_literal );
            return prod_start
        }
        case 4: 
        {
            '"--LEAF--"';
            'Leaf [  async  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
            pushFN( data, branch_5719a0652ea5b21b );
            pushFN( data, $function_declaration );
            return prod_start
        }
        case 5: 
        {
            '"--LEAF--"';
            'Leaf [  function  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
            pushFN( data, branch_5719a0652ea5b21b );
            pushFN( data, $function_declaration );
            return prod_start
        }
        case 6: 
        {
            '"--LEAF--"';
            'Leaf [  class  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
            pushFN( data, branch_00cd2beba9d77227 );
            pushFN( data, $class_expression );
            return prod_start
        }
        case 7: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  new  ]';
            '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
            '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
            'Number of end groups0 [    ]';
            'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import .  ]';
            '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
            '87:259 new_target=>τnew • τ. τtarget [ τ. ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
                pushFN( data, branch_00cd2beba9d77227 );
                return branch_17e0c36504632435( l, data, state, prod, prod_start )
            } else if( l.current_byte ==46 ){
                pushFN( data, branch_00cd2beba9d77227 );
                return branch_071caf1d21c59110( l, data, state, prod, prod_start )
            }
        }
        case 8: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  super  ]';
            '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
            '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
            '89:267 super_call=>• τsuper arguments [ τsuper ]';
            'Number of end groups0 [    ]';
            'All symbols [  . [ (  ]';
            '84:254 super_property=>τsuper • τ. identifier_name [ τ. ]';
            '84:255 super_property=>τsuper • τ[ expression τ] [ τ[ ]';
            '89:267 super_call=>τsuper • arguments [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==46 ){
                pushFN( data, branch_00cd2beba9d77227 );
                return branch_7522d6ae523359cf( l, data, state, prod, prod_start )
            } else if( l.current_byte ==91 ){
                pushFN( data, branch_00cd2beba9d77227 );
                return branch_7a347b8a2033ccfc( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_6e799ff10700ebfd );
                return branch_720d66540ffaef39( l, data, state, prod, prod_start )
            }
        }
        case 9: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  import  ]';
            '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
            '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
            'Number of end groups0 [    ]';
            'All symbols [  . (  ]';
            '86:258 import_meta=>τimport • τ. τmeta [ τ. ]';
            '90:268 import_call=>τimport • τ( assignment_expression τ) [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==46 ){
                pushFN( data, branch_00cd2beba9d77227 );
                return branch_e91daffe9c760941( l, data, state, prod, prod_start )
            } else if( l.current_byte ==40 ){
                pushFN( data, branch_6e799ff10700ebfd );
                return branch_9d33653390a4b7b7( l, data, state, prod, prod_start )
            }
        }
        case 10: 
        {
            '"--LEAF--"';
            'Leaf [  _  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
            pushFN( data, branch_b1ca056d75963282 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 11: 
        {
            '"--LEAF--"';
            'Leaf [  $  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
            pushFN( data, branch_b1ca056d75963282 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 12: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:484 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==34 ){
                pushFN( data, branch_00cd2beba9d77227 );
                return branch_d9bfad00f871c280( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_00cd2beba9d77227 );
                return branch_646b078462d89457( l, data, state, prod, prod_start )
            }
        }
        case 13: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:485 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==39 ){
                pushFN( data, branch_00cd2beba9d77227 );
                return branch_9672b2cf7ede104a( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_00cd2beba9d77227 );
                return branch_cc6ae262e8f43c6c( l, data, state, prod, prod_start )
            }
        }
        case 14: 
        {
            '"--LEAF--"';
            'Leaf [  0X  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
            pushFN( data, branch_6ffbb1cf8fe5365c );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 15: 
        {
            '"--LEAF--"';
            'Leaf [  0x  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
            pushFN( data, branch_6ffbb1cf8fe5365c );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 16: 
        {
            '"--LEAF--"';
            'Leaf [  0O  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
            pushFN( data, branch_6ffbb1cf8fe5365c );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 17: 
        {
            '"--LEAF--"';
            'Leaf [  0o  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
            pushFN( data, branch_6ffbb1cf8fe5365c );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 18: 
        {
            '"--LEAF--"';
            'Leaf [  0B  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
            pushFN( data, branch_6ffbb1cf8fe5365c );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 19: 
        {
            '"--LEAF--"';
            'Leaf [  0b  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
            pushFN( data, branch_6ffbb1cf8fe5365c );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 20: 
        {
            '"--LEAF--"';
            'Leaf [  [  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
            pushFN( data, branch_00cd2beba9d77227 );
            pushFN( data, $array_literal );
            return prod_start
        }
        case 21: 
        {
            '"--LEAF--"';
            'Leaf [  {  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '129:414 object_literal=>• τ{ τ} [ τ{ ]';
            pushFN( data, branch_00cd2beba9d77227 );
            pushFN( data, $object_literal );
            return prod_start
        }
        case 22: 
        {
            '"--LEAF--"';
            'Leaf [  /  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
            pushFN( data, branch_00cd2beba9d77227 );
            pushFN( data, $regular_expression_literal );
            return prod_start
        }
        case 23: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  `  ]';
            '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
            '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
            '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
            '146:458 template_head=>• τ` τ${ [ τ` ]';
            'Number of end groups0 [    ]';
            'All symbols [  ` ${ nl ws sym num id f:s  ]';
            '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
            '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
            '142:451 no_substitute_template=>τ` • τ` [ τ` ]';
            '146:458 template_head=>τ` • τ${ [ τ${ ]';
            skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
            if( l.current_byte ==96 ){
                pushFN( data, branch_00cd2beba9d77227 );
                return branch_09a1f4d0e3f2987f( l, data, state, prod, prod_start )
            } else if( cmpr_set( l, data, 47, 2, 2 ) ){
                pushFN( data, branch_8960ac35bb16465f );
                return branch_0a68333b2c4e0dc6( l, data, state, prod, prod_start )
            } else {
                'Number of end groups0 [    ]';
                'All symbols [  189  ]';
                '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
                '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                pushFN( data, branch_8ddd344752efda3f );
                pushFN( data, $no_substitute_template_list_846 );
                return data.rules_ptr
            }
        }
        case 24: 
        {
            '"--LEAF--"';
            'Leaf [  (  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
            pushFN( data, branch_00cd2beba9d77227 );
            pushFN( data, $parenthesized );
            return prod_start
        }
        case 25: 
        {
            '"--LEAF--"';
            'Leaf [  id  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
            pushFN( data, branch_b1ca056d75963282 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 26: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  _ . n E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE ,  ]';
            '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
            '161:508 int_token=>• θnum [ θnum ]';
            var pk = l.copyInPlace(  );
            skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==95 ){
                pushFN( data, branch_d8ce0fbb04f18e6a );
                return branch_1d992d5b88873c5c( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_d8ce0fbb04f18e6a );
                return branch_e80a8071760f9de0( l, data, state, prod, prod_start )
            }
        }
        default: 
        break
    }
};
    return -1
}
function $optional_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 83: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ?. [ . ` (  ]';
                '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                switch(sym_map_e3cc217a4d43796b( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_fbce621ee82e2cb2 );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_406dacee7331eeb9 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_fe36db382f5ac7cd );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                        pushFN( data, branch_a11f8ae40c1e55d6 );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                        pushFN( data, branch_f81b6d8195412112 );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    default: 
                    break
                };
                break
            }
            case 88: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ?. . ( [ `  ]';
                '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                '88:263 call_expression=>call_expression • arguments [ τ( ]';
                '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                switch(sym_map_21178c73887d2d7d( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_fbce621ee82e2cb2 );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_7da9671c8a707b8f );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:263 call_expression=>call_expression • arguments [ τ( ]';
                        pushFN( data, branch_0bef6f8c3f7e5877 );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_b20ac722fd29eefe );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                        pushFN( data, branch_f050e8459e97a276 );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    default: 
                    break
                };
                break
            }
            case 93: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ?.  ]';
                '93:279 optional_expression=>optional_expression • optional_chain [ τ?. ]';
                '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 93
                };
                if( cmpr_set( l, data, 19, 2, 2 ) ){
                    pushFN( data, branch_49506cbdbee1de1f );
                    return branch_f0c3bcb79d8e42d6( l, data, state, prod, prod_start )
                };
                break
            }
            case 146: 
            {
                '"--LEAF--"';
                'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '143:452 substitute_template=>template_head • expression template_spans [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                pushFN( data, branch_0d0105337a8e4c53 );
                pushFN( data, $expression );
                return data.rules_ptr;
                break
            }
            case 160: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  E e ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e32b08cd3c718e6b( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                        pushFN( data, branch_49ff39882aa25615 );
                        pushFN( data, $scientific_token_group_923_0_ );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        add_reduce( state, data, 1, 238 );
                        add_reduce( state, data, 1, 236 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
            case 161: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  n . E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '158:502 big_token=>int_token • τn [ τn ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a1c731d03900f749( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  n  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '158:502 big_token=>int_token • τn [ τn ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 238 );
                        add_reduce( state, data, 1, 237 );
                        pushFN( data, $optional_expression_goto );
                        return 83
                    }
                    case 1: 
                    {
                        'Number of end groups1 [    ]';
                        'All symbols [  num _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                        '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        var pk = l.copyInPlace(  );
                        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                        if( pk.isNum( data ) ){
                            pushFN( data, branch_e8290ed3897122c9 );
                            return branch_731d73028155c3d7( l, data, state, prod, prod_start )
                        } else {
                            '"--LEAF--"';
                            'Leaf [  _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                            '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                            add_reduce( state, data, 1, 238 );
                            prod = 160;
                            continue
                        }
                    }
                    default:
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , . END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        add_reduce( state, data, 1, 238 );
                        prod = 160;
                        continue
                    }
                };
                break
            }
            case 178: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  _ $ id num as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                switch(sym_map_c4f390da9b9d0165( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  _  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $optional_expression_goto );
                        return 178
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  $  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $optional_expression_goto );
                        return 178
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  id  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $optional_expression_goto );
                        return 178
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  num  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $optional_expression_goto );
                        return 178
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                        add_reduce( state, data, 1, 244 );
                        add_reduce( state, data, 1, 243 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==93 )?prod :-1
}
function $optional_chain(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ?.  ]';
    '94:280 optional_chain=>• τ?. arguments [ τ?. ]';
    '94:281 optional_chain=>• τ?. τ[ expression τ] [ τ?. ]';
    '94:282 optional_chain=>• τ?. identifier_name [ τ?. ]';
    '94:283 optional_chain=>• τ?. template_literal [ τ?. ]';
    if( cmpr_set( l, data, 19, 2, 2 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id ( [ `  ]';
    '94:280 optional_chain=>τ?. • arguments [ τ( ]';
    '94:281 optional_chain=>τ?. • τ[ expression τ] [ τ[ ]';
    '94:282 optional_chain=>τ?. • identifier_name [ τ_, τ$, θid ]';
    '94:283 optional_chain=>τ?. • template_literal [ τ` ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
        pushFN( data, branch_2d0eb7542829bce1 );
        return branch_a12da59f81d96e3a( l, data, state, prod, prod_start )
    } else if( l.current_byte ==40 ){
        pushFN( data, branch_2d0eb7542829bce1 );
        return branch_5b19b5d1ed186a70( l, data, state, prod, prod_start )
    } else if( l.current_byte ==91 ){
        pushFN( data, branch_2d0eb7542829bce1 );
        return branch_808a9da358fa2d43( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_2d0eb7542829bce1 );
        return branch_83af1b70e76efd1b( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $optional_chain_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ( [ . `  ]';
    '94:284 optional_chain=>optional_chain • arguments [ τ( ]';
    '94:285 optional_chain=>optional_chain • τ[ expression τ] [ τ[ ]';
    '94:286 optional_chain=>optional_chain • τ. identifier_name [ τ. ]';
    '94:287 optional_chain=>optional_chain • template_literal [ τ` ]';
    '93:277 optional_expression=>member_expression optional_chain • [ τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
    '93:278 optional_expression=>call_expression optional_chain • [ τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
    '93:279 optional_expression=>optional_expression optional_chain • [ τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 94
};
    if( l.current_byte ==40 ){
    pushFN( data, branch_2d0eb7542829bce1 );
    return branch_ca977670c2889428( l, data, state, prod, prod_start )
} else if( l.current_byte ==91 ){
    pushFN( data, branch_2d0eb7542829bce1 );
    return branch_8e3cc4f1b1538937( l, data, state, prod, prod_start )
} else if( l.current_byte ==46 ){
    pushFN( data, branch_2d0eb7542829bce1 );
    return branch_c9077600f79ebd00( l, data, state, prod, prod_start )
} else if( l.current_byte ==96 ){
    pushFN( data, branch_2d0eb7542829bce1 );
    return branch_b6967d1347d2934e( l, data, state, prod, prod_start )
};
    return ( prod ==94 )?prod :-1
}
function $primary_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  true false null " " num 0X 0x 0O 0o 0B 0b async function this class _ $ id [ { / ` (  ]';
    '95:288 primary_expression=>• τthis [ τthis ]';
    '95:289 primary_expression=>• identifier_reference [ τ_, τ$, θid ]';
    '95:290 primary_expression=>• literal [ τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b ]';
    '95:291 primary_expression=>• array_literal [ τ[ ]';
    '95:292 primary_expression=>• object_literal [ τ{ ]';
    '95:293 primary_expression=>• function_expression [ τasync, τfunction ]';
    '95:294 primary_expression=>• class_expression [ τclass ]';
    '95:295 primary_expression=>• regular_expression_literal [ τ/ ]';
    '95:296 primary_expression=>• template_literal [ τ` ]';
    '95:297 primary_expression=>• parenthesized [ τ( ]';
    switch(sym_map_ff848b963e584b0e( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  true false null " " num 0X 0x 0O 0o 0B 0b  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '95:290 primary_expression=>• literal [ τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b ]';
        pushFN( data, branch_62b348450a3135fb );
        pushFN( data, $literal );
        return data.rules_ptr
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  async function  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '95:293 primary_expression=>• function_expression [ τasync, τfunction ]';
        pushFN( data, branch_62b348450a3135fb );
        pushFN( data, $function_expression );
        return data.rules_ptr
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  this  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '95:288 primary_expression=>• τthis [ τthis ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 162 );
        return 95
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  class  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '95:294 primary_expression=>• class_expression [ τclass ]';
        pushFN( data, branch_62b348450a3135fb );
        pushFN( data, $class_expression );
        return data.rules_ptr
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  _ $ id  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '95:289 primary_expression=>• identifier_reference [ τ_, τ$, θid ]';
        pushFN( data, branch_62b348450a3135fb );
        pushFN( data, $identifier_reference );
        return data.rules_ptr
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  [  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '95:291 primary_expression=>• array_literal [ τ[ ]';
        pushFN( data, branch_62b348450a3135fb );
        pushFN( data, $array_literal );
        return data.rules_ptr
    }
    case 6: 
    {
        '"--LEAF--"';
        'Leaf [  {  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '95:292 primary_expression=>• object_literal [ τ{ ]';
        pushFN( data, branch_62b348450a3135fb );
        pushFN( data, $object_literal );
        return data.rules_ptr
    }
    case 7: 
    {
        '"--LEAF--"';
        'Leaf [  /  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '95:295 primary_expression=>• regular_expression_literal [ τ/ ]';
        pushFN( data, branch_62b348450a3135fb );
        pushFN( data, $regular_expression_literal );
        return data.rules_ptr
    }
    case 8: 
    {
        '"--LEAF--"';
        'Leaf [  `  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '95:296 primary_expression=>• template_literal [ τ` ]';
        pushFN( data, branch_62b348450a3135fb );
        pushFN( data, $template_literal );
        return data.rules_ptr
    }
    case 9: 
    {
        '"--LEAF--"';
        'Leaf [  (  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '95:297 primary_expression=>• parenthesized [ τ( ]';
        pushFN( data, branch_62b348450a3135fb );
        pushFN( data, $parenthesized );
        return data.rules_ptr
    }
    default: 
    break
};
    return -1
}
function $await_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  await  ]';
    '96:298 await_expression=>• τawait unary_expression [ τawait ]';
    if( cmpr_set( l, data, 82, 5, 5 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  await  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '96:298 await_expression=>τawait • unary_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_55dcbd2b7e7ebf29 );
    pushFN( data, $unary_expression );
    return data.rules_ptr
};
    return -1
}
function $assignment_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` new super import ++ -- delete void typeof + ~ ! - await yield async ( _ $ id  ]';
    '97:299 assignment_expression=>• conditional_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    '97:302 assignment_expression=>• left_hand_side_expression τ= assignment_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '97:303 assignment_expression=>• left_hand_side_expression assignment_operator assignment_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '97:301 assignment_expression=>• arrow_function [ τasync, τ_, τ$, θid, τ( ]';
    '97:300 assignment_expression=>• yield_expression [ τyield ]';
    if( dt_a9b4e918ef416a84( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||assert_ascii( l, 0x0, 0x8084, 0x8000000, 0x8000001 )||l.isNum( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  this true false null function class new super import " " 0X 0x 0O 0o 0B 0b [ { / ` num  ]';
    '95:288 primary_expression=>• τthis [ τthis ]';
    '166:522 boolean_literal=>• τtrue [ τtrue ]';
    '166:523 boolean_literal=>• τfalse [ τfalse ]';
    '165:521 null_literal=>• τnull [ τnull ]';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
    '161:508 int_token=>• θnum [ θnum ]';
    '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
    '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
    '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
    '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
    '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
    '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
    '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
    '129:414 object_literal=>• τ{ τ} [ τ{ ]';
    '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
    '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
    '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
    '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
    '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
    '146:458 template_head=>• τ` τ${ [ τ` ]';
    '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
    '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
    '82:246 new_expression=>• τnew new_expression [ τnew ]';
    '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
    '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
    '89:267 super_call=>• τsuper arguments [ τsuper ]';
    '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
    '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    switch(sym_map_d1cae766bca4320c( l, data )){
        case 0: 
        {
            '"--LEAF--"';
            'Leaf [  this  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '95:288 primary_expression=>• τthis [ τthis ]';
            pushFN( data, branch_6e7f74fd0cc7db23 );
            pushFN( data, $primary_expression );
            return prod_start
        }
        case 1: 
        {
            '"--LEAF--"';
            'Leaf [  true  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '166:522 boolean_literal=>• τtrue [ τtrue ]';
            pushFN( data, branch_6e7f74fd0cc7db23 );
            pushFN( data, $boolean_literal );
            return prod_start
        }
        case 2: 
        {
            '"--LEAF--"';
            'Leaf [  false  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '166:523 boolean_literal=>• τfalse [ τfalse ]';
            pushFN( data, branch_6e7f74fd0cc7db23 );
            pushFN( data, $boolean_literal );
            return prod_start
        }
        case 3: 
        {
            '"--LEAF--"';
            'Leaf [  null  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '165:521 null_literal=>• τnull [ τnull ]';
            pushFN( data, branch_6e7f74fd0cc7db23 );
            pushFN( data, $null_literal );
            return prod_start
        }
        case 4: 
        {
            '"--LEAF--"';
            'Leaf [  function  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
            pushFN( data, branch_9cb48d8fa58390c5 );
            pushFN( data, $function_declaration );
            return prod_start
        }
        case 5: 
        {
            '"--LEAF--"';
            'Leaf [  class  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
            pushFN( data, branch_6e7f74fd0cc7db23 );
            pushFN( data, $class_expression );
            return prod_start
        }
        case 6: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  new  ]';
            '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
            '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
            '82:246 new_expression=>• τnew new_expression [ τnew ]';
            'Number of end groups0 [    ]';
            'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import .  ]';
            '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
            '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
            '87:259 new_target=>τnew • τ. τtarget [ τ. ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( dt_a9b4e918ef416a84( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 206, 5, 5 )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
                var fk1 = fork( data );
                pushFN( fk1, branch_f3bc4ca51835f11e );
                pushFN( data, branch_28937e18d8a2f90f );
                return 0
            } else if( l.current_byte ==46 ){
                pushFN( data, branch_6e7f74fd0cc7db23 );
                return branch_071caf1d21c59110( l, data, state, prod, prod_start )
            }
        }
        case 7: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  super  ]';
            '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
            '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
            '89:267 super_call=>• τsuper arguments [ τsuper ]';
            'Number of end groups0 [    ]';
            'All symbols [  . [ (  ]';
            '84:254 super_property=>τsuper • τ. identifier_name [ τ. ]';
            '84:255 super_property=>τsuper • τ[ expression τ] [ τ[ ]';
            '89:267 super_call=>τsuper • arguments [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==46 ){
                pushFN( data, branch_6e7f74fd0cc7db23 );
                return branch_7522d6ae523359cf( l, data, state, prod, prod_start )
            } else if( l.current_byte ==91 ){
                pushFN( data, branch_6e7f74fd0cc7db23 );
                return branch_7a347b8a2033ccfc( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_5fb14268543e295b );
                return branch_720d66540ffaef39( l, data, state, prod, prod_start )
            }
        }
        case 8: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  import  ]';
            '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
            '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
            'Number of end groups0 [    ]';
            'All symbols [  . (  ]';
            '86:258 import_meta=>τimport • τ. τmeta [ τ. ]';
            '90:268 import_call=>τimport • τ( assignment_expression τ) [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==46 ){
                pushFN( data, branch_6e7f74fd0cc7db23 );
                return branch_e91daffe9c760941( l, data, state, prod, prod_start )
            } else if( l.current_byte ==40 ){
                pushFN( data, branch_5fb14268543e295b );
                return branch_9d33653390a4b7b7( l, data, state, prod, prod_start )
            }
        }
        case 9: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:484 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==34 ){
                pushFN( data, branch_6e7f74fd0cc7db23 );
                return branch_d9bfad00f871c280( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_6e7f74fd0cc7db23 );
                return branch_646b078462d89457( l, data, state, prod, prod_start )
            }
        }
        case 10: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:485 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==39 ){
                pushFN( data, branch_6e7f74fd0cc7db23 );
                return branch_9672b2cf7ede104a( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_6e7f74fd0cc7db23 );
                return branch_cc6ae262e8f43c6c( l, data, state, prod, prod_start )
            }
        }
        case 11: 
        {
            '"--LEAF--"';
            'Leaf [  0X  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
            pushFN( data, branch_0eecca07b8aa7644 );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 12: 
        {
            '"--LEAF--"';
            'Leaf [  0x  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
            pushFN( data, branch_0eecca07b8aa7644 );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 13: 
        {
            '"--LEAF--"';
            'Leaf [  0O  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
            pushFN( data, branch_0eecca07b8aa7644 );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 14: 
        {
            '"--LEAF--"';
            'Leaf [  0o  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
            pushFN( data, branch_0eecca07b8aa7644 );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 15: 
        {
            '"--LEAF--"';
            'Leaf [  0B  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
            pushFN( data, branch_0eecca07b8aa7644 );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 16: 
        {
            '"--LEAF--"';
            'Leaf [  0b  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
            pushFN( data, branch_0eecca07b8aa7644 );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 17: 
        {
            '"--LEAF--"';
            'Leaf [  [  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
            pushFN( data, branch_6e7f74fd0cc7db23 );
            pushFN( data, $array_literal );
            return prod_start
        }
        case 18: 
        {
            '"--LEAF--"';
            'Leaf [  {  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '129:414 object_literal=>• τ{ τ} [ τ{ ]';
            pushFN( data, branch_6e7f74fd0cc7db23 );
            pushFN( data, $object_literal );
            return prod_start
        }
        case 19: 
        {
            '"--LEAF--"';
            'Leaf [  /  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
            pushFN( data, branch_6e7f74fd0cc7db23 );
            pushFN( data, $regular_expression_literal );
            return prod_start
        }
        case 20: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  `  ]';
            '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
            '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
            '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
            '146:458 template_head=>• τ` τ${ [ τ` ]';
            'Number of end groups0 [    ]';
            'All symbols [  ` ${ nl ws sym num id f:s  ]';
            '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
            '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
            '142:451 no_substitute_template=>τ` • τ` [ τ` ]';
            '146:458 template_head=>τ` • τ${ [ τ${ ]';
            skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
            if( l.current_byte ==96 ){
                pushFN( data, branch_6e7f74fd0cc7db23 );
                return branch_09a1f4d0e3f2987f( l, data, state, prod, prod_start )
            } else if( cmpr_set( l, data, 47, 2, 2 ) ){
                pushFN( data, branch_4c1f03655a1ccdf2 );
                return branch_0a68333b2c4e0dc6( l, data, state, prod, prod_start )
            } else {
                'Number of end groups0 [    ]';
                'All symbols [  189  ]';
                '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
                '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                pushFN( data, branch_d1f960014973cab0 );
                pushFN( data, $no_substitute_template_list_846 );
                return data.rules_ptr
            }
        }
        case 21: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  _ n . E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE ,  ]';
            '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
            '161:508 int_token=>• θnum [ θnum ]';
            var pk = l.copyInPlace(  );
            skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==95 ){
                pushFN( data, branch_cbdc840b61c96049 );
                return branch_1d992d5b88873c5c( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_cbdc840b61c96049 );
                return branch_0c8d3c6dc575d2b3( l, data, state, prod, prod_start )
            }
        }
        default: 
        break
    }
} else if( cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||cmpr_set( l, data, 307, 6, 6 )||cmpr_set( l, data, 146, 4, 4 )||cmpr_set( l, data, 240, 6, 6 )||cmpr_set( l, data, 82, 5, 5 )||assert_ascii( l, 0x0, 0x2802, 0x0, 0x40000000 ) ){
    pushFN( data, branch_1b958e7f242617a2 );
    return branch_a538302a39e5a585( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 153, 5, 5 ) ){
    pushFN( data, branch_1b958e7f242617a2 );
    return branch_83ac9ec37bd1fe3b( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 206, 5, 5 )||assert_ascii( l, 0x0, 0x110, 0x80000000, 0x0 )||l.isUniID( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  async ( _ $ id  ]';
    '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:160 function_declaration=>• τasync τfunction binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:161 function_declaration=>• τasync τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:162 function_declaration=>• τasync τfunction τ* binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
    '59:166 function_declaration=>• τasync τfunction τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:167 function_declaration=>• τasync τfunction binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
    '59:168 function_declaration=>• τasync τfunction τ* τ( τ) τ{ function_body τ} [ τasync ]';
    '59:172 function_declaration=>• τasync τfunction τ( τ) τ{ function_body τ} [ τasync ]';
    '69:190 arrow_function=>• τasync arrow_parameters τ=> concise_body [ τasync ]';
    '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
    '116:375 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( τ) [ τ( ]';
    '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, τ) [ τ( ]';
    '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ( ]';
    '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ( ]';
    '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ( ]';
    '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ( ]';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
    '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    switch(sym_map_33516e712a1c1b37( l, data )){
        case 0: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  function _ $ id (  ]';
            '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
            '59:160 function_declaration=>• τasync τfunction binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
            '59:161 function_declaration=>• τasync τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
            '59:162 function_declaration=>• τasync τfunction τ* binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
            '59:166 function_declaration=>• τasync τfunction τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
            '59:167 function_declaration=>• τasync τfunction binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
            '59:168 function_declaration=>• τasync τfunction τ* τ( τ) τ{ function_body τ} [ τasync ]';
            '59:172 function_declaration=>• τasync τfunction τ( τ) τ{ function_body τ} [ τasync ]';
            '69:190 arrow_function=>• τasync arrow_parameters τ=> concise_body [ τasync ]';
            var pk = l.copyInPlace(  );
            skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( cmpr_set( pk, data, 87, 8, 8 ) ){
                'Number of end groups0 [    ]';
                'All symbols [  _ $ id * (  ]';
                '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
                '59:161 function_declaration=>• τasync τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
                '59:162 function_declaration=>• τasync τfunction τ* binding_identifier τ( τ) τ{ function_body τ} [ τasync ]';
                '59:168 function_declaration=>• τasync τfunction τ* τ( τ) τ{ function_body τ} [ τasync ]';
                '59:160 function_declaration=>• τasync τfunction binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
                '59:166 function_declaration=>• τasync τfunction τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
                skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
                if( pk.current_byte ==95||pk.current_byte  == 36 || pk.isUniID( data ) ){
                    pushFN( data, branch_6e7f74fd0cc7db23 );
                    return branch_3c5c4ce58935c259( l, data, state, prod, prod_start )
                } else if( pk.current_byte ==42 ){
                    'Number of end groups0 [    ]';
                    'All symbols [  _ $ id (  ]';
                    '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
                    '59:161 function_declaration=>• τasync τfunction τ* τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
                    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
                    if( pk.current_byte ==95||pk.current_byte  == 36 || pk.isUniID( data ) ){
                        pushFN( data, branch_6e7f74fd0cc7db23 );
                        return branch_5c558e917b5b9e9f( l, data, state, prod, prod_start )
                    } else {
                        pushFN( data, branch_6e7f74fd0cc7db23 );
                        return branch_deeebd91d60a5089( l, data, state, prod, prod_start )
                    }
                } else {
                    pushFN( data, branch_6e7f74fd0cc7db23 );
                    return branch_033b48c014aa202b( l, data, state, prod, prod_start )
                }
            } else {
                pushFN( data, branch_1b958e7f242617a2 );
                return branch_3c839dbb7ae71e4c( l, data, state, prod, prod_start )
            }
        }
        case 1: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  (  ]';
            '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
            '116:375 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( τ) [ τ( ]';
            '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, τ) [ τ( ]';
            '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ( ]';
            '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ( ]';
            '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ( ]';
            '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ( ]';
            'Number of end groups0 [    ]';
            'All symbols [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- ) ...  ]';
            '117:382 parenthesized=>τ( • expression τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
            '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • expression τ, τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
            '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
            '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
            '116:375 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • τ) [ τ) ]';
            '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ... ]';
            '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ... ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
                'Number of end groups0 [    ]';
                'All symbols [  80  ]';
                '117:382 parenthesized=>τ( • expression τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • expression τ, τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                pushFN( data, branch_e055954bae76a92a );
                pushFN( data, $expression );
                return data.rules_ptr
            } else if( l.current_byte ==41 ){
                pushFN( data, branch_fb3c66c25059a7cc );
                return branch_1d18600937259d27( l, data, state, prod, prod_start )
            } else if( cmpr_set( l, data, 16, 3, 3 ) ){
                'Number of end groups0 [    ]';
                'All symbols [  ...  ]';
                '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ... ]';
                '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ... ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 16, 3, 3 ) ){
                    'Number of end groups0 [    ]';
                    'All symbols [  _ $ id { [  ]';
                    '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ... ]';
                    '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ... ]';
                    var pk = l.copyInPlace(  );
                    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
                    if( pk.current_byte ==95||pk.current_byte  == 36 || pk.isUniID( data ) ){
                        pushFN( data, branch_fb3c66c25059a7cc );
                        return branch_a075d09e7961a50c( l, data, state, prod, prod_start )
                    } else {
                        pushFN( data, branch_fb3c66c25059a7cc );
                        return branch_58d3d5fc91c69932( l, data, state, prod, prod_start )
                    }
                }
            }
        }
        case 2: 
        {
            '"--LEAF--"';
            'Leaf [  _  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
            pushFN( data, branch_341bc98f64174b8d );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 3: 
        {
            '"--LEAF--"';
            'Leaf [  $  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
            pushFN( data, branch_341bc98f64174b8d );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 4: 
        {
            '"--LEAF--"';
            'Leaf [  id  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
            pushFN( data, branch_341bc98f64174b8d );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        default: 
        break
    }
};
    return -1
}
function $assignment_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 70: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  =>  ]';
                '69:191 arrow_function=>arrow_parameters • τ=> concise_body [ τ=> ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 29, 2, 2 ) ){
                    consume( l, data, state );
                    '"--LEAF--"';
                    'Leaf [  =>  ]';
                    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
                    '69:191 arrow_function=>arrow_parameters τ=> • concise_body [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τfunction, τclass, τ/, τ`, τsuper, τimport, τ{ ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    pushFN( data, branch_fd5f733caac294a5 );
                    pushFN( data, $concise_body );
                    return data.rules_ptr
                };
                break
            }
            case 81: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  *= /= %= += -= <<= >>= >>>= &= ^= |= **= &&= ||= ?? ++ -- = ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '97:303 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression [ τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||= ]';
                '115:371 update_expression=>left_hand_side_expression • τ++ [ τ++ ]';
                '115:372 update_expression=>left_hand_side_expression • τ-- [ τ-- ]';
                '97:302 assignment_expression=>left_hand_side_expression • τ= assignment_expression [ τ= ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_5d7350082ec873c4( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  *= /= %= += -= <<= >>= >>>= &= ^= |= **= &&= ||=  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '97:303 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression [ τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||= ]';
                        pushFN( data, branch_5780d1fedbbbfb6f );
                        pushFN( data, $assignment_operator );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        'Number of end groups0 [    ]';
                        'All symbols [  yield this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
                        '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        '97:303 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression [ τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||= ]';
                        var pk = l.copyInPlace(  );
                        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                        if( cmpr_set( pk, data, 153, 5, 5 ) ){
                            pushFN( data, branch_1b958e7f242617a2 );
                            return branch_ab9c437f7b802491( l, data, state, prod, prod_start )
                        } else if( dt_b20f4716c284a542( pk, data )||dt_c9742b8c3a6930ba( pk, data )||dt_5b7bef307ef015e7( pk, data )||dt_57f0cbc88859bc5b( pk, data )||dt_2f6691a653b819d6( pk, data )||cmpr_set( pk, data, 320, 5, 5 )||cmpr_set( pk, data, 345, 5, 5 )||cmpr_set( pk, data, 284, 6, 6 )||cmpr_set( pk, data, 190, 2, 2 )||cmpr_set( pk, data, 192, 2, 2 )||cmpr_set( pk, data, 307, 6, 6 )||cmpr_set( pk, data, 146, 4, 4 )||assert_ascii( pk, 0x0, 0xa996, 0x88000000, 0x48000001 )||pk.isUniID( data )||pk.isNum( data ) ){
                            var fk1 = fork( data );
                            pushFN( fk1, branch_a38d7fc61b9220df );
                            pushFN( data, branch_31494253d36ff260 );
                            return 0
                        }
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ++  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '115:371 update_expression=>left_hand_side_expression • τ++ [ τ++ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 183 );
                        pushFN( data, $assignment_expression_goto );
                        return 115
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  --  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '115:372 update_expression=>left_hand_side_expression • τ-- [ τ-- ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 183 );
                        pushFN( data, $assignment_expression_goto );
                        return 115
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  =  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '97:302 assignment_expression=>left_hand_side_expression • τ= assignment_expression [ τ= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_3fff83e5476573e2 );
                        pushFN( data, $assignment_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        prod = 115;
                        continue
                    }
                };
                break
            }
            case 83: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  [ . ` ( ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e0aa0d6f406c9358( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_f5c910a4cc54a43b );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_f2ac1d2e1a99c25e );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                        pushFN( data, branch_989aa965a35af920 );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                        pushFN( data, branch_92f6ba4fd259d981 );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_8c0631fc0506211d );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        prod = 81;
                        continue
                    }
                };
                break
            }
            case 88: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  . ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                '88:263 call_expression=>call_expression • arguments [ τ( ]';
                '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_f000881e6a4cb7bf( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_1da7998a7f2ac8ca );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:263 call_expression=>call_expression • arguments [ τ( ]';
                        pushFN( data, branch_627c730bd2637bb1 );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_0d2a9b893187ffe6 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                        pushFN( data, branch_82d83328e92fa521 );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_8c0631fc0506211d );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        prod = 81;
                        continue
                    }
                };
                break
            }
            case 93: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '93:279 optional_expression=>optional_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 19, 2, 2 ) ){
                    pushFN( data, branch_7bdd5acede1b899b );
                    return branch_f0c3bcb79d8e42d6( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                    prod = 81;
                    continue
                };
                break
            }
            case 100: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '99:319 conditional_expression=>short_circuit_expression • [ τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                '99:320 conditional_expression=>short_circuit_expression • τ? assignment_expression τ: assignment_expression [ τ? ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==63 ){
                    pushFN( data, branch_1b958e7f242617a2 );
                    return branch_7e91dfc3645106f3( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '99:319 conditional_expression=>short_circuit_expression • [ τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                    return 97
                };
                break
            }
            case 101: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  || ? ; } nl END_OF_FILE ) : ] , END_OF_PRODUCTION  ]';
                '100:321 short_circuit_expression=>logical_or_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '101:324 logical_or_expression=>logical_or_expression • τ|| logical_and_expression [ τ|| ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 39, 2, 2 ) ){
                    pushFN( data, branch_a8d5043904b35713 );
                    return branch_a5fb8c802515f878( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  ? ; } nl END_OF_FILE ) : ] , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '100:321 short_circuit_expression=>logical_or_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    prod = 100;
                    continue
                };
                break
            }
            case 102: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  && || ? ; } nl END_OF_FILE ) : ] , END_OF_PRODUCTION  ]';
                '101:323 logical_or_expression=>logical_and_expression • [ τ||, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                '102:326 logical_and_expression=>logical_and_expression • τ&& bitwise_or_expression [ τ&& ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 34, 2, 2 ) ){
                    pushFN( data, branch_98d2129f2df6c5da );
                    return branch_75006597b4ba99f6( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  || ? ; } nl END_OF_FILE ) : ] , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '101:323 logical_or_expression=>logical_and_expression • [ τ||, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                    prod = 101;
                    continue
                };
                break
            }
            case 103: 
            {
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                'Number of end groups2 [    ]';
                'All symbols [  ?? ? END_OF_PRODUCTION  ]';
                '100:322 short_circuit_expression=>coalesce_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '104:329 coalesce_expression_head=>coalesce_expression • [ τ?? ]';
                if( sym_map_1012bd13e6821850( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  ??  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '104:329 coalesce_expression_head=>coalesce_expression • [ τ?? ]';
                    prod = 104;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  ? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '100:322 short_circuit_expression=>coalesce_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    prod = 100;
                    continue
                };
                break
            }
            case 104: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ??  ]';
                '103:327 coalesce_expression=>coalesce_expression_head • τ?? bitwise_or_expression [ τ?? ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 188, 2, 2 ) ){
                    consume( l, data, state );
                    '"--LEAF--"';
                    'Leaf [  ??  ]';
                    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
                    '103:327 coalesce_expression=>coalesce_expression_head τ?? • bitwise_or_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    pushFN( data, branch_3362d77953932103 );
                    pushFN( data, $bitwise_or_expression );
                    return data.rules_ptr
                };
                break
            }
            case 105: 
            {
                'Number of end groups2 [    ]';
                'All symbols [  | && || ? ; } nl END_OF_FILE ) : ] , END_OF_PRODUCTION ??  ]';
                '102:325 logical_and_expression=>bitwise_or_expression • [ τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '105:331 bitwise_or_expression=>bitwise_or_expression • τ| bitwise_xor_expression [ τ| ]';
                '104:328 coalesce_expression_head=>bitwise_or_expression • [ τ?? ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==124 ){
                    pushFN( data, branch_250b86a095b93df8 );
                    return branch_4b700977725f12de( l, data, state, prod, prod_start )
                } else if( sym_map_b10b0c1535519359( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  && || ? ; } nl END_OF_FILE ) : ] , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '102:325 logical_and_expression=>bitwise_or_expression • [ τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    prod = 102;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '104:328 coalesce_expression_head=>bitwise_or_expression • [ τ?? ]';
                    prod = 104;
                    continue
                };
                break
            }
            case 106: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '105:330 bitwise_or_expression=>bitwise_xor_expression • [ τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '106:333 bitwise_xor_expression=>bitwise_xor_expression • τ^ bitwise_and_expression [ τ^ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==94 ){
                    pushFN( data, branch_0fcbc655e289dd83 );
                    return branch_da2a7411d5ce242e( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '105:330 bitwise_or_expression=>bitwise_xor_expression • [ τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                    prod = 105;
                    continue
                };
                break
            }
            case 107: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '106:332 bitwise_xor_expression=>bitwise_and_expression • [ τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '107:335 bitwise_and_expression=>bitwise_and_expression • τ& equality_expression [ τ& ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_eb1ae190d19756d3( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  &  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '107:335 bitwise_and_expression=>bitwise_and_expression • τ& equality_expression [ τ& ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_fe2062fbc9fe25cc );
                        pushFN( data, $equality_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '106:332 bitwise_xor_expression=>bitwise_and_expression • [ τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        prod = 106;
                        continue
                    }
                };
                break
            }
            case 108: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  == != === !== & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '107:334 bitwise_and_expression=>equality_expression • [ τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '108:337 equality_expression=>equality_expression • τ== relational_expression [ τ== ]';
                '108:338 equality_expression=>equality_expression • τ!= relational_expression [ τ!= ]';
                '108:339 equality_expression=>equality_expression • τ=== relational_expression [ τ=== ]';
                '108:340 equality_expression=>equality_expression • τ!== relational_expression [ τ!== ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_9f32aad30074aaf0( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ==  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:337 equality_expression=>equality_expression • τ== relational_expression [ τ== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_fd7011922d4335a8 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:338 equality_expression=>equality_expression • τ!= relational_expression [ τ!= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_fd7011922d4335a8 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ===  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:339 equality_expression=>equality_expression • τ=== relational_expression [ τ=== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_fd7011922d4335a8 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !==  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:340 equality_expression=>equality_expression • τ!== relational_expression [ τ!== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_fd7011922d4335a8 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '107:334 bitwise_and_expression=>equality_expression • [ τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 107;
                        continue
                    }
                };
                break
            }
            case 109: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  in instanceof < > <= >= == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '108:336 equality_expression=>relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '109:342 relational_expression=>relational_expression • τ< shift_expression [ τ< ]';
                '109:343 relational_expression=>relational_expression • τ> shift_expression [ τ> ]';
                '109:344 relational_expression=>relational_expression • τ<= shift_expression [ τ<= ]';
                '109:345 relational_expression=>relational_expression • τ>= shift_expression [ τ>= ]';
                '109:346 relational_expression=>relational_expression • τinstanceof shift_expression [ τinstanceof ]';
                '109:347 relational_expression=>relational_expression • τin shift_expression [ τin ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a4ed59f4a075ef3d( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:347 relational_expression=>relational_expression • τin shift_expression [ τin ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_d12fc0b55475d671 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  instanceof  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:346 relational_expression=>relational_expression • τinstanceof shift_expression [ τinstanceof ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_cd4d8c0d458cd02e );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:342 relational_expression=>relational_expression • τ< shift_expression [ τ< ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_05d59e554b5b9f0e );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:343 relational_expression=>relational_expression • τ> shift_expression [ τ> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_05d59e554b5b9f0e );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:344 relational_expression=>relational_expression • τ<= shift_expression [ τ<= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_05d59e554b5b9f0e );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:345 relational_expression=>relational_expression • τ>= shift_expression [ τ>= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_05d59e554b5b9f0e );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 6: 
                    {
                        '"--LEAF--"';
                        'Leaf [  == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '108:336 equality_expression=>relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        prod = 108;
                        continue
                    }
                };
                break
            }
            case 110: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '109:341 relational_expression=>shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '110:349 shift_expression=>shift_expression • τ<< additive_expression [ τ<< ]';
                '110:350 shift_expression=>shift_expression • τ>> additive_expression [ τ>> ]';
                '110:351 shift_expression=>shift_expression • τ>>> additive_expression [ τ>>> ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_0ad057c21199e520( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <<  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:349 shift_expression=>shift_expression • τ<< additive_expression [ τ<< ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_fd3b9e90c1421b07 );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >>  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:350 shift_expression=>shift_expression • τ>> additive_expression [ τ>> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_fd3b9e90c1421b07 );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >>>  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:351 shift_expression=>shift_expression • τ>>> additive_expression [ τ>>> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_fd3b9e90c1421b07 );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '109:341 relational_expression=>shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 109;
                        continue
                    }
                };
                break
            }
            case 111: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '110:348 shift_expression=>additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '111:353 additive_expression=>additive_expression • τ+ multiplicative_expression [ τ+ ]';
                '111:354 additive_expression=>additive_expression • τ- multiplicative_expression [ τ- ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==43 ){
                    pushFN( data, branch_ca90f4e8df9fd810 );
                    return branch_0edf2a0d55e3eebe( l, data, state, prod, prod_start )
                } else if( l.current_byte ==45 ){
                    pushFN( data, branch_ca90f4e8df9fd810 );
                    return branch_8e180b7a9c4fa605( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '110:348 shift_expression=>additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                    prod = 110;
                    continue
                };
                break
            }
            case 112: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  * / % + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '111:352 additive_expression=>multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '112:356 multiplicative_expression=>multiplicative_expression • τ* exponentiation_expression [ τ* ]';
                '112:357 multiplicative_expression=>multiplicative_expression • τ/ exponentiation_expression [ τ/ ]';
                '112:358 multiplicative_expression=>multiplicative_expression • τ% exponentiation_expression [ τ% ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==42 ){
                    pushFN( data, branch_a2442354b8a34a5f );
                    return branch_c99406960e9dacd8( l, data, state, prod, prod_start )
                } else if( l.current_byte ==47 ){
                    pushFN( data, branch_a2442354b8a34a5f );
                    return branch_057d8d843911862e( l, data, state, prod, prod_start )
                } else if( l.current_byte ==37 ){
                    pushFN( data, branch_a2442354b8a34a5f );
                    return branch_ab0dc0b4de0edc56( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '111:352 additive_expression=>multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                    prod = 111;
                    continue
                };
                break
            }
            case 115: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '113:360 exponentiation_expression=>update_expression • τ** exponentiation_expression [ τ** ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_bd3dc49275d4a0e9( l, data )){
                    case 0: 
                    {
                        var fk1 = fork( data );
                        pushFN( fk1, branch_5e151e2c1b848123 );
                        pushFN( data, branch_c309fdfe433f3a05 );
                        return 0
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? ** END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 112;
                        continue
                    }
                };
                break
            }
            case 117: 
            {
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                'Number of end groups2 [    ]';
                'All symbols [  => ?. ( ` . [ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = -- ++ ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? END_OF_PRODUCTION  ]';
                '116:381 cover_parenthesized_expression_and_arrow_parameter_list=>parenthesized • [ τ=> ]';
                '95:297 primary_expression=>parenthesized • [ τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                if( sym_map_82c6f0eaa59907f9( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  =>  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '116:381 cover_parenthesized_expression_and_arrow_parameter_list=>parenthesized • [ τ=> ]';
                    prod = 70;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  ?. ( ` . [ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = -- ++ ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '95:297 primary_expression=>parenthesized • [ τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    prod = 83;
                    continue
                };
                break
            }
            case 146: 
            {
                '"--LEAF--"';
                'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '143:452 substitute_template=>template_head • expression template_spans [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                pushFN( data, branch_2e42c6dbe4587081 );
                pushFN( data, $expression );
                return data.rules_ptr;
                break
            }
            case 160: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  E e ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e32b08cd3c718e6b( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                        pushFN( data, branch_e6ee630862831318 );
                        pushFN( data, $scientific_token_group_923_0_ );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        add_reduce( state, data, 1, 238 );
                        add_reduce( state, data, 1, 236 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
            case 161: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  n . E e ( : ?. ` [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '158:502 big_token=>int_token • τn [ τn ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a1c731d03900f749( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  n  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '158:502 big_token=>int_token • τn [ τn ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 238 );
                        add_reduce( state, data, 1, 237 );
                        pushFN( data, $assignment_expression_goto );
                        return 83
                    }
                    case 1: 
                    {
                        'Number of end groups1 [    ]';
                        'All symbols [  num _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                        '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        var pk = l.copyInPlace(  );
                        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                        if( pk.isNum( data ) ){
                            pushFN( data, branch_0d86127da7a2651f );
                            return branch_731d73028155c3d7( l, data, state, prod, prod_start )
                        } else {
                            '"--LEAF--"';
                            'Leaf [  _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                            '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                            add_reduce( state, data, 1, 238 );
                            prod = 160;
                            continue
                        }
                    }
                    default:
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e ( : ?. ` [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { . END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        add_reduce( state, data, 1, 238 );
                        prod = 160;
                        continue
                    }
                };
                break
            }
            case 168: 
            {
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                'Number of end groups2 [    ]';
                'All symbols [  => ?. ( ` . [ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = -- ++ ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? END_OF_PRODUCTION  ]';
                '95:289 primary_expression=>identifier_reference • [ τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '70:192 arrow_parameters=>identifier_reference • [ τ=> ]';
                if( sym_map_82c6f0eaa59907f9( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  =>  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '70:192 arrow_parameters=>identifier_reference • [ τ=> ]';
                    add_reduce( state, data, 1, 110 );
                    prod = 70;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  ?. ( ` . [ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = -- ++ ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '95:289 primary_expression=>identifier_reference • [ τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    prod = 83;
                    continue
                };
                break
            }
            case 178: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  _ $ id num ?. ( ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { as from => extends END_OF_PRODUCTION  ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                switch(sym_map_00126370fc441c6c( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  _  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $assignment_expression_goto );
                        return 178
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  $  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $assignment_expression_goto );
                        return 178
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  id  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $assignment_expression_goto );
                        return 178
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  num  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $assignment_expression_goto );
                        return 178
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?. ( ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { as from => extends END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                        add_reduce( state, data, 1, 244 );
                        add_reduce( state, data, 1, 243 );
                        prod = 168;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==97 )?prod :-1
}
function $assignment_operator(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||=  ]';
    '98:304 assignment_operator=>• τ*= [ τ*= ]';
    '98:305 assignment_operator=>• τ/= [ τ/= ]';
    '98:306 assignment_operator=>• τ%= [ τ%= ]';
    '98:307 assignment_operator=>• τ+= [ τ+= ]';
    '98:308 assignment_operator=>• τ-= [ τ-= ]';
    '98:309 assignment_operator=>• τ<<= [ τ<<= ]';
    '98:310 assignment_operator=>• τ>>= [ τ>>= ]';
    '98:311 assignment_operator=>• τ>>>= [ τ>>>= ]';
    '98:312 assignment_operator=>• τ&= [ τ&= ]';
    '98:313 assignment_operator=>• τ^= [ τ^= ]';
    '98:314 assignment_operator=>• τ|= [ τ|= ]';
    '98:315 assignment_operator=>• τ**= [ τ**= ]';
    '98:316 assignment_operator=>• τ?? [ τ?? ]';
    '98:317 assignment_operator=>• τ&&= [ τ&&= ]';
    '98:318 assignment_operator=>• τ||= [ τ||= ]';
    switch(sym_map_a944902737640308( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  *=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:304 assignment_operator=>• τ*= [ τ*= ]';
        consume( l, data, state );
        return 98
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  /=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:305 assignment_operator=>• τ/= [ τ/= ]';
        consume( l, data, state );
        return 98
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  %=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:306 assignment_operator=>• τ%= [ τ%= ]';
        consume( l, data, state );
        return 98
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  +=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:307 assignment_operator=>• τ+= [ τ+= ]';
        consume( l, data, state );
        return 98
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  -=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:308 assignment_operator=>• τ-= [ τ-= ]';
        consume( l, data, state );
        return 98
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  <<=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:309 assignment_operator=>• τ<<= [ τ<<= ]';
        consume( l, data, state );
        return 98
    }
    case 6: 
    {
        '"--LEAF--"';
        'Leaf [  >>=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:310 assignment_operator=>• τ>>= [ τ>>= ]';
        consume( l, data, state );
        return 98
    }
    case 7: 
    {
        '"--LEAF--"';
        'Leaf [  >>>=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:311 assignment_operator=>• τ>>>= [ τ>>>= ]';
        consume( l, data, state );
        return 98
    }
    case 8: 
    {
        '"--LEAF--"';
        'Leaf [  &=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:312 assignment_operator=>• τ&= [ τ&= ]';
        consume( l, data, state );
        return 98
    }
    case 9: 
    {
        '"--LEAF--"';
        'Leaf [  ^=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:313 assignment_operator=>• τ^= [ τ^= ]';
        consume( l, data, state );
        return 98
    }
    case 10: 
    {
        '"--LEAF--"';
        'Leaf [  |=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:314 assignment_operator=>• τ|= [ τ|= ]';
        consume( l, data, state );
        return 98
    }
    case 11: 
    {
        '"--LEAF--"';
        'Leaf [  **=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:315 assignment_operator=>• τ**= [ τ**= ]';
        consume( l, data, state );
        return 98
    }
    case 12: 
    {
        '"--LEAF--"';
        'Leaf [  ??  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:316 assignment_operator=>• τ?? [ τ?? ]';
        consume( l, data, state );
        return 98
    }
    case 13: 
    {
        '"--LEAF--"';
        'Leaf [  &&=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:317 assignment_operator=>• τ&&= [ τ&&= ]';
        consume( l, data, state );
        return 98
    }
    case 14: 
    {
        '"--LEAF--"';
        'Leaf [  ||=  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '98:318 assignment_operator=>• τ||= [ τ||= ]';
        consume( l, data, state );
        return 98
    }
    default: 
    break
};
    return -1
}
function $conditional_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  100  ]';
    '99:319 conditional_expression=>• short_circuit_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    '99:320 conditional_expression=>• short_circuit_expression τ? assignment_expression τ: assignment_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_1b5a9eda331c734c );
    pushFN( data, $short_circuit_expression );
    return data.rules_ptr;
    return -1
}
function $short_circuit_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '100:321 short_circuit_expression=>• logical_or_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    '100:322 short_circuit_expression=>• coalesce_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    if( dt_b20f4716c284a542( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||dt_2f6691a653b819d6( l, data )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||cmpr_set( l, data, 307, 6, 6 )||cmpr_set( l, data, 146, 4, 4 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  this true false null async function class new super import delete void typeof await " " 0X 0x 0O 0o 0B 0b [ { / ` ( _ $ + ++ -- ~ ! - num id  ]';
    '95:288 primary_expression=>• τthis [ τthis ]';
    '166:522 boolean_literal=>• τtrue [ τtrue ]';
    '166:523 boolean_literal=>• τfalse [ τfalse ]';
    '165:521 null_literal=>• τnull [ τnull ]';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
    '161:508 int_token=>• θnum [ θnum ]';
    '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
    '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
    '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
    '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
    '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
    '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
    '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
    '129:414 object_literal=>• τ{ τ} [ τ{ ]';
    '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
    '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
    '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
    '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
    '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
    '146:458 template_head=>• τ` τ${ [ τ` ]';
    '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
    '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
    '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
    '82:246 new_expression=>• τnew new_expression [ τnew ]';
    '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
    '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
    '89:267 super_call=>• τsuper arguments [ τsuper ]';
    '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
    '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
    '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
    '115:373 update_expression=>• τ++ unary_expression [ τ++ ]';
    '115:374 update_expression=>• τ-- unary_expression [ τ-- ]';
    '114:362 unary_expression=>• τdelete unary_expression [ τdelete ]';
    '114:363 unary_expression=>• τvoid unary_expression [ τvoid ]';
    '114:364 unary_expression=>• τtypeof unary_expression [ τtypeof ]';
    '114:365 unary_expression=>• τ+ unary_expression [ τ+ ]';
    '114:366 unary_expression=>• τ~ unary_expression [ τ~ ]';
    '114:367 unary_expression=>• τ! unary_expression [ τ! ]';
    '114:368 unary_expression=>• τ- unary_expression [ τ- ]';
    '96:298 await_expression=>• τawait unary_expression [ τawait ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    switch(sym_map_8a1b4c8942bd94ef( l, data )){
        case 0: 
        {
            '"--LEAF--"';
            'Leaf [  this  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '95:288 primary_expression=>• τthis [ τthis ]';
            pushFN( data, branch_e46c1e61f91ef88e );
            pushFN( data, $primary_expression );
            return prod_start
        }
        case 1: 
        {
            '"--LEAF--"';
            'Leaf [  true  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '166:522 boolean_literal=>• τtrue [ τtrue ]';
            pushFN( data, branch_e46c1e61f91ef88e );
            pushFN( data, $boolean_literal );
            return prod_start
        }
        case 2: 
        {
            '"--LEAF--"';
            'Leaf [  false  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '166:523 boolean_literal=>• τfalse [ τfalse ]';
            pushFN( data, branch_e46c1e61f91ef88e );
            pushFN( data, $boolean_literal );
            return prod_start
        }
        case 3: 
        {
            '"--LEAF--"';
            'Leaf [  null  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '165:521 null_literal=>• τnull [ τnull ]';
            pushFN( data, branch_e46c1e61f91ef88e );
            pushFN( data, $null_literal );
            return prod_start
        }
        case 4: 
        {
            '"--LEAF--"';
            'Leaf [  async  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
            pushFN( data, branch_a3ffd7db04c9b4b1 );
            pushFN( data, $function_declaration );
            return prod_start
        }
        case 5: 
        {
            '"--LEAF--"';
            'Leaf [  function  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
            pushFN( data, branch_a3ffd7db04c9b4b1 );
            pushFN( data, $function_declaration );
            return prod_start
        }
        case 6: 
        {
            '"--LEAF--"';
            'Leaf [  class  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
            pushFN( data, branch_e46c1e61f91ef88e );
            pushFN( data, $class_expression );
            return prod_start
        }
        case 7: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  new  ]';
            '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
            '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
            '82:246 new_expression=>• τnew new_expression [ τnew ]';
            'Number of end groups0 [    ]';
            'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import .  ]';
            '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
            '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
            '87:259 new_target=>τnew • τ. τtarget [ τ. ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( dt_a9b4e918ef416a84( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 206, 5, 5 )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
                var fk1 = fork( data );
                pushFN( fk1, branch_2989bd181844e552 );
                pushFN( data, branch_c5cace004a08de32 );
                return 0
            } else if( l.current_byte ==46 ){
                pushFN( data, branch_e46c1e61f91ef88e );
                return branch_071caf1d21c59110( l, data, state, prod, prod_start )
            }
        }
        case 8: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  super  ]';
            '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
            '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
            '89:267 super_call=>• τsuper arguments [ τsuper ]';
            'Number of end groups0 [    ]';
            'All symbols [  . [ (  ]';
            '84:254 super_property=>τsuper • τ. identifier_name [ τ. ]';
            '84:255 super_property=>τsuper • τ[ expression τ] [ τ[ ]';
            '89:267 super_call=>τsuper • arguments [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==46 ){
                pushFN( data, branch_e46c1e61f91ef88e );
                return branch_7522d6ae523359cf( l, data, state, prod, prod_start )
            } else if( l.current_byte ==91 ){
                pushFN( data, branch_e46c1e61f91ef88e );
                return branch_7a347b8a2033ccfc( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_58b5e1501dcd84e8 );
                return branch_720d66540ffaef39( l, data, state, prod, prod_start )
            }
        }
        case 9: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  import  ]';
            '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
            '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
            'Number of end groups0 [    ]';
            'All symbols [  . (  ]';
            '86:258 import_meta=>τimport • τ. τmeta [ τ. ]';
            '90:268 import_call=>τimport • τ( assignment_expression τ) [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==46 ){
                pushFN( data, branch_e46c1e61f91ef88e );
                return branch_e91daffe9c760941( l, data, state, prod, prod_start )
            } else if( l.current_byte ==40 ){
                pushFN( data, branch_58b5e1501dcd84e8 );
                return branch_9d33653390a4b7b7( l, data, state, prod, prod_start )
            }
        }
        case 10: 
        {
            '"--LEAF--"';
            'Leaf [  delete  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:362 unary_expression=>• τdelete unary_expression [ τdelete ]';
            pushFN( data, branch_9f8b397fbf1e2555 );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 11: 
        {
            '"--LEAF--"';
            'Leaf [  void  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:363 unary_expression=>• τvoid unary_expression [ τvoid ]';
            pushFN( data, branch_9f8b397fbf1e2555 );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 12: 
        {
            '"--LEAF--"';
            'Leaf [  typeof  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:364 unary_expression=>• τtypeof unary_expression [ τtypeof ]';
            pushFN( data, branch_9f8b397fbf1e2555 );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 13: 
        {
            '"--LEAF--"';
            'Leaf [  await  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '96:298 await_expression=>• τawait unary_expression [ τawait ]';
            pushFN( data, branch_9f8b397fbf1e2555 );
            pushFN( data, $await_expression );
            return prod_start
        }
        case 14: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:484 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==34 ){
                pushFN( data, branch_e46c1e61f91ef88e );
                return branch_d9bfad00f871c280( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_e46c1e61f91ef88e );
                return branch_646b078462d89457( l, data, state, prod, prod_start )
            }
        }
        case 15: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:485 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==39 ){
                pushFN( data, branch_e46c1e61f91ef88e );
                return branch_9672b2cf7ede104a( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_e46c1e61f91ef88e );
                return branch_cc6ae262e8f43c6c( l, data, state, prod, prod_start )
            }
        }
        case 16: 
        {
            '"--LEAF--"';
            'Leaf [  0X  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
            pushFN( data, branch_ddcc2cfa16116ef3 );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 17: 
        {
            '"--LEAF--"';
            'Leaf [  0x  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
            pushFN( data, branch_ddcc2cfa16116ef3 );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 18: 
        {
            '"--LEAF--"';
            'Leaf [  0O  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
            pushFN( data, branch_ddcc2cfa16116ef3 );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 19: 
        {
            '"--LEAF--"';
            'Leaf [  0o  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
            pushFN( data, branch_ddcc2cfa16116ef3 );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 20: 
        {
            '"--LEAF--"';
            'Leaf [  0B  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
            pushFN( data, branch_ddcc2cfa16116ef3 );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 21: 
        {
            '"--LEAF--"';
            'Leaf [  0b  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
            pushFN( data, branch_ddcc2cfa16116ef3 );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 22: 
        {
            '"--LEAF--"';
            'Leaf [  [  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
            pushFN( data, branch_e46c1e61f91ef88e );
            pushFN( data, $array_literal );
            return prod_start
        }
        case 23: 
        {
            '"--LEAF--"';
            'Leaf [  {  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '129:414 object_literal=>• τ{ τ} [ τ{ ]';
            pushFN( data, branch_e46c1e61f91ef88e );
            pushFN( data, $object_literal );
            return prod_start
        }
        case 24: 
        {
            '"--LEAF--"';
            'Leaf [  /  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
            pushFN( data, branch_e46c1e61f91ef88e );
            pushFN( data, $regular_expression_literal );
            return prod_start
        }
        case 25: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  `  ]';
            '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
            '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
            '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
            '146:458 template_head=>• τ` τ${ [ τ` ]';
            'Number of end groups0 [    ]';
            'All symbols [  ` ${ nl ws sym num id f:s  ]';
            '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
            '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
            '142:451 no_substitute_template=>τ` • τ` [ τ` ]';
            '146:458 template_head=>τ` • τ${ [ τ${ ]';
            skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
            if( l.current_byte ==96 ){
                pushFN( data, branch_e46c1e61f91ef88e );
                return branch_09a1f4d0e3f2987f( l, data, state, prod, prod_start )
            } else if( cmpr_set( l, data, 47, 2, 2 ) ){
                pushFN( data, branch_a768b1029796cac7 );
                return branch_0a68333b2c4e0dc6( l, data, state, prod, prod_start )
            } else {
                'Number of end groups0 [    ]';
                'All symbols [  189  ]';
                '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
                '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                pushFN( data, branch_18f351d88311162a );
                pushFN( data, $no_substitute_template_list_846 );
                return data.rules_ptr
            }
        }
        case 26: 
        {
            '"--LEAF--"';
            'Leaf [  (  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
            pushFN( data, branch_e46c1e61f91ef88e );
            pushFN( data, $parenthesized );
            return prod_start
        }
        case 27: 
        {
            '"--LEAF--"';
            'Leaf [  _  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
            pushFN( data, branch_95e4a639e21003e4 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 28: 
        {
            '"--LEAF--"';
            'Leaf [  $  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
            pushFN( data, branch_95e4a639e21003e4 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 29: 
        {
            '"--LEAF--"';
            'Leaf [  +  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:365 unary_expression=>• τ+ unary_expression [ τ+ ]';
            pushFN( data, branch_9f8b397fbf1e2555 );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 30: 
        {
            '"--LEAF--"';
            'Leaf [  ++  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '115:373 update_expression=>• τ++ unary_expression [ τ++ ]';
            pushFN( data, branch_e6b6066030cfb5e6 );
            pushFN( data, $update_expression );
            return prod_start
        }
        case 31: 
        {
            '"--LEAF--"';
            'Leaf [  --  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '115:374 update_expression=>• τ-- unary_expression [ τ-- ]';
            pushFN( data, branch_e6b6066030cfb5e6 );
            pushFN( data, $update_expression );
            return prod_start
        }
        case 32: 
        {
            '"--LEAF--"';
            'Leaf [  ~  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:366 unary_expression=>• τ~ unary_expression [ τ~ ]';
            pushFN( data, branch_9f8b397fbf1e2555 );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 33: 
        {
            '"--LEAF--"';
            'Leaf [  !  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:367 unary_expression=>• τ! unary_expression [ τ! ]';
            pushFN( data, branch_9f8b397fbf1e2555 );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 34: 
        {
            '"--LEAF--"';
            'Leaf [  -  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:368 unary_expression=>• τ- unary_expression [ τ- ]';
            pushFN( data, branch_9f8b397fbf1e2555 );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 35: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  _ . n E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE ,  ]';
            '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
            '161:508 int_token=>• θnum [ θnum ]';
            var pk = l.copyInPlace(  );
            skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==95 ){
                pushFN( data, branch_59d29be59acdfd05 );
                return branch_1d992d5b88873c5c( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_59d29be59acdfd05 );
                return branch_e80a8071760f9de0( l, data, state, prod, prod_start )
            }
        }
        case 36: 
        {
            '"--LEAF--"';
            'Leaf [  id  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
            pushFN( data, branch_95e4a639e21003e4 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        default: 
        break
    }
};
    return -1
}
function $short_circuit_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 81: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ++ -- ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '115:371 update_expression=>left_hand_side_expression • τ++ [ τ++ ]';
                '115:372 update_expression=>left_hand_side_expression • τ-- [ τ-- ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 190, 2, 2 ) ){
                    pushFN( data, branch_e6b6066030cfb5e6 );
                    return branch_294f036931ed4100( l, data, state, prod, prod_start )
                } else if( cmpr_set( l, data, 192, 2, 2 ) ){
                    pushFN( data, branch_e6b6066030cfb5e6 );
                    return branch_36c3743f55efb781( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                    prod = 115;
                    continue
                };
                break
            }
            case 83: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  [ . ` ( ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e0aa0d6f406c9358( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_b9930cb90501c723 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_618f20377efaa3fe );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                        pushFN( data, branch_a07b5330ad4c35c6 );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                        pushFN( data, branch_1c4c3f0ebbb1ad5e );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_4920d66bf0ccfcf7 );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        prod = 81;
                        continue
                    }
                };
                break
            }
            case 88: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  . ( [ ` ?. -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                '88:263 call_expression=>call_expression • arguments [ τ( ]';
                '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_cca60d9a2b40a7b2( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_ecfd1bb731a87e4f );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:263 call_expression=>call_expression • arguments [ τ( ]';
                        pushFN( data, branch_c195667e4d57184c );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_6161bf8e8b13b8bc );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                        pushFN( data, branch_4e694aaaae6aadd8 );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_4920d66bf0ccfcf7 );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        prod = 81;
                        continue
                    }
                };
                break
            }
            case 93: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '93:279 optional_expression=>optional_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 19, 2, 2 ) ){
                    pushFN( data, branch_da5b451dc6b865ec );
                    return branch_f0c3bcb79d8e42d6( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                    prod = 81;
                    continue
                };
                break
            }
            case 101: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '100:321 short_circuit_expression=>logical_or_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '101:324 logical_or_expression=>logical_or_expression • τ|| logical_and_expression [ τ|| ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 39, 2, 2 ) ){
                    pushFN( data, branch_ad33600ade06ab50 );
                    return branch_a5fb8c802515f878( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '100:321 short_circuit_expression=>logical_or_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    return 100
                };
                break
            }
            case 102: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '101:323 logical_or_expression=>logical_and_expression • [ τ||, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                '102:326 logical_and_expression=>logical_and_expression • τ&& bitwise_or_expression [ τ&& ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 34, 2, 2 ) ){
                    pushFN( data, branch_2cada92abd3b3d42 );
                    return branch_75006597b4ba99f6( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '101:323 logical_or_expression=>logical_and_expression • [ τ||, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                    prod = 101;
                    continue
                };
                break
            }
            case 103: 
            {
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                'Number of end groups2 [    ]';
                'All symbols [  ?? nl ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
                '104:329 coalesce_expression_head=>coalesce_expression • [ τ?? ]';
                '100:322 short_circuit_expression=>coalesce_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                if( sym_map_1012bd13e6821850( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  ??  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '104:329 coalesce_expression_head=>coalesce_expression • [ τ?? ]';
                    prod = 104;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  nl ? : END_OF_FILE } ) , ] ; END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '100:322 short_circuit_expression=>coalesce_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    return 100
                };
                break
            }
            case 104: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ??  ]';
                '103:327 coalesce_expression=>coalesce_expression_head • τ?? bitwise_or_expression [ τ?? ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 188, 2, 2 ) ){
                    consume( l, data, state );
                    '"--LEAF--"';
                    'Leaf [  ??  ]';
                    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
                    '103:327 coalesce_expression=>coalesce_expression_head τ?? • bitwise_or_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    pushFN( data, branch_144319f8bd59d868 );
                    pushFN( data, $bitwise_or_expression );
                    return data.rules_ptr
                };
                break
            }
            case 105: 
            {
                'Number of end groups2 [    ]';
                'All symbols [  | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION ??  ]';
                '102:325 logical_and_expression=>bitwise_or_expression • [ τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '105:331 bitwise_or_expression=>bitwise_or_expression • τ| bitwise_xor_expression [ τ| ]';
                '104:328 coalesce_expression_head=>bitwise_or_expression • [ τ?? ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==124 ){
                    pushFN( data, branch_bbb08856db0b90ce );
                    return branch_4b700977725f12de( l, data, state, prod, prod_start )
                } else if( sym_map_ab7dd29a8404228c( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '102:325 logical_and_expression=>bitwise_or_expression • [ τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                    prod = 102;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '104:328 coalesce_expression_head=>bitwise_or_expression • [ τ?? ]';
                    prod = 104;
                    continue
                };
                break
            }
            case 106: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '105:330 bitwise_or_expression=>bitwise_xor_expression • [ τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '106:333 bitwise_xor_expression=>bitwise_xor_expression • τ^ bitwise_and_expression [ τ^ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==94 ){
                    pushFN( data, branch_f63d2f691bb3b521 );
                    return branch_da2a7411d5ce242e( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '105:330 bitwise_or_expression=>bitwise_xor_expression • [ τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                    prod = 105;
                    continue
                };
                break
            }
            case 107: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '106:332 bitwise_xor_expression=>bitwise_and_expression • [ τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '107:335 bitwise_and_expression=>bitwise_and_expression • τ& equality_expression [ τ& ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_eb1ae190d19756d3( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  &  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '107:335 bitwise_and_expression=>bitwise_and_expression • τ& equality_expression [ τ& ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_0cd90dbcaf8d17df );
                        pushFN( data, $equality_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '106:332 bitwise_xor_expression=>bitwise_and_expression • [ τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        prod = 106;
                        continue
                    }
                };
                break
            }
            case 108: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '107:334 bitwise_and_expression=>equality_expression • [ τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '108:337 equality_expression=>equality_expression • τ== relational_expression [ τ== ]';
                '108:338 equality_expression=>equality_expression • τ!= relational_expression [ τ!= ]';
                '108:339 equality_expression=>equality_expression • τ=== relational_expression [ τ=== ]';
                '108:340 equality_expression=>equality_expression • τ!== relational_expression [ τ!== ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_9f32aad30074aaf0( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ==  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:337 equality_expression=>equality_expression • τ== relational_expression [ τ== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_e8add643c37cdf08 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:338 equality_expression=>equality_expression • τ!= relational_expression [ τ!= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_e8add643c37cdf08 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ===  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:339 equality_expression=>equality_expression • τ=== relational_expression [ τ=== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_e8add643c37cdf08 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !==  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:340 equality_expression=>equality_expression • τ!== relational_expression [ τ!== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_e8add643c37cdf08 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '107:334 bitwise_and_expression=>equality_expression • [ τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 107;
                        continue
                    }
                };
                break
            }
            case 109: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  in instanceof < > <= >= !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '108:336 equality_expression=>relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '109:342 relational_expression=>relational_expression • τ< shift_expression [ τ< ]';
                '109:343 relational_expression=>relational_expression • τ> shift_expression [ τ> ]';
                '109:344 relational_expression=>relational_expression • τ<= shift_expression [ τ<= ]';
                '109:345 relational_expression=>relational_expression • τ>= shift_expression [ τ>= ]';
                '109:346 relational_expression=>relational_expression • τinstanceof shift_expression [ τinstanceof ]';
                '109:347 relational_expression=>relational_expression • τin shift_expression [ τin ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a4ed59f4a075ef3d( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:347 relational_expression=>relational_expression • τin shift_expression [ τin ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_8237a685cf72bd45 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  instanceof  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:346 relational_expression=>relational_expression • τinstanceof shift_expression [ τinstanceof ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_7420eefadd3a0494 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:342 relational_expression=>relational_expression • τ< shift_expression [ τ< ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_0e394b3aa6e9c2ba );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:343 relational_expression=>relational_expression • τ> shift_expression [ τ> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_0e394b3aa6e9c2ba );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:344 relational_expression=>relational_expression • τ<= shift_expression [ τ<= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_0e394b3aa6e9c2ba );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:345 relational_expression=>relational_expression • τ>= shift_expression [ τ>= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_0e394b3aa6e9c2ba );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 6: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '108:336 equality_expression=>relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        prod = 108;
                        continue
                    }
                };
                break
            }
            case 110: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  << >> >>> < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '109:341 relational_expression=>shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '110:349 shift_expression=>shift_expression • τ<< additive_expression [ τ<< ]';
                '110:350 shift_expression=>shift_expression • τ>> additive_expression [ τ>> ]';
                '110:351 shift_expression=>shift_expression • τ>>> additive_expression [ τ>>> ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_0ad057c21199e520( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <<  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:349 shift_expression=>shift_expression • τ<< additive_expression [ τ<< ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_d2d88e206473b12b );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >>  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:350 shift_expression=>shift_expression • τ>> additive_expression [ τ>> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_d2d88e206473b12b );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >>>  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:351 shift_expression=>shift_expression • τ>>> additive_expression [ τ>>> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_d2d88e206473b12b );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '109:341 relational_expression=>shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 109;
                        continue
                    }
                };
                break
            }
            case 111: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  + - << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '110:348 shift_expression=>additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '111:353 additive_expression=>additive_expression • τ+ multiplicative_expression [ τ+ ]';
                '111:354 additive_expression=>additive_expression • τ- multiplicative_expression [ τ- ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==43 ){
                    pushFN( data, branch_2521c6c6f85ceb73 );
                    return branch_0edf2a0d55e3eebe( l, data, state, prod, prod_start )
                } else if( l.current_byte ==45 ){
                    pushFN( data, branch_2521c6c6f85ceb73 );
                    return branch_8e180b7a9c4fa605( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '110:348 shift_expression=>additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                    prod = 110;
                    continue
                };
                break
            }
            case 112: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '111:352 additive_expression=>multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '112:356 multiplicative_expression=>multiplicative_expression • τ* exponentiation_expression [ τ* ]';
                '112:357 multiplicative_expression=>multiplicative_expression • τ/ exponentiation_expression [ τ/ ]';
                '112:358 multiplicative_expression=>multiplicative_expression • τ% exponentiation_expression [ τ% ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==42 ){
                    pushFN( data, branch_9f8b397fbf1e2555 );
                    return branch_c99406960e9dacd8( l, data, state, prod, prod_start )
                } else if( l.current_byte ==47 ){
                    pushFN( data, branch_9f8b397fbf1e2555 );
                    return branch_057d8d843911862e( l, data, state, prod, prod_start )
                } else if( l.current_byte ==37 ){
                    pushFN( data, branch_9f8b397fbf1e2555 );
                    return branch_ab0dc0b4de0edc56( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '111:352 additive_expression=>multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                    prod = 111;
                    continue
                };
                break
            }
            case 115: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ** * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '113:360 exponentiation_expression=>update_expression • τ** exponentiation_expression [ τ** ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_bd3dc49275d4a0e9( l, data )){
                    case 0: 
                    {
                        var fk1 = fork( data );
                        pushFN( fk1, branch_618e04daf76f50ae );
                        pushFN( data, branch_1f1cf7bed843c17e );
                        return 0
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || ** END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 112;
                        continue
                    }
                };
                break
            }
            case 146: 
            {
                '"--LEAF--"';
                'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '143:452 substitute_template=>template_head • expression template_spans [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                pushFN( data, branch_ef4eb1670baf68c5 );
                pushFN( data, $expression );
                return data.rules_ptr;
                break
            }
            case 160: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  E e ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e32b08cd3c718e6b( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                        pushFN( data, branch_619ab2c39ce086f5 );
                        pushFN( data, $scientific_token_group_923_0_ );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        add_reduce( state, data, 1, 238 );
                        add_reduce( state, data, 1, 236 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
            case 161: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  n . E e ( : ?. ` [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '158:502 big_token=>int_token • τn [ τn ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a1c731d03900f749( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  n  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '158:502 big_token=>int_token • τn [ τn ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 238 );
                        add_reduce( state, data, 1, 237 );
                        pushFN( data, $short_circuit_expression_goto );
                        return 83
                    }
                    case 1: 
                    {
                        'Number of end groups1 [    ]';
                        'All symbols [  num _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                        '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        var pk = l.copyInPlace(  );
                        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                        if( pk.isNum( data ) ){
                            pushFN( data, branch_8016db47d10c9f2b );
                            return branch_731d73028155c3d7( l, data, state, prod, prod_start )
                        } else {
                            '"--LEAF--"';
                            'Leaf [  _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                            '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                            add_reduce( state, data, 1, 238 );
                            prod = 160;
                            continue
                        }
                    }
                    default:
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e ( : ?. ` [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { . END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        add_reduce( state, data, 1, 238 );
                        prod = 160;
                        continue
                    }
                };
                break
            }
            case 178: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  _ $ id num as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                switch(sym_map_c4f390da9b9d0165( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  _  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $short_circuit_expression_goto );
                        return 178
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  $  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $short_circuit_expression_goto );
                        return 178
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  id  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $short_circuit_expression_goto );
                        return 178
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  num  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $short_circuit_expression_goto );
                        return 178
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                        add_reduce( state, data, 1, 244 );
                        add_reduce( state, data, 1, 243 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==100 )?prod :-1
}
function $logical_or_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '101:323 logical_or_expression=>• logical_and_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_e802b4c1af0574e3 );
    pushFN( data, $logical_and_expression );
    return data.rules_ptr;
    return -1
}
function $logical_or_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 101: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ||  ]';
                '101:324 logical_or_expression=>logical_or_expression • τ|| logical_and_expression [ τ|| ]';
                '100:321 short_circuit_expression=>logical_or_expression • [ τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 101
                };
                if( cmpr_set( l, data, 39, 2, 2 ) ){
                    pushFN( data, branch_e802b4c1af0574e3 );
                    return branch_a5fb8c802515f878( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==101 )?prod :-1
}
function $logical_and_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '102:325 logical_and_expression=>• bitwise_or_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_37fbaab3b0f24a88 );
    pushFN( data, $bitwise_or_expression );
    return data.rules_ptr;
    return -1
}
function $logical_and_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 102: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  &&  ]';
                '102:326 logical_and_expression=>logical_and_expression • τ&& bitwise_or_expression [ τ&& ]';
                '101:323 logical_or_expression=>logical_and_expression • [ τ||, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                '101:324 logical_or_expression=>logical_or_expression τ|| logical_and_expression • [ τ||, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ} ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 102
                };
                if( cmpr_set( l, data, 34, 2, 2 ) ){
                    pushFN( data, branch_37fbaab3b0f24a88 );
                    return branch_75006597b4ba99f6( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==102 )?prod :-1
}
function $coalesce_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '103:327 coalesce_expression=>• coalesce_expression_head τ?? bitwise_or_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_3a81a45eec117b61 );
    pushFN( data, $coalesce_expression_head );
    return data.rules_ptr;
    return -1
}
function $coalesce_expression_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ??  ]';
    '103:327 coalesce_expression=>coalesce_expression_head • τ?? bitwise_or_expression [ τ?? ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 188, 2, 2 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  ??  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '103:327 coalesce_expression=>coalesce_expression_head τ?? • bitwise_or_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a377d6b20b6ee0f2 );
    pushFN( data, $bitwise_or_expression );
    return data.rules_ptr
};
    return ( prod ==103 )?prod :-1
}
function $coalesce_expression_head(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '104:328 coalesce_expression_head=>• bitwise_or_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    '104:329 coalesce_expression_head=>• coalesce_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    if( dt_b20f4716c284a542( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||dt_2f6691a653b819d6( l, data )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||cmpr_set( l, data, 307, 6, 6 )||cmpr_set( l, data, 146, 4, 4 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  this true false null async function class new super import delete void typeof await " " 0X 0x 0O 0o 0B 0b [ { / ` ( _ $ + ++ -- ~ ! - num id  ]';
    '95:288 primary_expression=>• τthis [ τthis ]';
    '166:522 boolean_literal=>• τtrue [ τtrue ]';
    '166:523 boolean_literal=>• τfalse [ τfalse ]';
    '165:521 null_literal=>• τnull [ τnull ]';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
    '161:508 int_token=>• θnum [ θnum ]';
    '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
    '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
    '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
    '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
    '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
    '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
    '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
    '129:414 object_literal=>• τ{ τ} [ τ{ ]';
    '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
    '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
    '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
    '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
    '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
    '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
    '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
    '146:458 template_head=>• τ` τ${ [ τ` ]';
    '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
    '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
    '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
    '82:246 new_expression=>• τnew new_expression [ τnew ]';
    '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
    '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
    '89:267 super_call=>• τsuper arguments [ τsuper ]';
    '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
    '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
    '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
    '115:373 update_expression=>• τ++ unary_expression [ τ++ ]';
    '115:374 update_expression=>• τ-- unary_expression [ τ-- ]';
    '114:362 unary_expression=>• τdelete unary_expression [ τdelete ]';
    '114:363 unary_expression=>• τvoid unary_expression [ τvoid ]';
    '114:364 unary_expression=>• τtypeof unary_expression [ τtypeof ]';
    '114:365 unary_expression=>• τ+ unary_expression [ τ+ ]';
    '114:366 unary_expression=>• τ~ unary_expression [ τ~ ]';
    '114:367 unary_expression=>• τ! unary_expression [ τ! ]';
    '114:368 unary_expression=>• τ- unary_expression [ τ- ]';
    '96:298 await_expression=>• τawait unary_expression [ τawait ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    switch(sym_map_8a1b4c8942bd94ef( l, data )){
        case 0: 
        {
            '"--LEAF--"';
            'Leaf [  this  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '95:288 primary_expression=>• τthis [ τthis ]';
            pushFN( data, branch_f4542e9d998a2e40 );
            pushFN( data, $primary_expression );
            return prod_start
        }
        case 1: 
        {
            '"--LEAF--"';
            'Leaf [  true  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '166:522 boolean_literal=>• τtrue [ τtrue ]';
            pushFN( data, branch_f4542e9d998a2e40 );
            pushFN( data, $boolean_literal );
            return prod_start
        }
        case 2: 
        {
            '"--LEAF--"';
            'Leaf [  false  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '166:523 boolean_literal=>• τfalse [ τfalse ]';
            pushFN( data, branch_f4542e9d998a2e40 );
            pushFN( data, $boolean_literal );
            return prod_start
        }
        case 3: 
        {
            '"--LEAF--"';
            'Leaf [  null  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '165:521 null_literal=>• τnull [ τnull ]';
            pushFN( data, branch_f4542e9d998a2e40 );
            pushFN( data, $null_literal );
            return prod_start
        }
        case 4: 
        {
            '"--LEAF--"';
            'Leaf [  async  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
            pushFN( data, branch_dc7e3219843fd275 );
            pushFN( data, $function_declaration );
            return prod_start
        }
        case 5: 
        {
            '"--LEAF--"';
            'Leaf [  function  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
            pushFN( data, branch_dc7e3219843fd275 );
            pushFN( data, $function_declaration );
            return prod_start
        }
        case 6: 
        {
            '"--LEAF--"';
            'Leaf [  class  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
            pushFN( data, branch_f4542e9d998a2e40 );
            pushFN( data, $class_expression );
            return prod_start
        }
        case 7: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  new  ]';
            '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
            '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
            '82:246 new_expression=>• τnew new_expression [ τnew ]';
            'Number of end groups0 [    ]';
            'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import .  ]';
            '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
            '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
            '87:259 new_target=>τnew • τ. τtarget [ τ. ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( dt_a9b4e918ef416a84( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 206, 5, 5 )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
                var fk1 = fork( data );
                pushFN( fk1, branch_852135796ab1630c );
                pushFN( data, branch_11e8de85e7063922 );
                return 0
            } else if( l.current_byte ==46 ){
                pushFN( data, branch_f4542e9d998a2e40 );
                return branch_071caf1d21c59110( l, data, state, prod, prod_start )
            }
        }
        case 8: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  super  ]';
            '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
            '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
            '89:267 super_call=>• τsuper arguments [ τsuper ]';
            'Number of end groups0 [    ]';
            'All symbols [  . [ (  ]';
            '84:254 super_property=>τsuper • τ. identifier_name [ τ. ]';
            '84:255 super_property=>τsuper • τ[ expression τ] [ τ[ ]';
            '89:267 super_call=>τsuper • arguments [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==46 ){
                pushFN( data, branch_f4542e9d998a2e40 );
                return branch_7522d6ae523359cf( l, data, state, prod, prod_start )
            } else if( l.current_byte ==91 ){
                pushFN( data, branch_f4542e9d998a2e40 );
                return branch_7a347b8a2033ccfc( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_80a1c7172b9e881c );
                return branch_720d66540ffaef39( l, data, state, prod, prod_start )
            }
        }
        case 9: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  import  ]';
            '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
            '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
            'Number of end groups0 [    ]';
            'All symbols [  . (  ]';
            '86:258 import_meta=>τimport • τ. τmeta [ τ. ]';
            '90:268 import_call=>τimport • τ( assignment_expression τ) [ τ( ]';
            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
            if( l.current_byte ==46 ){
                pushFN( data, branch_f4542e9d998a2e40 );
                return branch_e91daffe9c760941( l, data, state, prod, prod_start )
            } else if( l.current_byte ==40 ){
                pushFN( data, branch_80a1c7172b9e881c );
                return branch_9d33653390a4b7b7( l, data, state, prod, prod_start )
            }
        }
        case 10: 
        {
            '"--LEAF--"';
            'Leaf [  delete  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:362 unary_expression=>• τdelete unary_expression [ τdelete ]';
            pushFN( data, branch_2d40fd030758e0bd );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 11: 
        {
            '"--LEAF--"';
            'Leaf [  void  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:363 unary_expression=>• τvoid unary_expression [ τvoid ]';
            pushFN( data, branch_2d40fd030758e0bd );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 12: 
        {
            '"--LEAF--"';
            'Leaf [  typeof  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:364 unary_expression=>• τtypeof unary_expression [ τtypeof ]';
            pushFN( data, branch_2d40fd030758e0bd );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 13: 
        {
            '"--LEAF--"';
            'Leaf [  await  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '96:298 await_expression=>• τawait unary_expression [ τawait ]';
            pushFN( data, branch_2d40fd030758e0bd );
            pushFN( data, $await_expression );
            return prod_start
        }
        case 14: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:484 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==34 ){
                pushFN( data, branch_f4542e9d998a2e40 );
                return branch_d9bfad00f871c280( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_f4542e9d998a2e40 );
                return branch_646b078462d89457( l, data, state, prod, prod_start )
            }
        }
        case 15: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:485 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==39 ){
                pushFN( data, branch_f4542e9d998a2e40 );
                return branch_9672b2cf7ede104a( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_f4542e9d998a2e40 );
                return branch_cc6ae262e8f43c6c( l, data, state, prod, prod_start )
            }
        }
        case 16: 
        {
            '"--LEAF--"';
            'Leaf [  0X  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
            pushFN( data, branch_7744a01e6610883a );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 17: 
        {
            '"--LEAF--"';
            'Leaf [  0x  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
            pushFN( data, branch_7744a01e6610883a );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 18: 
        {
            '"--LEAF--"';
            'Leaf [  0O  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
            pushFN( data, branch_7744a01e6610883a );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 19: 
        {
            '"--LEAF--"';
            'Leaf [  0o  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
            pushFN( data, branch_7744a01e6610883a );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 20: 
        {
            '"--LEAF--"';
            'Leaf [  0B  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
            pushFN( data, branch_7744a01e6610883a );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 21: 
        {
            '"--LEAF--"';
            'Leaf [  0b  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
            pushFN( data, branch_7744a01e6610883a );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 22: 
        {
            '"--LEAF--"';
            'Leaf [  [  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
            pushFN( data, branch_f4542e9d998a2e40 );
            pushFN( data, $array_literal );
            return prod_start
        }
        case 23: 
        {
            '"--LEAF--"';
            'Leaf [  {  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '129:414 object_literal=>• τ{ τ} [ τ{ ]';
            pushFN( data, branch_f4542e9d998a2e40 );
            pushFN( data, $object_literal );
            return prod_start
        }
        case 24: 
        {
            '"--LEAF--"';
            'Leaf [  /  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
            pushFN( data, branch_f4542e9d998a2e40 );
            pushFN( data, $regular_expression_literal );
            return prod_start
        }
        case 25: 
        {
            consume( l, data, state );
            '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
            'Number of end groups0 [    ]';
            'All symbols [  `  ]';
            '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
            '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
            '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
            '146:458 template_head=>• τ` τ${ [ τ` ]';
            'Number of end groups0 [    ]';
            'All symbols [  ` ${ nl ws sym num id f:s  ]';
            '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
            '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
            '142:451 no_substitute_template=>τ` • τ` [ τ` ]';
            '146:458 template_head=>τ` • τ${ [ τ${ ]';
            skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
            if( l.current_byte ==96 ){
                pushFN( data, branch_f4542e9d998a2e40 );
                return branch_09a1f4d0e3f2987f( l, data, state, prod, prod_start )
            } else if( cmpr_set( l, data, 47, 2, 2 ) ){
                pushFN( data, branch_0ef8b509580d6d86 );
                return branch_0a68333b2c4e0dc6( l, data, state, prod, prod_start )
            } else {
                'Number of end groups0 [    ]';
                'All symbols [  189  ]';
                '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
                '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                pushFN( data, branch_9c2e8809e73510e9 );
                pushFN( data, $no_substitute_template_list_846 );
                return data.rules_ptr
            }
        }
        case 26: 
        {
            '"--LEAF--"';
            'Leaf [  (  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
            pushFN( data, branch_f4542e9d998a2e40 );
            pushFN( data, $parenthesized );
            return prod_start
        }
        case 27: 
        {
            '"--LEAF--"';
            'Leaf [  _  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
            pushFN( data, branch_d507770cdffa3d28 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 28: 
        {
            '"--LEAF--"';
            'Leaf [  $  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
            pushFN( data, branch_d507770cdffa3d28 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        case 29: 
        {
            '"--LEAF--"';
            'Leaf [  +  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:365 unary_expression=>• τ+ unary_expression [ τ+ ]';
            pushFN( data, branch_2d40fd030758e0bd );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 30: 
        {
            '"--LEAF--"';
            'Leaf [  ++  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '115:373 update_expression=>• τ++ unary_expression [ τ++ ]';
            pushFN( data, branch_ba67f21af7b6fc7e );
            pushFN( data, $update_expression );
            return prod_start
        }
        case 31: 
        {
            '"--LEAF--"';
            'Leaf [  --  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '115:374 update_expression=>• τ-- unary_expression [ τ-- ]';
            pushFN( data, branch_ba67f21af7b6fc7e );
            pushFN( data, $update_expression );
            return prod_start
        }
        case 32: 
        {
            '"--LEAF--"';
            'Leaf [  ~  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:366 unary_expression=>• τ~ unary_expression [ τ~ ]';
            pushFN( data, branch_2d40fd030758e0bd );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 33: 
        {
            '"--LEAF--"';
            'Leaf [  !  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:367 unary_expression=>• τ! unary_expression [ τ! ]';
            pushFN( data, branch_2d40fd030758e0bd );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 34: 
        {
            '"--LEAF--"';
            'Leaf [  -  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '114:368 unary_expression=>• τ- unary_expression [ τ- ]';
            pushFN( data, branch_2d40fd030758e0bd );
            pushFN( data, $unary_expression );
            return prod_start
        }
        case 35: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  _ . n E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE ,  ]';
            '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
            '161:508 int_token=>• θnum [ θnum ]';
            var pk = l.copyInPlace(  );
            skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==95 ){
                pushFN( data, branch_e963930ac36dbf77 );
                return branch_1d992d5b88873c5c( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_e963930ac36dbf77 );
                return branch_e80a8071760f9de0( l, data, state, prod, prod_start )
            }
        }
        case 36: 
        {
            '"--LEAF--"';
            'Leaf [  id  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
            pushFN( data, branch_d507770cdffa3d28 );
            pushFN( data, $default_productions__js_id_symbols );
            return prod_start
        }
        default: 
        break
    }
};
    return -1
}
function $coalesce_expression_head_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 81: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ++ -- ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '115:371 update_expression=>left_hand_side_expression • τ++ [ τ++ ]';
                '115:372 update_expression=>left_hand_side_expression • τ-- [ τ-- ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 190, 2, 2 ) ){
                    pushFN( data, branch_ba67f21af7b6fc7e );
                    return branch_294f036931ed4100( l, data, state, prod, prod_start )
                } else if( cmpr_set( l, data, 192, 2, 2 ) ){
                    pushFN( data, branch_ba67f21af7b6fc7e );
                    return branch_36c3743f55efb781( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                    prod = 115;
                    continue
                };
                break
            }
            case 83: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  [ . ` ( ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e0aa0d6f406c9358( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_6c3dc15474002085 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_ccd659abf5a7b67f );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                        pushFN( data, branch_b6502915857fa2ba );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                        pushFN( data, branch_2c99e5f8819fe835 );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_f614985ddbe9ef4e );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        prod = 81;
                        continue
                    }
                };
                break
            }
            case 88: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  . ( [ ` ?. -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                '88:263 call_expression=>call_expression • arguments [ τ( ]';
                '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_cca60d9a2b40a7b2( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_f7e4f660ad7745a2 );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:263 call_expression=>call_expression • arguments [ τ( ]';
                        pushFN( data, branch_780c29f4b3de3f75 );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_f521244a1095ec71 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                        pushFN( data, branch_39f4b383461584e4 );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_f614985ddbe9ef4e );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        prod = 81;
                        continue
                    }
                };
                break
            }
            case 93: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '93:279 optional_expression=>optional_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 19, 2, 2 ) ){
                    pushFN( data, branch_3f182fbcc5dde582 );
                    return branch_f0c3bcb79d8e42d6( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                    prod = 81;
                    continue
                };
                break
            }
            case 104: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ??  ]';
                '103:327 coalesce_expression=>coalesce_expression_head • τ?? bitwise_or_expression [ τ?? ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 188, 2, 2 ) ){
                    consume( l, data, state );
                    '"--LEAF--"';
                    'Leaf [  ??  ]';
                    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
                    '103:327 coalesce_expression=>coalesce_expression_head τ?? • bitwise_or_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    pushFN( data, branch_38a1c7d9b9b20011 );
                    pushFN( data, $bitwise_or_expression );
                    return data.rules_ptr
                };
                break
            }
            case 105: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  | ?? END_OF_PRODUCTION  ]';
                '104:328 coalesce_expression_head=>bitwise_or_expression • [ τ?? ]';
                '105:331 bitwise_or_expression=>bitwise_or_expression • τ| bitwise_xor_expression [ τ| ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==124 ){
                    pushFN( data, branch_bb8964cf04497c58 );
                    return branch_4b700977725f12de( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '104:328 coalesce_expression_head=>bitwise_or_expression • [ τ?? ]';
                    return 104
                };
                break
            }
            case 106: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '105:330 bitwise_or_expression=>bitwise_xor_expression • [ τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '106:333 bitwise_xor_expression=>bitwise_xor_expression • τ^ bitwise_and_expression [ τ^ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==94 ){
                    pushFN( data, branch_1e34f4cbf8cebffe );
                    return branch_da2a7411d5ce242e( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '105:330 bitwise_or_expression=>bitwise_xor_expression • [ τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                    prod = 105;
                    continue
                };
                break
            }
            case 107: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '106:332 bitwise_xor_expression=>bitwise_and_expression • [ τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '107:335 bitwise_and_expression=>bitwise_and_expression • τ& equality_expression [ τ& ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_eb1ae190d19756d3( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  &  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '107:335 bitwise_and_expression=>bitwise_and_expression • τ& equality_expression [ τ& ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_05fbd6e3a04ad8ab );
                        pushFN( data, $equality_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '106:332 bitwise_xor_expression=>bitwise_and_expression • [ τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        prod = 106;
                        continue
                    }
                };
                break
            }
            case 108: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '107:334 bitwise_and_expression=>equality_expression • [ τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '108:337 equality_expression=>equality_expression • τ== relational_expression [ τ== ]';
                '108:338 equality_expression=>equality_expression • τ!= relational_expression [ τ!= ]';
                '108:339 equality_expression=>equality_expression • τ=== relational_expression [ τ=== ]';
                '108:340 equality_expression=>equality_expression • τ!== relational_expression [ τ!== ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_9f32aad30074aaf0( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ==  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:337 equality_expression=>equality_expression • τ== relational_expression [ τ== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_cbca8ebbfb17f74b );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:338 equality_expression=>equality_expression • τ!= relational_expression [ τ!= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_cbca8ebbfb17f74b );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ===  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:339 equality_expression=>equality_expression • τ=== relational_expression [ τ=== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_cbca8ebbfb17f74b );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !==  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:340 equality_expression=>equality_expression • τ!== relational_expression [ τ!== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_cbca8ebbfb17f74b );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '107:334 bitwise_and_expression=>equality_expression • [ τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 107;
                        continue
                    }
                };
                break
            }
            case 109: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  in instanceof < > <= >= !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '108:336 equality_expression=>relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '109:342 relational_expression=>relational_expression • τ< shift_expression [ τ< ]';
                '109:343 relational_expression=>relational_expression • τ> shift_expression [ τ> ]';
                '109:344 relational_expression=>relational_expression • τ<= shift_expression [ τ<= ]';
                '109:345 relational_expression=>relational_expression • τ>= shift_expression [ τ>= ]';
                '109:346 relational_expression=>relational_expression • τinstanceof shift_expression [ τinstanceof ]';
                '109:347 relational_expression=>relational_expression • τin shift_expression [ τin ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a4ed59f4a075ef3d( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:347 relational_expression=>relational_expression • τin shift_expression [ τin ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_9e90e28887f45cad );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  instanceof  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:346 relational_expression=>relational_expression • τinstanceof shift_expression [ τinstanceof ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_8313698cbc9cf6c0 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:342 relational_expression=>relational_expression • τ< shift_expression [ τ< ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_868813e841b045e2 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:343 relational_expression=>relational_expression • τ> shift_expression [ τ> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_868813e841b045e2 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:344 relational_expression=>relational_expression • τ<= shift_expression [ τ<= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_868813e841b045e2 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:345 relational_expression=>relational_expression • τ>= shift_expression [ τ>= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_868813e841b045e2 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 6: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '108:336 equality_expression=>relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                        prod = 108;
                        continue
                    }
                };
                break
            }
            case 110: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  << >> >>> < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '109:341 relational_expression=>shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '110:349 shift_expression=>shift_expression • τ<< additive_expression [ τ<< ]';
                '110:350 shift_expression=>shift_expression • τ>> additive_expression [ τ>> ]';
                '110:351 shift_expression=>shift_expression • τ>>> additive_expression [ τ>>> ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_0ad057c21199e520( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <<  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:349 shift_expression=>shift_expression • τ<< additive_expression [ τ<< ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_6c705e6e2f6cdeca );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >>  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:350 shift_expression=>shift_expression • τ>> additive_expression [ τ>> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_6c705e6e2f6cdeca );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >>>  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:351 shift_expression=>shift_expression • τ>>> additive_expression [ τ>>> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_6c705e6e2f6cdeca );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    default:
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '109:341 relational_expression=>shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 109;
                        continue
                    }
                };
                break
            }
            case 111: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  + - << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '110:348 shift_expression=>additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '111:353 additive_expression=>additive_expression • τ+ multiplicative_expression [ τ+ ]';
                '111:354 additive_expression=>additive_expression • τ- multiplicative_expression [ τ- ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==43 ){
                    pushFN( data, branch_a30c4882084296cd );
                    return branch_0edf2a0d55e3eebe( l, data, state, prod, prod_start )
                } else if( l.current_byte ==45 ){
                    pushFN( data, branch_a30c4882084296cd );
                    return branch_8e180b7a9c4fa605( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '110:348 shift_expression=>additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                    prod = 110;
                    continue
                };
                break
            }
            case 112: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '111:352 additive_expression=>multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '112:356 multiplicative_expression=>multiplicative_expression • τ* exponentiation_expression [ τ* ]';
                '112:357 multiplicative_expression=>multiplicative_expression • τ/ exponentiation_expression [ τ/ ]';
                '112:358 multiplicative_expression=>multiplicative_expression • τ% exponentiation_expression [ τ% ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.current_byte ==42 ){
                    pushFN( data, branch_2d40fd030758e0bd );
                    return branch_c99406960e9dacd8( l, data, state, prod, prod_start )
                } else if( l.current_byte ==47 ){
                    pushFN( data, branch_2d40fd030758e0bd );
                    return branch_057d8d843911862e( l, data, state, prod, prod_start )
                } else if( l.current_byte ==37 ){
                    pushFN( data, branch_2d40fd030758e0bd );
                    return branch_ab0dc0b4de0edc56( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '111:352 additive_expression=>multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                    prod = 111;
                    continue
                };
                break
            }
            case 115: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ** * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '113:360 exponentiation_expression=>update_expression • τ** exponentiation_expression [ τ** ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_bd3dc49275d4a0e9( l, data )){
                    case 0: 
                    {
                        var fk1 = fork( data );
                        pushFN( fk1, branch_51eb8bf50fd34763 );
                        pushFN( data, branch_0e5d378edec341b5 );
                        return 0
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || ** END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        prod = 112;
                        continue
                    }
                };
                break
            }
            case 146: 
            {
                '"--LEAF--"';
                'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '143:452 substitute_template=>template_head • expression template_spans [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                pushFN( data, branch_a223fb2b74da8015 );
                pushFN( data, $expression );
                return data.rules_ptr;
                break
            }
            case 160: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  E e ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e32b08cd3c718e6b( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                        pushFN( data, branch_6f5983b12e75ae61 );
                        pushFN( data, $scientific_token_group_923_0_ );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        add_reduce( state, data, 1, 238 );
                        add_reduce( state, data, 1, 236 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
            case 161: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  n . E e ( : ?. ` [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '158:502 big_token=>int_token • τn [ τn ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a1c731d03900f749( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  n  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '158:502 big_token=>int_token • τn [ τn ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 238 );
                        add_reduce( state, data, 1, 237 );
                        pushFN( data, $coalesce_expression_head_goto );
                        return 83
                    }
                    case 1: 
                    {
                        'Number of end groups1 [    ]';
                        'All symbols [  num _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                        '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        var pk = l.copyInPlace(  );
                        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                        if( pk.isNum( data ) ){
                            pushFN( data, branch_4d057fede7ad79be );
                            return branch_731d73028155c3d7( l, data, state, prod, prod_start )
                        } else {
                            '"--LEAF--"';
                            'Leaf [  _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                            '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                            add_reduce( state, data, 1, 238 );
                            prod = 160;
                            continue
                        }
                    }
                    default:
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e ( : ?. ` [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { . END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        add_reduce( state, data, 1, 238 );
                        prod = 160;
                        continue
                    }
                };
                break
            }
            case 178: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  _ $ id num as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                switch(sym_map_c4f390da9b9d0165( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  _  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $coalesce_expression_head_goto );
                        return 178
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  $  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $coalesce_expression_head_goto );
                        return 178
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  id  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $coalesce_expression_head_goto );
                        return 178
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  num  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $coalesce_expression_head_goto );
                        return 178
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                        add_reduce( state, data, 1, 244 );
                        add_reduce( state, data, 1, 243 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==104 )?prod :-1
}
function $bitwise_or_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '105:330 bitwise_or_expression=>• bitwise_xor_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_201749fb59b9bc9a );
    pushFN( data, $bitwise_xor_expression );
    return data.rules_ptr;
    return -1
}
function $bitwise_or_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 105: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  |  ]';
                '105:331 bitwise_or_expression=>bitwise_or_expression • τ| bitwise_xor_expression [ τ| ]';
                '102:325 logical_and_expression=>bitwise_or_expression • [ τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '102:326 logical_and_expression=>logical_and_expression τ&& bitwise_or_expression • [ τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '103:327 coalesce_expression=>coalesce_expression_head τ?? bitwise_or_expression • [ τ??, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '104:328 coalesce_expression_head=>bitwise_or_expression • [ τ?? ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 105
                };
                if( l.current_byte ==124 ){
                    pushFN( data, branch_201749fb59b9bc9a );
                    return branch_4b700977725f12de( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==105 )?prod :-1
}
function $bitwise_xor_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '106:332 bitwise_xor_expression=>• bitwise_and_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_bf8b96a06cd8c3ee );
    pushFN( data, $bitwise_and_expression );
    return data.rules_ptr;
    return -1
}
function $bitwise_xor_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 106: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ^  ]';
                '106:333 bitwise_xor_expression=>bitwise_xor_expression • τ^ bitwise_and_expression [ τ^ ]';
                '105:330 bitwise_or_expression=>bitwise_xor_expression • [ τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '105:331 bitwise_or_expression=>bitwise_or_expression τ| bitwise_xor_expression • [ τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 106
                };
                if( l.current_byte ==94 ){
                    pushFN( data, branch_bf8b96a06cd8c3ee );
                    return branch_da2a7411d5ce242e( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==106 )?prod :-1
}
function $bitwise_and_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '107:334 bitwise_and_expression=>• equality_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_da21194c7fb6a833 );
    pushFN( data, $equality_expression );
    return data.rules_ptr;
    return -1
}
function $bitwise_and_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 107: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  &  ]';
                '107:335 bitwise_and_expression=>bitwise_and_expression • τ& equality_expression [ τ& ]';
                '106:332 bitwise_xor_expression=>bitwise_and_expression • [ τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '106:333 bitwise_xor_expression=>bitwise_xor_expression τ^ bitwise_and_expression • [ τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 107
                };
                if( l.current_byte ==38 ){
                    pushFN( data, branch_da21194c7fb6a833 );
                    return branch_f931b9f0be377797( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==107 )?prod :-1
}
function $equality_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '108:336 equality_expression=>• relational_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_c10d1e016d1c1c2f );
    pushFN( data, $relational_expression );
    return data.rules_ptr;
    return -1
}
function $equality_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 108: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  == != === !==  ]';
                '108:337 equality_expression=>equality_expression • τ== relational_expression [ τ== ]';
                '108:338 equality_expression=>equality_expression • τ!= relational_expression [ τ!= ]';
                '108:339 equality_expression=>equality_expression • τ=== relational_expression [ τ=== ]';
                '108:340 equality_expression=>equality_expression • τ!== relational_expression [ τ!== ]';
                '107:334 bitwise_and_expression=>equality_expression • [ τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '107:335 bitwise_and_expression=>bitwise_and_expression τ& equality_expression • [ τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 108
                };
                switch(sym_map_9f32aad30074aaf0( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ==  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:337 equality_expression=>equality_expression • τ== relational_expression [ τ== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_e6c47e56add41094 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:338 equality_expression=>equality_expression • τ!= relational_expression [ τ!= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_e6c47e56add41094 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ===  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:339 equality_expression=>equality_expression • τ=== relational_expression [ τ=== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_e6c47e56add41094 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  !==  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '108:340 equality_expression=>equality_expression • τ!== relational_expression [ τ!== ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_e6c47e56add41094 );
                        pushFN( data, $relational_expression );
                        return data.rules_ptr
                    }
                    default: 
                    break
                }
            }
        };
        break
    };
    return ( prod ==108 )?prod :-1
}
function $relational_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '109:341 relational_expression=>• shift_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_55135a02211b8bfc );
    pushFN( data, $shift_expression );
    return data.rules_ptr;
    return -1
}
function $relational_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 109: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  in instanceof < > <= >=  ]';
                '109:342 relational_expression=>relational_expression • τ< shift_expression [ τ< ]';
                '109:343 relational_expression=>relational_expression • τ> shift_expression [ τ> ]';
                '109:344 relational_expression=>relational_expression • τ<= shift_expression [ τ<= ]';
                '109:345 relational_expression=>relational_expression • τ>= shift_expression [ τ>= ]';
                '109:346 relational_expression=>relational_expression • τinstanceof shift_expression [ τinstanceof ]';
                '109:347 relational_expression=>relational_expression • τin shift_expression [ τin ]';
                '108:336 equality_expression=>relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '108:337 equality_expression=>equality_expression τ== relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '108:338 equality_expression=>equality_expression τ!= relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '108:339 equality_expression=>equality_expression τ=== relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '108:340 equality_expression=>equality_expression τ!== relational_expression • [ τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 109
                };
                switch(sym_map_a4ed59f4a075ef3d( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:347 relational_expression=>relational_expression • τin shift_expression [ τin ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_75088a9e7c96fc95 );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  instanceof  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:346 relational_expression=>relational_expression • τinstanceof shift_expression [ τinstanceof ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_e4afa0eac698598a );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:342 relational_expression=>relational_expression • τ< shift_expression [ τ< ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_f9fbf679d6fa826f );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:343 relational_expression=>relational_expression • τ> shift_expression [ τ> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_f9fbf679d6fa826f );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:344 relational_expression=>relational_expression • τ<= shift_expression [ τ<= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_f9fbf679d6fa826f );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >=  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '109:345 relational_expression=>relational_expression • τ>= shift_expression [ τ>= ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_f9fbf679d6fa826f );
                        pushFN( data, $shift_expression );
                        return data.rules_ptr
                    }
                    default: 
                    break
                }
            }
        };
        break
    };
    return ( prod ==109 )?prod :-1
}
function $shift_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '110:348 shift_expression=>• additive_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_fe41559a4599b03f );
    pushFN( data, $additive_expression );
    return data.rules_ptr;
    return -1
}
function $shift_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 110: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  << >> >>>  ]';
                '110:349 shift_expression=>shift_expression • τ<< additive_expression [ τ<< ]';
                '110:350 shift_expression=>shift_expression • τ>> additive_expression [ τ>> ]';
                '110:351 shift_expression=>shift_expression • τ>>> additive_expression [ τ>>> ]';
                '109:341 relational_expression=>shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '109:342 relational_expression=>relational_expression τ< shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '109:343 relational_expression=>relational_expression τ> shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '109:344 relational_expression=>relational_expression τ<= shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '109:345 relational_expression=>relational_expression τ>= shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '109:346 relational_expression=>relational_expression τinstanceof shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '109:347 relational_expression=>relational_expression τin shift_expression • [ τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 110
                };
                switch(sym_map_0ad057c21199e520( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  <<  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:349 shift_expression=>shift_expression • τ<< additive_expression [ τ<< ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_0d632a445dffa4c9 );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >>  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:350 shift_expression=>shift_expression • τ>> additive_expression [ τ>> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_0d632a445dffa4c9 );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  >>>  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '110:351 shift_expression=>shift_expression • τ>>> additive_expression [ τ>>> ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_0d632a445dffa4c9 );
                        pushFN( data, $additive_expression );
                        return data.rules_ptr
                    }
                    default: 
                    break
                }
            }
        };
        break
    };
    return ( prod ==110 )?prod :-1
}
function $additive_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '111:352 additive_expression=>• multiplicative_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_38591c3c243d9380 );
    pushFN( data, $multiplicative_expression );
    return data.rules_ptr;
    return -1
}
function $additive_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 111: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  + -  ]';
                '111:353 additive_expression=>additive_expression • τ+ multiplicative_expression [ τ+ ]';
                '111:354 additive_expression=>additive_expression • τ- multiplicative_expression [ τ- ]';
                '110:348 shift_expression=>additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '110:349 shift_expression=>shift_expression τ<< additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '110:350 shift_expression=>shift_expression τ>> additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '110:351 shift_expression=>shift_expression τ>>> additive_expression • [ τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 111
                };
                if( l.current_byte ==43 ){
                    pushFN( data, branch_38591c3c243d9380 );
                    return branch_0edf2a0d55e3eebe( l, data, state, prod, prod_start )
                } else if( l.current_byte ==45 ){
                    pushFN( data, branch_38591c3c243d9380 );
                    return branch_8e180b7a9c4fa605( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==111 )?prod :-1
}
function $multiplicative_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  this true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '112:355 multiplicative_expression=>• exponentiation_expression [ τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ_, τ$, θid, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    pushFN( data, branch_a9145a3fd336e644 );
    pushFN( data, $exponentiation_expression );
    return data.rules_ptr;
    return -1
}
function $multiplicative_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 112: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  * / %  ]';
                '112:356 multiplicative_expression=>multiplicative_expression • τ* exponentiation_expression [ τ* ]';
                '112:357 multiplicative_expression=>multiplicative_expression • τ/ exponentiation_expression [ τ/ ]';
                '112:358 multiplicative_expression=>multiplicative_expression • τ% exponentiation_expression [ τ% ]';
                '111:352 additive_expression=>multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '111:353 additive_expression=>additive_expression τ+ multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '111:354 additive_expression=>additive_expression τ- multiplicative_expression • [ τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 112
                };
                if( l.current_byte ==42 ){
                    pushFN( data, branch_a9145a3fd336e644 );
                    return branch_c99406960e9dacd8( l, data, state, prod, prod_start )
                } else if( l.current_byte ==47 ){
                    pushFN( data, branch_a9145a3fd336e644 );
                    return branch_057d8d843911862e( l, data, state, prod, prod_start )
                } else if( l.current_byte ==37 ){
                    pushFN( data, branch_a9145a3fd336e644 );
                    return branch_ab0dc0b4de0edc56( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==112 )?prod :-1
}
function $exponentiation_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  delete void typeof + ~ ! - await this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import ++ --  ]';
    '113:359 exponentiation_expression=>• unary_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
    '113:360 exponentiation_expression=>• update_expression τ** exponentiation_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ++, τ-- ]';
    switch(sym_map_a854173f322dabc8( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  delete void typeof + ~ ! - await  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '113:359 exponentiation_expression=>• unary_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait ]';
        pushFN( data, branch_35aa6e49b479b4b2 );
        pushFN( data, $unary_expression );
        return data.rules_ptr
    }
    case 1: 
    {
        'Number of end groups0 [    ]';
        'All symbols [  this true false null async function class new super import _ $ " " 0X 0x 0O 0o 0B 0b [ { / ` ( ++ -- id num  ]';
        '95:288 primary_expression=>• τthis [ τthis ]';
        '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
        '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
        '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
        '166:522 boolean_literal=>• τtrue [ τtrue ]';
        '166:523 boolean_literal=>• τfalse [ τfalse ]';
        '165:521 null_literal=>• τnull [ τnull ]';
        '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
        '154:484 string_literal=>• τ" τ" [ τ" ]';
        '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
        '154:485 string_literal=>• τ" τ" [ τ" ]';
        '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
        '161:508 int_token=>• θnum [ θnum ]';
        '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
        '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
        '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
        '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
        '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
        '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
        '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
        '129:414 object_literal=>• τ{ τ} [ τ{ ]';
        '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
        '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
        '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
        '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
        '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
        '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
        '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
        '146:458 template_head=>• τ` τ${ [ τ` ]';
        '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
        '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
        '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
        '82:246 new_expression=>• τnew new_expression [ τnew ]';
        '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
        '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
        '89:267 super_call=>• τsuper arguments [ τsuper ]';
        '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
        '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
        '115:373 update_expression=>• τ++ unary_expression [ τ++ ]';
        '115:374 update_expression=>• τ-- unary_expression [ τ-- ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        switch(sym_map_62feb1e059504725( l, data )){
            case 0: 
            {
                '"--LEAF--"';
                'Leaf [  this  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '95:288 primary_expression=>• τthis [ τthis ]';
                pushFN( data, branch_2b189c1676b0d7e4 );
                pushFN( data, $primary_expression );
                return prod_start
            }
            case 1: 
            {
                '"--LEAF--"';
                'Leaf [  true  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '166:522 boolean_literal=>• τtrue [ τtrue ]';
                pushFN( data, branch_2b189c1676b0d7e4 );
                pushFN( data, $boolean_literal );
                return prod_start
            }
            case 2: 
            {
                '"--LEAF--"';
                'Leaf [  false  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '166:523 boolean_literal=>• τfalse [ τfalse ]';
                pushFN( data, branch_2b189c1676b0d7e4 );
                pushFN( data, $boolean_literal );
                return prod_start
            }
            case 3: 
            {
                '"--LEAF--"';
                'Leaf [  null  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '165:521 null_literal=>• τnull [ τnull ]';
                pushFN( data, branch_2b189c1676b0d7e4 );
                pushFN( data, $null_literal );
                return prod_start
            }
            case 4: 
            {
                '"--LEAF--"';
                'Leaf [  async  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '59:158 function_declaration=>• τasync τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τasync ]';
                pushFN( data, branch_0455d84bd5c92139 );
                pushFN( data, $function_declaration );
                return prod_start
            }
            case 5: 
            {
                '"--LEAF--"';
                'Leaf [  function  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '59:159 function_declaration=>• τfunction τ* binding_identifier τ( formal_parameters τ) τ{ function_body τ} [ τfunction ]';
                pushFN( data, branch_0455d84bd5c92139 );
                pushFN( data, $function_declaration );
                return prod_start
            }
            case 6: 
            {
                '"--LEAF--"';
                'Leaf [  class  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '74:205 class_expression=>• τclass binding_identifier class_heritage τ{ class_body τ} [ τclass ]';
                pushFN( data, branch_2b189c1676b0d7e4 );
                pushFN( data, $class_expression );
                return prod_start
            }
            case 7: 
            {
                consume( l, data, state );
                '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                'Number of end groups0 [    ]';
                'All symbols [  new  ]';
                '83:253 member_expression=>• τnew member_expression arguments [ τnew ]';
                '87:259 new_target=>• τnew τ. τtarget [ τnew ]';
                '82:246 new_expression=>• τnew new_expression [ τnew ]';
                'Number of end groups0 [    ]';
                'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import .  ]';
                '83:253 member_expression=>τnew • member_expression arguments [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
                '82:246 new_expression=>τnew • new_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
                '87:259 new_target=>τnew • τ. τtarget [ τ. ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( dt_a9b4e918ef416a84( l, data )||dt_c9742b8c3a6930ba( l, data )||dt_5b7bef307ef015e7( l, data )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 206, 5, 5 )||cmpr_set( l, data, 320, 5, 5 )||cmpr_set( l, data, 345, 5, 5 )||cmpr_set( l, data, 284, 6, 6 )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
                    var fk1 = fork( data );
                    pushFN( fk1, branch_2865b9f541983081 );
                    pushFN( data, branch_8d893f21be0d1de8 );
                    return 0
                } else if( l.current_byte ==46 ){
                    pushFN( data, branch_2b189c1676b0d7e4 );
                    return branch_071caf1d21c59110( l, data, state, prod, prod_start )
                }
            }
            case 8: 
            {
                consume( l, data, state );
                '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                'Number of end groups0 [    ]';
                'All symbols [  super  ]';
                '84:254 super_property=>• τsuper τ. identifier_name [ τsuper ]';
                '84:255 super_property=>• τsuper τ[ expression τ] [ τsuper ]';
                '89:267 super_call=>• τsuper arguments [ τsuper ]';
                'Number of end groups0 [    ]';
                'All symbols [  . [ (  ]';
                '84:254 super_property=>τsuper • τ. identifier_name [ τ. ]';
                '84:255 super_property=>τsuper • τ[ expression τ] [ τ[ ]';
                '89:267 super_call=>τsuper • arguments [ τ( ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==46 ){
                    pushFN( data, branch_2b189c1676b0d7e4 );
                    return branch_7522d6ae523359cf( l, data, state, prod, prod_start )
                } else if( l.current_byte ==91 ){
                    pushFN( data, branch_2b189c1676b0d7e4 );
                    return branch_7a347b8a2033ccfc( l, data, state, prod, prod_start )
                } else {
                    pushFN( data, branch_5c2c520b0eb29753 );
                    return branch_720d66540ffaef39( l, data, state, prod, prod_start )
                }
            }
            case 9: 
            {
                consume( l, data, state );
                '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                'Number of end groups0 [    ]';
                'All symbols [  import  ]';
                '86:258 import_meta=>• τimport τ. τmeta [ τimport ]';
                '90:268 import_call=>• τimport τ( assignment_expression τ) [ τimport ]';
                'Number of end groups0 [    ]';
                'All symbols [  . (  ]';
                '86:258 import_meta=>τimport • τ. τmeta [ τ. ]';
                '90:268 import_call=>τimport • τ( assignment_expression τ) [ τ( ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==46 ){
                    pushFN( data, branch_2b189c1676b0d7e4 );
                    return branch_e91daffe9c760941( l, data, state, prod, prod_start )
                } else if( l.current_byte ==40 ){
                    pushFN( data, branch_5c2c520b0eb29753 );
                    return branch_9d33653390a4b7b7( l, data, state, prod, prod_start )
                }
            }
            case 10: 
            {
                '"--LEAF--"';
                'Leaf [  _  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
                pushFN( data, branch_6336a9e32929928e );
                pushFN( data, $default_productions__js_id_symbols );
                return prod_start
            }
            case 11: 
            {
                '"--LEAF--"';
                'Leaf [  $  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
                pushFN( data, branch_6336a9e32929928e );
                pushFN( data, $default_productions__js_id_symbols );
                return prod_start
            }
            case 12: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  " nl ws sym num id f:s  ]';
                '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
                '154:484 string_literal=>• τ" τ" [ τ" ]';
                var pk = l.copyInPlace(  );
                skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
                if( pk.current_byte ==34 ){
                    pushFN( data, branch_2b189c1676b0d7e4 );
                    return branch_d9bfad00f871c280( l, data, state, prod, prod_start )
                } else {
                    pushFN( data, branch_2b189c1676b0d7e4 );
                    return branch_646b078462d89457( l, data, state, prod, prod_start )
                }
            }
            case 13: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  " nl ws sym num id f:s  ]';
                '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
                '154:485 string_literal=>• τ" τ" [ τ" ]';
                var pk = l.copyInPlace(  );
                skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
                if( pk.current_byte ==39 ){
                    pushFN( data, branch_2b189c1676b0d7e4 );
                    return branch_9672b2cf7ede104a( l, data, state, prod, prod_start )
                } else {
                    pushFN( data, branch_2b189c1676b0d7e4 );
                    return branch_cc6ae262e8f43c6c( l, data, state, prod, prod_start )
                }
            }
            case 14: 
            {
                '"--LEAF--"';
                'Leaf [  0X  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
                pushFN( data, branch_e40b9d5707a0a2b9 );
                pushFN( data, $hex_token );
                return prod_start
            }
            case 15: 
            {
                '"--LEAF--"';
                'Leaf [  0x  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
                pushFN( data, branch_e40b9d5707a0a2b9 );
                pushFN( data, $hex_token );
                return prod_start
            }
            case 16: 
            {
                '"--LEAF--"';
                'Leaf [  0O  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
                pushFN( data, branch_e40b9d5707a0a2b9 );
                pushFN( data, $octal_token );
                return prod_start
            }
            case 17: 
            {
                '"--LEAF--"';
                'Leaf [  0o  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
                pushFN( data, branch_e40b9d5707a0a2b9 );
                pushFN( data, $octal_token );
                return prod_start
            }
            case 18: 
            {
                '"--LEAF--"';
                'Leaf [  0B  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
                pushFN( data, branch_e40b9d5707a0a2b9 );
                pushFN( data, $binary_token );
                return prod_start
            }
            case 19: 
            {
                '"--LEAF--"';
                'Leaf [  0b  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
                pushFN( data, branch_e40b9d5707a0a2b9 );
                pushFN( data, $binary_token );
                return prod_start
            }
            case 20: 
            {
                '"--LEAF--"';
                'Leaf [  [  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
                pushFN( data, branch_2b189c1676b0d7e4 );
                pushFN( data, $array_literal );
                return prod_start
            }
            case 21: 
            {
                '"--LEAF--"';
                'Leaf [  {  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '129:414 object_literal=>• τ{ τ} [ τ{ ]';
                pushFN( data, branch_2b189c1676b0d7e4 );
                pushFN( data, $object_literal );
                return prod_start
            }
            case 22: 
            {
                '"--LEAF--"';
                'Leaf [  /  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
                pushFN( data, branch_2b189c1676b0d7e4 );
                pushFN( data, $regular_expression_literal );
                return prod_start
            }
            case 23: 
            {
                consume( l, data, state );
                '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                'Number of end groups0 [    ]';
                'All symbols [  `  ]';
                '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
                '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
                '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
                '146:458 template_head=>• τ` τ${ [ τ` ]';
                'Number of end groups0 [    ]';
                'All symbols [  ` ${ nl ws sym num id f:s  ]';
                '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
                '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
                '142:451 no_substitute_template=>τ` • τ` [ τ` ]';
                '146:458 template_head=>τ` • τ${ [ τ${ ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                if( l.current_byte ==96 ){
                    pushFN( data, branch_2b189c1676b0d7e4 );
                    return branch_09a1f4d0e3f2987f( l, data, state, prod, prod_start )
                } else if( cmpr_set( l, data, 47, 2, 2 ) ){
                    pushFN( data, branch_36e4ea25622c419e );
                    return branch_0a68333b2c4e0dc6( l, data, state, prod, prod_start )
                } else {
                    'Number of end groups0 [    ]';
                    'All symbols [  189  ]';
                    '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
                    '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
                    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                    pushFN( data, branch_729793c6f4c1ee35 );
                    pushFN( data, $no_substitute_template_list_846 );
                    return data.rules_ptr
                }
            }
            case 24: 
            {
                '"--LEAF--"';
                'Leaf [  (  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
                pushFN( data, branch_2b189c1676b0d7e4 );
                pushFN( data, $parenthesized );
                return prod_start
            }
            case 25: 
            {
                '"--LEAF--"';
                'Leaf [  ++  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '115:373 update_expression=>• τ++ unary_expression [ τ++ ]';
                pushFN( data, branch_737a561414020814 );
                pushFN( data, $update_expression );
                return prod_start
            }
            case 26: 
            {
                '"--LEAF--"';
                'Leaf [  --  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '115:374 update_expression=>• τ-- unary_expression [ τ-- ]';
                pushFN( data, branch_737a561414020814 );
                pushFN( data, $update_expression );
                return prod_start
            }
            case 27: 
            {
                '"--LEAF--"';
                'Leaf [  id  ]';
                '"⤋⤋⤋  assert ⤋⤋⤋"';
                '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
                pushFN( data, branch_6336a9e32929928e );
                pushFN( data, $default_productions__js_id_symbols );
                return prod_start
            }
            case 28: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  _ . n E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE ,  ]';
                '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
                '161:508 int_token=>• θnum [ θnum ]';
                var pk = l.copyInPlace(  );
                skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                if( pk.current_byte ==95 ){
                    pushFN( data, branch_677cef703600b88f );
                    return branch_1d992d5b88873c5c( l, data, state, prod, prod_start )
                } else {
                    pushFN( data, branch_677cef703600b88f );
                    return branch_e80a8071760f9de0( l, data, state, prod, prod_start )
                }
            }
            default: 
            break
        }
    }
    default: 
    break
};
    return -1
}
function $exponentiation_expression_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 81: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ++ -- ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                '115:371 update_expression=>left_hand_side_expression • τ++ [ τ++ ]';
                '115:372 update_expression=>left_hand_side_expression • τ-- [ τ-- ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 190, 2, 2 ) ){
                    pushFN( data, branch_737a561414020814 );
                    return branch_294f036931ed4100( l, data, state, prod, prod_start )
                } else if( cmpr_set( l, data, 192, 2, 2 ) ){
                    pushFN( data, branch_737a561414020814 );
                    return branch_36c3743f55efb781( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  ** % / * + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , ?? END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '115:370 update_expression=>left_hand_side_expression • [ τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τin, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ?? ]';
                    prod = 115;
                    continue
                };
                break
            }
            case 83: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  [ . ` ( ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e0aa0d6f406c9358( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:248 member_expression=>member_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_d0ec7a6ef7bc63a9 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '83:249 member_expression=>member_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_84a3649cb052a256 );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '83:250 member_expression=>member_expression • template_literal [ τ` ]';
                        pushFN( data, branch_95e7aa3e166e09db );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '72:196 cover_call_expression_and_async_arrow_head=>member_expression • arguments [ τ( ]';
                        pushFN( data, branch_91f0fe53f3fb02d4 );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:277 optional_expression=>member_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_0a7a8f81274d2482 );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '82:245 new_expression=>member_expression • [ τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        prod = 81;
                        continue
                    }
                };
                break
            }
            case 88: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  . ( [ ` ?. -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                '88:263 call_expression=>call_expression • arguments [ τ( ]';
                '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_cca60d9a2b40a7b2( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  .  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:260 call_expression=>call_expression • τ. identifier_name [ τ. ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_ff1b1105095846ad );
                        pushFN( data, $identifier_name );
                        return data.rules_ptr
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  (  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:263 call_expression=>call_expression • arguments [ τ( ]';
                        pushFN( data, branch_ed906ec182c64909 );
                        pushFN( data, $arguments );
                        return data.rules_ptr
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  [  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '88:264 call_expression=>call_expression • τ[ expression τ] [ τ[ ]';
                        consume( l, data, state );
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_bcbdbfb31631bd03 );
                        pushFN( data, $expression );
                        return data.rules_ptr
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  `  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '88:266 call_expression=>call_expression • template_literal [ τ` ]';
                        pushFN( data, branch_eafc251b0e3f8f6b );
                        pushFN( data, $template_literal );
                        return data.rules_ptr
                    }
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?.  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '93:278 optional_expression=>call_expression • optional_chain [ τ?. ]';
                        pushFN( data, branch_0a7a8f81274d2482 );
                        pushFN( data, $optional_chain );
                        return data.rules_ptr
                    }
                    default:
                    case 5: 
                    {
                        '"--LEAF--"';
                        'Leaf [  -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '81:243 left_hand_side_expression=>call_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        prod = 81;
                        continue
                    }
                };
                break
            }
            case 93: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ?. -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                '93:279 optional_expression=>optional_expression • optional_chain [ τ?. ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                if( cmpr_set( l, data, 19, 2, 2 ) ){
                    pushFN( data, branch_3e3d00100c9e9be5 );
                    return branch_f0c3bcb79d8e42d6( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '81:244 left_hand_side_expression=>optional_expression • [ τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                    prod = 81;
                    continue
                };
                break
            }
            case 115: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  ** * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || END_OF_PRODUCTION  ]';
                '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                '113:360 exponentiation_expression=>update_expression • τ** exponentiation_expression [ τ** ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_bd3dc49275d4a0e9( l, data )){
                    case 0: 
                    {
                        var fk1 = fork( data );
                        pushFN( fk1, branch_740fe5c6ea352889 );
                        pushFN( data, branch_215bcab6524484e2 );
                        return 0
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  * / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? ? ; } nl END_OF_FILE ) : ] , && || ** END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '114:361 unary_expression=>update_expression • [ τ**, τ*, τ/, τ%, τ-, τ+, τ<<, τ>>, τ>>>, τin, τinstanceof, τ>=, τ<=, τ>, τ<, τ==, τ!=, τ===, τ!==, τ&, τ^, τ|, τ??, τ?, τ;, τ}-ns, θnl, END_OF_FILE, τ), τ:, τ], τ,, τ}, τ&&, τ|| ]';
                        return 113
                    }
                };
                break
            }
            case 146: 
            {
                '"--LEAF--"';
                'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
                '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
                '143:452 substitute_template=>template_head • expression template_spans [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
                pushFN( data, branch_8a027ac5997cb78f );
                pushFN( data, $expression );
                return data.rules_ptr;
                break
            }
            case 160: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  E e ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e32b08cd3c718e6b( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                        pushFN( data, branch_e499b7acc656bd04 );
                        pushFN( data, $scientific_token_group_923_0_ );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ( : ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        add_reduce( state, data, 1, 238 );
                        add_reduce( state, data, 1, 236 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
            case 161: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  n . E e ( : ?. ` [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
                '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '158:502 big_token=>int_token • τn [ τn ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a1c731d03900f749( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  n  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '158:502 big_token=>int_token • τn [ τn ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 238 );
                        add_reduce( state, data, 1, 237 );
                        pushFN( data, $exponentiation_expression_goto );
                        return 83
                    }
                    case 1: 
                    {
                        'Number of end groups1 [    ]';
                        'All symbols [  num _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                        '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        var pk = l.copyInPlace(  );
                        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                        if( pk.isNum( data ) ){
                            pushFN( data, branch_d20768be087c69c4 );
                            return branch_731d73028155c3d7( l, data, state, prod, prod_start )
                        } else {
                            '"--LEAF--"';
                            'Leaf [  _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                            '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                            add_reduce( state, data, 1, 238 );
                            prod = 160;
                            continue
                        }
                    }
                    default:
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e ( : ?. ` [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] ) ; } nl END_OF_FILE , { . END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        add_reduce( state, data, 1, 238 );
                        prod = 160;
                        continue
                    }
                };
                break
            }
            case 178: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  _ $ id num ?. ( ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { as from => extends END_OF_PRODUCTION  ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                switch(sym_map_00126370fc441c6c( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  _  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $exponentiation_expression_goto );
                        return 178
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  $  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $exponentiation_expression_goto );
                        return 178
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  id  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $exponentiation_expression_goto );
                        return 178
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  num  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $exponentiation_expression_goto );
                        return 178
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ?. ( ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { as from => extends END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                        add_reduce( state, data, 1, 244 );
                        add_reduce( state, data, 1, 243 );
                        prod = 83;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==113 )?prod :-1
}
function $unary_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  delete void typeof await + this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import ++ -- ~ ! -  ]';
    '114:361 unary_expression=>• update_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ++, τ-- ]';
    '114:362 unary_expression=>• τdelete unary_expression [ τdelete ]';
    '114:363 unary_expression=>• τvoid unary_expression [ τvoid ]';
    '114:364 unary_expression=>• τtypeof unary_expression [ τtypeof ]';
    '114:365 unary_expression=>• τ+ unary_expression [ τ+ ]';
    '114:366 unary_expression=>• τ~ unary_expression [ τ~ ]';
    '114:367 unary_expression=>• τ! unary_expression [ τ! ]';
    '114:368 unary_expression=>• τ- unary_expression [ τ- ]';
    '114:369 unary_expression=>• await_expression [ τawait ]';
    switch(sym_map_8e3e34af0018f3d2( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  delete  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '114:362 unary_expression=>• τdelete unary_expression [ τdelete ]';
        consume( l, data, state );
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_d890621730ff66c9 );
        pushFN( data, $unary_expression );
        return data.rules_ptr
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  void  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '114:363 unary_expression=>• τvoid unary_expression [ τvoid ]';
        consume( l, data, state );
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_7e0c55cd5de7eecc );
        pushFN( data, $unary_expression );
        return data.rules_ptr
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  typeof  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '114:364 unary_expression=>• τtypeof unary_expression [ τtypeof ]';
        consume( l, data, state );
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_282713f7fcb233b4 );
        pushFN( data, $unary_expression );
        return data.rules_ptr
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  await  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '114:369 unary_expression=>• await_expression [ τawait ]';
        pushFN( data, branch_6ba9611537fad4e2 );
        pushFN( data, $await_expression );
        return data.rules_ptr
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  +  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '114:365 unary_expression=>• τ+ unary_expression [ τ+ ]';
        consume( l, data, state );
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_de45d9aed2978ab5 );
        pushFN( data, $unary_expression );
        return data.rules_ptr
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import ++ --  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '114:361 unary_expression=>• update_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport, τ++, τ-- ]';
        pushFN( data, branch_6ba9611537fad4e2 );
        pushFN( data, $update_expression );
        return data.rules_ptr
    }
    case 6: 
    {
        '"--LEAF--"';
        'Leaf [  ~  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '114:366 unary_expression=>• τ~ unary_expression [ τ~ ]';
        consume( l, data, state );
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_de45d9aed2978ab5 );
        pushFN( data, $unary_expression );
        return data.rules_ptr
    }
    case 7: 
    {
        '"--LEAF--"';
        'Leaf [  !  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '114:367 unary_expression=>• τ! unary_expression [ τ! ]';
        consume( l, data, state );
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_de45d9aed2978ab5 );
        pushFN( data, $unary_expression );
        return data.rules_ptr
    }
    case 8: 
    {
        '"--LEAF--"';
        'Leaf [  -  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '114:368 unary_expression=>• τ- unary_expression [ τ- ]';
        consume( l, data, state );
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_7b47b71dedd38bc4 );
        pushFN( data, $unary_expression );
        return data.rules_ptr
    }
    default: 
    break
};
    return -1
}
function $update_expression(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  this _ $ id true false null " " num 0X 0x 0O 0o 0B 0b [ { async function class / ` ( new super import ++ --  ]';
    '115:370 update_expression=>• left_hand_side_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '115:371 update_expression=>• left_hand_side_expression τ++ [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '115:372 update_expression=>• left_hand_side_expression τ-- [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '115:373 update_expression=>• τ++ unary_expression [ τ++ ]';
    '115:374 update_expression=>• τ-- unary_expression [ τ-- ]';
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x8194, 0x88000000, 0x8000001 )||l.isUniID( data )||l.isNum( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  81  ]';
    '115:370 update_expression=>• left_hand_side_expression [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '115:371 update_expression=>• left_hand_side_expression τ++ [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    '115:372 update_expression=>• left_hand_side_expression τ-- [ τthis, τ_, τ$, θid, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τasync, τfunction, τclass, τ/, τ`, τ(, τnew, τsuper, τimport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_650fdafe4c8104b0 );
    pushFN( data, $left_hand_side_expression );
    return data.rules_ptr
} else if( cmpr_set( l, data, 190, 2, 2 ) ){
    pushFN( data, branch_be0975c191cfe942 );
    return branch_608777cc1795c0b1( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 192, 2, 2 ) ){
    pushFN( data, branch_be0975c191cfe942 );
    return branch_3dee9708442520d5( l, data, state, prod, prod_start )
};
    return -1
}
function $cover_parenthesized_expression_and_arrow_parameter_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '116:375 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( τ) [ τ( ]';
    '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, τ) [ τ( ]';
    '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ( ]';
    '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ( ]';
    '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ( ]';
    '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ( ]';
    '116:381 cover_parenthesized_expression_and_arrow_parameter_list=>• parenthesized [ τ( ]';
    if( l.current_byte ==40 ){
    'Number of end groups0 [    ]';
    'All symbols [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- ) ...  ]';
    '116:375 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( τ) [ τ( ]';
    '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, τ) [ τ( ]';
    '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ( ]';
    '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ( ]';
    '116:381 cover_parenthesized_expression_and_arrow_parameter_list=>• parenthesized [ τ( ]';
    '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ( ]';
    '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ( ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 153, 5, 5 )||dt_2f6691a653b819d6( pk, data )||dt_5b7bef307ef015e7( pk, data )||cmpr_set( pk, data, 345, 5, 5 )||cmpr_set( pk, data, 284, 6, 6 )||dt_b20f4716c284a542( pk, data )||dt_c9742b8c3a6930ba( pk, data )||cmpr_set( pk, data, 320, 5, 5 )||dt_57f0cbc88859bc5b( pk, data )||cmpr_set( pk, data, 307, 6, 6 )||cmpr_set( pk, data, 146, 4, 4 )||cmpr_set( pk, data, 190, 2, 2 )||cmpr_set( pk, data, 192, 2, 2 )||assert_ascii( pk, 0x0, 0xa996, 0x88000000, 0x48000001 )||pk.isUniID( data )||pk.isNum( data ) ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  (  ]';
        '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, τ) [ τ( ]';
        '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ( ]';
        '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ( ]';
        '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
        'Number of end groups0 [    ]';
        'All symbols [  80  ]';
        '116:376 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • expression τ, τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        '116:379 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        '116:380 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • expression τ, cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        '117:382 parenthesized=>τ( • expression τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_43fb080787afcb31 );
        pushFN( data, $expression );
        return data.rules_ptr
    } else if( pk.current_byte ==41 ){
        pushFN( data, branch_b874a508ae3c56e3 );
        return branch_a589c3e65d2d65b9( l, data, state, prod, prod_start )
    } else {
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  (  ]';
        '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ( ]';
        '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>• τ( cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ( ]';
        'Number of end groups0 [    ]';
        'All symbols [  ...  ]';
        '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ... ]';
        '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ... ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( cmpr_set( l, data, 16, 3, 3 ) ){
            'Number of end groups0 [    ]';
            'All symbols [  _ $ id { [  ]';
            '116:377 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_ τ) [ τ... ]';
            '116:378 cover_parenthesized_expression_and_arrow_parameter_list=>τ( • cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_ τ) [ τ... ]';
            var pk = l.copyInPlace(  );
            skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==95||pk.current_byte  == 36 || pk.isUniID( data ) ){
                pushFN( data, branch_b874a508ae3c56e3 );
                return branch_a075d09e7961a50c( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_b874a508ae3c56e3 );
                return branch_58d3d5fc91c69932( l, data, state, prod, prod_start )
            }
        }
    }
};
    return -1
}
function $parenthesized(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  (  ]';
    '117:382 parenthesized=>• τ( expression τ) [ τ( ]';
    if( l.current_byte ==40 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  (  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '117:382 parenthesized=>τ( • expression τ) [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_81ace1e9aba2b7ae );
    pushFN( data, $expression );
    return data.rules_ptr
};
    return -1
}
function $binding_pattern(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  { [  ]';
    '118:383 binding_pattern=>• object_binding_pattern [ τ{ ]';
    '118:384 binding_pattern=>• array_binding_pattern [ τ[ ]';
    if( l.current_byte ==123 ){
    pushFN( data, branch_4c7a85bee4b4231e );
    return branch_6f48e2b3649e0e39( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_4c7a85bee4b4231e );
    return branch_452f44b16e34215c( l, data, state, prod, prod_start )
};
    return -1
}
function $object_binding_pattern(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '119:385 object_binding_pattern=>• τ{ τ} [ τ{ ]';
    '119:386 object_binding_pattern=>• τ{ binding_rest_property τ} [ τ{ ]';
    '119:387 object_binding_pattern=>• τ{ binding_property_list τ} [ τ{ ]';
    '119:388 object_binding_pattern=>• τ{ binding_property_list τ, binding_rest_property τ} [ τ{ ]';
    '119:389 object_binding_pattern=>• τ{ binding_property_list τ, τ} [ τ{ ]';
    if( l.current_byte ==123 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id " " num 0X 0x 0O 0o 0B 0b [ } ...  ]';
    '119:385 object_binding_pattern=>τ{ • τ} [ τ} ]';
    '119:386 object_binding_pattern=>τ{ • binding_rest_property τ} [ τ... ]';
    '119:387 object_binding_pattern=>τ{ • binding_property_list τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    '119:388 object_binding_pattern=>τ{ • binding_property_list τ, binding_rest_property τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    '119:389 object_binding_pattern=>τ{ • binding_property_list τ, τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x94, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  121  ]';
        '119:387 object_binding_pattern=>τ{ • binding_property_list τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        '119:388 object_binding_pattern=>τ{ • binding_property_list τ, binding_rest_property τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        '119:389 object_binding_pattern=>τ{ • binding_property_list τ, τ} [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_df0ba29542cfa265 );
        pushFN( data, $binding_property_list );
        return data.rules_ptr
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_1e3776334c2e9421 );
        return branch_b66f9574755094c0( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_1e3776334c2e9421 );
        return branch_fae227a5b594d9fa( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $array_binding_pattern(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  [  ]';
    '120:390 array_binding_pattern=>• τ[ elision binding_rest_element τ] [ τ[ ]';
    '120:391 array_binding_pattern=>• τ[ binding_element_list τ] [ τ[ ]';
    '120:392 array_binding_pattern=>• τ[ binding_element_list τ, elision binding_rest_element τ] [ τ[ ]';
    '120:393 array_binding_pattern=>• τ[ binding_rest_element τ] [ τ[ ]';
    '120:394 array_binding_pattern=>• τ[ elision τ] [ τ[ ]';
    '120:395 array_binding_pattern=>• τ[ binding_element_list τ, binding_rest_element τ] [ τ[ ]';
    '120:396 array_binding_pattern=>• τ[ binding_element_list τ, elision τ] [ τ[ ]';
    '120:397 array_binding_pattern=>• τ[ τ] [ τ[ ]';
    '120:398 array_binding_pattern=>• τ[ binding_element_list τ, τ] [ τ[ ]';
    if( l.current_byte ==91 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id { [ , ... ]  ]';
    '120:390 array_binding_pattern=>τ[ • elision binding_rest_element τ] [ τ, ]';
    '120:391 array_binding_pattern=>τ[ • binding_element_list τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    '120:392 array_binding_pattern=>τ[ • binding_element_list τ, elision binding_rest_element τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    '120:394 array_binding_pattern=>τ[ • elision τ] [ τ, ]';
    '120:395 array_binding_pattern=>τ[ • binding_element_list τ, binding_rest_element τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    '120:396 array_binding_pattern=>τ[ • binding_element_list τ, elision τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    '120:398 array_binding_pattern=>τ[ • binding_element_list τ, τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    '120:393 array_binding_pattern=>τ[ • binding_rest_element τ] [ τ... ]';
    '120:397 array_binding_pattern=>τ[ • τ] [ τ] ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  122  ]';
        '120:391 array_binding_pattern=>τ[ • binding_element_list τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
        '120:392 array_binding_pattern=>τ[ • binding_element_list τ, elision binding_rest_element τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
        '120:395 array_binding_pattern=>τ[ • binding_element_list τ, binding_rest_element τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
        '120:396 array_binding_pattern=>τ[ • binding_element_list τ, elision τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
        '120:398 array_binding_pattern=>τ[ • binding_element_list τ, τ] [ τ,, τ_, τ$, θid, τ{, τ[ ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_5e05faa39fa354cd );
        pushFN( data, $binding_element_list );
        return data.rules_ptr
    } else if( l.current_byte ==44 ){
        var fk1 = fork( data );
        pushFN( fk1, branch_78ee3ee7818ddd20 );
        var fk2 = fork( data );
        pushFN( fk2, branch_d6d42c9c08735146 );
        var fk3 = fork( data );
        pushFN( fk3, branch_f4104cb39d890b9f );
        var fk4 = fork( data );
        pushFN( fk4, branch_fd33007bb9bdc0cb );
        var fk5 = fork( data );
        pushFN( fk5, branch_e5c96f196acc5dda );
        var fk6 = fork( data );
        pushFN( fk6, branch_a31c5fb689ac09a8 );
        pushFN( data, branch_ad1ed9285e7440eb );
        return 0
    } else if( cmpr_set( l, data, 16, 3, 3 ) ){
        pushFN( data, branch_7227848e659607a6 );
        return branch_e3c0383220c4c358( l, data, state, prod, prod_start )
    } else if( l.current_byte ==93 ){
        pushFN( data, branch_7227848e659607a6 );
        return branch_8170d964fef370aa( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $binding_property_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id " " num 0X 0x 0O 0o 0B 0b [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '121:399 binding_property_list=>• binding_property [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    pushFN( data, branch_c6f1117061c6b8db );
    pushFN( data, $binding_property );
    return data.rules_ptr;
    return -1
}
function $binding_property_list_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '121:400 binding_property_list=>binding_property_list • τ, binding_property [ τ, ]';
    '119:388 object_binding_pattern=>τ{ binding_property_list • τ, binding_rest_property τ} [ τ, ]';
    '119:389 object_binding_pattern=>τ{ binding_property_list • τ, τ} [ τ, ]';
    '119:387 object_binding_pattern=>τ{ binding_property_list • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id " " num 0X 0x 0O 0o 0B 0b [  ]';
    '121:400 binding_property_list=>binding_property_list • τ, binding_property [ τ, ]';
    '119:388 object_binding_pattern=>τ{ binding_property_list • τ, binding_rest_property τ} [ τ, ]';
    '119:389 object_binding_pattern=>τ{ binding_property_list • τ, τ} [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( dt_57f0cbc88859bc5b( pk, data )||assert_ascii( pk, 0x0, 0x94, 0x88000000, 0x0 )||pk.isUniID( data )||pk.isNum( data ) ){
        pushFN( data, branch_01c072348a2faf3e );
        return branch_452ee10c802a9356( l, data, state, prod, prod_start )
    }
};
    return ( prod ==121 )?prod :-1
}
function $binding_element_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  , _ $ id { [  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '122:401 binding_element_list=>• binding_elision_element [ τ,, τ_, τ$, θid, τ{, τ[ ]';
    pushFN( data, branch_97efa12186b512f0 );
    pushFN( data, $binding_elision_element );
    return data.rules_ptr;
    return -1
}
function $binding_element_list_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '122:402 binding_element_list=>binding_element_list • τ, binding_elision_element [ τ, ]';
    '120:392 array_binding_pattern=>τ[ binding_element_list • τ, elision binding_rest_element τ] [ τ, ]';
    '120:395 array_binding_pattern=>τ[ binding_element_list • τ, binding_rest_element τ] [ τ, ]';
    '120:396 array_binding_pattern=>τ[ binding_element_list • τ, elision τ] [ τ, ]';
    '120:398 array_binding_pattern=>τ[ binding_element_list • τ, τ] [ τ, ]';
    '120:391 array_binding_pattern=>τ[ binding_element_list • τ] [ τ] ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id { [ ,  ]';
    '122:402 binding_element_list=>binding_element_list • τ, binding_elision_element [ τ, ]';
    '120:392 array_binding_pattern=>τ[ binding_element_list • τ, elision binding_rest_element τ] [ τ, ]';
    '120:396 array_binding_pattern=>τ[ binding_element_list • τ, elision τ] [ τ, ]';
    '120:395 array_binding_pattern=>τ[ binding_element_list • τ, binding_rest_element τ] [ τ, ]';
    '120:398 array_binding_pattern=>τ[ binding_element_list • τ, τ] [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( assert_ascii( pk, 0x0, 0x10, 0x88000000, 0x8000000 )||pk.isUniID( data ) ){
        pushFN( data, branch_97efa12186b512f0 );
        return branch_9f09291b21cab368( l, data, state, prod, prod_start )
    } else if( pk.current_byte ==44 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  ,  ]';
        '122:402 binding_element_list=>binding_element_list • τ, binding_elision_element [ τ, ]';
        '120:392 array_binding_pattern=>τ[ binding_element_list • τ, elision binding_rest_element τ] [ τ, ]';
        '120:396 array_binding_pattern=>τ[ binding_element_list • τ, elision τ] [ τ, ]';
        'Number of end groups0 [    ]';
        'All symbols [  _ $ id { [ ,  ]';
        '122:402 binding_element_list=>binding_element_list τ, • binding_elision_element [ τ,, τ_, τ$, θid, τ{, τ[ ]';
        '120:392 array_binding_pattern=>τ[ binding_element_list τ, • elision binding_rest_element τ] [ τ, ]';
        '120:396 array_binding_pattern=>τ[ binding_element_list τ, • elision τ] [ τ, ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
            pushFN( data, branch_97efa12186b512f0 );
            return branch_b2b65aac3a9b5b74( l, data, state, prod, prod_start )
        } else if( l.current_byte ==44 ){
            pushFN( data, branch_354cfeba9b7f4977 );
            return 0
        }
    }
};
    return ( prod ==122 )?prod :-1
}
function $binding_elision_element(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id { [ ,  ]';
    '123:403 binding_elision_element=>• elision binding_element [ τ, ]';
    '123:404 binding_elision_element=>• binding_element [ τ_, τ$, θid, τ{, τ[ ]';
    if( assert_ascii( l, 0x0, 0x10, 0x88000000, 0x8000000 )||l.isUniID( data ) ){
    pushFN( data, branch_9d9a2acd33035cdb );
    return branch_f57d9120edc2ddc7( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_9d9a2acd33035cdb );
    return branch_1d82a8131449965b( l, data, state, prod, prod_start )
};
    return -1
}
function $binding_property(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  " " num 0X 0x 0O 0o 0B 0b [ _ $ id  ]';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    '124:406 binding_property=>• property_name τ: binding_element [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x84, 0x8000000, 0x0 )||l.isNum( data ) ){
    pushFN( data, branch_edbb4092a5517341 );
    return branch_45fc3b2eeec973e0( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_de816431541d5c16 );
    return branch_9329a9a9b5c3c033( l, data, state, prod, prod_start )
};
    return -1
}
function $binding_property_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 132: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  :  ]';
                '124:406 binding_property=>property_name • τ: binding_element [ τ: ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==58 ){
                    consume( l, data, state );
                    '"--LEAF--"';
                    'Leaf [  :  ]';
                    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
                    '124:406 binding_property=>property_name τ: • binding_element [ τ_, τ$, θid, τ{, τ[ ]';
                    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                    pushFN( data, branch_24e22962aacd1064 );
                    pushFN( data, $binding_element );
                    return data.rules_ptr
                };
                break
            }
            case 169: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  = ) , ] } END_OF_PRODUCTION  ]';
                '126:409 single_name_binding=>binding_identifier • initializer [ τ= ]';
                '126:410 single_name_binding=>binding_identifier • [ τ), τ,, τ], τ} ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==61 ){
                    pushFN( data, branch_edbb4092a5517341 );
                    return branch_4a1febbf64e84dc7( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  ) , ] } END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '126:410 single_name_binding=>binding_identifier • [ τ), τ,, τ], τ} ]';
                    add_reduce( state, data, 1, 203 );
                    return 124
                };
                break
            }
            case 175: 
            {
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                'Number of end groups2 [    ]';
                'All symbols [  : = END_OF_PRODUCTION  ]';
                '170:527 identifier=>composite_identifier • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '171:528 identifier_name=>composite_identifier • [ τ(, τ:, τ`, τ., τ[, τ?., τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                if( sym_map_ae0a539a2e7403fb( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  :  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '171:528 identifier_name=>composite_identifier • [ τ(, τ:, τ`, τ., τ[, τ?., τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                    add_reduce( state, data, 1, 245 );
                    add_reduce( state, data, 1, 207 );
                    prod = 132;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  = END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '170:527 identifier=>composite_identifier • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                    add_reduce( state, data, 1, 244 );
                    add_reduce( state, data, 1, 110 );
                    prod = 169;
                    continue
                };
                break
            }
            case 178: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  _ $ id num as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                switch(sym_map_c4f390da9b9d0165( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  _  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $binding_property_goto );
                        return 178
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  $  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $binding_property_goto );
                        return 178
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  id  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $binding_property_goto );
                        return 178
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  num  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $binding_property_goto );
                        return 178
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                        prod = 175;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==124 )?prod :-1
}
function $binding_element(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id { [  ]';
    '125:407 binding_element=>• single_name_binding [ τ_, τ$, θid ]';
    '125:408 binding_element=>• binding_pattern initializer [ τ{, τ[ ]';
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
    pushFN( data, branch_6a0b2eb63577a0dd );
    return branch_5fa6088c02a79c21( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_6a0b2eb63577a0dd );
    return branch_4272b37a2f6405c1( l, data, state, prod, prod_start )
};
    return -1
}
function $single_name_binding(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  169  ]';
    '126:409 single_name_binding=>• binding_identifier initializer [ τ_, τ$, θid ]';
    '126:410 single_name_binding=>• binding_identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_ce59cd51175952d8 );
    pushFN( data, $binding_identifier );
    return data.rules_ptr;
    return -1
}
function $binding_rest_property(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ...  ]';
    '127:411 binding_rest_property=>• τ... binding_identifier [ τ... ]';
    if( cmpr_set( l, data, 16, 3, 3 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '127:411 binding_rest_property=>τ... • binding_identifier [ τ_, τ$, θid ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_fa05bbdac649d03b );
    pushFN( data, $binding_identifier );
    return data.rules_ptr
};
    return -1
}
function $binding_rest_element(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ...  ]';
    '128:412 binding_rest_element=>• τ... binding_identifier [ τ... ]';
    '128:413 binding_rest_element=>• τ... binding_pattern [ τ... ]';
    if( cmpr_set( l, data, 16, 3, 3 ) ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id { [  ]';
    '128:412 binding_rest_element=>τ... • binding_identifier [ τ_, τ$, θid ]';
    '128:413 binding_rest_element=>τ... • binding_pattern [ τ{, τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
        pushFN( data, branch_35f0b7237adc590f );
        return branch_95769a711df4b4c4( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_35f0b7237adc590f );
        return branch_6f877bb9a9b01cc3( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $object_literal(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  {  ]';
    '129:414 object_literal=>• τ{ τ} [ τ{ ]';
    '129:415 object_literal=>• τ{ property_definition_list τ, τ} [ τ{ ]';
    '129:416 object_literal=>• τ{ property_definition_list τ} [ τ{ ]';
    if( l.current_byte ==123 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id async get set * " " num 0X 0x 0O 0o 0B 0b [ ... }  ]';
    '129:414 object_literal=>τ{ • τ} [ τ} ]';
    '129:415 object_literal=>τ{ • property_definition_list τ, τ} [ τ_, τ$, θid, τasync, τget, τset, τ*, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ... ]';
    '129:416 object_literal=>τ{ • property_definition_list τ} [ τ_, τ$, θid, τasync, τget, τset, τ*, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ... ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 16, 3, 3 )||assert_ascii( l, 0x0, 0x494, 0x88000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  130  ]';
        '129:415 object_literal=>τ{ • property_definition_list τ, τ} [ τ_, τ$, θid, τasync, τget, τset, τ*, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ... ]';
        '129:416 object_literal=>τ{ • property_definition_list τ} [ τ_, τ$, θid, τasync, τget, τset, τ*, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ... ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_587ee71e84987476 );
        pushFN( data, $property_definition_list );
        return data.rules_ptr
    } else if( l.current_byte ==125 ){
        pushFN( data, branch_3bf1300f50f53db1 );
        return branch_ded95ac80bdee06b( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $property_definition_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id async get set * " " num 0X 0x 0O 0o 0B 0b [ ...  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '130:417 property_definition_list=>• property_definition [ τ_, τ$, θid, τasync, τget, τset, τ*, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ... ]';
    pushFN( data, branch_9d9878c1e812bae3 );
    pushFN( data, $property_definition );
    return data.rules_ptr;
    return -1
}
function $property_definition_list_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '130:418 property_definition_list=>property_definition_list • τ, property_definition [ τ, ]';
    '129:415 object_literal=>τ{ property_definition_list • τ, τ} [ τ, ]';
    '129:416 object_literal=>τ{ property_definition_list • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id async get set * " " num 0X 0x 0O 0o 0B 0b [ ...  ]';
    '130:418 property_definition_list=>property_definition_list • τ, property_definition [ τ, ]';
    '129:415 object_literal=>τ{ property_definition_list • τ, τ} [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 206, 5, 5 )||cmpr_set( pk, data, 137, 3, 3 )||cmpr_set( pk, data, 327, 3, 3 )||dt_57f0cbc88859bc5b( pk, data )||cmpr_set( pk, data, 16, 3, 3 )||assert_ascii( pk, 0x0, 0x494, 0x88000000, 0x0 )||pk.isUniID( data )||pk.isNum( data ) ){
        pushFN( data, branch_8524ef5d6e5f042a );
        return branch_4543f8f32cea3cd7( l, data, state, prod, prod_start )
    }
};
    return ( prod ==130 )?prod :-1
}
function $property_definition(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  async get set * " " num 0X 0x 0O 0o 0B 0b [ _ $ id ...  ]';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    '131:421 property_definition=>• method_definition [ τasync, τget, τset, τ*, τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    '131:423 property_definition=>• property_name τ: assignment_expression [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[ ]';
    '131:422 property_definition=>• τ... assignment_expression [ τ... ]';
    if( cmpr_set( l, data, 206, 5, 5 )||cmpr_set( l, data, 137, 3, 3 )||cmpr_set( l, data, 327, 3, 3 )||l.current_byte ==42 ){
    pushFN( data, branch_125427ae5c0d710c );
    return branch_a87c228bc0c9b8e7( l, data, state, prod, prod_start )
} else if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x84, 0x8000000, 0x0 )||l.isNum( data ) ){
    'Number of end groups0 [    ]';
    'All symbols [  " " 0X 0x 0O 0o 0B 0b [ num  ]';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
    '161:508 int_token=>• θnum [ θnum ]';
    '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
    '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
    '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
    '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
    '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
    '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
    '134:429 computed_property_name=>• τ[ assignment_expression τ] [ τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    switch(sym_map_f2a9852fd0c3882c( l, data )){
        case 0: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:484 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==34 ){
                pushFN( data, branch_0f5723928c65bb9f );
                return branch_91cf36e954ec5143( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_0f5723928c65bb9f );
                return branch_328537b07cc6a1d1( l, data, state, prod, prod_start )
            }
        }
        case 1: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  " nl ws sym num id f:s  ]';
            '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
            '154:485 string_literal=>• τ" τ" [ τ" ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==39 ){
                pushFN( data, branch_0f5723928c65bb9f );
                return branch_04e6a411b1fc24b1( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_0f5723928c65bb9f );
                return branch_fc7fd38db674bd64( l, data, state, prod, prod_start )
            }
        }
        case 2: 
        {
            '"--LEAF--"';
            'Leaf [  0X  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
            pushFN( data, branch_538be061ff85122d );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 3: 
        {
            '"--LEAF--"';
            'Leaf [  0x  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
            pushFN( data, branch_538be061ff85122d );
            pushFN( data, $hex_token );
            return prod_start
        }
        case 4: 
        {
            '"--LEAF--"';
            'Leaf [  0O  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
            pushFN( data, branch_538be061ff85122d );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 5: 
        {
            '"--LEAF--"';
            'Leaf [  0o  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
            pushFN( data, branch_538be061ff85122d );
            pushFN( data, $octal_token );
            return prod_start
        }
        case 6: 
        {
            '"--LEAF--"';
            'Leaf [  0B  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
            pushFN( data, branch_538be061ff85122d );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 7: 
        {
            '"--LEAF--"';
            'Leaf [  0b  ]';
            '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
            '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
            pushFN( data, branch_538be061ff85122d );
            pushFN( data, $binary_token );
            return prod_start
        }
        case 8: 
        {
            '"--LEAF--"';
            'Leaf [  [  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '134:429 computed_property_name=>• τ[ assignment_expression τ] [ τ[ ]';
            pushFN( data, branch_9557943043197180 );
            pushFN( data, $computed_property_name );
            return prod_start
        }
        case 9: 
        {
            'Number of end groups0 [    ]';
            'All symbols [  _ . n E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE ,  ]';
            '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
            '161:508 int_token=>• θnum [ θnum ]';
            var pk = l.copyInPlace(  );
            skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==95 ){
                pushFN( data, branch_8fa00f1de2282159 );
                return branch_1d992d5b88873c5c( l, data, state, prod, prod_start )
            } else {
                pushFN( data, branch_8fa00f1de2282159 );
                return branch_e80a8071760f9de0( l, data, state, prod, prod_start )
            }
        }
        default: 
        break
    }
} else if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
    pushFN( data, branch_00c0dfd6a3b9ee46 );
    return branch_9329a9a9b5c3c033( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 16, 3, 3 ) ){
    pushFN( data, branch_125427ae5c0d710c );
    return branch_d47b6a0a8e8f4839( l, data, state, prod, prod_start )
};
    return -1
}
function $property_definition_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 132: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  ( :  ]';
                '78:228 method_definition=>property_name • τ( unique_formal_parameters τ) τ{ function_body τ} [ τ( ]';
                '78:234 method_definition=>property_name • τ( τ) τ{ function_body τ} [ τ( ]';
                '78:235 method_definition=>property_name • τ( unique_formal_parameters τ) τ{ τ} [ τ( ]';
                '78:238 method_definition=>property_name • τ( τ) τ{ τ} [ τ( ]';
                '131:423 property_definition=>property_name • τ: assignment_expression [ τ: ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==40 ){
                    'Number of end groups0 [    ]';
                    'All symbols [  ... _ $ id { [ )  ]';
                    '78:228 method_definition=>property_name • τ( unique_formal_parameters τ) τ{ function_body τ} [ τ( ]';
                    '78:235 method_definition=>property_name • τ( unique_formal_parameters τ) τ{ τ} [ τ( ]';
                    '78:234 method_definition=>property_name • τ( τ) τ{ function_body τ} [ τ( ]';
                    '78:238 method_definition=>property_name • τ( τ) τ{ τ} [ τ( ]';
                    var pk = l.copyInPlace(  );
                    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
                    if( cmpr_set( pk, data, 16, 3, 3 )||assert_ascii( pk, 0x0, 0x10, 0x88000000, 0x8000000 )||pk.isUniID( data ) ){
                        consume( l, data, state );
                        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                        'Number of end groups0 [    ]';
                        'All symbols [  (  ]';
                        '78:228 method_definition=>property_name • τ( unique_formal_parameters τ) τ{ function_body τ} [ τ( ]';
                        '78:235 method_definition=>property_name • τ( unique_formal_parameters τ) τ{ τ} [ τ( ]';
                        'Number of end groups0 [    ]';
                        'All symbols [  61  ]';
                        '78:228 method_definition=>property_name τ( • unique_formal_parameters τ) τ{ function_body τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
                        '78:235 method_definition=>property_name τ( • unique_formal_parameters τ) τ{ τ} [ τ..., τ_, τ$, θid, τ{, τ[ ]';
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        pushFN( data, branch_e4351d8993285190 );
                        pushFN( data, $unique_formal_parameters );
                        return data.rules_ptr
                    } else if( pk.current_byte ==41 ){
                        consume( l, data, state );
                        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
                        'Number of end groups0 [    ]';
                        'All symbols [  (  ]';
                        '78:234 method_definition=>property_name • τ( τ) τ{ function_body τ} [ τ( ]';
                        '78:238 method_definition=>property_name • τ( τ) τ{ τ} [ τ( ]';
                        'Number of end groups0 [    ]';
                        'All symbols [  )  ]';
                        '78:234 method_definition=>property_name τ( • τ) τ{ function_body τ} [ τ) ]';
                        '78:238 method_definition=>property_name τ( • τ) τ{ τ} [ τ) ]';
                        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                        if( l.current_byte ==41 ){
                            consume( l, data, state );
                            'Number of end groups0 [    ]';
                            'All symbols [  {  ]';
                            '78:234 method_definition=>property_name τ( τ) • τ{ function_body τ} [ τ{ ]';
                            '78:238 method_definition=>property_name τ( τ) • τ{ τ} [ τ{ ]';
                            skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                            if( l.current_byte ==123 ){
                                consume( l, data, state );
                                'Number of end groups0 [    ]';
                                'All symbols [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const  }  ]';
                                '78:234 method_definition=>property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                                '78:238 method_definition=>property_name τ( τ) τ{ • τ} [ τ} ]';
                                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                                switch(sym_map_deb09f8b969b503a( l, data )){
                                    case 0: 
                                    {
                                        '"--LEAF--"';
                                        'Leaf [  { yield async new ( super import this [ / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const   ]';
                                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                                        '78:234 method_definition=>property_name τ( τ) τ{ • function_body τ} [ τ{, τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τ[, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ--, τvar, τ;, τif, τdo, τwhile, τfor, τswitch, τcontinue, τbreak, τreturn, τwith, τthrow, τtry, τdebugger, τclass, τfunction, τlet, τconst, ɛ ]';
                                        pushFN( data, branch_a25e55604240dfe5 );
                                        pushFN( data, $function_body );
                                        return data.rules_ptr
                                    }
                                    case 1: 
                                    {
                                        '"--LEAF--"';
                                        'Leaf [  }  ]';
                                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                                        '78:238 method_definition=>property_name τ( τ) τ{ • τ} [ τ} ]';
                                        consume( l, data, state );
                                        add_reduce( state, data, 5, 143 );
                                        pushFN( data, $property_definition_goto );
                                        return 131
                                    }
                                    default: 
                                    break
                                }
                            }
                        }
                    }
                } else if( l.current_byte ==58 ){
                    pushFN( data, branch_125427ae5c0d710c );
                    return branch_50f049c0672687bb( l, data, state, prod, prod_start )
                };
                break
            }
            case 160: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  E e ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e32b08cd3c718e6b( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                        pushFN( data, branch_48ad57ebf23821cf );
                        pushFN( data, $scientific_token_group_923_0_ );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        add_reduce( state, data, 1, 238 );
                        add_reduce( state, data, 1, 236 );
                        add_reduce( state, data, 1, 207 );
                        prod = 132;
                        continue
                    }
                };
                break
            }
            case 161: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  n . E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '158:502 big_token=>int_token • τn [ τn ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a1c731d03900f749( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  n  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '158:502 big_token=>int_token • τn [ τn ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 238 );
                        add_reduce( state, data, 1, 237 );
                        add_reduce( state, data, 1, 207 );
                        pushFN( data, $property_definition_goto );
                        return 132
                    }
                    case 1: 
                    {
                        'Number of end groups1 [    ]';
                        'All symbols [  num _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                        '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        var pk = l.copyInPlace(  );
                        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                        if( pk.isNum( data ) ){
                            pushFN( data, branch_e9970cdfd6b59ec4 );
                            return branch_731d73028155c3d7( l, data, state, prod, prod_start )
                        } else {
                            '"--LEAF--"';
                            'Leaf [  _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                            '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                            add_reduce( state, data, 1, 238 );
                            prod = 160;
                            continue
                        }
                    }
                    default:
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , . END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        add_reduce( state, data, 1, 238 );
                        prod = 160;
                        continue
                    }
                };
                break
            }
            case 168: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  = , } END_OF_PRODUCTION  ]';
                '135:430 cover_initialized_name=>identifier_reference • initializer [ τ= ]';
                '131:420 property_definition=>identifier_reference • [ τ,, τ} ]';
                skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
                if( l.current_byte ==61 ){
                    pushFN( data, branch_125427ae5c0d710c );
                    return branch_73fbbcc984693c41( l, data, state, prod, prod_start )
                } else {
                    '"--LEAF--"';
                    'Leaf [  , } END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '131:420 property_definition=>identifier_reference • [ τ,, τ} ]';
                    add_reduce( state, data, 1, 207 );
                    return 131
                };
                break
            }
            case 175: 
            {
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                'Number of end groups2 [    ]';
                'All symbols [  ( : = END_OF_PRODUCTION  ]';
                '170:527 identifier=>composite_identifier • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '171:528 identifier_name=>composite_identifier • [ τ(, τ:, τ`, τ., τ[, τ?., τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                if( sym_map_b5f8d77660477ac1( l, data )==1 ){
                    '"--LEAF--"';
                    'Leaf [  ( :  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '171:528 identifier_name=>composite_identifier • [ τ(, τ:, τ`, τ., τ[, τ?., τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                    add_reduce( state, data, 1, 245 );
                    add_reduce( state, data, 1, 207 );
                    prod = 132;
                    continue
                } else {
                    '"--LEAF--"';
                    'Leaf [  = END_OF_PRODUCTION  ]';
                    '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                    '170:527 identifier=>composite_identifier • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                    add_reduce( state, data, 1, 244 );
                    add_reduce( state, data, 1, 243 );
                    prod = 168;
                    continue
                };
                break
            }
            case 178: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  _ $ id num as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                switch(sym_map_c4f390da9b9d0165( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  _  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $property_definition_goto );
                        return 178
                    }
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  $  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $property_definition_goto );
                        return 178
                    }
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  id  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $property_definition_goto );
                        return 178
                    }
                    case 3: 
                    {
                        '"--LEAF--"';
                        'Leaf [  num  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 229 );
                        pushFN( data, $property_definition_goto );
                        return 178
                    }
                    default:
                    case 4: 
                    {
                        '"--LEAF--"';
                        'Leaf [  as = ( extends { of in ) , ; } nl END_OF_FILE ] => ?. ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : from END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                        prod = 175;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==131 )?prod :-1
}
function $property_name(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id " " num 0X 0x 0O 0o 0B 0b [  ]';
    '132:424 property_name=>• literal_property_name [ τ_, τ$, θid, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b ]';
    '132:425 property_name=>• computed_property_name [ τ[ ]';
    if( dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0x94, 0x80000000, 0x0 )||l.isUniID( data )||l.isNum( data ) ){
    pushFN( data, branch_097b95b32499553b );
    return branch_2e6dd80ccd410494( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_097b95b32499553b );
    return branch_2ec6eeffc4827195( l, data, state, prod, prod_start )
};
    return -1
}
function $literal_property_name(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  num 0X 0x 0O 0o 0B 0b _ $ id " "  ]';
    '133:426 literal_property_name=>• identifier_name [ τ_, τ$, θid ]';
    '133:427 literal_property_name=>• string_literal [ τ", τ" ]';
    '133:428 literal_property_name=>• numeric_literal [ θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b ]';
    if( dt_57f0cbc88859bc5b( l, data )||l.isNum( data ) ){
    pushFN( data, branch_5bb0a42616156d0a );
    return branch_5901c44d41165102( l, data, state, prod, prod_start )
} else if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
    pushFN( data, branch_5bb0a42616156d0a );
    return branch_4b1d4c65cfd64ecc( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_5bb0a42616156d0a );
    return branch_9aaf4564ccb6b63c( l, data, state, prod, prod_start )
};
    return -1
}
function $computed_property_name(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  [  ]';
    '134:429 computed_property_name=>• τ[ assignment_expression τ] [ τ[ ]';
    if( l.current_byte ==91 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  [  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '134:429 computed_property_name=>τ[ • assignment_expression τ] [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d6b1b3359673b8da );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
};
    return -1
}
function $cover_initialized_name(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '135:430 cover_initialized_name=>• identifier_reference initializer [ τ_, τ$, θid ]';
    pushFN( data, branch_1f4101a568d31a47 );
    pushFN( data, $identifier_reference );
    return data.rules_ptr;
    return -1
}
function $initializer(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  =  ]';
    '136:431 initializer=>• τ= assignment_expression [ τ= ]';
    if( l.current_byte ==61 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  =  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '136:431 initializer=>τ= • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_2a24173dd20f4e43 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
};
    return -1
}
function $array_literal(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  [  ]';
    '137:432 array_literal=>• τ[ elision τ] [ τ[ ]';
    '137:433 array_literal=>• τ[ element_list τ] [ τ[ ]';
    '137:434 array_literal=>• τ[ element_list τ, elision τ] [ τ[ ]';
    '137:435 array_literal=>• τ[ τ] [ τ[ ]';
    '137:436 array_literal=>• τ[ element_list τ, τ] [ τ[ ]';
    if( l.current_byte ==91 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  yield async new ... ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ -- , ]  ]';
    '137:432 array_literal=>τ[ • elision τ] [ τ, ]';
    '137:433 array_literal=>τ[ • element_list τ] [ τ,, τyield, τasync, τnew, τ..., τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '137:434 array_literal=>τ[ • element_list τ, elision τ] [ τ,, τyield, τasync, τnew, τ..., τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '137:436 array_literal=>τ[ • element_list τ, τ] [ τ,, τyield, τasync, τnew, τ..., τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    '137:435 array_literal=>τ[ • τ] [ τ] ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( cmpr_set( l, data, 16, 3, 3 )||dt_57f0cbc88859bc5b( l, data )||cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
        'Number of end groups0 [    ]';
        'All symbols [  138  ]';
        '137:433 array_literal=>τ[ • element_list τ] [ τ,, τyield, τasync, τnew, τ..., τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        '137:434 array_literal=>τ[ • element_list τ, elision τ] [ τ,, τyield, τasync, τnew, τ..., τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        '137:436 array_literal=>τ[ • element_list τ, τ] [ τ,, τyield, τasync, τnew, τ..., τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_ac2fbcdac8db105c );
        pushFN( data, $element_list );
        return data.rules_ptr
    } else if( l.current_byte ==44 ){
        var fk1 = fork( data );
        pushFN( fk1, branch_c41f4ffa4a77337a );
        var fk2 = fork( data );
        pushFN( fk2, branch_43a89ba3acf8e8f2 );
        var fk3 = fork( data );
        pushFN( fk3, branch_6ad6d5b16957a0b2 );
        pushFN( data, branch_9857ed7f8666abbb );
        return 0
    } else if( l.current_byte ==93 ){
        pushFN( data, branch_f4f4b78e0efcb7d8 );
        return branch_b420618ab1b8586c( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $element_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import , ...  ]';
    '138:437 element_list=>• elision assignment_expression [ τ, ]';
    '138:438 element_list=>• elision spread_element [ τ, ]';
    '138:441 element_list=>• assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    '138:442 element_list=>• spread_element [ τ... ]';
    if( cmpr_set( l, data, 190, 2, 2 )||cmpr_set( l, data, 192, 2, 2 )||dt_57f0cbc88859bc5b( l, data )||assert_ascii( l, 0x0, 0xa996, 0x88000000, 0x48000001 )||l.isUniID( data )||l.isNum( data ) ){
    pushFN( data, branch_df285dd1774f9593 );
    return branch_78d81db44b6a097a( l, data, state, prod, prod_start )
} else if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  139  ]';
    '138:437 element_list=>• elision assignment_expression [ τ, ]';
    '138:438 element_list=>• elision spread_element [ τ, ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_aa79d015c321731e );
    pushFN( data, $elision );
    return data.rules_ptr
} else {
    pushFN( data, branch_df285dd1774f9593 );
    return branch_78d0041835b27d2c( l, data, state, prod, prod_start )
};
    return -1
}
function $element_list_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '138:439 element_list=>element_list • τ, elision assignment_expression [ τ, ]';
    '138:440 element_list=>element_list • τ, elision spread_element [ τ, ]';
    '138:443 element_list=>element_list • τ, assignment_expression [ τ, ]';
    '138:444 element_list=>element_list • τ, spread_element [ τ, ]';
    '137:434 array_literal=>τ[ element_list • τ, elision τ] [ τ, ]';
    '137:436 array_literal=>τ[ element_list • τ, τ] [ τ, ]';
    '137:433 array_literal=>τ[ element_list • τ] [ τ] ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  ++ -- delete void typeof + ~ ! - await new yield async _ $ id ( this true false null " " num 0X 0x 0O 0o 0B 0b [ { function class / ` super import , ...  ]';
    '138:439 element_list=>element_list • τ, elision assignment_expression [ τ, ]';
    '138:440 element_list=>element_list • τ, elision spread_element [ τ, ]';
    '137:434 array_literal=>τ[ element_list • τ, elision τ] [ τ, ]';
    '138:443 element_list=>element_list • τ, assignment_expression [ τ, ]';
    '138:444 element_list=>element_list • τ, spread_element [ τ, ]';
    '137:436 array_literal=>τ[ element_list • τ, τ] [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 190, 2, 2 )||cmpr_set( pk, data, 192, 2, 2 )||cmpr_set( pk, data, 307, 6, 6 )||cmpr_set( pk, data, 146, 4, 4 )||dt_b20f4716c284a542( pk, data )||dt_2f6691a653b819d6( pk, data )||dt_5b7bef307ef015e7( pk, data )||cmpr_set( pk, data, 153, 5, 5 )||dt_c9742b8c3a6930ba( pk, data )||dt_57f0cbc88859bc5b( pk, data )||cmpr_set( pk, data, 320, 5, 5 )||cmpr_set( pk, data, 345, 5, 5 )||cmpr_set( pk, data, 284, 6, 6 )||assert_ascii( pk, 0x0, 0xa996, 0x88000000, 0x48000001 )||pk.isUniID( data )||pk.isNum( data ) ){
        pushFN( data, branch_df285dd1774f9593 );
        return branch_25822b1e31f44227( l, data, state, prod, prod_start )
    } else if( pk.current_byte ==44 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  ,  ]';
        '138:439 element_list=>element_list • τ, elision assignment_expression [ τ, ]';
        '138:440 element_list=>element_list • τ, elision spread_element [ τ, ]';
        '137:434 array_literal=>τ[ element_list • τ, elision τ] [ τ, ]';
        'Number of end groups0 [    ]';
        'All symbols [  139  ]';
        '138:439 element_list=>element_list τ, • elision assignment_expression [ τ, ]';
        '138:440 element_list=>element_list τ, • elision spread_element [ τ, ]';
        '137:434 array_literal=>τ[ element_list τ, • elision τ] [ τ, ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        pushFN( data, branch_adec1f40cb4e69ab );
        pushFN( data, $elision );
        return data.rules_ptr
    } else if( cmpr_set( pk, data, 16, 3, 3 ) ){
        pushFN( data, branch_df285dd1774f9593 );
        return branch_c4b45b0596e5977b( l, data, state, prod, prod_start )
    }
};
    return ( prod ==138 )?prod :-1
}
function $elision(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '139:445 elision=>• τ, [ τ, ]';
    if( l.current_byte ==44 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  ,  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '139:445 elision=>τ, • [ τ,, τ..., τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport, τ] ]';
    add_reduce( state, data, 1, 217 );
    pushFN( data, $elision_goto );
    return 139
};
    return -1
}
function $elision_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '139:446 elision=>elision • τ, [ τ, ]';
    '120:390 array_binding_pattern=>τ[ elision • binding_rest_element τ] [ τ... ]';
    '120:392 array_binding_pattern=>τ[ binding_element_list τ, elision • binding_rest_element τ] [ τ... ]';
    '138:438 element_list=>elision • spread_element [ τ... ]';
    '138:440 element_list=>element_list τ, elision • spread_element [ τ... ]';
    '120:394 array_binding_pattern=>τ[ elision • τ] [ τ] ]';
    '120:396 array_binding_pattern=>τ[ binding_element_list τ, elision • τ] [ τ] ]';
    '137:432 array_literal=>τ[ elision • τ] [ τ] ]';
    '137:434 array_literal=>τ[ element_list τ, elision • τ] [ τ] ]';
    '123:403 binding_elision_element=>elision • binding_element [ τ_, τ$, θid, τ{, τ[ ]';
    '138:437 element_list=>elision • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    '138:439 element_list=>element_list τ, elision • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    pushFN( data, branch_e53975ca46a7cc6a );
    return branch_f8cf21f2f6970ad0( l, data, state, prod, prod_start )
};
    return ( prod ==139 )?prod :-1
}
function $spread_element(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ...  ]';
    '140:447 spread_element=>• τ... assignment_expression [ τ... ]';
    if( cmpr_set( l, data, 16, 3, 3 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '140:447 spread_element=>τ... • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_fb8d0d708078cfa9 );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
};
    return -1
}
function $template_literal(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  `  ]';
    '141:448 template_literal=>• no_substitute_template [ τ` ]';
    '141:449 template_literal=>• substitute_template [ τ` ]';
    if( l.current_byte ==96 ){
    'Number of end groups0 [    ]';
    'All symbols [  ` ${ nl ws sym num id f:s  ]';
    '141:448 template_literal=>• no_substitute_template [ τ` ]';
    '141:449 template_literal=>• substitute_template [ τ` ]';
    var pk = l.copyInPlace(  );
    skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==96 ){
        pushFN( data, branch_89ddaca662c70f13 );
        return branch_34dfdcff7dee67d9( l, data, state, prod, prod_start )
    } else if( cmpr_set( pk, data, 47, 2, 2 ) ){
        pushFN( data, branch_89ddaca662c70f13 );
        return branch_2a88901248e67254( l, data, state, prod, prod_start )
    } else {
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  `  ]';
        '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
        '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
        'Number of end groups0 [    ]';
        'All symbols [  189  ]';
        '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
        '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
        skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
        pushFN( data, branch_832db874432559ff );
        pushFN( data, $no_substitute_template_list_846 );
        return data.rules_ptr
    }
};
    return -1
}
function $template_literal_goto(l, data, state, prod, prod_start){
    debugger;
    '"--LEAF--"';
    'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '143:452 substitute_template=>template_head • expression template_spans [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
    pushFN( data, branch_d8597203556ce7e8 );
    pushFN( data, $expression );
    return data.rules_ptr;
    return ( prod ==141 )?prod :-1
}
function $no_substitute_template(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  `  ]';
    '142:450 no_substitute_template=>• τ` no_substitute_template_list_846 τ` [ τ` ]';
    '142:451 no_substitute_template=>• τ` τ` [ τ` ]';
    if( l.current_byte ==96 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ` nl ws sym num id f:s  ]';
    '142:450 no_substitute_template=>τ` • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
    '142:451 no_substitute_template=>τ` • τ` [ τ` ]';
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    if( l.current_byte ==96 ){
        pushFN( data, branch_b4b6b880f39839b6 );
        return branch_09a1f4d0e3f2987f( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_b4b6b880f39839b6 );
        return branch_b20bfe4ad6bbf549( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $substitute_template(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  `  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '143:452 substitute_template=>• template_head expression template_spans [ τ` ]';
    pushFN( data, branch_9635b8451c84e015 );
    pushFN( data, $template_head );
    return data.rules_ptr;
    return -1
}
function $template_spans(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  }  ]';
    '144:453 template_spans=>• template_tail [ τ} ]';
    '144:454 template_spans=>• template_middle_list template_tail [ τ} ]';
    if( l.current_byte ==125 ){
    'Number of end groups0 [    ]';
    'All symbols [  ` ${ nl ws sym num id f:s  ]';
    '144:453 template_spans=>• template_tail [ τ} ]';
    '144:454 template_spans=>• template_middle_list template_tail [ τ} ]';
    var pk = l.copyInPlace(  );
    skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==96 ){
        pushFN( data, branch_e64d3c2398b2214f );
        return branch_c01a50d6432dfac7( l, data, state, prod, prod_start )
    } else if( cmpr_set( pk, data, 47, 2, 2 ) ){
        pushFN( data, branch_e64d3c2398b2214f );
        return branch_4d72b3009d68f33d( l, data, state, prod, prod_start )
    } else {
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  }  ]';
        '148:461 template_tail=>• τ} no_substitute_template_list_846 τ` [ τ} ]';
        '147:459 template_middle=>• τ} no_substitute_template_list_846 τ${ [ τ} ]';
        'Number of end groups0 [    ]';
        'All symbols [  189  ]';
        '148:461 template_tail=>τ} • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
        '147:459 template_middle=>τ} • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
        skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
        pushFN( data, branch_b92e42924f1ff461 );
        pushFN( data, $no_substitute_template_list_846 );
        return data.rules_ptr
    }
};
    return -1
}
function $template_spans_goto(l, data, state, prod, prod_start){
    debugger;
    switch(prod){
    case 145: 
    {
        'Number of end groups0 [    ]';
        'All symbols [  }  ]';
        '144:454 template_spans=>template_middle_list • template_tail [ τ} ]';
        '145:456 template_middle_list=>template_middle_list • template_middle expression [ τ} ]';
        skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
        if( l.current_byte ==125 ){
            'Number of end groups0 [    ]';
            'All symbols [  ` ${ nl ws sym num id f:s  ]';
            '144:454 template_spans=>template_middle_list • template_tail [ τ} ]';
            '145:456 template_middle_list=>template_middle_list • template_middle expression [ τ} ]';
            var pk = l.copyInPlace(  );
            skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
            if( pk.current_byte ==96 ){
                pushFN( data, branch_e64d3c2398b2214f );
                return branch_8d0572ef7aa6fe88( l, data, state, prod, prod_start )
            } else if( cmpr_set( pk, data, 47, 2, 2 ) ){
                pushFN( data, branch_3ebb1e949e387b8a );
                return branch_93e448c9e39dda87( l, data, state, prod, prod_start )
            } else if( pk.current_byte ==92||pk.isUniID( data ) || pk.isNL(  ) || pk.isNum( data ) || pk.isSym( true, data ) || pk.isSP( true, data ) ){
                var fk1 = fork( data );
                pushFN( fk1, branch_052eaa6a4917f041 );
                pushFN( data, branch_7015094357d7a54c );
                return 0
            }
        };
        break
    }
    case 147: 
    {
        '"--LEAF--"';
        'Leaf [  yield async new ( super import this function class [ { / true false null " " ` 0X 0x 0O 0o 0B 0b _ $ id num delete void typeof + ~ ! - await ++ --  ]';
        '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
        '145:455 template_middle_list=>template_middle • expression [ τyield, τasync, τnew, τ(, τsuper, τimport, τthis, τfunction, τclass, τ[, τ{, τ/, τtrue, τfalse, τnull, τ", τ", τ`, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ_, τ$, θid, θnum, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τ++, τ-- ]';
        pushFN( data, branch_626e6371e5dca349 );
        pushFN( data, $expression );
        return data.rules_ptr;
        break
    }
    default: 
    break
};
    return ( prod ==144 )?prod :-1
}
function $template_middle_list(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  }  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '145:455 template_middle_list=>• template_middle expression [ τ} ]';
    pushFN( data, branch_750cb4418c31277c );
    pushFN( data, $template_middle );
    return data.rules_ptr;
    return -1
}
function $template_middle_list_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  }  ]';
    '145:456 template_middle_list=>template_middle_list • template_middle expression [ τ} ]';
    '144:454 template_spans=>template_middle_list • template_tail [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==125 ){
    'Number of end groups0 [    ]';
    'All symbols [  ${ nl ws sym num id f:s  ]';
    '145:456 template_middle_list=>template_middle_list • template_middle expression [ τ} ]';
    '144:454 template_spans=>template_middle_list • template_tail [ τ} ]';
    var pk = l.copyInPlace(  );
    skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( cmpr_set( pk, data, 47, 2, 2 ) ){
        pushFN( data, branch_bdfeae5517084a51 );
        return branch_93e448c9e39dda87( l, data, state, prod, prod_start )
    } else if( pk.current_byte ==92||pk.isUniID( data ) || pk.isNL(  ) || pk.isNum( data ) || pk.isSym( true, data ) || pk.isSP( true, data ) ){
        pushFN( data, branch_ac2b0882e2154493 );
        return 0
    }
};
    return ( prod ==145 )?prod :-1
}
function $template_head(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  `  ]';
    '146:457 template_head=>• τ` no_substitute_template_list_846 τ${ [ τ` ]';
    '146:458 template_head=>• τ` τ${ [ τ` ]';
    if( l.current_byte ==96 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ${ nl ws sym num id f:s  ]';
    '146:457 template_head=>τ` • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
    '146:458 template_head=>τ` • τ${ [ τ${ ]';
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    if( cmpr_set( l, data, 47, 2, 2 ) ){
        pushFN( data, branch_2b45eec226647759 );
        return branch_0a68333b2c4e0dc6( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_2b45eec226647759 );
        return branch_8e263e36bf2b7222( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $template_middle(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  }  ]';
    '147:459 template_middle=>• τ} no_substitute_template_list_846 τ${ [ τ} ]';
    '147:460 template_middle=>• τ} τ${ [ τ} ]';
    if( l.current_byte ==125 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ${ nl ws sym num id f:s  ]';
    '147:459 template_middle=>τ} • no_substitute_template_list_846 τ${ [ θnl, θws, θsym, θnum, θid, τf:s ]';
    '147:460 template_middle=>τ} • τ${ [ τ${ ]';
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    if( cmpr_set( l, data, 47, 2, 2 ) ){
        pushFN( data, branch_8d7b51229b716912 );
        return branch_82eae1e2d0a4d97a( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_8d7b51229b716912 );
        return branch_d133ee031fe22ca8( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $template_tail(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  }  ]';
    '148:461 template_tail=>• τ} no_substitute_template_list_846 τ` [ τ} ]';
    '148:462 template_tail=>• τ} τ` [ τ} ]';
    if( l.current_byte ==125 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  ` nl ws sym num id f:s  ]';
    '148:461 template_tail=>τ} • no_substitute_template_list_846 τ` [ θnl, θws, θsym, θnum, θid, τf:s ]';
    '148:462 template_tail=>τ} • τ` [ τ` ]';
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    if( l.current_byte ==96 ){
        pushFN( data, branch_f3973e73f32e5d52 );
        return branch_76e152f3addb5852( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_f3973e73f32e5d52 );
        return branch_88c440a9defb2c1e( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $template_string_data(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  f:s nl ws sym num id  ]';
    '149:463 template_string_data=>• θnl [ θnl ]';
    '149:464 template_string_data=>• θws [ θws ]';
    '149:465 template_string_data=>• θsym [ θsym ]';
    '149:466 template_string_data=>• θnum [ θnum ]';
    '149:467 template_string_data=>• θid [ θid ]';
    '149:468 template_string_data=>• template_escaped_sequence [ τf:s ]';
    switch(sym_map_46fce72672e9bb66( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  f:s  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '149:468 template_string_data=>• template_escaped_sequence [ τf:s ]';
        pushFN( data, branch_c8eb0e7687d64b47 );
        pushFN( data, $template_escaped_sequence );
        return data.rules_ptr
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  nl  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '149:463 template_string_data=>• θnl [ θnl ]';
        consume( l, data, state );
        return 149
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  ws  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '149:464 template_string_data=>• θws [ θws ]';
        consume( l, data, state );
        return 149
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  sym  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '149:465 template_string_data=>• θsym [ θsym ]';
        consume( l, data, state );
        return 149
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  num  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '149:466 template_string_data=>• θnum [ θnum ]';
        consume( l, data, state );
        return 149
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  id  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '149:467 template_string_data=>• θid [ θid ]';
        consume( l, data, state );
        return 149
    }
    default: 
    break
};
    return -1
}
function $template_escaped_sequence(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  f:s  ]';
    '150:469 template_escaped_sequence=>• τf:s θid [ τf:s ]';
    '150:470 template_escaped_sequence=>• τf:s θws [ τf:s ]';
    '150:471 template_escaped_sequence=>• τf:s θsym [ τf:s ]';
    '150:472 template_escaped_sequence=>• τf:s θnum [ τf:s ]';
    if( l.current_byte ==92 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  id ws sym num  ]';
    '150:469 template_escaped_sequence=>τf:s • θid [ θid ]';
    '150:470 template_escaped_sequence=>τf:s • θws [ θws ]';
    '150:471 template_escaped_sequence=>τf:s • θsym [ θsym ]';
    '150:472 template_escaped_sequence=>τf:s • θnum [ θnum ]';
    skip_1cde7ea7398d3d72( l/*[ nl ][ 2 ]*/, data, state );
    if( l.isUniID( data ) ){
        pushFN( data, branch_d8c8486e6a723863 );
        return branch_7f323c1e55dba215( l, data, state, prod, prod_start )
    } else if( l.isSP( true, data ) ){
        pushFN( data, branch_d8c8486e6a723863 );
        return branch_15fd5294795436e0( l, data, state, prod, prod_start )
    } else if( l.isSym( true, data ) ){
        pushFN( data, branch_d8c8486e6a723863 );
        return branch_64cc33e7d3cf639a( l, data, state, prod, prod_start )
    } else if( l.isNum( data ) ){
        pushFN( data, branch_d8c8486e6a723863 );
        return branch_eb26208817ad0d1d( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $regular_expression_literal(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  /  ]';
    '151:473 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ default_productions__js_identifier [ τ/ ]';
    '151:474 regular_expression_literal=>• τ/ τ/ default_productions__js_identifier [ τ/ ]';
    '151:475 regular_expression_literal=>• τ/ regular_expression_literal_list_884 τ/ [ τ/ ]';
    '151:476 regular_expression_literal=>• τ/ τ/ [ τ/ ]';
    if( l.current_byte ==47 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  / nl ws sym num id f:s  ]';
    '151:473 regular_expression_literal=>τ/ • regular_expression_literal_list_884 τ/ default_productions__js_identifier [ θnl, θws, θsym, θnum, θid, τf:s ]';
    '151:475 regular_expression_literal=>τ/ • regular_expression_literal_list_884 τ/ [ θnl, θws, θsym, θnum, θid, τf:s ]';
    '151:474 regular_expression_literal=>τ/ • τ/ default_productions__js_identifier [ τ/ ]';
    '151:476 regular_expression_literal=>τ/ • τ/ [ τ/ ]';
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    if( l.current_byte ==47 ){
        consume( l, data, state );
        '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
        'Number of end groups0 [    ]';
        'All symbols [  /  ]';
        '151:474 regular_expression_literal=>τ/ • τ/ default_productions__js_identifier [ τ/ ]';
        '151:476 regular_expression_literal=>τ/ • τ/ [ τ/ ]';
        'Number of end groups1 [    ]';
        'All symbols [  _ $ id ?. ( ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
        '151:474 regular_expression_literal=>τ/ τ/ • default_productions__js_identifier [ τ_, τ$, θid ]';
        '151:476 regular_expression_literal=>τ/ τ/ • [ τ?., τ(, τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
        skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
        if( l.current_byte ==95||l.current_byte  == 36 || l.isUniID( data ) ){
            pushFN( data, branch_fd678aaae08c31e0 );
            return branch_9ad6f28cf2c5f154( l, data, state, prod, prod_start )
        } else {
            '"--LEAF--"';
            'Leaf [  ?. ( ` . [ -- ++ *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= = of in ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , { END_OF_PRODUCTION  ]';
            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
            '151:476 regular_expression_literal=>τ/ τ/ • [ τ?., τ(, τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
            add_reduce( state, data, 2, 233 );
            return 151
        }
    } else {
        'Number of end groups0 [    ]';
        'All symbols [  190  ]';
        '151:473 regular_expression_literal=>τ/ • regular_expression_literal_list_884 τ/ default_productions__js_identifier [ θnl, θws, θsym, θnum, θid, τf:s ]';
        '151:475 regular_expression_literal=>τ/ • regular_expression_literal_list_884 τ/ [ θnl, θws, θsym, θnum, θid, τf:s ]';
        skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
        pushFN( data, branch_11fb4671d504444e );
        pushFN( data, $regular_expression_literal_list_884 );
        return data.rules_ptr
    }
};
    return -1
}
function $regular_expression_flags(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '152:477 regular_expression_flags=>• identifier_name [ τ_, τ$, θid ]';
    pushFN( data, branch_a49de0694d3119c0 );
    pushFN( data, $identifier_name );
    return data.rules_ptr;
    return -1
}
function $literal(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  true false null num 0X 0x 0O 0o 0B 0b " "  ]';
    '153:478 literal=>• boolean_literal [ τtrue, τfalse ]';
    '153:479 literal=>• null_literal [ τnull ]';
    '153:480 literal=>• string_literal [ τ", τ" ]';
    '153:481 literal=>• numeric_literal [ θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b ]';
    if( cmpr_set( l, data, 338, 4, 4 )||cmpr_set( l, data, 291, 5, 5 ) ){
    pushFN( data, branch_b1f705d9c88d1cac );
    return branch_b34347e7426a455a( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 158, 4, 4 ) ){
    pushFN( data, branch_b1f705d9c88d1cac );
    return branch_4c7fb96b085b92df( l, data, state, prod, prod_start )
} else if( dt_57f0cbc88859bc5b( l, data )||l.isNum( data ) ){
    pushFN( data, branch_b1f705d9c88d1cac );
    return branch_433e5b7a152965f2( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_b1f705d9c88d1cac );
    return branch_baab69c0f98fd2c5( l, data, state, prod, prod_start )
};
    return -1
}
function $string_literal(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  " "  ]';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    if( l.current_byte ==34 ){
    'Number of end groups0 [    ]';
    'All symbols [  " nl ws sym num id f:s  ]';
    '154:482 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:484 string_literal=>• τ" τ" [ τ" ]';
    var pk = l.copyInPlace(  );
    skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==34 ){
        pushFN( data, branch_e8488cef504bbb24 );
        return branch_46d20adffd98e352( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_e8488cef504bbb24 );
        return branch_9ab280e0ee87f798( l, data, state, prod, prod_start )
    }
} else if( l.current_byte ==39 ){
    'Number of end groups0 [    ]';
    'All symbols [  " nl ws sym num id f:s  ]';
    '154:483 string_literal=>• τ" regular_expression_literal_list_884 τ" [ τ" ]';
    '154:485 string_literal=>• τ" τ" [ τ" ]';
    var pk = l.copyInPlace(  );
    skip_7b7e2bf9d5b8ddf5( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==39 ){
        pushFN( data, branch_e8488cef504bbb24 );
        return branch_e57d9f545dfe61b0( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_e8488cef504bbb24 );
        return branch_75328a3811b8c78d( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $string_data(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  f:s nl ws sym num id  ]';
    '155:486 string_data=>• θnl [ θnl ]';
    '155:487 string_data=>• θws [ θws ]';
    '155:488 string_data=>• θsym [ θsym ]';
    '155:489 string_data=>• θnum [ θnum ]';
    '155:490 string_data=>• θid [ θid ]';
    '155:491 string_data=>• escaped_sequence [ τf:s ]';
    switch(sym_map_46fce72672e9bb66( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  f:s  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '155:491 string_data=>• escaped_sequence [ τf:s ]';
        pushFN( data, branch_3a9cf313492e2097 );
        pushFN( data, $escaped_sequence );
        return data.rules_ptr
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  nl  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '155:486 string_data=>• θnl [ θnl ]';
        consume( l, data, state );
        return 155
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  ws  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '155:487 string_data=>• θws [ θws ]';
        consume( l, data, state );
        return 155
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  sym  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '155:488 string_data=>• θsym [ θsym ]';
        consume( l, data, state );
        return 155
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  num  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '155:489 string_data=>• θnum [ θnum ]';
        consume( l, data, state );
        return 155
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  id  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '155:490 string_data=>• θid [ θid ]';
        consume( l, data, state );
        return 155
    }
    default: 
    break
};
    return -1
}
function $escaped_sequence(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  f:s  ]';
    '156:492 escaped_sequence=>• τf:s θid [ τf:s ]';
    '156:493 escaped_sequence=>• τf:s θnl [ τf:s ]';
    '156:494 escaped_sequence=>• τf:s θws [ τf:s ]';
    '156:495 escaped_sequence=>• τf:s θsym [ τf:s ]';
    '156:496 escaped_sequence=>• τf:s θnum [ τf:s ]';
    if( l.current_byte ==92 ){
    consume( l, data, state );
    'Number of end groups0 [    ]';
    'All symbols [  id nl ws sym num  ]';
    '156:492 escaped_sequence=>τf:s • θid [ θid ]';
    '156:493 escaped_sequence=>τf:s • θnl [ θnl ]';
    '156:494 escaped_sequence=>τf:s • θws [ θws ]';
    '156:495 escaped_sequence=>τf:s • θsym [ θsym ]';
    '156:496 escaped_sequence=>τf:s • θnum [ θnum ]';
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    switch(sym_map_57d68da3d3a530d9( l, data )){
        case 0: 
        {
            '"--LEAF--"';
            'Leaf [  id  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '156:492 escaped_sequence=>τf:s • θid [ θid ]';
            consume( l, data, state );
            add_reduce( state, data, 2, 229 );
            return 156
        }
        case 1: 
        {
            '"--LEAF--"';
            'Leaf [  nl  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '156:493 escaped_sequence=>τf:s • θnl [ θnl ]';
            consume( l, data, state );
            add_reduce( state, data, 2, 229 );
            return 156
        }
        case 2: 
        {
            '"--LEAF--"';
            'Leaf [  ws  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '156:494 escaped_sequence=>τf:s • θws [ θws ]';
            consume( l, data, state );
            add_reduce( state, data, 2, 229 );
            return 156
        }
        case 3: 
        {
            '"--LEAF--"';
            'Leaf [  sym  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '156:495 escaped_sequence=>τf:s • θsym [ θsym ]';
            consume( l, data, state );
            add_reduce( state, data, 2, 229 );
            return 156
        }
        case 4: 
        {
            '"--LEAF--"';
            'Leaf [  num  ]';
            '"⤋⤋⤋  assert ⤋⤋⤋"';
            '156:496 escaped_sequence=>τf:s • θnum [ θnum ]';
            consume( l, data, state );
            add_reduce( state, data, 2, 229 );
            return 156
        }
        default: 
        break
    }
};
    return -1
}
function $numeric_literal(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  0X 0x 0O 0o 0B 0b num  ]';
    '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
    '157:499 numeric_literal=>• hex_token [ τ0X, τ0x ]';
    '157:500 numeric_literal=>• octal_token [ τ0O, τ0o ]';
    '157:501 numeric_literal=>• binary_token [ τ0B, τ0b ]';
    if( dt_079864b6b16d53c7( l, data ) ){
    pushFN( data, branch_295030f79af61f61 );
    return branch_22aecdb99afef6f1( l, data, state, prod, prod_start )
} else if( dt_0c2a044f5eb76df6( l, data ) ){
    pushFN( data, branch_295030f79af61f61 );
    return branch_a9b5812eb5387c1d( l, data, state, prod, prod_start )
} else if( dt_800fc4a73eb55041( l, data ) ){
    pushFN( data, branch_295030f79af61f61 );
    return branch_b2c11d9fd00da96a( l, data, state, prod, prod_start )
} else {
    pushFN( data, branch_da6445717b572904 );
    return branch_dfb62cae764add69( l, data, state, prod, prod_start )
};
    return -1
}
function $numeric_literal_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 160: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  E e ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_e32b08cd3c718e6b( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e  ]';
                        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
                        '159:503 scientific_token=>float_token • scientific_token_group_923_0_ [ τE, τe ]';
                        pushFN( data, branch_de3aafe2070e3d43 );
                        pushFN( data, $scientific_token_group_923_0_ );
                        return data.rules_ptr
                    }
                    default:
                    case 1: 
                    {
                        '"--LEAF--"';
                        'Leaf [  ( [ . ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '159:504 scientific_token=>float_token • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
                        add_reduce( state, data, 1, 238 );
                        add_reduce( state, data, 1, 236 );
                        return 157
                    }
                };
                break
            }
            case 161: 
            {
                'Number of end groups1 [    ]';
                'All symbols [  n . E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
                '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                '158:502 big_token=>int_token • τn [ τn ]';
                skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
                switch(sym_map_a1c731d03900f749( l, data )){
                    case 0: 
                    {
                        '"--LEAF--"';
                        'Leaf [  n  ]';
                        '"⤋⤋⤋  assert ⤋⤋⤋"';
                        '158:502 big_token=>int_token • τn [ τn ]';
                        consume( l, data, state );
                        add_reduce( state, data, 2, 238 );
                        add_reduce( state, data, 1, 237 );
                        pushFN( data, $numeric_literal_goto );
                        return 157
                    }
                    case 1: 
                    {
                        'Number of end groups1 [    ]';
                        'All symbols [  num _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                        '160:505 float_token=>int_token • float_token_group_927_0_ [ τ. ]';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        var pk = l.copyInPlace(  );
                        skip_1f62e9e1065e9d92( pk.next( data ), data, STATE_ALLOW_SKIP );
                        if( pk.isNum( data ) ){
                            pushFN( data, branch_a6facce7938f2ca1 );
                            return branch_731d73028155c3d7( l, data, state, prod, prod_start )
                        } else {
                            '"--LEAF--"';
                            'Leaf [  _ $ id E e ; ] , = *= ) /= ( } : ?. %= += { [ . ` -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= nl ++ -- ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? END_OF_FILE of END_OF_PRODUCTION  ]';
                            '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                            '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                            add_reduce( state, data, 1, 238 );
                            prod = 160;
                            continue
                        }
                    }
                    default:
                    case 2: 
                    {
                        '"--LEAF--"';
                        'Leaf [  E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , . END_OF_PRODUCTION  ]';
                        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
                        '160:506 float_token=>int_token • [ τE, τe, τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
                        add_reduce( state, data, 1, 238 );
                        prod = 160;
                        continue
                    }
                };
                break
            }
        };
        break
    };
    return ( prod ==157 )?prod :-1
}
function $big_token(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  num  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '158:502 big_token=>• int_token τn [ θnum ]';
    pushFN( data, branch_269bb466b53d4bd0 );
    pushFN( data, $int_token );
    return data.rules_ptr;
    return -1
}
function $scientific_token(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  160  ]';
    '159:503 scientific_token=>• float_token scientific_token_group_923_0_ [ θnum ]';
    '159:504 scientific_token=>• float_token [ θnum ]';
    pushFN( data, branch_ee57f7cf916526c7 );
    pushFN( data, $float_token );
    return data.rules_ptr;
    return -1
}
function $float_token(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  161  ]';
    '160:505 float_token=>• int_token float_token_group_927_0_ [ θnum ]';
    '160:506 float_token=>• int_token [ θnum ]';
    pushFN( data, branch_db79e982b7f4c04c );
    pushFN( data, $int_token );
    return data.rules_ptr;
    return -1
}
function $int_token(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  num  ]';
    '161:507 int_token=>• θnum int_token_list_931 [ θnum ]';
    '161:508 int_token=>• θnum [ θnum ]';
    if( l.isNum( data ) ){
    consume( l, data, state );
    'Number of end groups1 [    ]';
    'All symbols [  _ . n E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
    '161:507 int_token=>θnum • int_token_list_931 [ τ_ ]';
    '161:508 int_token=>θnum • [ τ., τn, τE, τe, τ(, τ[, τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.current_byte ==95 ){
        pushFN( data, branch_b7320cfec757ef4b );
        return branch_a8046a91022d80e0( l, data, state, prod, prod_start )
    } else {
        '"--LEAF--"';
        'Leaf [  . n E e ( [ ` ?. in of = *= /= %= += -= <<= >>= >>>= &= ^= |= **= ?? &&= ||= ++ -- { ** % / * + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; } nl END_OF_FILE , END_OF_PRODUCTION  ]';
        '"⤋⤋⤋  assert-end ⤋⤋⤋"';
        '161:508 int_token=>θnum • [ τ., τn, τE, τe, τ(, τ[, τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
        add_reduce( state, data, 1, 238 );
        return 161
    }
};
    return -1
}
function $hex_token(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  0X 0x  ]';
    '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
    '162:511 hex_token=>• τ0X hex_token_list_934 [ τ0X ]';
    '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
    '162:512 hex_token=>• τ0x hex_token_list_934 [ τ0x ]';
    if( cmpr_set( l, data, 52, 2, 2 ) ){
    consume( l, data, state );
    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
    'Number of end groups0 [    ]';
    'All symbols [  0X  ]';
    '162:509 hex_token=>• τ0X hex_token_list_934 hex_token_list_935 [ τ0X ]';
    '162:511 hex_token=>• τ0X hex_token_list_934 [ τ0X ]';
    'Number of end groups0 [    ]';
    'All symbols [  194  ]';
    '162:509 hex_token=>τ0X • hex_token_list_934 hex_token_list_935 [ τF, θnum, τa, τb, τc, τd, τe, τf, τA, τB, τC, τD, τE ]';
    '162:511 hex_token=>τ0X • hex_token_list_934 [ τF, θnum, τa, τb, τc, τd, τe, τf, τA, τB, τC, τD, τE ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_cf9b0749c3f6f3d9 );
    pushFN( data, $hex_token_list_934 );
    return data.rules_ptr
} else if( cmpr_set( l, data, 194, 2, 2 ) ){
    consume( l, data, state );
    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
    'Number of end groups0 [    ]';
    'All symbols [  0x  ]';
    '162:510 hex_token=>• τ0x hex_token_list_934 hex_token_list_935 [ τ0x ]';
    '162:512 hex_token=>• τ0x hex_token_list_934 [ τ0x ]';
    'Number of end groups0 [    ]';
    'All symbols [  194  ]';
    '162:510 hex_token=>τ0x • hex_token_list_934 hex_token_list_935 [ τF, θnum, τa, τb, τc, τd, τe, τf, τA, τB, τC, τD, τE ]';
    '162:512 hex_token=>τ0x • hex_token_list_934 [ τF, θnum, τa, τb, τc, τd, τe, τf, τA, τB, τC, τD, τE ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_cc4c5e6cbe6eece6 );
    pushFN( data, $hex_token_list_934 );
    return data.rules_ptr
};
    return -1
}
function $binary_token(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  0B 0b  ]';
    '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
    '163:515 binary_token=>• τ0B binary_token_list_941 [ τ0B ]';
    '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
    '163:516 binary_token=>• τ0b binary_token_list_941 [ τ0b ]';
    if( cmpr_set( l, data, 267, 2, 2 ) ){
    consume( l, data, state );
    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
    'Number of end groups0 [    ]';
    'All symbols [  0B  ]';
    '163:513 binary_token=>• τ0B binary_token_list_941 binary_token_list_942 [ τ0B ]';
    '163:515 binary_token=>• τ0B binary_token_list_941 [ τ0B ]';
    'Number of end groups0 [    ]';
    'All symbols [  196  ]';
    '163:513 binary_token=>τ0B • binary_token_list_941 binary_token_list_942 [ τ1, τ0 ]';
    '163:515 binary_token=>τ0B • binary_token_list_941 [ τ1, τ0 ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_c1aef156f51daecd );
    pushFN( data, $binary_token_list_941 );
    return data.rules_ptr
} else if( cmpr_set( l, data, 269, 2, 2 ) ){
    consume( l, data, state );
    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
    'Number of end groups0 [    ]';
    'All symbols [  0b  ]';
    '163:514 binary_token=>• τ0b binary_token_list_941 binary_token_list_942 [ τ0b ]';
    '163:516 binary_token=>• τ0b binary_token_list_941 [ τ0b ]';
    'Number of end groups0 [    ]';
    'All symbols [  196  ]';
    '163:514 binary_token=>τ0b • binary_token_list_941 binary_token_list_942 [ τ1, τ0 ]';
    '163:516 binary_token=>τ0b • binary_token_list_941 [ τ1, τ0 ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_e0296abd228620e4 );
    pushFN( data, $binary_token_list_941 );
    return data.rules_ptr
};
    return -1
}
function $octal_token(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  0O 0o  ]';
    '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
    '164:519 octal_token=>• τ0O octal_token_list_948 [ τ0O ]';
    '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
    '164:520 octal_token=>• τ0o octal_token_list_948 [ τ0o ]';
    if( cmpr_set( l, data, 271, 2, 2 ) ){
    consume( l, data, state );
    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
    'Number of end groups0 [    ]';
    'All symbols [  0O  ]';
    '164:517 octal_token=>• τ0O octal_token_list_948 octal_token_list_949 [ τ0O ]';
    '164:519 octal_token=>• τ0O octal_token_list_948 [ τ0O ]';
    'Number of end groups0 [    ]';
    'All symbols [  198  ]';
    '164:517 octal_token=>τ0O • octal_token_list_948 octal_token_list_949 [ τ7, τ0, τ1, τ2, τ3, τ4, τ5, τ6 ]';
    '164:519 octal_token=>τ0O • octal_token_list_948 [ τ7, τ0, τ1, τ2, τ3, τ4, τ5, τ6 ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_22a56d8742a7d504 );
    pushFN( data, $octal_token_list_948 );
    return data.rules_ptr
} else if( cmpr_set( l, data, 273, 2, 2 ) ){
    consume( l, data, state );
    '"⤋⤋⤋  post-peek-consume ⤋⤋⤋"';
    'Number of end groups0 [    ]';
    'All symbols [  0o  ]';
    '164:518 octal_token=>• τ0o octal_token_list_948 octal_token_list_949 [ τ0o ]';
    '164:520 octal_token=>• τ0o octal_token_list_948 [ τ0o ]';
    'Number of end groups0 [    ]';
    'All symbols [  198  ]';
    '164:518 octal_token=>τ0o • octal_token_list_948 octal_token_list_949 [ τ7, τ0, τ1, τ2, τ3, τ4, τ5, τ6 ]';
    '164:520 octal_token=>τ0o • octal_token_list_948 [ τ7, τ0, τ1, τ2, τ3, τ4, τ5, τ6 ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d8bc879323c7c818 );
    pushFN( data, $octal_token_list_948 );
    return data.rules_ptr
};
    return -1
}
function $null_literal(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  null  ]';
    '165:521 null_literal=>• τnull [ τnull ]';
    if( cmpr_set( l, data, 158, 4, 4 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  null  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '165:521 null_literal=>τnull • [ τ(, τ[, τ., τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
    add_reduce( state, data, 1, 240 );
    return 165
};
    return -1
}
function $boolean_literal(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  true false  ]';
    '166:522 boolean_literal=>• τtrue [ τtrue ]';
    '166:523 boolean_literal=>• τfalse [ τfalse ]';
    if( cmpr_set( l, data, 338, 4, 4 ) ){
    pushFN( data, branch_ac9eb1d2daf65a92 );
    return branch_f9f5b011e0795f63( l, data, state, prod, prod_start )
} else if( cmpr_set( l, data, 291, 5, 5 ) ){
    pushFN( data, branch_ac9eb1d2daf65a92 );
    return branch_45d066fe5afcbb4f( l, data, state, prod, prod_start )
};
    return -1
}
function $label_identifier(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '167:524 label_identifier=>• identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_4b23a64b954a4cc5 );
    pushFN( data, $identifier );
    return data.rules_ptr;
    return -1
}
function $identifier_reference(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '168:525 identifier_reference=>• identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_25f7d64d730241c9 );
    pushFN( data, $identifier );
    return data.rules_ptr;
    return -1
}
function $binding_identifier(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '169:526 binding_identifier=>• identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_9280a5a636656b95 );
    pushFN( data, $identifier );
    return data.rules_ptr;
    return -1
}
function $identifier(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '170:527 identifier=>• composite_identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_72e3aa722c716a6e );
    pushFN( data, $composite_identifier );
    return data.rules_ptr;
    return -1
}
function $identifier_name(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '171:528 identifier_name=>• composite_identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_a558fd05dc7ef55c );
    pushFN( data, $composite_identifier );
    return data.rules_ptr;
    return -1
}
function $unreserved_word(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  async get set target as from  ]';
    '172:529 unreserved_word=>• τasync [ τasync ]';
    '172:530 unreserved_word=>• τget [ τget ]';
    '172:531 unreserved_word=>• τset [ τset ]';
    '172:532 unreserved_word=>• τtarget [ τtarget ]';
    '172:533 unreserved_word=>• τas [ τas ]';
    '172:534 unreserved_word=>• τfrom [ τfrom ]';
    switch(sym_map_7ffdb0cf873b6bdc( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  async  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '172:529 unreserved_word=>• τasync [ τasync ]';
        consume( l, data, state );
        return 172
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  get  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '172:530 unreserved_word=>• τget [ τget ]';
        consume( l, data, state );
        return 172
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  set  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '172:531 unreserved_word=>• τset [ τset ]';
        consume( l, data, state );
        return 172
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  target  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '172:532 unreserved_word=>• τtarget [ τtarget ]';
        consume( l, data, state );
        return 172
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  as  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '172:533 unreserved_word=>• τas [ τas ]';
        consume( l, data, state );
        return 172
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  from  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '172:534 unreserved_word=>• τfrom [ τfrom ]';
        consume( l, data, state );
        return 172
    }
    default: 
    break
};
    return -1
}
function $reserved_word(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false  ]';
    '173:535 reserved_word=>• keyword [ τawait, τbreak, τcase, τcatch, τclass, τconst, τcontinue, τdebugger, τdefault, τdelete, τdo, τelse, τexport, τextends, τfinally, τfor, τfunction, τif, τimport, τin, τinstanceof, τnew, τreturn, τsuper, τswitch, τthis, τthrow, τtry, τtypeof, τvar, τvoid, τwhile, τwith, τyield ]';
    '173:536 reserved_word=>• future_reserved_word [ τimplements, τpackage, τprotected, τinterface, τprivate, τpublic ]';
    '173:537 reserved_word=>• τnull [ τnull ]';
    '173:538 reserved_word=>• τtrue [ τtrue ]';
    '173:539 reserved_word=>• τfalse [ τfalse ]';
    switch(sym_map_35da195bc8b4998a( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '173:535 reserved_word=>• keyword [ τawait, τbreak, τcase, τcatch, τclass, τconst, τcontinue, τdebugger, τdefault, τdelete, τdo, τelse, τexport, τextends, τfinally, τfor, τfunction, τif, τimport, τin, τinstanceof, τnew, τreturn, τsuper, τswitch, τthis, τthrow, τtry, τtypeof, τvar, τvoid, τwhile, τwith, τyield ]';
        pushFN( data, branch_75d42f646d5c699b );
        pushFN( data, $keyword );
        return data.rules_ptr
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  implements package protected interface private public  ]';
        '"⤋⤋⤋  peek-production-symbols ⤋⤋⤋"';
        '173:536 reserved_word=>• future_reserved_word [ τimplements, τpackage, τprotected, τinterface, τprivate, τpublic ]';
        pushFN( data, branch_75d42f646d5c699b );
        pushFN( data, $future_reserved_word );
        return data.rules_ptr
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  null  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '173:537 reserved_word=>• τnull [ τnull ]';
        consume( l, data, state );
        return 173
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  true  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '173:538 reserved_word=>• τtrue [ τtrue ]';
        consume( l, data, state );
        return 173
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  false  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '173:539 reserved_word=>• τfalse [ τfalse ]';
        consume( l, data, state );
        return 173
    }
    default: 
    break
};
    return -1
}
function $future_reserved_word(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  implements package protected interface private public  ]';
    '174:540 future_reserved_word=>• τimplements [ τimplements ]';
    '174:541 future_reserved_word=>• τpackage [ τpackage ]';
    '174:542 future_reserved_word=>• τprotected [ τprotected ]';
    '174:543 future_reserved_word=>• τinterface [ τinterface ]';
    '174:544 future_reserved_word=>• τprivate [ τprivate ]';
    '174:545 future_reserved_word=>• τpublic [ τpublic ]';
    switch(sym_map_5c1af5aa86972747( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  implements  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '174:540 future_reserved_word=>• τimplements [ τimplements ]';
        consume( l, data, state );
        return 174
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  package  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '174:541 future_reserved_word=>• τpackage [ τpackage ]';
        consume( l, data, state );
        return 174
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  protected  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '174:542 future_reserved_word=>• τprotected [ τprotected ]';
        consume( l, data, state );
        return 174
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  interface  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '174:543 future_reserved_word=>• τinterface [ τinterface ]';
        consume( l, data, state );
        return 174
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  private  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '174:544 future_reserved_word=>• τprivate [ τprivate ]';
        consume( l, data, state );
        return 174
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  public  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '174:545 future_reserved_word=>• τpublic [ τpublic ]';
        consume( l, data, state );
        return 174
    }
    default: 
    break
};
    return -1
}
function $composite_identifier(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '175:546 composite_identifier=>• default_productions__js_identifier [ τ_, τ$, θid ]';
    pushFN( data, branch_453f5411abf145eb );
    pushFN( data, $default_productions__js_identifier );
    return data.rules_ptr;
    return -1
}
function $keyword(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield  ]';
    '176:547 keyword=>• τawait [ τawait ]';
    '176:548 keyword=>• τbreak [ τbreak ]';
    '176:549 keyword=>• τcase [ τcase ]';
    '176:550 keyword=>• τcatch [ τcatch ]';
    '176:551 keyword=>• τclass [ τclass ]';
    '176:552 keyword=>• τconst [ τconst ]';
    '176:553 keyword=>• τcontinue [ τcontinue ]';
    '176:554 keyword=>• τdebugger [ τdebugger ]';
    '176:555 keyword=>• τdefault [ τdefault ]';
    '176:556 keyword=>• τdelete [ τdelete ]';
    '176:557 keyword=>• τdo [ τdo ]';
    '176:558 keyword=>• τelse [ τelse ]';
    '176:559 keyword=>• τexport [ τexport ]';
    '176:560 keyword=>• τextends [ τextends ]';
    '176:561 keyword=>• τfinally [ τfinally ]';
    '176:562 keyword=>• τfor [ τfor ]';
    '176:563 keyword=>• τfunction [ τfunction ]';
    '176:564 keyword=>• τif [ τif ]';
    '176:565 keyword=>• τimport [ τimport ]';
    '176:566 keyword=>• τin [ τin ]';
    '176:567 keyword=>• τinstanceof [ τinstanceof ]';
    '176:568 keyword=>• τnew [ τnew ]';
    '176:569 keyword=>• τreturn [ τreturn ]';
    '176:570 keyword=>• τsuper [ τsuper ]';
    '176:571 keyword=>• τswitch [ τswitch ]';
    '176:572 keyword=>• τthis [ τthis ]';
    '176:573 keyword=>• τthrow [ τthrow ]';
    '176:574 keyword=>• τtry [ τtry ]';
    '176:575 keyword=>• τtypeof [ τtypeof ]';
    '176:576 keyword=>• τvar [ τvar ]';
    '176:577 keyword=>• τvoid [ τvoid ]';
    '176:578 keyword=>• τwhile [ τwhile ]';
    '176:579 keyword=>• τwith [ τwith ]';
    '176:580 keyword=>• τyield [ τyield ]';
    switch(sym_map_3d61c0356166b0df( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  await  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:547 keyword=>• τawait [ τawait ]';
        consume( l, data, state );
        return 176
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  break  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:548 keyword=>• τbreak [ τbreak ]';
        consume( l, data, state );
        return 176
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  case  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:549 keyword=>• τcase [ τcase ]';
        consume( l, data, state );
        return 176
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  catch  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:550 keyword=>• τcatch [ τcatch ]';
        consume( l, data, state );
        return 176
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  class  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:551 keyword=>• τclass [ τclass ]';
        consume( l, data, state );
        return 176
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  const  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:552 keyword=>• τconst [ τconst ]';
        consume( l, data, state );
        return 176
    }
    case 6: 
    {
        '"--LEAF--"';
        'Leaf [  continue  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:553 keyword=>• τcontinue [ τcontinue ]';
        consume( l, data, state );
        return 176
    }
    case 7: 
    {
        '"--LEAF--"';
        'Leaf [  debugger  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:554 keyword=>• τdebugger [ τdebugger ]';
        consume( l, data, state );
        return 176
    }
    case 8: 
    {
        '"--LEAF--"';
        'Leaf [  default  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:555 keyword=>• τdefault [ τdefault ]';
        consume( l, data, state );
        return 176
    }
    case 9: 
    {
        '"--LEAF--"';
        'Leaf [  delete  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:556 keyword=>• τdelete [ τdelete ]';
        consume( l, data, state );
        return 176
    }
    case 10: 
    {
        '"--LEAF--"';
        'Leaf [  do  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:557 keyword=>• τdo [ τdo ]';
        consume( l, data, state );
        return 176
    }
    case 11: 
    {
        '"--LEAF--"';
        'Leaf [  else  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:558 keyword=>• τelse [ τelse ]';
        consume( l, data, state );
        return 176
    }
    case 12: 
    {
        '"--LEAF--"';
        'Leaf [  export  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:559 keyword=>• τexport [ τexport ]';
        consume( l, data, state );
        return 176
    }
    case 13: 
    {
        '"--LEAF--"';
        'Leaf [  extends  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:560 keyword=>• τextends [ τextends ]';
        consume( l, data, state );
        return 176
    }
    case 14: 
    {
        '"--LEAF--"';
        'Leaf [  finally  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:561 keyword=>• τfinally [ τfinally ]';
        consume( l, data, state );
        return 176
    }
    case 15: 
    {
        '"--LEAF--"';
        'Leaf [  for  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:562 keyword=>• τfor [ τfor ]';
        consume( l, data, state );
        return 176
    }
    case 16: 
    {
        '"--LEAF--"';
        'Leaf [  function  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:563 keyword=>• τfunction [ τfunction ]';
        consume( l, data, state );
        return 176
    }
    case 17: 
    {
        '"--LEAF--"';
        'Leaf [  if  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:564 keyword=>• τif [ τif ]';
        consume( l, data, state );
        return 176
    }
    case 18: 
    {
        '"--LEAF--"';
        'Leaf [  import  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:565 keyword=>• τimport [ τimport ]';
        consume( l, data, state );
        return 176
    }
    case 19: 
    {
        '"--LEAF--"';
        'Leaf [  in  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:566 keyword=>• τin [ τin ]';
        consume( l, data, state );
        return 176
    }
    case 20: 
    {
        '"--LEAF--"';
        'Leaf [  instanceof  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:567 keyword=>• τinstanceof [ τinstanceof ]';
        consume( l, data, state );
        return 176
    }
    case 21: 
    {
        '"--LEAF--"';
        'Leaf [  new  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:568 keyword=>• τnew [ τnew ]';
        consume( l, data, state );
        return 176
    }
    case 22: 
    {
        '"--LEAF--"';
        'Leaf [  return  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:569 keyword=>• τreturn [ τreturn ]';
        consume( l, data, state );
        return 176
    }
    case 23: 
    {
        '"--LEAF--"';
        'Leaf [  super  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:570 keyword=>• τsuper [ τsuper ]';
        consume( l, data, state );
        return 176
    }
    case 24: 
    {
        '"--LEAF--"';
        'Leaf [  switch  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:571 keyword=>• τswitch [ τswitch ]';
        consume( l, data, state );
        return 176
    }
    case 25: 
    {
        '"--LEAF--"';
        'Leaf [  this  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:572 keyword=>• τthis [ τthis ]';
        consume( l, data, state );
        return 176
    }
    case 26: 
    {
        '"--LEAF--"';
        'Leaf [  throw  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:573 keyword=>• τthrow [ τthrow ]';
        consume( l, data, state );
        return 176
    }
    case 27: 
    {
        '"--LEAF--"';
        'Leaf [  try  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:574 keyword=>• τtry [ τtry ]';
        consume( l, data, state );
        return 176
    }
    case 28: 
    {
        '"--LEAF--"';
        'Leaf [  typeof  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:575 keyword=>• τtypeof [ τtypeof ]';
        consume( l, data, state );
        return 176
    }
    case 29: 
    {
        '"--LEAF--"';
        'Leaf [  var  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:576 keyword=>• τvar [ τvar ]';
        consume( l, data, state );
        return 176
    }
    case 30: 
    {
        '"--LEAF--"';
        'Leaf [  void  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:577 keyword=>• τvoid [ τvoid ]';
        consume( l, data, state );
        return 176
    }
    case 31: 
    {
        '"--LEAF--"';
        'Leaf [  while  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:578 keyword=>• τwhile [ τwhile ]';
        consume( l, data, state );
        return 176
    }
    case 32: 
    {
        '"--LEAF--"';
        'Leaf [  with  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:579 keyword=>• τwith [ τwith ]';
        consume( l, data, state );
        return 176
    }
    case 33: 
    {
        '"--LEAF--"';
        'Leaf [  yield  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '176:580 keyword=>• τyield [ τyield ]';
        consume( l, data, state );
        return 176
    }
    default: 
    break
};
    return -1
}
function $default_productions__js_identifier(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '177:581 default_productions__js_identifier=>• tk:default_productions__js_id_symbols [ τ_, τ$, θid ]';
    pushFN( data, branch_703be17e438505d7 );
    pushFN( data, $default_productions__js_id_symbols );
    return data.rules_ptr;
    return -1
}
function $default_productions__js_id_symbols(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id  ]';
    '178:586 default_productions__js_id_symbols=>• τ_ [ τ_ ]';
    '178:587 default_productions__js_id_symbols=>• τ$ [ τ$ ]';
    '178:588 default_productions__js_id_symbols=>• θid [ θid ]';
    if( l.current_byte ==95 ){
    pushFN( data, branch_5b0c24a93253c6d8 );
    return branch_6299185c66def7f5( l, data, state, prod, prod_start )
} else if( l.current_byte ==36 ){
    pushFN( data, branch_5b0c24a93253c6d8 );
    return branch_3d73bb9836dd8b1d( l, data, state, prod, prod_start )
} else if( l.isUniID( data ) ){
    pushFN( data, branch_5b0c24a93253c6d8 );
    return branch_914a73b11429048c( l, data, state, prod, prod_start )
};
    return -1
}
function $default_productions__js_id_symbols_goto(l, data, state, prod, prod_start){
    debugger;
    while( 1 ) {
        switch(prod){
            case 178: 
            {
                'Number of end groups0 [    ]';
                'All symbols [  _ $ id num  ]';
                '178:582 default_productions__js_id_symbols=>default_productions__js_id_symbols • θid [ θid ]';
                '178:583 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ_ [ τ_ ]';
                '178:584 default_productions__js_id_symbols=>default_productions__js_id_symbols • τ$ [ τ$ ]';
                '178:585 default_productions__js_id_symbols=>default_productions__js_id_symbols • θnum [ θnum ]';
                '177:581 default_productions__js_identifier=>tk:default_productions__js_id_symbols • [ τas, τ=, τ(, τextends, τ{, τof, τin, τ), τ,, τ;, τ}-ns, θnl, END_OF_FILE, τ], τ}, τ=>, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ:, τfrom ]';
                skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
                if( l.isNL(  ) ){
                    return 178
                };
                if( l.current_byte ==95 ){
                    pushFN( data, branch_5b0c24a93253c6d8 );
                    return branch_9c6307d985ea8939( l, data, state, prod, prod_start )
                } else if( l.current_byte ==36 ){
                    pushFN( data, branch_5b0c24a93253c6d8 );
                    return branch_7b1c3dcb8b482d3a( l, data, state, prod, prod_start )
                } else if( l.isUniID( data ) ){
                    pushFN( data, branch_5b0c24a93253c6d8 );
                    return branch_a35869bc5e963faa( l, data, state, prod, prod_start )
                } else if( l.isNum( data ) ){
                    pushFN( data, branch_5b0c24a93253c6d8 );
                    return branch_5045bde9fb59e239( l, data, state, prod, prod_start )
                }
            }
        };
        break
    };
    return ( prod ==178 )?prod :-1
}
function $comments_list_3(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  sym ws nl id num  ]';
    '179:589 comments_list_3=>• θsym [ θsym ]';
    '179:591 comments_list_3=>• θws [ θws ]';
    '179:592 comments_list_3=>• θnl [ θnl ]';
    '179:593 comments_list_3=>• θid [ θid ]';
    '179:594 comments_list_3=>• θnum [ θnum ]';
    switch(sym_map_00033127db5a7bf0( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  sym  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '179:589 comments_list_3=>• θsym [ θsym ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 3 );
        pushFN( data, $comments_list_3_goto );
        return 179
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  ws  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '179:591 comments_list_3=>• θws [ θws ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 3 );
        pushFN( data, $comments_list_3_goto );
        return 179
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  nl  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '179:592 comments_list_3=>• θnl [ θnl ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 3 );
        pushFN( data, $comments_list_3_goto );
        return 179
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  id  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '179:593 comments_list_3=>• θid [ θid ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 3 );
        pushFN( data, $comments_list_3_goto );
        return 179
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  num  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '179:594 comments_list_3=>• θnum [ θnum ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 3 );
        pushFN( data, $comments_list_3_goto );
        return 179
    }
    default: 
    break
};
    return -1
}
function $comments_list_3_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  sym ws nl id num  ]';
    '179:590 comments_list_3=>comments_list_3 • θsym [ θsym ]';
    '179:595 comments_list_3=>comments_list_3 • θws [ θws ]';
    '179:596 comments_list_3=>comments_list_3 • θnl [ θnl ]';
    '179:597 comments_list_3=>comments_list_3 • θid [ θid ]';
    '179:598 comments_list_3=>comments_list_3 • θnum [ θnum ]';
    '2:2 comments=>τ/* comments_list_3 • τ*/ [ τ*/ ]';
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    if( cmpr_set( l, data, 186, 2, 2 ) ){
    return 179
};
    switch(sym_map_00033127db5a7bf0( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  sym  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '179:590 comments_list_3=>comments_list_3 • θsym [ θsym ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 4 );
        pushFN( data, $comments_list_3_goto );
        return 179
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  ws  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '179:595 comments_list_3=>comments_list_3 • θws [ θws ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 4 );
        pushFN( data, $comments_list_3_goto );
        return 179
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  nl  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '179:596 comments_list_3=>comments_list_3 • θnl [ θnl ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 4 );
        pushFN( data, $comments_list_3_goto );
        return 179
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  id  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '179:597 comments_list_3=>comments_list_3 • θid [ θid ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 4 );
        pushFN( data, $comments_list_3_goto );
        return 179
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  num  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '179:598 comments_list_3=>comments_list_3 • θnum [ θnum ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 4 );
        pushFN( data, $comments_list_3_goto );
        return 179
    }
    default: 
    break
};
    return ( prod ==179 )?prod :-1
}
function $comments_list_6(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  sym ws id num  ]';
    '180:599 comments_list_6=>• θsym [ θsym ]';
    '180:601 comments_list_6=>• θws [ θws ]';
    '180:602 comments_list_6=>• θid [ θid ]';
    '180:603 comments_list_6=>• θnum [ θnum ]';
    if( l.isSym( true, data ) ){
    pushFN( data, branch_6cf41a4b641163cc );
    return branch_1b9a0aedb94a4b3c( l, data, state, prod, prod_start )
} else if( l.isSP( true, data ) ){
    pushFN( data, branch_6cf41a4b641163cc );
    return branch_8565df71b2269c02( l, data, state, prod, prod_start )
} else if( l.isUniID( data ) ){
    pushFN( data, branch_6cf41a4b641163cc );
    return branch_4be8250bab24976c( l, data, state, prod, prod_start )
} else if( l.isNum( data ) ){
    pushFN( data, branch_6cf41a4b641163cc );
    return branch_cf9ddc2c961931ca( l, data, state, prod, prod_start )
};
    return -1
}
function $comments_list_6_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  sym ws id num  ]';
    '180:600 comments_list_6=>comments_list_6 • θsym [ θsym ]';
    '180:604 comments_list_6=>comments_list_6 • θws [ θws ]';
    '180:605 comments_list_6=>comments_list_6 • θid [ θid ]';
    '180:606 comments_list_6=>comments_list_6 • θnum [ θnum ]';
    '2:3 comments=>τ// comments_list_6 • θnl [ θnl ]';
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 180
};
    if( l.isSym( true, data ) ){
    pushFN( data, branch_6cf41a4b641163cc );
    return branch_b5163b3546c0fbc7( l, data, state, prod, prod_start )
} else if( l.isSP( true, data ) ){
    pushFN( data, branch_6cf41a4b641163cc );
    return branch_cabe7a32d32d6a72( l, data, state, prod, prod_start )
} else if( l.isUniID( data ) ){
    pushFN( data, branch_6cf41a4b641163cc );
    return branch_f29cd69de989b868( l, data, state, prod, prod_start )
} else if( l.isNum( data ) ){
    pushFN( data, branch_6cf41a4b641163cc );
    return branch_9c39bdda92075281( l, data, state, prod, prod_start )
};
    return ( prod ==180 )?prod :-1
}
function $named_imports_list_41(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '181:607 named_imports_list_41=>• import_specifier [ τ_, τ$, θid ]';
    pushFN( data, branch_c2440213c8b4661a );
    pushFN( data, $import_specifier );
    return data.rules_ptr;
    return -1
}
function $named_imports_list_41_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '181:608 named_imports_list_41=>named_imports_list_41 • τ, import_specifier [ τ, ]';
    '11:25 named_imports=>τ{ named_imports_list_41 • τ, τ} [ τ, ]';
    '11:27 named_imports=>τ{ named_imports_list_41 • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id  ]';
    '181:608 named_imports_list_41=>named_imports_list_41 • τ, import_specifier [ τ, ]';
    '11:25 named_imports=>τ{ named_imports_list_41 • τ, τ} [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==95||pk.current_byte  == 36 || pk.isUniID( data ) ){
        pushFN( data, branch_89bcaf08306e0d22 );
        return branch_5dcc914a4dc01157( l, data, state, prod, prod_start )
    }
};
    return ( prod ==181 )?prod :-1
}
function $export_clause_list_82(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _ $ id  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '182:609 export_clause_list_82=>• export_specifier [ τ_, τ$, θid ]';
    pushFN( data, branch_6e759d65221bb9d0 );
    pushFN( data, $export_specifier );
    return data.rules_ptr;
    return -1
}
function $export_clause_list_82_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  ,  ]';
    '182:610 export_clause_list_82=>export_clause_list_82 • τ, export_specifier [ τ, ]';
    '17:42 export_clause=>τ{ export_clause_list_82 • τ, τ} [ τ, ]';
    '17:44 export_clause=>τ{ export_clause_list_82 • τ} [ τ} ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( l.current_byte ==44 ){
    'Number of end groups0 [    ]';
    'All symbols [  _ $ id  ]';
    '182:610 export_clause_list_82=>export_clause_list_82 • τ, export_specifier [ τ, ]';
    '17:42 export_clause=>τ{ export_clause_list_82 • τ, τ} [ τ, ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==95||pk.current_byte  == 36 || pk.isUniID( data ) ){
        pushFN( data, branch_a74637280c0d4321 );
        return branch_4e6963b8408028b5( l, data, state, prod, prod_start )
    }
};
    return ( prod ==182 )?prod :-1
}
function $iteration_statement_group_162_1_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  var  ]';
    '183:611 iteration_statement_group_162_1_=>• τvar variable_declaration_list [ τvar ]';
    if( cmpr_set( l, data, 252, 3, 3 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '183:611 iteration_statement_group_162_1_=>τvar • variable_declaration_list [ τ_, τ$, θid, τ{, τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_a59e98796acff678 );
    pushFN( data, $variable_declaration_list );
    return data.rules_ptr
};
    return -1
}
function $iteration_statement_group_180_1_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  var  ]';
    '184:612 iteration_statement_group_180_1_=>• τvar for_binding [ τvar ]';
    if( cmpr_set( l, data, 252, 3, 3 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '184:612 iteration_statement_group_180_1_=>τvar • for_binding [ τ_, τ$, θid, τ{, τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_0dee96e137c612bd );
    pushFN( data, $for_binding );
    return data.rules_ptr
};
    return -1
}
function $iteration_statement_group_189_1_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  var  ]';
    '185:613 iteration_statement_group_189_1_=>• τvar for_binding [ τvar ]';
    if( cmpr_set( l, data, 252, 3, 3 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  var  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '185:613 iteration_statement_group_189_1_=>τvar • for_binding [ τ_, τ$, θid, τ{, τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d200bd151f0bb41c );
    pushFN( data, $for_binding );
    return data.rules_ptr
};
    return -1
}
function $argument_list_group_507_1_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ...  ]';
    '186:614 argument_list_group_507_1_=>• τ... assignment_expression [ τ... ]';
    if( cmpr_set( l, data, 16, 3, 3 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '186:614 argument_list_group_507_1_=>τ... • assignment_expression [ τ++, τ--, τdelete, τvoid, τtypeof, τ+, τ~, τ!, τ-, τawait, τnew, τyield, τasync, τ_, τ$, θid, τ(, τthis, τtrue, τfalse, τnull, τ", τ", θnum, τ0X, τ0x, τ0O, τ0o, τ0B, τ0b, τ[, τ{, τfunction, τclass, τ/, τ`, τsuper, τimport ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_7462e5f6614e66ee );
    pushFN( data, $assignment_expression );
    return data.rules_ptr
};
    return -1
}
function $cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ...  ]';
    '187:615 cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_=>• τ... binding_identifier [ τ... ]';
    if( cmpr_set( l, data, 16, 3, 3 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '187:615 cover_parenthesized_expression_and_arrow_parameter_list_group_709_0_=>τ... • binding_identifier [ τ_, τ$, θid ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_774b1c3a4a634490 );
    pushFN( data, $binding_identifier );
    return data.rules_ptr
};
    return -1
}
function $cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  ...  ]';
    '188:616 cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_=>• τ... binding_pattern [ τ... ]';
    if( cmpr_set( l, data, 16, 3, 3 ) ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  ...  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '188:616 cover_parenthesized_expression_and_arrow_parameter_list_group_713_0_=>τ... • binding_pattern [ τ{, τ[ ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_0e4132c1b77b1825 );
    pushFN( data, $binding_pattern );
    return data.rules_ptr
};
    return -1
}
function $no_substitute_template_list_846(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '189:617 no_substitute_template_list_846=>• template_string_data [ θnl, θws, θsym, θnum, θid, τf:s ]';
    pushFN( data, branch_8919f982e3ad939d );
    pushFN( data, $template_string_data );
    return data.rules_ptr;
    return -1
}
function $no_substitute_template_list_846_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  nl ws sym num id f:s  ]';
    '189:618 no_substitute_template_list_846=>no_substitute_template_list_846 • template_string_data [ θnl, θws, θsym, θnum, θid, τf:s ]';
    '142:450 no_substitute_template=>τ` no_substitute_template_list_846 • τ` [ τ` ]';
    '148:461 template_tail=>τ} no_substitute_template_list_846 • τ` [ τ` ]';
    '146:457 template_head=>τ` no_substitute_template_list_846 • τ${ [ τ${ ]';
    '147:459 template_middle=>τ} no_substitute_template_list_846 • τ${ [ τ${ ]';
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    if( cmpr_set( l, data, 47, 2, 2 )||l.current_byte ==96 ){
    return 189
};
    if( l.current_byte ==92||l.isUniID( data ) || l.isNL(  ) || l.isNum( data ) || l.isSym( true, data ) || l.isSP( true, data ) ){
    pushFN( data, branch_5138162b65a93da1 );
    return branch_fa2d3a36b2c0976c( l, data, state, prod, prod_start )
};
    return ( prod ==189 )?prod :-1
}
function $regular_expression_literal_list_884(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  nl ws sym num id f:s  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '190:619 regular_expression_literal_list_884=>• string_data [ θnl, θws, θsym, θnum, θid, τf:s ]';
    pushFN( data, branch_d411ef7636fb91a0 );
    pushFN( data, $string_data );
    return data.rules_ptr;
    return -1
}
function $regular_expression_literal_list_884_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  nl ws sym num id f:s  ]';
    '190:620 regular_expression_literal_list_884=>regular_expression_literal_list_884 • string_data [ θnl, θws, θsym, θnum, θid, τf:s ]';
    '151:473 regular_expression_literal=>τ/ regular_expression_literal_list_884 • τ/ default_productions__js_identifier [ τ/ ]';
    '151:475 regular_expression_literal=>τ/ regular_expression_literal_list_884 • τ/ [ τ/ ]';
    '154:482 string_literal=>τ" regular_expression_literal_list_884 • τ" [ τ" ]';
    '154:483 string_literal=>τ" regular_expression_literal_list_884 • τ" [ τ" ]';
    skip_7b7e2bf9d5b8ddf5( l/*[ 2 ]*/, data, state );
    if( assert_ascii( l, 0x0, 0x8084, 0x0, 0x0 ) ){
    return 190
};
    if( l.current_byte ==92||l.isUniID( data ) || l.isNL(  ) || l.isNum( data ) || l.isSym( true, data ) || l.isSP( true, data ) ){
    pushFN( data, branch_1dbdac19ac28186d );
    return branch_caff27f836e18a00( l, data, state, prod, prod_start )
};
    return ( prod ==190 )?prod :-1
}
function $scientific_token_group_923_0_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  E e  ]';
    '191:621 scientific_token_group_923_0_=>• τE τ- int_token [ τE ]';
    '191:623 scientific_token_group_923_0_=>• τE int_token [ τE ]';
    '191:622 scientific_token_group_923_0_=>• τe τ- int_token [ τe ]';
    '191:624 scientific_token_group_923_0_=>• τe int_token [ τe ]';
    if( l.current_byte ==69 ){
    'Number of end groups0 [    ]';
    'All symbols [  - num  ]';
    '191:621 scientific_token_group_923_0_=>• τE τ- int_token [ τE ]';
    '191:623 scientific_token_group_923_0_=>• τE int_token [ τE ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==45 ){
        pushFN( data, branch_dc1c146f68074b73 );
        return branch_4a1ba3d2167f408a( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_dc1c146f68074b73 );
        return branch_029cb86c5029b8c0( l, data, state, prod, prod_start )
    }
} else if( l.current_byte ==101 ){
    'Number of end groups0 [    ]';
    'All symbols [  - num  ]';
    '191:622 scientific_token_group_923_0_=>• τe τ- int_token [ τe ]';
    '191:624 scientific_token_group_923_0_=>• τe int_token [ τe ]';
    var pk = l.copyInPlace(  );
    skip_15cba70e02d0d1b8( pk.next( data ), data, STATE_ALLOW_SKIP );
    if( pk.current_byte ==45 ){
        pushFN( data, branch_dc1c146f68074b73 );
        return branch_2c9d590b4f607882( l, data, state, prod, prod_start )
    } else {
        pushFN( data, branch_dc1c146f68074b73 );
        return branch_aae4fc85bc4af58c( l, data, state, prod, prod_start )
    }
};
    return -1
}
function $float_token_group_927_0_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  .  ]';
    '192:625 float_token_group_927_0_=>• τ. int_token [ τ. ]';
    if( l.current_byte ==46 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  .  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '192:625 float_token_group_927_0_=>τ. • int_token [ θnum ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d08e2115458ac083 );
    pushFN( data, $int_token );
    return data.rules_ptr
};
    return -1
}
function $int_token_list_931(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '193:626 int_token_list_931=>• int_token_list_931_group_1110_0_ [ τ_ ]';
    pushFN( data, branch_647ef469d3389a1e );
    pushFN( data, $int_token_list_931_group_1110_0_ );
    return data.rules_ptr;
    return -1
}
function $int_token_list_931_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  _  ]';
    '193:627 int_token_list_931=>int_token_list_931 • int_token_list_931_group_1110_0_ [ τ_ ]';
    '161:507 int_token=>θnum int_token_list_931 • [ τ., τn, τE, τe, τ(, τ[, τ`, τ?., τin, τof, τ=, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ++, τ--, τ{, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ:, τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ} ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 193
};
    if( l.current_byte ==95 ){
    pushFN( data, branch_0ae8797efc20fac9 );
    return branch_166c55ce8a72f285( l, data, state, prod, prod_start )
};
    return ( prod ==193 )?prod :-1
}
function $hex_token_list_934(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  F a b c d e f A B C D E num  ]';
    '194:628 hex_token_list_934=>• τF [ τF ]';
    '194:630 hex_token_list_934=>• θnum [ θnum ]';
    '194:631 hex_token_list_934=>• τa [ τa ]';
    '194:632 hex_token_list_934=>• τb [ τb ]';
    '194:633 hex_token_list_934=>• τc [ τc ]';
    '194:634 hex_token_list_934=>• τd [ τd ]';
    '194:635 hex_token_list_934=>• τe [ τe ]';
    '194:636 hex_token_list_934=>• τf [ τf ]';
    '194:637 hex_token_list_934=>• τA [ τA ]';
    '194:638 hex_token_list_934=>• τB [ τB ]';
    '194:639 hex_token_list_934=>• τC [ τC ]';
    '194:640 hex_token_list_934=>• τD [ τD ]';
    '194:641 hex_token_list_934=>• τE [ τE ]';
    switch(sym_map_4dff5924106118a9( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  F  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:628 hex_token_list_934=>• τF [ τF ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  a  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:631 hex_token_list_934=>• τa [ τa ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  b  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:632 hex_token_list_934=>• τb [ τb ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  c  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:633 hex_token_list_934=>• τc [ τc ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  d  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:634 hex_token_list_934=>• τd [ τd ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  e  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:635 hex_token_list_934=>• τe [ τe ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 6: 
    {
        '"--LEAF--"';
        'Leaf [  f  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:636 hex_token_list_934=>• τf [ τf ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 7: 
    {
        '"--LEAF--"';
        'Leaf [  A  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:637 hex_token_list_934=>• τA [ τA ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 8: 
    {
        '"--LEAF--"';
        'Leaf [  B  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:638 hex_token_list_934=>• τB [ τB ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 9: 
    {
        '"--LEAF--"';
        'Leaf [  C  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:639 hex_token_list_934=>• τC [ τC ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 10: 
    {
        '"--LEAF--"';
        'Leaf [  D  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:640 hex_token_list_934=>• τD [ τD ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 11: 
    {
        '"--LEAF--"';
        'Leaf [  E  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:641 hex_token_list_934=>• τE [ τE ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 12: 
    {
        '"--LEAF--"';
        'Leaf [  num  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:630 hex_token_list_934=>• θnum [ θnum ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    default: 
    break
};
    return -1
}
function $hex_token_list_934_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  F a b c d e f A B C D E num  ]';
    '194:629 hex_token_list_934=>hex_token_list_934 • τF [ τF ]';
    '194:642 hex_token_list_934=>hex_token_list_934 • θnum [ θnum ]';
    '194:643 hex_token_list_934=>hex_token_list_934 • τa [ τa ]';
    '194:644 hex_token_list_934=>hex_token_list_934 • τb [ τb ]';
    '194:645 hex_token_list_934=>hex_token_list_934 • τc [ τc ]';
    '194:646 hex_token_list_934=>hex_token_list_934 • τd [ τd ]';
    '194:647 hex_token_list_934=>hex_token_list_934 • τe [ τe ]';
    '194:648 hex_token_list_934=>hex_token_list_934 • τf [ τf ]';
    '194:649 hex_token_list_934=>hex_token_list_934 • τA [ τA ]';
    '194:650 hex_token_list_934=>hex_token_list_934 • τB [ τB ]';
    '194:651 hex_token_list_934=>hex_token_list_934 • τC [ τC ]';
    '194:652 hex_token_list_934=>hex_token_list_934 • τD [ τD ]';
    '194:653 hex_token_list_934=>hex_token_list_934 • τE [ τE ]';
    '162:509 hex_token=>τ0X hex_token_list_934 • hex_token_list_935 [ τ_ ]';
    '162:510 hex_token=>τ0x hex_token_list_934 • hex_token_list_935 [ τ_ ]';
    '201:681 hex_token_list_935_group_1158_0_=>τ_ hex_token_list_934 • [ τ_, τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    '162:511 hex_token=>τ0X hex_token_list_934 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    '162:512 hex_token=>τ0x hex_token_list_934 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 194
};
    switch(sym_map_4dff5924106118a9( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  F  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:629 hex_token_list_934=>hex_token_list_934 • τF [ τF ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  a  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:643 hex_token_list_934=>hex_token_list_934 • τa [ τa ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  b  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:644 hex_token_list_934=>hex_token_list_934 • τb [ τb ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  c  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:645 hex_token_list_934=>hex_token_list_934 • τc [ τc ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  d  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:646 hex_token_list_934=>hex_token_list_934 • τd [ τd ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  e  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:647 hex_token_list_934=>hex_token_list_934 • τe [ τe ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 6: 
    {
        '"--LEAF--"';
        'Leaf [  f  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:648 hex_token_list_934=>hex_token_list_934 • τf [ τf ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 7: 
    {
        '"--LEAF--"';
        'Leaf [  A  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:649 hex_token_list_934=>hex_token_list_934 • τA [ τA ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 8: 
    {
        '"--LEAF--"';
        'Leaf [  B  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:650 hex_token_list_934=>hex_token_list_934 • τB [ τB ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 9: 
    {
        '"--LEAF--"';
        'Leaf [  C  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:651 hex_token_list_934=>hex_token_list_934 • τC [ τC ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 10: 
    {
        '"--LEAF--"';
        'Leaf [  D  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:652 hex_token_list_934=>hex_token_list_934 • τD [ τD ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 11: 
    {
        '"--LEAF--"';
        'Leaf [  E  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:653 hex_token_list_934=>hex_token_list_934 • τE [ τE ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    case 12: 
    {
        '"--LEAF--"';
        'Leaf [  num  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '194:642 hex_token_list_934=>hex_token_list_934 • θnum [ θnum ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $hex_token_list_934_goto );
        return 194
    }
    default: 
    break
};
    return ( prod ==194 )?prod :-1
}
function $hex_token_list_935(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '195:654 hex_token_list_935=>• hex_token_list_935_group_1158_0_ [ τ_ ]';
    pushFN( data, branch_d1cc19f7ce1ec6c6 );
    pushFN( data, $hex_token_list_935_group_1158_0_ );
    return data.rules_ptr;
    return -1
}
function $hex_token_list_935_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  _  ]';
    '195:655 hex_token_list_935=>hex_token_list_935 • hex_token_list_935_group_1158_0_ [ τ_ ]';
    '162:509 hex_token=>τ0X hex_token_list_934 hex_token_list_935 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    '162:510 hex_token=>τ0x hex_token_list_934 hex_token_list_935 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 195
};
    if( l.current_byte ==95 ){
    pushFN( data, branch_e2a0bd47a89f1b39 );
    return branch_514a3f1f23c720f9( l, data, state, prod, prod_start )
};
    return ( prod ==195 )?prod :-1
}
function $binary_token_list_941(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  1 0  ]';
    '196:656 binary_token_list_941=>• τ1 [ τ1 ]';
    '196:658 binary_token_list_941=>• τ0 [ τ0 ]';
    if( l.current_byte ==49 ){
    pushFN( data, branch_ac02cabea52e681b );
    return branch_c65a3a3ff2b9a8d1( l, data, state, prod, prod_start )
} else if( l.current_byte ==48 ){
    pushFN( data, branch_ac02cabea52e681b );
    return branch_0169af117c524165( l, data, state, prod, prod_start )
};
    return -1
}
function $binary_token_list_941_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  1 0  ]';
    '196:657 binary_token_list_941=>binary_token_list_941 • τ1 [ τ1 ]';
    '196:659 binary_token_list_941=>binary_token_list_941 • τ0 [ τ0 ]';
    '163:513 binary_token=>τ0B binary_token_list_941 • binary_token_list_942 [ τ_ ]';
    '163:514 binary_token=>τ0b binary_token_list_941 • binary_token_list_942 [ τ_ ]';
    '202:682 binary_token_list_942_group_1173_0_=>τ_ binary_token_list_941 • [ τ_, τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    '163:515 binary_token=>τ0B binary_token_list_941 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    '163:516 binary_token=>τ0b binary_token_list_941 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 196
};
    if( l.current_byte ==49 ){
    pushFN( data, branch_ac02cabea52e681b );
    return branch_b132c1d46d314181( l, data, state, prod, prod_start )
} else if( l.current_byte ==48 ){
    pushFN( data, branch_ac02cabea52e681b );
    return branch_d35c8593c21c363d( l, data, state, prod, prod_start )
};
    return ( prod ==196 )?prod :-1
}
function $binary_token_list_942(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '197:660 binary_token_list_942=>• binary_token_list_942_group_1173_0_ [ τ_ ]';
    pushFN( data, branch_0f803b7d8d52ad07 );
    pushFN( data, $binary_token_list_942_group_1173_0_ );
    return data.rules_ptr;
    return -1
}
function $binary_token_list_942_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  _  ]';
    '197:661 binary_token_list_942=>binary_token_list_942 • binary_token_list_942_group_1173_0_ [ τ_ ]';
    '163:513 binary_token=>τ0B binary_token_list_941 binary_token_list_942 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    '163:514 binary_token=>τ0b binary_token_list_941 binary_token_list_942 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 197
};
    if( l.current_byte ==95 ){
    pushFN( data, branch_3e5a96f7d45e7357 );
    return branch_e7f77895561bda1d( l, data, state, prod, prod_start )
};
    return ( prod ==197 )?prod :-1
}
function $octal_token_list_948(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  7 0 1 2 3 4 5 6  ]';
    '198:662 octal_token_list_948=>• τ7 [ τ7 ]';
    '198:664 octal_token_list_948=>• τ0 [ τ0 ]';
    '198:665 octal_token_list_948=>• τ1 [ τ1 ]';
    '198:666 octal_token_list_948=>• τ2 [ τ2 ]';
    '198:667 octal_token_list_948=>• τ3 [ τ3 ]';
    '198:668 octal_token_list_948=>• τ4 [ τ4 ]';
    '198:669 octal_token_list_948=>• τ5 [ τ5 ]';
    '198:670 octal_token_list_948=>• τ6 [ τ6 ]';
    switch(sym_map_880339b2c8d68237( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  7  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:662 octal_token_list_948=>• τ7 [ τ7 ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  0  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:664 octal_token_list_948=>• τ0 [ τ0 ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  1  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:665 octal_token_list_948=>• τ1 [ τ1 ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  2  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:666 octal_token_list_948=>• τ2 [ τ2 ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  3  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:667 octal_token_list_948=>• τ3 [ τ3 ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  4  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:668 octal_token_list_948=>• τ4 [ τ4 ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 6: 
    {
        '"--LEAF--"';
        'Leaf [  5  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:669 octal_token_list_948=>• τ5 [ τ5 ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 7: 
    {
        '"--LEAF--"';
        'Leaf [  6  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:670 octal_token_list_948=>• τ6 [ τ6 ]';
        consume( l, data, state );
        add_reduce( state, data, 1, 248 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    default: 
    break
};
    return -1
}
function $octal_token_list_948_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  7 0 1 2 3 4 5 6  ]';
    '198:663 octal_token_list_948=>octal_token_list_948 • τ7 [ τ7 ]';
    '198:671 octal_token_list_948=>octal_token_list_948 • τ0 [ τ0 ]';
    '198:672 octal_token_list_948=>octal_token_list_948 • τ1 [ τ1 ]';
    '198:673 octal_token_list_948=>octal_token_list_948 • τ2 [ τ2 ]';
    '198:674 octal_token_list_948=>octal_token_list_948 • τ3 [ τ3 ]';
    '198:675 octal_token_list_948=>octal_token_list_948 • τ4 [ τ4 ]';
    '198:676 octal_token_list_948=>octal_token_list_948 • τ5 [ τ5 ]';
    '198:677 octal_token_list_948=>octal_token_list_948 • τ6 [ τ6 ]';
    '164:517 octal_token=>τ0O octal_token_list_948 • octal_token_list_949 [ τ_ ]';
    '164:518 octal_token=>τ0o octal_token_list_948 • octal_token_list_949 [ τ_ ]';
    '203:683 octal_token_list_949_group_1206_0_=>τ_ octal_token_list_948 • [ τ_, τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    '164:519 octal_token=>τ0O octal_token_list_948 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    '164:520 octal_token=>τ0o octal_token_list_948 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 198
};
    switch(sym_map_880339b2c8d68237( l, data )){
    case 0: 
    {
        '"--LEAF--"';
        'Leaf [  7  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:663 octal_token_list_948=>octal_token_list_948 • τ7 [ τ7 ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 1: 
    {
        '"--LEAF--"';
        'Leaf [  0  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:671 octal_token_list_948=>octal_token_list_948 • τ0 [ τ0 ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 2: 
    {
        '"--LEAF--"';
        'Leaf [  1  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:672 octal_token_list_948=>octal_token_list_948 • τ1 [ τ1 ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 3: 
    {
        '"--LEAF--"';
        'Leaf [  2  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:673 octal_token_list_948=>octal_token_list_948 • τ2 [ τ2 ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 4: 
    {
        '"--LEAF--"';
        'Leaf [  3  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:674 octal_token_list_948=>octal_token_list_948 • τ3 [ τ3 ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 5: 
    {
        '"--LEAF--"';
        'Leaf [  4  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:675 octal_token_list_948=>octal_token_list_948 • τ4 [ τ4 ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 6: 
    {
        '"--LEAF--"';
        'Leaf [  5  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:676 octal_token_list_948=>octal_token_list_948 • τ5 [ τ5 ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    case 7: 
    {
        '"--LEAF--"';
        'Leaf [  6  ]';
        '"⤋⤋⤋  assert ⤋⤋⤋"';
        '198:677 octal_token_list_948=>octal_token_list_948 • τ6 [ τ6 ]';
        consume( l, data, state );
        add_reduce( state, data, 2, 229 );
        pushFN( data, $octal_token_list_948_goto );
        return 198
    }
    default: 
    break
};
    return ( prod ==198 )?prod :-1
}
function $octal_token_list_949(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert-production-symbols ⤋⤋⤋"';
    '199:678 octal_token_list_949=>• octal_token_list_949_group_1206_0_ [ τ_ ]';
    pushFN( data, branch_386966eae2543779 );
    pushFN( data, $octal_token_list_949_group_1206_0_ );
    return data.rules_ptr;
    return -1
}
function $octal_token_list_949_goto(l, data, state, prod, prod_start){
    debugger;
    'Number of end groups0 [    ]';
    'All symbols [  _  ]';
    '199:679 octal_token_list_949=>octal_token_list_949 • octal_token_list_949_group_1206_0_ [ τ_ ]';
    '164:517 octal_token=>τ0O octal_token_list_948 octal_token_list_949 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    '164:518 octal_token=>τ0o octal_token_list_948 octal_token_list_949 • [ τ(, τ:, τ?., τ`, τ., τ[, τ--, τ++, τ*=, τ/=, τ%=, τ+=, τ-=, τ<<=, τ>>=, τ>>>=, τ&=, τ^=, τ|=, τ**=, τ??, τ&&=, τ||=, τ=, τof, τin, τ**, τ%, τ/, τ*, τ+, τ-, τ>>>, τ>>, τ<<, τ<, τ>, τ<=, τ>=, τinstanceof, τ!==, τ===, τ!=, τ==, τ&, τ^, τ|, τ&&, τ||, τ?, τ], τ), τ;, τ}-ns, θnl, END_OF_FILE, τ,, τ}, τ{ ]';
    skip_1f62e9e1065e9d92( l/*[ ws ][ 2 ]*/, data, state );
    if( l.isNL(  ) ){
    return 199
};
    if( l.current_byte ==95 ){
    pushFN( data, branch_02aad4575269c41b );
    return branch_f3d00008ff85d550( l, data, state, prod, prod_start )
};
    return ( prod ==199 )?prod :-1
}
function $int_token_list_931_group_1110_0_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _  ]';
    '200:680 int_token_list_931_group_1110_0_=>• τ_ θnum [ τ_ ]';
    if( l.current_byte ==95 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '200:680 int_token_list_931_group_1110_0_=>τ_ • θnum [ θnum ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    if( ( ( ( l.isNum( data ) )&&consume( l, data, state ) ) ) ){
        add_reduce( state, data, 2, 229 );
        return 200
    };
    return -1
};
    return -1
}
function $hex_token_list_935_group_1158_0_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _  ]';
    '201:681 hex_token_list_935_group_1158_0_=>• τ_ hex_token_list_934 [ τ_ ]';
    if( l.current_byte ==95 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '201:681 hex_token_list_935_group_1158_0_=>τ_ • hex_token_list_934 [ τF, θnum, τa, τb, τc, τd, τe, τf, τA, τB, τC, τD, τE ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_d72fb3a22dcd719b );
    pushFN( data, $hex_token_list_934 );
    return data.rules_ptr
};
    return -1
}
function $binary_token_list_942_group_1173_0_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _  ]';
    '202:682 binary_token_list_942_group_1173_0_=>• τ_ binary_token_list_941 [ τ_ ]';
    if( l.current_byte ==95 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '202:682 binary_token_list_942_group_1173_0_=>τ_ • binary_token_list_941 [ τ1, τ0 ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_97a6066f7a724d19 );
    pushFN( data, $binary_token_list_941 );
    return data.rules_ptr
};
    return -1
}
function $octal_token_list_949_group_1206_0_(l, data, state, prod, prod_start){
    debugger;
    prod_start = data.rules_ptr;
    'Number of end groups0 [    ]';
    'All symbols [  _  ]';
    '203:683 octal_token_list_949_group_1206_0_=>• τ_ octal_token_list_948 [ τ_ ]';
    if( l.current_byte ==95 ){
    consume( l, data, state );
    '"--LEAF--"';
    'Leaf [  _  ]';
    '"⤋⤋⤋  assert-consume ⤋⤋⤋"';
    '203:683 octal_token_list_949_group_1206_0_=>τ_ • octal_token_list_948 [ τ7, τ0, τ1, τ2, τ3, τ4, τ5, τ6 ]';
    skip_15cba70e02d0d1b8( l/*[ ws ][ nl ][ 2 ]*/, data, state );
    pushFN( data, branch_79b1631736d0632c );
    pushFN( data, $octal_token_list_948 );
    return data.rules_ptr
};
    return -1
}
function dispatch(data, production_index){
    switch(production_index ){
    case 0: 
    {
        skip_15cba70e02d0d1b8( ( data.lexer ), data, 16777215 );
        data.stack[0] = $javascript;
        data.stash[0] = 0;
        return
    }
}
}
function clear_data(){
    var i = 0;
    for(  ; i <fork_array_len ; i++ ) 
{
    
};
    out_array_len = 0
}
function init_data(input_len, rules_len){
    clear_data(  );
    data_array_len = 1;
    var data = create_parser_data_object( input_len, rules_len
 );
    data_array[0] = data;
    return ( data ).input
}
function init_table(){
    var table = new Uint8Array(382976);
    lookup_table = table;
    return lookup_table
}
function get_fork_pointers(){
    var i = 0;
    for(  ; i <out_array_len ; i++ ) 
{
    var data = out_array[i];
    var fork = new DataRef( out_array[i], ( data.VALID ), ( data.origin_fork +data.rules_ptr ), ( data.lexer ) . byte_offset, ( data.lexer ) . byte_length, ( data.lexer ) . line
 );
    fork_array[i] = fork
};
    return fork_array
}
function block64Consume(data, block, offset, block_offset, limit){
    var containing_data = data;
    var end = containing_data.origin_fork +data.rules_ptr;
    while( ( containing_data.origin_fork >offset ) ) {
        end = containing_data.origin_fork;
        containing_data = containing_data.origin
    };
    var start = containing_data.origin_fork;
    offset  -= start;
    end  -= start;
    var ptr = offset;
    if( ( ptr >=end ) )return limit -block_offset;;
    while( ( block_offset <limit ) ) {
        block[block_offset ++] = containing_data.rules[ptr ++];
        if( ( ptr >=end ) )return block64Consume( data, block, ptr  + start, block_offset, limit );
    };
    return 0
}
function get_next_command_block(fork){
    var fork_ref = fork;
    var remainder = block64Consume( fork_ref.ptr, fork_ref.command_block, fork_ref.command_offset, 0, 64 );
    fork_ref.command_offset  += 64 - remainder;
    if( ( remainder >0 ) )fork_ref.command_block[64 - remainder] = 0;;
    return fork_ref.command_block
}
function recognize(input_byte_length, production){
    var data_ref = data_array[0];
    data_ref.input_len = input_byte_length;
    ( data_ref.lexer ) . next( data_ref );
    dispatch( data_ref, production );
    root_data = data_ref;
    tip_data = data_ref;
    run(  );
    return out_array_len
};

        return {
            init_data, 
            get_next_command_block,
            init_table,
            get_fork_pointers,
            recognize 
        };
    });

    const reduce_functions = [(_,s)=>s[s.length-1], (env, sym, pos)=>(env.IS_MODULE=false,sym[0])/*0*/
,(env, sym, pos)=>({type:(env.IS_MODULE)?env.typ.Module:env.typ.Script,nodes:sym[0],pos})/*1*/
,(env, sym, pos)=>([sym[0]])/*2*/
,(env, sym, pos)=>(sym[0].push(sym[1]),sym[0])/*3*/
,(env, sym, pos)=>(env.IS_MODULE=true,sym[0])/*4*/
,(env, sym, pos)=>({type:env.typ.ImportDeclaration,nodes:[sym[1],sym[2]],pos})/*5*/
,(env, sym, pos)=>({type:env.typ.ImportDeclaration,nodes:[sym[1]],pos})/*6*/
,(env, sym, pos)=>({type:env.typ.ImportClause,nodes:[sym[0]],pos})/*7*/
,(env, sym, pos)=>({type:env.typ.ImportClause,nodes:[sym[0],sym[2]],pos})/*8*/
,(env, sym, pos)=>(sym[0].type=env.typ.IdentifierDefault,sym[0])/*9*/
,(env, sym, pos)=>({type:env.typ.NameSpaceImport,nodes:[sym[2]],pos})/*10*/
,(env, sym, pos)=>({type:env.typ.NamedImports,nodes:sym[1]||[],pos})/*11*/
,(env, sym, pos)=>({type:env.typ.NamedImports,nodes:null||[],pos})/*12*/
,(env, sym, pos)=>({type:env.typ.FromClause,nodes:[sym[1]],pos})/*13*/
,(env, sym, pos)=>({type:env.typ.Specifier,nodes:[sym[0]],pos})/*14*/
,(env, sym, pos)=>({type:env.typ.Specifier,nodes:[sym[0],sym[2]],pos})/*15*/
,(env, sym, pos)=>(sym[0].type=env.typ.IdentifierModule,sym[0])/*16*/
,(env, sym, pos)=>({type:env.typ.ExportDeclaration,nodes:[null,sym[2]],DEFAULT:false,pos})/*17*/
,(env, sym, pos)=>({type:env.typ.ExportDeclaration,nodes:[sym[1],sym[2]],DEFAULT:false,pos})/*18*/
,(env, sym, pos)=>({type:env.typ.ExportDeclaration,nodes:[sym[1]],DEFAULT:false,pos})/*19*/
,(env, sym, pos)=>({type:env.typ.ExportDeclaration,nodes:[sym[2]],DEFAULT:true,pos})/*20*/
,(env, sym, pos)=>({type:env.typ.ExportDeclaration,nodes:[sym[1],null],DEFAULT:false,pos})/*21*/
,(env, sym, pos)=>({type:env.typ.ExportClause,nodes:sym[1]||[],pos})/*22*/
,(env, sym, pos)=>({type:env.typ.ExportClause,nodes:null||[],pos})/*23*/
,(env, sym, pos)=>({type:env.typ.Script,nodes:sym[0],pos})/*24*/
,(env, sym, pos)=>([...sym[0],sym[1]])/*25*/
,(env, sym, pos)=>({type:env.typ.BlockStatement,nodes:sym[1]||[],pos})/*26*/
,(env, sym, pos)=>({type:env.typ.BlockStatement,nodes:null||[],pos})/*27*/
,(env, sym, pos)=>({type:env.typ.EmptyStatement,pos})/*28*/
,(env, sym, pos)=>({type:env.typ.ExpressionStatement,nodes:[sym[0]],pos})/*29*/
,(env, sym, pos)=>({type:env.typ.IfStatement,nodes:[sym[2],sym[4],sym[6]],pos})/*30*/
,(env, sym, pos)=>({type:env.typ.IfStatement,nodes:[sym[2],sym[4],null],pos})/*31*/
,(env, sym, pos)=>({type:env.typ.DoStatement,nodes:[sym[1],sym[4]],pos})/*32*/
,(env, sym, pos)=>({type:env.typ.WhileStatement,nodes:[sym[2],sym[4]],pos})/*33*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[sym[2],sym[4],sym[6],sym[8]],LEX:false,pos})/*34*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[sym[2],sym[3],sym[5],sym[7]],LEX:true,pos})/*35*/
,(env, sym, pos)=>({type:env.typ.ForInStatement,nodes:[sym[2],sym[4],sym[6]],pos})/*36*/
,(env, sym, pos)=>({type:env.typ.ForOfStatement,nodes:[sym[3],sym[5],sym[7]],pos,AWAIT:!!sym[1]})/*37*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[null,sym[3],sym[5],sym[7]],LEX:false,pos})/*38*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[sym[2],null,sym[5],sym[7]],LEX:false,pos})/*39*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[sym[2],sym[4],null,sym[7]],LEX:false,pos})/*40*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[sym[2],null,sym[4],sym[6]],LEX:true,pos})/*41*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[sym[2],sym[3],null,sym[6]],LEX:true,pos})/*42*/
,(env, sym, pos)=>({type:env.typ.ForOfStatement,nodes:[sym[2],sym[4],sym[6]],pos,AWAIT:!!null})/*43*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[null,null,sym[4],sym[6]],LEX:false,pos})/*44*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[null,sym[3],null,sym[6]],LEX:false,pos})/*45*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[sym[2],null,null,sym[6]],LEX:false,pos})/*46*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[sym[2],null,null,sym[5]],LEX:true,pos})/*47*/
,(env, sym, pos)=>({type:env.typ.ForStatement,nodes:[null,null,null,sym[5]],LEX:false,pos})/*48*/
,(env, sym, pos)=>({type:env.typ.LexicalBinding,nodes:[sym[1]],symbol:sym[0],pos})/*49*/
,(env, sym, pos)=>({type:env.typ.ContinueStatement,nodes:sym[1]?[sym[1]]:[],pos})/*50*/
,(env, sym, pos)=>({type:env.typ.ContinueStatement,nodes:null?[null]:[],pos})/*51*/
,(env, sym, pos)=>({type:env.typ.BreakStatement,nodes:[sym[1]],pos})/*52*/
,(env, sym, pos)=>({type:env.typ.BreakStatement,nodes:[null],pos})/*53*/
,(env, sym, pos)=>({type:env.typ.ReturnStatement,nodes:[sym[1]],pos})/*54*/
,(env, sym, pos)=>({type:env.typ.ReturnStatement,nodes:[],pos})/*55*/
,(env, sym, pos)=>({type:env.typ.ThrowStatement,nodes:[sym[1]],pos})/*56*/
,(env, sym, pos)=>({type:env.typ.WithStatement,nodes:[sym[2],sym[4]],pos})/*57*/
,(env, sym, pos)=>({type:env.typ.SwitchStatement,nodes:[sym[2],sym[4]],pos})/*58*/
,(env, sym, pos)=>({type:env.typ.CaseBlock,nodes:[...sym[1],sym[2],...sym[3]],pos})/*59*/
,(env, sym, pos)=>({type:env.typ.CaseBlock,nodes:[sym[1],...sym[2]],pos})/*60*/
,(env, sym, pos)=>({type:env.typ.CaseBlock,nodes:[...sym[1],...sym[2]],pos})/*61*/
,(env, sym, pos)=>({type:env.typ.CaseBlock,nodes:[...sym[1],sym[2]],pos})/*62*/
,(env, sym, pos)=>({type:env.typ.CaseBlock,nodes:[...sym[1]],pos})/*63*/
,(env, sym, pos)=>({type:env.typ.CaseBlock,nodes:[sym[1]],pos})/*64*/
,(env, sym, pos)=>({type:env.typ.CaseBlock,nodes:[],pos})/*65*/
,(env, sym, pos)=>({type:env.typ.CaseClause,nodes:[sym[1],...sym[3]],pos})/*66*/
,(env, sym, pos)=>({type:env.typ.CaseClause,nodes:[sym[1]],pos})/*67*/
,(env, sym, pos)=>({type:env.typ.DefaultClause,nodes:[...sym[2]],pos})/*68*/
,(env, sym, pos)=>({type:env.typ.DefaultClause,nodes:[],pos})/*69*/
,(env, sym, pos)=>({type:env.typ.LabeledStatement,nodes:[sym[0],sym[2]],pos})/*70*/
,(env, sym, pos)=>({type:env.typ.TryStatement,nodes:[sym[1],sym[2],null],pos})/*71*/
,(env, sym, pos)=>({type:env.typ.TryStatement,nodes:[sym[1],null,sym[2]],pos})/*72*/
,(env, sym, pos)=>({type:env.typ.TryStatement,nodes:[sym[1],sym[2],sym[3]],pos})/*73*/
,(env, sym, pos)=>({type:env.typ.CatchClause,nodes:[sym[2],sym[4]],pos})/*74*/
,(env, sym, pos)=>({type:env.typ.FinallyClause,nodes:[sym[1]],pos})/*75*/
,(env, sym, pos)=>({type:env.typ.DebuggerStatement,pos})/*76*/
,(env, sym, pos)=>({type:env.typ.VariableStatement,nodes:sym[1],pos})/*77*/
,(env, sym, pos)=>(sym[0].push(sym[2]),sym[0])/*78*/
,(env, sym, pos)=>({type:env.typ.BindingExpression,symbol:"=",nodes:[sym[0],sym[1]],pos})/*79*/
,(env, sym, pos)=>({type:env.typ.LexicalDeclaration,symbol:sym[0],nodes:sym[1],pos})/*80*/
,(env, sym, pos)=>("let")/*81*/
,(env, sym, pos)=>("const")/*82*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!sym[0],GENERATOR:!!sym[2],nodes:[sym[3],sym[5],sym[8]],pos})/*83*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!null,GENERATOR:!!sym[1],nodes:[sym[2],sym[4],sym[7]],pos})/*84*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!sym[0],GENERATOR:!!null,nodes:[sym[2],sym[4],sym[7]],pos})/*85*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!sym[0],GENERATOR:!!sym[2],nodes:[null,sym[4],sym[7]],pos})/*86*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!sym[0],GENERATOR:!!sym[2],nodes:[sym[3],null,sym[7]],pos})/*87*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!null,GENERATOR:!!null,nodes:[sym[1],sym[3],sym[6]],pos})/*88*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!null,GENERATOR:!!sym[1],nodes:[null,sym[3],sym[6]],pos})/*89*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!null,GENERATOR:!!sym[1],nodes:[sym[2],null,sym[6]],pos})/*90*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!sym[0],GENERATOR:!!null,nodes:[null,sym[3],sym[6]],pos})/*91*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!sym[0],GENERATOR:!!null,nodes:[sym[2],null,sym[6]],pos})/*92*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!sym[0],GENERATOR:!!sym[2],nodes:[null,null,sym[6]],pos})/*93*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!null,GENERATOR:!!null,nodes:[null,sym[2],sym[5]],pos})/*94*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!null,GENERATOR:!!null,nodes:[sym[1],null,sym[5]],pos})/*95*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!null,GENERATOR:!!sym[1],nodes:[null,null,sym[5]],pos})/*96*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!sym[0],GENERATOR:!!null,nodes:[null,null,sym[5]],pos})/*97*/
,(env, sym, pos)=>({type:env.typ.FunctionDeclaration,ASYNC:!!null,GENERATOR:!!null,nodes:[null,null,sym[4]],pos})/*98*/
,(env, sym, pos)=>((sym1.type=env.typ.FunctionExpression,sym1))/*99*/
,(env, sym, pos)=>({type:env.typ.FormalParameters,nodes:[sym[0]],pos})/*100*/
,(env, sym, pos)=>({type:env.typ.FormalParameters,nodes:sym[0],pos})/*101*/
,(env, sym, pos)=>({type:env.typ.FormalParameters,nodes:[...sym[0],sym[2]],pos})/*102*/
,(env, sym, pos)=>({type:env.typ.FunctionBody,nodes:sym[0]||[],pos})/*103*/
,(env, sym, pos)=>({type:env.typ.YieldExpression,nodes:[],pos})/*104*/
,(env, sym, pos)=>({type:env.typ.YieldExpression,nodes:[sym[2]],pos,GENERATOR:!!sym[1]})/*105*/
,(env, sym, pos)=>({type:env.typ.YieldExpression,nodes:[sym[1]],pos,GENERATOR:!!null})/*106*/
,(env, sym, pos)=>({type:env.typ.ArrowFunction,ASYNC:!!sym[0],nodes:[sym[1],sym[3]],pos})/*107*/
,(env, sym, pos)=>({type:env.typ.ArrowFunction,ASYNC:!!null,nodes:[sym[0],sym[2]],pos})/*108*/
,(env, sym, pos)=>(sym[0].type=env.typ.IdentifierBinding,sym[0])/*109*/
,(env, sym, pos)=>({type:env.typ.BlockStatement,nodes:sym[1],pos})/*110*/
,(env, sym, pos)=>({type:env.typ.CallExpression,nodes:[sym[0],sym[1]],pos})/*111*/
,(env, sym, pos)=>({type:env.typ.Class,nodes:[sym[1],sym[2],...sym[4]],pos})/*112*/
,(env, sym, pos)=>({type:env.typ.Class,nodes:[null,sym[1],...sym[3]],pos})/*113*/
,(env, sym, pos)=>({type:env.typ.Class,nodes:[sym[1],null,...sym[3]],pos})/*114*/
,(env, sym, pos)=>({type:env.typ.Class,nodes:[sym[1],sym[2]],pos})/*115*/
,(env, sym, pos)=>({type:env.typ.Class,nodes:[null,null,...sym[2]],pos})/*116*/
,(env, sym, pos)=>({type:env.typ.Class,nodes:[null,sym[1]],pos})/*117*/
,(env, sym, pos)=>({type:env.typ.Class,nodes:[sym[1],null],pos})/*118*/
,(env, sym, pos)=>({type:env.typ.Class,nodes:[null,null],pos})/*119*/
,(env, sym, pos)=>(sym[0].concat(sym[1]))/*120*/
,(env, sym, pos)=>([])/*121*/
,(env, sym, pos)=>((sym[1].STATIC=true,sym[1]))/*122*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!sym[0],GENERATOR:!!sym[1],nodes:[sym[2],sym[4],sym[7]],pos})/*123*/
,(env, sym, pos)=>({type:env.typ.GetterMethod,nodes:[sym[1],sym[5]],pos})/*124*/
,(env, sym, pos)=>({type:env.typ.SetterMethod,nodes:[sym[1],sym[3],sym[6]],pos})/*125*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!sym[0],GENERATOR:!!null,nodes:[sym[1],sym[3],sym[6]],pos})/*126*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!null,GENERATOR:!!sym[0],nodes:[sym[1],sym[3],sym[6]],pos})/*127*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!sym[0],GENERATOR:!!sym[1],nodes:[sym[2],null,sym[6]],pos})/*128*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!sym[0],GENERATOR:!!sym[1],nodes:[sym[2],sym[4],null],pos})/*129*/
,(env, sym, pos)=>({type:env.typ.GetterMethod,nodes:[sym[1]],pos})/*130*/
,(env, sym, pos)=>({type:env.typ.SetterMethod,nodes:[sym[1],sym[3]],pos})/*131*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!null,GENERATOR:!!null,nodes:[sym[0],sym[2],sym[5]],pos})/*132*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!sym[0],GENERATOR:!!null,nodes:[sym[1],null,sym[5]],pos})/*133*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!sym[0],GENERATOR:!!null,nodes:[sym[1],sym[3],null],pos})/*134*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!null,GENERATOR:!!sym[0],nodes:[sym[1],null,sym[5]],pos})/*135*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!null,GENERATOR:!!sym[0],nodes:[sym[1],sym[3],null],pos})/*136*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!sym[0],GENERATOR:!!sym[1],nodes:[sym[2],null,null],pos})/*137*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!null,GENERATOR:!!null,nodes:[sym[0],null,sym[4]],pos})/*138*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!null,GENERATOR:!!null,nodes:[sym[0],sym[2],null],pos})/*139*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!sym[0],GENERATOR:!!null,nodes:[sym[1],null,null],pos})/*140*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!null,GENERATOR:!!sym[0],nodes:[sym[1],null,null],pos})/*141*/
,(env, sym, pos)=>({type:env.typ.Method,ASYNC:!!null,GENERATOR:!!null,nodes:[sym[0],null,null],pos})/*142*/
,(env, sym, pos)=>((sym[0].type==env.typ.ExpressionList?(sym[0].nodes.push(sym[2]),sym[0]):{type:env.typ.ExpressionList,nodes:[sym[0],sym[2]],pos}))/*143*/
,(env, sym, pos)=>({type:env.typ.NewExpression,nodes:[sym[1]],pos})/*144*/
,(env, sym, pos)=>({type:env.typ.MemberExpression,nodes:[sym[0],sym[2]],pos,COMPUTED:true})/*145*/
,(env, sym, pos)=>((sym[2].type|=env.cls.PROPERTY_NAME,{type:env.typ.MemberExpression,nodes:[sym[0],sym[2]],pos,COMPUTED:false}))/*146*/
,(env, sym, pos)=>({type:env.typ.CallExpression,nodes:[sym[0],sym[1]],pos,TEMPLATE:true})/*147*/
,(env, sym, pos)=>({type:env.typ.NewInstanceExpression,nodes:[sym[1],sym[2]],pos})/*148*/
,(env, sym, pos)=>((sym[2].type|=env.cls.PROPERTY_NAME,{type:env.typ.SuperExpression,nodes:[sym[2]],pos,COMPUTED:false}))/*149*/
,(env, sym, pos)=>({type:env.typ.SuperExpression,nodes:[sym[2]],pos,COMPUTED:true})/*150*/
,(env, sym, pos)=>({type:env.typ.ImportMeta,pos})/*151*/
,(env, sym, pos)=>({type:env.typ.NewTarget,pos})/*152*/
,(env, sym, pos)=>({type:env.typ.CallExpression,nodes:[sym[0],sym[1]],pos,TEMPLATE:false})/*153*/
,(env, sym, pos)=>({type:env.typ.CallExpression,nodes:[sym[0],sym[2]],pos,TEMPLATE:true})/*154*/
,(env, sym, pos)=>({type:env.typ.SuperCall,nodes:[sym[1]],pos})/*155*/
,(env, sym, pos)=>({type:env.typ.ImportCall,nodes:[sym[2]],pos})/*156*/
,(env, sym, pos)=>({type:env.typ.Arguments,nodes:sym[1]||[],pos})/*157*/
,(env, sym, pos)=>({type:env.typ.Arguments,nodes:null||[],pos})/*158*/
,(env, sym, pos)=>({type:env.typ.OptionalMemberExpression,nodes:[sym[0],sym[1].type=="computed"?sym[1].val:sym[1]],pos,COMPUTED:sym[1].type=="computed"})/*159*/
,(env, sym, pos)=>({type:"computed",val:sym[2]})/*160*/
,(env, sym, pos)=>({type:env.typ.ThisLiteral,pos})/*161*/
,(env, sym, pos)=>({type:env.typ.AwaitExpression,nodes:[sym[1]],pos})/*162*/
,(env, sym, pos)=>({type:env.typ.AssignmentExpression,symbol:"=",nodes:[sym[0],sym[2]],pos})/*163*/
,(env, sym, pos)=>({type:env.typ.AssignmentExpression,symbol:sym[1],nodes:[sym[0],sym[2]],pos})/*164*/
,(env, sym, pos)=>({type:env.typ.ConditionalExpression,nodes:[sym[0],sym[2],sym[4]],pos})/*165*/
,(env, sym, pos)=>({type:env.typ.LogicalExpression,symbol:sym[1],nodes:[sym[0],sym[2]],pos})/*166*/
,(env, sym, pos)=>({type:env.typ.CoalesceExpression,nodes:[sym[0],sym[2]],pos})/*167*/
,(env, sym, pos)=>({type:env.typ.BitwiseExpression,symbol:sym[1],nodes:[sym[0],sym[2]],pos})/*168*/
,(env, sym, pos)=>({type:env.typ.EqualityExpression,symbol:sym[1],nodes:[sym[0],sym[2]],pos})/*169*/
,(env, sym, pos)=>({type:env.typ.RelationalExpression,symbol:sym[1],nodes:[sym[0],sym[2]],pos})/*170*/
,(env, sym, pos)=>({type:env.typ.InstanceOfExpression,nodes:[sym[0],sym[2]],pos})/*171*/
,(env, sym, pos)=>({type:env.typ.InExpression,nodes:[sym[0],sym[2]],pos})/*172*/
,(env, sym, pos)=>({type:env.typ.ShiftExpression,symbol:sym[1],nodes:[sym[0],sym[2]],pos})/*173*/
,(env, sym, pos)=>({type:env.typ.AdditiveExpression,symbol:sym[1],nodes:[sym[0],sym[2]],pos})/*174*/
,(env, sym, pos)=>({type:env.typ.MultiplicativeExpression,symbol:sym[1],nodes:[sym[0],sym[2]],pos})/*175*/
,(env, sym, pos)=>({type:env.typ.ExponentiationExpression,nodes:[sym[0],sym[2]],pos})/*176*/
,(env, sym, pos)=>({type:env.typ.DeleteExpression,nodes:[sym[1]],pos})/*177*/
,(env, sym, pos)=>({type:env.typ.VoidExpression,nodes:[sym[1]],pos})/*178*/
,(env, sym, pos)=>({type:env.typ.TypeofExpression,nodes:[sym[1]],pos})/*179*/
,(env, sym, pos)=>({type:env.typ.UnaryExpression,symbol:sym[0],nodes:[sym[1]],pos})/*180*/
,(env, sym, pos)=>((sym[1].type==env.typ.NumericLiteral||sym[1].type==env.typ.BigIntLiteral)?(sym[1].NEGATIVE=true,sym[1]):({type:env.typ.UnaryExpression,symbol:sym[0],nodes:[sym[1]],pos}))/*181*/
,(env, sym, pos)=>({type:env.typ.PostExpression,symbol:sym[1],nodes:[sym[0]],pos})/*182*/
,(env, sym, pos)=>({type:env.typ.PreExpression,symbol:sym[0],nodes:[sym[1]],pos})/*183*/
,(env, sym, pos)=>({type:env.typ.Parenthesized,nodes:[],pos})/*184*/
,(env, sym, pos)=>({type:env.typ.Parenthesized,nodes:[sym[1]],pos})/*185*/
,(env, sym, pos)=>({type:env.typ.Parenthesized,nodes:[sym[1],sym[3]],pos})/*186*/
,(env, sym, pos)=>({type:env.typ.ObjectBinding,nodes:[],pos})/*187*/
,(env, sym, pos)=>({type:env.typ.ObjectBinding,nodes:[sym[1]],pos})/*188*/
,(env, sym, pos)=>({type:env.typ.ObjectBinding,nodes:[...sym[1]],pos})/*189*/
,(env, sym, pos)=>({type:env.typ.ObjectBinding,nodes:[...sym[1],sym[3]],pos})/*190*/
,(env, sym, pos)=>({type:env.typ.ArrayBinding,nodes:[sym[1],sym[2]],pos})/*191*/
,(env, sym, pos)=>({type:env.typ.ArrayBinding,nodes:[...sym[1]],pos})/*192*/
,(env, sym, pos)=>({type:env.typ.ArrayBinding,nodes:[...sym[1],sym[3],sym[4]],pos})/*193*/
,(env, sym, pos)=>({type:env.typ.ArrayBinding,nodes:[sym[1]],pos})/*194*/
,(env, sym, pos)=>({type:env.typ.ArrayBinding,nodes:[...sym[1],sym[3]],pos})/*195*/
,(env, sym, pos)=>({type:env.typ.ArrayBinding,nodes:[],pos})/*196*/
,(env, sym, pos)=>([...sym[0],sym[2]])/*197*/
,(env, sym, pos)=>([...sym[0],...sym[2]])/*198*/
,(env, sym, pos)=>([sym[0],sym[1]])/*199*/
,(env, sym, pos)=>({type:env.typ.PropertyBinding,nodes:[sym[0],sym[2]],pos})/*200*/
,(env, sym, pos)=>(sym[1]?{type:env.typ.BindingExpression,symbol:"=",nodes:[sym[0],sym[1]],pos}:sym[0])/*201*/
,(env, sym, pos)=>(null?{type:env.typ.BindingExpression,symbol:"=",nodes:[sym[0]],pos}:sym[0])/*202*/
,(env, sym, pos)=>({type:env.typ.Spread,nodes:[sym[1]],pos})/*203*/
,(env, sym, pos)=>({type:env.typ.ObjectLiteral,nodes:[],pos})/*204*/
,(env, sym, pos)=>({type:env.typ.ObjectLiteral,nodes:sym[1],pos})/*205*/
,(env, sym, pos)=>(sym[0].type|=env.cls.PROPERTY_NAME,sym[0])/*206*/
,(env, sym, pos)=>({type:env.typ.ComputedProperty,nodes:[sym[1]],pos})/*207*/
,(env, sym, pos)=>(sym[sym.length-2].type|=env.cls.PROPERTY_NAME)/*208*/
,(env, sym, pos)=>(sym[1])/*209*/
,(env, sym, pos)=>({type:env.typ.ArrayLiteral,nodes:[sym[1]],pos})/*210*/
,(env, sym, pos)=>({type:env.typ.ArrayLiteral,nodes:sym[1],pos})/*211*/
,(env, sym, pos)=>({type:env.typ.ArrayLiteral,nodes:[...sym[1],sym[3]],pos})/*212*/
,(env, sym, pos)=>({type:env.typ.ArrayLiteral,nodes:[],pos})/*213*/
,(env, sym, pos)=>({type:env.typ.ArrayLiteral,nodes:[...sym[1]],pos})/*214*/
,(env, sym, pos)=>([...sym[0],sym[2],sym[3]])/*215*/
,(env, sym, pos)=>({type:env.typ.Elision,count:0,pos})/*216*/
,(env, sym, pos)=>({type:env.typ.Elision,count:sym[0].count+1,pos})/*217*/
,(env, sym, pos)=>({type:env.typ.Template,nodes:[{quote_type:"",type:env.typ.StringLiteral,value:sym[1],pos}],NO_SUBSTITUTE:true,pos})/*218*/
,(env, sym, pos)=>({type:env.typ.Template,nodes:[{quote_type:"",type:env.typ.StringLiteral,pos}],NO_SUBSTITUTE:true,pos})/*219*/
,(env, sym, pos)=>(sym[2].unshift(sym[0],sym[1]),{type:env.typ.Template,nodes:sym[2],pos})/*220*/
,(env, sym, pos)=>(sym[0].push(sym[1],sym[2]),sym[0])/*221*/
,(env, sym, pos)=>({type:env.typ.TemplateHead,value:sym[1],pos})/*222*/
,(env, sym, pos)=>({type:env.typ.TemplateHead,pos})/*223*/
,(env, sym, pos)=>({type:env.typ.TemplateMiddle,value:sym[1],pos})/*224*/
,(env, sym, pos)=>({type:env.typ.TemplateMiddle,pos})/*225*/
,(env, sym, pos)=>({type:env.typ.TemplateTail,value:sym[1],pos})/*226*/
,(env, sym, pos)=>({type:env.typ.TemplateTail,pos})/*227*/
,(env, sym, pos)=>(sym[0]+sym[1])/*228*/
,(env, sym, pos)=>({type:env.typ.RegexLiteral,value:sym[1],flags:sym[3],pos})/*229*/
,(env, sym, pos)=>({type:env.typ.RegexLiteral,flags:sym[2],pos})/*230*/
,(env, sym, pos)=>({type:env.typ.RegexLiteral,value:sym[1],pos})/*231*/
,(env, sym, pos)=>({type:env.typ.RegexLiteral,pos})/*232*/
,(env, sym, pos)=>({quote_type:sym[0],type:env.typ.StringLiteral,value:sym[1],pos})/*233*/
,(env, sym, pos)=>({quote_type:sym[0],type:env.typ.StringLiteral,value:null,pos})/*234*/
,(env, sym, pos)=>({type:env.typ.NumericLiteral,value:sym[0],computed_value:parseFloat(sym[0].replace(/_/g,"")),pos,NEGATIVE:false})/*235*/
,(env, sym, pos)=>({type:env.typ.BigIntLiteral,value:sym[0],computed_value:parseFloat(sym[0].replace(/_/g,"")),pos,NEGATIVE:false})/*236*/
,(env, sym, pos)=>(sym[0])/*237*/
,(env, sym, pos)=>(sym[0]+sym[1]+sym[2])/*238*/
,(env, sym, pos)=>({type:env.typ.NullLiteral,pos})/*239*/
,(env, sym, pos)=>({type:env.typ.BooleanLiteral,value:sym[0],pos})/*240*/
,(env, sym, pos)=>(sym[0].type=env.typ.IdentifierLabel,sym[0])/*241*/
,(env, sym, pos)=>(sym[0].type=env.typ.IdentifierReference,sym[0])/*242*/
,(env, sym, pos)=>({type:env.typ.Identifier,value:sym[0],pos})/*243*/
,(env, sym, pos)=>({type:env.typ.IdentifierName,value:sym[0],pos})/*244*/
,(env, sym, pos)=>({type:env.typ.VariableDeclaration,nodes:sym[1],pos})/*245*/
,(env, sym, pos)=>({type:env.typ.VariableDeclaration,nodes:[sym[1]],pos})/*246*/
,(env, sym, pos)=>(sym[0]+"")/*247*/];

    export default ParserFactory(reduce_functions, undefined, recognizer_initializer);
    