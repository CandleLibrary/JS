import { JSNodeClass } from "./node_class_type";

/**
 * Template Converted into Node Type const numbers
 */
export const enum JSNodeType {
    Module = JSNodeClass.MODULE,
    AdditiveExpression = JSNodeClass.EXPRESSION | JSNodeClass.BINARY_EXPRESSION,
    Arguments = (2 << 23) | JSNodeClass.LIST,
    ArrayLiteral = (3 << 23) | JSNodeClass.LITERAL,
    ArrowFunction = (4 << 23) | JSNodeClass.FUNCTION | JSNodeClass.EXPRESSION,
    AssignmentExpression = (5 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.ASSIGNMENT,
    AwaitExpression = (6 << 23) | JSNodeClass.EXPRESSION,
    BindingExpression = (7 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.ASSIGNMENT,
    BitwiseExpression = (8 << 23) | JSNodeClass.EXPRESSION,
    BlockStatement = (9 << 23) | JSNodeClass.STATEMENT | JSNodeClass.BLOCK,
    BooleanLiteral = (10 << 23) | JSNodeClass.LITERAL,
    BreakStatement = (11 << 23) | JSNodeClass.STATEMENT,
    CallExpression = (12 << 23) | JSNodeClass.EXPRESSION,
    CaseBlock = (13 << 23) | JSNodeClass.BLOCK,
    CaseClause = (14 << 23),
    CatchClause = (15 << 23),
    Class = (16 << 23) | JSNodeClass.CLASS | JSNodeClass.STATEMENT | JSNodeClass.DECLARATION | JSNodeClass.HOISTABLE_DECLARATION,
    ClassDeclaration = (16 << 23) | JSNodeClass.CLASS | JSNodeClass.STATEMENT | JSNodeClass.DECLARATION | JSNodeClass.HOISTABLE_DECLARATION,
    ClassExpression = (16 << 23) | JSNodeClass.CLASS | JSNodeClass.EXPRESSION | JSNodeClass.DECLARATION,
    ComputedProperty = (17 << 23) | JSNodeClass.PROPERTY_NAME,
    ContinueStatement = (18 << 23) | JSNodeClass.STATEMENT,
    ConditionalExpression = (19 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.TERNARY_EXPRESSION,
    DebuggerStatement = (20 << 23) | JSNodeClass.STATEMENT,
    DefaultClause = (21 << 23),
    DeleteExpression = (22 << 23) | JSNodeClass.EXPRESSION,
    DoStatement = (23 << 23) | JSNodeClass.STATEMENT,
    Elision = (24 << 23),
    EmptyStatement = (25 << 23) | JSNodeClass.STATEMENT,
    EqualityExpression = (26 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.BINARY_EXPRESSION,
    ExponentiationExpression = (27 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.BINARY_EXPRESSION,
    ExportClause = (28 << 23),
    ExportDeclaration = (29 << 23) | JSNodeClass.STATEMENT | JSNodeClass.MODULE | JSNodeClass.DECLARATION,
    ExpressionList = (30 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.LIST,
    ExpressionStatement = (31 << 23) | JSNodeClass.STATEMENT,
    FinallyClause = (32 << 23),
    ForInStatement = (33 << 23) | JSNodeClass.STATEMENT | JSNodeClass.BLOCK,
    ForOfStatement = (34 << 23) | JSNodeClass.STATEMENT | JSNodeClass.BLOCK,
    ForStatement = (35 << 23) | JSNodeClass.STATEMENT | JSNodeClass.BLOCK,
    FormalParameters = (36 << 23) | JSNodeClass.LIST,
    FromClause = (37 << 23),
    FunctionBody = (38 << 23) | JSNodeClass.BLOCK,
    FunctionDeclaration = (39 << 23) | JSNodeClass.FUNCTION | JSNodeClass.STATEMENT | JSNodeClass.DECLARATION,
    FunctionExpression = (39 << 23) | JSNodeClass.FUNCTION | JSNodeClass.EXPRESSION | JSNodeClass.DECLARATION,
    GetterMethod = (41 << 23) | JSNodeClass.METHOD,
    Identifier = (42 << 23) | JSNodeClass.IDENTIFIER,
    IdentifierName = (42 << 23) | JSNodeClass.IDENTIFIER,
    IdentifierProperty = (42 << 23) | JSNodeClass.IDENTIFIER | JSNodeClass.PROPERTY_NAME,
    IdentifierDefault = (43 << 23) | JSNodeClass.IDENTIFIER | JSNodeClass.MODULE,
    IdentifierModule = (44 << 23) | JSNodeClass.IDENTIFIER | JSNodeClass.MODULE,
    IdentifierReference = ((45 << 23) | JSNodeClass.VARIABLE | JSNodeClass.IDENTIFIER),
    IdentifierReferenceProperty = (45 << 23) | JSNodeClass.PROPERTY_NAME,
    IdentifierBinding = (46 << 23) | JSNodeClass.VARIABLE | JSNodeClass.IDENTIFIER,
    IdentifierLabel = (47 << 23) | JSNodeClass.IDENTIFIER,
    IfStatement = (48 << 23) | JSNodeClass.STATEMENT,
    ImportClause = (49 << 23),
    ImportDeclaration = (50 << 23) | JSNodeClass.STATEMENT | JSNodeClass.MODULE | JSNodeClass.DECLARATION,
    InExpression = (51 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.BINARY_EXPRESSION,
    InstanceOfExpression = (52 << 23) | JSNodeClass.BINARY_EXPRESSION | JSNodeClass.EXPRESSION,
    LabeledStatement = (53 << 23) | JSNodeClass.STATEMENT,
    LexicalBinding = (54 << 23),
    LexicalDeclaration = (55 << 23) | JSNodeClass.STATEMENT | JSNodeClass.DECLARATION,
    LogicalExpression = (56 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.BINARY_EXPRESSION,
    MemberExpression = (57 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.VARIABLE,
    Method = (58 << 23),
    MultiplicativeExpression = (59 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.BINARY_EXPRESSION,
    NameSpaceImport = (60 << 23),
    NamedImports = (61 << 23),
    NewExpression = (62 << 23) | JSNodeClass.EXPRESSION,
    NewInstanceExpression = (63 << 23) | JSNodeClass.EXPRESSION,
    NewTarget = (64 << 23) | JSNodeClass.LITERAL,
    NullLiteral = (65 << 23) | JSNodeClass.LITERAL,
    NumericLiteral = (66 << 23) | JSNodeClass.LITERAL,
    BigIntLiteral = (67 << 23) | JSNodeClass.LITERAL,
    ObjectLiteral = (68 << 23) | JSNodeClass.LITERAL,
    Parenthesized = (70 << 23) | JSNodeClass.EXPRESSION,
    PostExpression = (71 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.UNARY_EXPRESSION,
    PreExpression = (72 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.UNARY_EXPRESSION,
    PropertyBinding = (73 << 23) | JSNodeClass.ASSIGNMENT,
    RegexLiteral = (74 << 23) | JSNodeClass.LITERAL,
    RelationalExpression = (75 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.BINARY_EXPRESSION,
    ReturnStatement = (76 << 23) | JSNodeClass.STATEMENT,
    Script = (77 << 23),
    SetterMethod = (78 << 23) | JSNodeClass.METHOD,
    ShiftExpression = (79 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.BINARY_EXPRESSION,
    Specifier = (80 << 23) | JSNodeClass.BINARY_EXPRESSION,
    SpreadExpression = (81 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.UNARY_EXPRESSION,
    Spread = SpreadExpression,
    StringLiteral = (82 << 23) | JSNodeClass.LITERAL,
    SuperCall = (83 << 23) | JSNodeClass.EXPRESSION,
    SuperExpression = (84 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.UNARY_EXPRESSION,
    SwitchStatement = (85 << 23) | JSNodeClass.STATEMENT,
    Template = (86 << 23) | JSNodeClass.LITERAL | JSNodeClass.TEMPLATE,
    TemplateHead = (87 << 23),
    TemplateMiddle = (88 << 23),
    TemplateTail = (89 << 23),
    ThisLiteral = (90 << 23) | JSNodeClass.LITERAL,
    ThrowStatement = (91 << 23) | JSNodeClass.STATEMENT,
    TryStatement = (92 << 23) | JSNodeClass.STATEMENT,
    TypeofExpression = (93 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.UNARY_EXPRESSION,
    UnaryExpression = (94 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.UNARY_EXPRESSION,
    VariableStatement = (95 << 23) | JSNodeClass.LIST | JSNodeClass.DECLARATION | JSNodeClass.STATEMENT | JSNodeClass.HOISTABLE_DECLARATION,
    VariableDeclaration = (96 << 23) | JSNodeClass.LIST | JSNodeClass.DECLARATION,
    VoidExpression = (97 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.UNARY_EXPRESSION,
    WhileStatement = (98 << 23) | JSNodeClass.STATEMENT,
    WithStatement = (99 << 23) | JSNodeClass.STATEMENT,
    YieldExpression = (100 << 23) | JSNodeClass.EXPRESSION | JSNodeClass.UNARY_EXPRESSION,
    ObjectBinding = (101 << 23),
    ArrayBinding = (102 << 23),
    OptionalMemberExpression = (103 << 23) | JSNodeClass.EXPRESSION,
    OptionalChain = (104 << 23),
    CoalesceExpression = (105 << 23) | JSNodeClass.EXPRESSION
}
