import { JSNodeType } from "./node_type";


export enum JSNodeTypeLU {
    AdditiveExpression = JSNodeType.AdditiveExpression,
    Arguments = JSNodeType.Arguments,
    ArrayBinding = JSNodeType.ArrayBinding,
    ArrayLiteral = JSNodeType.ArrayLiteral,
    ArrowFunction = JSNodeType.ArrowFunction,
    AssignmentExpression = JSNodeType.AssignmentExpression,
    AwaitExpression = JSNodeType.AwaitExpression,
    BigIntLiteral = JSNodeType.BigIntLiteral,
    BindingExpression = JSNodeType.BindingExpression,
    BitwiseExpression = JSNodeType.BitwiseExpression,
    BlockStatement = JSNodeType.BlockStatement,
    BooleanLiteral = JSNodeType.BooleanLiteral,
    BreakStatement = JSNodeType.BreakStatement,
    CallExpression = JSNodeType.CallExpression,
    CaseBlock = JSNodeType.CaseBlock,
    CaseClause = JSNodeType.CaseClause,
    CatchClause = JSNodeType.CatchClause,
    Class = JSNodeType.Class,
    ComputedProperty = JSNodeType.ComputedProperty,
    ConditionalExpression = JSNodeType.ConditionalExpression,
    ContinueStatement = JSNodeType.ContinueStatement,
    DebuggerStatement = JSNodeType.DebuggerStatement,
    DefaultClause = JSNodeType.DefaultClause,
    DeleteExpression = JSNodeType.DeleteExpression,
    DoStatement = JSNodeType.DoStatement,
    Elision = JSNodeType.Elision,
    EmptyStatement = JSNodeType.EmptyStatement,
    EqualityExpression = JSNodeType.EqualityExpression,
    ExponentiationExpression = JSNodeType.ExponentiationExpression,
    ExportClause = JSNodeType.ExportClause,
    ExportDeclaration = JSNodeType.ExportDeclaration,
    ExpressionList = JSNodeType.ExpressionList,
    ExpressionStatement = JSNodeType.ExpressionStatement,
    FinallyClause = JSNodeType.FinallyClause,
    ForInStatement = JSNodeType.ForInStatement,
    FormalParameters = JSNodeType.FormalParameters,
    ForOfStatement = JSNodeType.ForOfStatement,
    ForStatement = JSNodeType.ForStatement,
    FromClause = JSNodeType.FromClause,
    FunctionBody = JSNodeType.FunctionBody,
    FunctionDeclaration = JSNodeType.FunctionDeclaration,
    FunctionExpression = JSNodeType.FunctionExpression,
    GetterMethod = JSNodeType.GetterMethod,
    Identifier = JSNodeType.Identifier,
    IdentifierBinding = JSNodeType.IdentifierBinding,
    IdentifierDefault = JSNodeType.IdentifierDefault,
    IdentifierLabel = JSNodeType.IdentifierLabel,
    IdentifierModule = JSNodeType.IdentifierModule,
    IdentifierName = JSNodeType.IdentifierName,
    IdentifierProperty = JSNodeType.IdentifierProperty,
    IdentifierReference = JSNodeType.IdentifierReference,
    IfStatement = JSNodeType.IfStatement,
    ImportClause = JSNodeType.ImportClause,
    ImportDeclaration = JSNodeType.ImportDeclaration,
    InExpression = JSNodeType.InExpression,
    InstanceOfExpression = JSNodeType.InstanceOfExpression,
    LabeledStatement = JSNodeType.LabeledStatement,
    LexicalBinding = JSNodeType.LexicalBinding,
    LexicalDeclaration = JSNodeType.LexicalDeclaration,
    LogicalExpression = JSNodeType.LogicalExpression,
    MemberExpression = JSNodeType.MemberExpression,
    Method = JSNodeType.Method,
    Module = JSNodeType.Module,
    MultiplicativeExpression = JSNodeType.MultiplicativeExpression,
    NamedImports = JSNodeType.NamedImports,
    NameSpaceImport = JSNodeType.NameSpaceImport,
    NewExpression = JSNodeType.NewExpression,
    NewInstanceExpression = JSNodeType.NewInstanceExpression,
    NewTarget = JSNodeType.NewTarget,
    NullLiteral = JSNodeType.NullLiteral,
    NumericLiteral = JSNodeType.NumericLiteral,
    ObjectBinding = JSNodeType.ObjectBinding,
    ObjectLiteral = JSNodeType.ObjectLiteral,
    Parameters = JSNodeType.Parameters,
    Parenthesized = JSNodeType.Parenthesized,
    PostExpression = JSNodeType.PostExpression,
    PreExpression = JSNodeType.PreExpression,
    PropertyBinding = JSNodeType.PropertyBinding,
    RegexLiteral = JSNodeType.RegexLiteral,
    RelationalExpression = JSNodeType.RelationalExpression,
    ReturnStatement = JSNodeType.ReturnStatement,
    Script = JSNodeType.Script,
    SetterMethod = JSNodeType.SetterMethod,
    ShiftExpression = JSNodeType.ShiftExpression,
    Specifier = JSNodeType.Specifier,
    Spread = JSNodeType.Spread,
    SpreadExpression = JSNodeType.SpreadExpression,
    StringLiteral = JSNodeType.StringLiteral,
    SuperCall = JSNodeType.SuperCall,
    SuperExpression = JSNodeType.SuperExpression,
    SwitchStatement = JSNodeType.SwitchStatement,
    Template = JSNodeType.Template,
    TemplateHead = JSNodeType.TemplateHead,
    TemplateMiddle = JSNodeType.TemplateMiddle,
    TemplateTail = JSNodeType.TemplateTail,
    ThisLiteral = JSNodeType.ThisLiteral,
    ThrowStatement = JSNodeType.ThrowStatement,
    TryStatement = JSNodeType.TryStatement,
    TypeofExpression = JSNodeType.TypeofExpression,
    UnaryExpression = JSNodeType.UnaryExpression,
    VariableDeclaration = JSNodeType.VariableDeclaration,
    VariableStatement = JSNodeType.VariableStatement,
    VoidExpression = JSNodeType.VoidExpression,
    WhileStatement = JSNodeType.WhileStatement,
    WithStatement = JSNodeType.WithStatement,
    YieldExpression = JSNodeType.YieldExpression,
    OptionalMemberExpression = JSNodeType.OptionalMemberExpression,
    OptionalChain = JSNodeType.OptionalChain,
    CoalesceExpression = JSNodeType.CoalesceExpression,
}
