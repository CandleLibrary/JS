import { buildParserMemoryBuffer, loadWASM } from "@candlelib/hydrocarbon/build/library/runtime.js";
import Lexer from "@candlelib/wind";

const debug_stack = [];
const { shared_memory, action_array, error_array } = buildParserMemoryBuffer(true, 4194304, 163920);

const recognizer =
    ((store_data, debug_stack) => {
        const data_view = new DataView(store_data);
        function load(offset) {
            return data_view.getUint16(offset, true);
        };
        function store(offset, val) {
            data_view.setUint32(offset, val, true);
        };
        const action_array_offset = 382976;
        const error_array_offset = 4577280;
        const TokenSpace = 1;
        const TokenNumber = 2;
        const TokenIdentifier = 4;
        const TokenNewLine = 8;
        const TokenSymbol = 16;
        const id = 2;
        const num = 4;
        let action_ptr = 0;
        let error_ptr = 0;
        let str;
        function createState(ENABLE_STACK_OUTPUT) {
            const IS_STATE_VALID = 1;
            return IS_STATE_VALID | (ENABLE_STACK_OUTPUT << 1);
        }
        function hasStateFailed(state) {
            const IS_STATE_VALID = 1;
            return 0 == (state & IS_STATE_VALID);
        }
        function isOutputEnabled(state) {
            return 0 < (state & 0x2);
        }
        function getTypeAt(code_point) {
            switch (load(code_point << 1) & 255) {
                default:
                case 0:
                    return TokenSymbol;
                case 1:
                    return TokenIdentifier;
                case 2:
                    return TokenSpace;
                case 3:
                case 4:
                    return TokenNewLine;
                case 5:
                    return TokenNumber;
            }
            return 0;
        }
        class Lexer {
            constructor() {
                this.ty = 0;
                this.tl = 0;
                this.off = 0;
                this.utf = 0;
                this.prev_off = 0;
            }
            copy(destination = new Lexer()) {
                destination.utf = this.utf;
                destination.ty = this.ty;
                destination.tl = this.tl;
                destination.off = this.off;
                destination.prev_off = this.prev_off;
                return destination;
            }
            sync(marker = new Lexer()) {
                marker.copy(this);
            }
            isSym() {
                return this.ty == TokenSymbol;
            }
            isNL() {
                return this.ty == TokenNewLine;
            }
            isSP() {
                return this.ty == TokenSpace;
            }
            isNum() {
                if (this.ty == TokenNumber) {
                    this.consumeNumeric();
                    return true;
                }
                return false;
            }
            isID() {
                if (this.ty == TokenIdentifier) {
                    this.consumeIdentifier();
                    return true;
                }
                return false;
            }
            typeIs(flag) {
                return (this.ty & flag) == this.ty;
            }
            consumeNumeric() {
                const l = str.length;
                let off = this.off;
                this.tl = 1;
                while ((++off < l) && (num & (load(0 + (str.codePointAt(off) << 1)) >> 8))) {
                    this.tl++;
                }
            }
            consumeIdentifier() {
                const l = str.length;
                let off = this.off;
                this.tl = 1;
                while ((++off < l) && ((num | id) & (load(0 + (str.codePointAt(off) << 1)) >> 8))) {
                    this.tl++;
                }
            }
            getUTF(delta = 0) {
                return str.codePointAt(this.off + delta);
            }
            getOffsetRegionDelta() {
                return this.off - this.prev_off;
            }
            advanceOffsetRegion() {
                this.prev_off = this.off + this.tl;
            }
            syncOffsetRegion() {
                this.prev_off = this.off;
            }
            typeAt(offset = 0) {
                offset = this.off + offset;
                if (offset >= str.length) {
                    return 0;
                }
                return getTypeAt(str.codePointAt(offset));
            }
            next() {
                this.off = this.off + this.tl;
                this.tl = 1;
                if (this.off >= str.length) {
                    this.ty = 0;
                    this.tl = 0;
                    this.utf = -1;
                    this.off = str.length;
                } else {
                    this.utf = str.codePointAt(this.off);
                    this.ty = getTypeAt(this.utf);
                }
                return this;
            }
            END() {
                return this.off >= str.length;
            }
        }
        function comments_tok_e92f206c4db1b5da(l) {
            if (defined_token_0e9d427e5497a7ad(l)/*[/asterisk] [//]*/) {
                let c = l.copy();
                if ($comments(c, createState(0))) {
                    l.tl = c.off - l.off;
                    return true;
                }
            }
            return false;
        }
        function def$binary_token_tok_702c3d4fea5befc5(l) {
            if (defined_token_33b1e9553bafe159(l)/*[0b]*/) {
                let c = l.copy();
                if ($def$binary_token(c, createState(0))) {
                    l.tl = c.off - l.off;
                    return true;
                }
            }
            return false;
        }
        function def$hex_token_tok_b428bec518edb93d(l) {
            if (defined_token_60c8247a60511d72(l)/*[0x]*/) {
                let c = l.copy();
                if ($def$hex_token(c, createState(0))) {
                    l.tl = c.off - l.off;
                    return true;
                }
            }
            return false;
        }
        function def$identifier_symbols_tok_cb43c29328476df0(l) {
            if (((l.utf == 95/*[_]*/) || (l.utf == 36/*[$]*/)) || l.isID()/*[id]*/) {
                let c = l.copy();
                if ($def$identifier_symbols(c, createState(0))) {
                    l.tl = c.off - l.off;
                    return true;
                }
            }
            return false;
        }
        function def$js_id_symbols_tok_b3199095c9facd2b(l) {
            if (((l.utf == 95/*[_]*/) || (l.utf == 36/*[$]*/)) || l.isID()/*[id]*/) {
                let c = l.copy();
                if ($def$js_id_symbols(c, createState(0))) {
                    l.tl = c.off - l.off;
                    return true;
                }
            }
            return false;
        }
        function def$octal_token_tok_1abc5a9e79c1592d(l) {
            if (defined_token_ad665389bc23e01f(l)/*[0o] [0O]*/) {
                let c = l.copy();
                if ($def$octal_token(c, createState(0))) {
                    l.tl = c.off - l.off;
                    return true;
                }
            }
            return false;
        }
        function def$scientific_token_tok_55f659f8323305af(l) {
            if (l.isNum()/*[num]*/) {
                let c = l.copy();
                if ($def$scientific_token(c, createState(0))) {
                    l.tl = c.off - l.off;
                    return true;
                }
            }
            return false;
        }
        function defined_token_02147395f110c9cd(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 60) {
                val = l.getUTF(1);
                if (val == 60) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_042ea6dc9657ee07(l) {
            let ACCEPT = false;
            if ((((l.getUTF(3) == 100) && (l.getUTF(2) == 105)) && (l.getUTF(1) == 111)) && (l.getUTF(0) == 118)) {
                l.ty = TokenSymbol;
                l.tl = 4;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_04e94f0279c3936b(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 33) {
                if (l.getUTF(1) == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    if (l.getUTF(2) == 61) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_05441863ef2044a2(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 100) {
                val = l.getUTF(1);
                if (val == 101) {
                    val = l.getUTF(2);
                    if (val == 98) {
                        if (((((l.getUTF(7) == 114) && (l.getUTF(6) == 101)) && (l.getUTF(5) == 103)) && (l.getUTF(4) == 103)) && (l.getUTF(3) == 117)) {
                            l.ty = TokenSymbol;
                            l.tl = 8;
                            ACCEPT = true;
                        }
                    } else if (val == 102) {
                        if ((((l.getUTF(6) == 116) && (l.getUTF(5) == 108)) && (l.getUTF(4) == 117)) && (l.getUTF(3) == 97)) {
                            l.ty = TokenSymbol;
                            l.tl = 7;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 111) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_06a0f520696bd72c(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 124) && (l.getUTF(0) == 124))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_075b04d35f74cc71(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 38) && (l.getUTF(0) == 38))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_07f7913e30dbc995(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 110) {
                val = l.getUTF(1);
                if (val == 117) {
                    if ((l.getUTF(3) == 108) && (l.getUTF(2) == 108)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 101) {
                    if (l.getUTF(2) == 119) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_0a34667347bd2a3a(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 115) {
                val = l.getUTF(1);
                if (val == 117) {
                    if (((l.getUTF(4) == 114) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                } else if (val == 101) {
                    if (l.getUTF(2) == 116) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                } else if (val == 119) {
                    if ((((l.getUTF(5) == 104) && (l.getUTF(4) == 99)) && (l.getUTF(3) == 116)) && (l.getUTF(2) == 105)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_0b6f38e897a6033b(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 100) {
                val = l.getUTF(1);
                if (val == 101) {
                    val = l.getUTF(2);
                    if (val == 98) {
                        if (((((l.getUTF(7) == 114) && (l.getUTF(6) == 101)) && (l.getUTF(5) == 103)) && (l.getUTF(4) == 103)) && (l.getUTF(3) == 117)) {
                            l.ty = TokenSymbol;
                            l.tl = 8;
                            ACCEPT = true;
                        }
                    } else if (val == 102) {
                        if ((((l.getUTF(6) == 116) && (l.getUTF(5) == 108)) && (l.getUTF(4) == 117)) && (l.getUTF(3) == 97)) {
                            l.ty = TokenSymbol;
                            l.tl = 7;
                            ACCEPT = true;
                        }
                    } else if (val == 108) {
                        if (((l.getUTF(5) == 101) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 101)) {
                            l.ty = TokenSymbol;
                            l.tl = 6;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 111) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_0e9d427e5497a7ad(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 47) {
                val = l.getUTF(1);
                if (val == 42) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 47) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_1110717de6c46549(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 60) && (l.getUTF(0) == 60)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_14469127dc9c2c1f(l) {
            let ACCEPT = false;
            if ((((l.getUTF(3) == 109) && (l.getUTF(2) == 111)) && (l.getUTF(1) == 114)) && (l.getUTF(0) == 102)) {
                l.ty = TokenSymbol;
                l.tl = 4;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_150d4ae08ded9ad2(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 105) {
                val = l.getUTF(1);
                if (val == 102) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 110) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    val = l.getUTF(2);
                    if (val == 115) {
                        if (((((((l.getUTF(9) == 102) && (l.getUTF(8) == 111)) && (l.getUTF(7) == 101)) && (l.getUTF(6) == 99)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 97)) && (l.getUTF(3) == 116)) {
                            l.ty = TokenSymbol;
                            l.tl = 10;
                            ACCEPT = true;
                        }
                    } else if (val == 116) {
                        if ((((((l.getUTF(8) == 101) && (l.getUTF(7) == 99)) && (l.getUTF(6) == 97)) && (l.getUTF(5) == 102)) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 101)) {
                            l.ty = TokenSymbol;
                            l.tl = 9;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 109) {
                    if ((((((((l.getUTF(9) == 115) && (l.getUTF(8) == 116)) && (l.getUTF(7) == 110)) && (l.getUTF(6) == 101)) && (l.getUTF(5) == 109)) && (l.getUTF(4) == 101)) && (l.getUTF(3) == 108)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 10;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_1517f515b75e1bb7(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 96) && (l.getUTF(0) == 96)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_15518d202137f56e(l) {
            let ACCEPT = false;
            if ((((((l.getUTF(5) == 116) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 111)) && (l.getUTF(2) == 112)) && (l.getUTF(1) == 120)) && (l.getUTF(0) == 101)) {
                l.ty = TokenSymbol;
                l.tl = 6;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_19cd74c69f5512e8(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 96) && (l.getUTF(0) == 96))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_1ae4fe309b644fa1(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 118) {
                val = l.getUTF(1);
                if (val == 111) {
                    if ((l.getUTF(3) == 100) && (l.getUTF(2) == 105)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 97) {
                    if (l.getUTF(2) == 114) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_1c4bd208294c1ee4(l) {
            let ACCEPT = false;
            if (((l.getUTF(2) == 121) && (l.getUTF(1) == 114)) && (l.getUTF(0) == 116)) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_1cb42c7dd41b3a7e(l) {
            let ACCEPT = false;
            if ((((((l.getUTF(5) == 116) && (l.getUTF(4) == 101)) && (l.getUTF(3) == 103)) && (l.getUTF(2) == 114)) && (l.getUTF(1) == 97)) && (l.getUTF(0) == 116)) {
                l.ty = TokenSymbol;
                l.tl = 6;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_1f80f2e0a149fe3d(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 105) {
                val = l.getUTF(1);
                if (val == 109) {
                    if ((((l.getUTF(5) == 116) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 111)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                } else if (val == 102) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_1fa4a9b14e1fe8cc(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 42) && (l.getUTF(0) == 42))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_22a3e3a7de4e4fb7(l) {
            let ACCEPT = false;
            if (((l.getUTF(2) == 114) && (l.getUTF(1) == 111)) && (l.getUTF(0) == 102)) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_2c342d130718e813(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 61) && (l.getUTF(0) == 37))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_2c51a4b82e64ba22(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 38) {
                val = l.getUTF(1);
                if (val == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 38) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_2cf552cd86bb015e(l) {
            let ACCEPT = false;
            if ((((l.getUTF(3) == 104) && (l.getUTF(2) == 116)) && (l.getUTF(1) == 105)) && (l.getUTF(0) == 119)) {
                l.ty = TokenSymbol;
                l.tl = 4;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_2d05a4070a3ebcf4(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 115) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 97)) && (l.getUTF(1) == 108)) && (l.getUTF(0) == 99)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_2ed685dc4925cfa4(l) {
            let ACCEPT = false;
            if ((((((l.getUTF(5) == 116) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 111)) && (l.getUTF(2) == 112)) && (l.getUTF(1) == 109)) && (l.getUTF(0) == 105)) {
                l.ty = TokenSymbol;
                l.tl = 6;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_318c95b1e64de46d(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 60) {
                val = l.getUTF(1);
                if (val == 60) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    if (l.getUTF(2) == 61) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                } else if (val == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_33b1e9553bafe159(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 98) && (l.getUTF(0) == 48)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_35cdf6168a8ead76(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 115) {
                val = l.getUTF(1);
                if (val == 117) {
                    if (((l.getUTF(4) == 114) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                } else if (val == 119) {
                    if ((((l.getUTF(5) == 104) && (l.getUTF(4) == 99)) && (l.getUTF(3) == 116)) && (l.getUTF(2) == 105)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_37edf5ebc00dbfe6(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 61) && (l.getUTF(0) == 47))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_38bd1ef252233e12(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 105) {
                val = l.getUTF(1);
                if (val == 102) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 109) {
                    if ((((l.getUTF(5) == 116) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 111)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                } else if (val == 110) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    if (l.getUTF(2) == 115) {
                        if (((((((l.getUTF(9) == 102) && (l.getUTF(8) == 111)) && (l.getUTF(7) == 101)) && (l.getUTF(6) == 99)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 97)) && (l.getUTF(3) == 116)) {
                            l.ty = TokenSymbol;
                            l.tl = 10;
                            ACCEPT = true;
                        }
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_39fb08573e91f166(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 38) && (l.getUTF(0) == 38)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_3be2267a053f0395(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 62) {
                val = l.getUTF(1);
                if (val == 62) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    val = l.getUTF(2);
                    if (val == 61) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    } else if (val == 62) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                        if (l.getUTF(3) == 61) {
                            l.ty = TokenSymbol;
                            l.tl = 4;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_3e1cfcd85fb122d2(l) {
            let ACCEPT = false;
            if ((l.getUTF(3) != NaN) && (((l.getUTF(2) == 61) && (l.getUTF(1) == 42)) && (l.getUTF(0) == 42))) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_3eff041ba9fc8573(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 46) && (l.getUTF(0) == 63)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_42ebdf0a20e77f1c(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 102) {
                val = l.getUTF(1);
                if (val == 97) {
                    if (((l.getUTF(4) == 101) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 108)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                } else if (val == 117) {
                    if ((((((l.getUTF(7) == 110) && (l.getUTF(6) == 111)) && (l.getUTF(5) == 105)) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 99)) && (l.getUTF(2) == 110)) {
                        l.ty = TokenSymbol;
                        l.tl = 8;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_4733e5135a271ed8(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 61) && (l.getUTF(0) == 37)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_4749150ec48378d0(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 45) {
                val = l.getUTF(1);
                if (val == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 45) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_485338d34f29b52a(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 42) {
                if (l.getUTF(1) == 42) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    if (l.getUTF(2) == 61) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_4b13d558acb940fb(l) {
            let ACCEPT = false;
            if ((((l.getUTF(3) == 101) && (l.getUTF(2) == 115)) && (l.getUTF(1) == 97)) && (l.getUTF(0) == 99)) {
                l.ty = TokenSymbol;
                l.tl = 4;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_4c51ded3b971fa93(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 111) && (l.getUTF(0) == 100)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_4d1002802d53d117(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 116) {
                val = l.getUTF(1);
                if (val == 104) {
                    if (((l.getUTF(4) == 119) && (l.getUTF(3) == 111)) && (l.getUTF(2) == 114)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                } else if (val == 114) {
                    if (l.getUTF(2) == 121) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_4df9552a310b74e2(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 61) {
                if (l.getUTF(1) == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    if (l.getUTF(2) == 61) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_53acc3dc3e0044c1(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 116) {
                val = l.getUTF(1);
                if (val == 104) {
                    val = l.getUTF(2);
                    if (val == 105) {
                        if (l.getUTF(3) == 115) {
                            l.ty = TokenSymbol;
                            l.tl = 4;
                            ACCEPT = true;
                        }
                    } else if (val == 114) {
                        if ((l.getUTF(4) == 119) && (l.getUTF(3) == 111)) {
                            l.ty = TokenSymbol;
                            l.tl = 5;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 114) {
                    if (l.getUTF(2) == 121) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                } else if (val == 121) {
                    if ((((l.getUTF(5) == 102) && (l.getUTF(4) == 111)) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_57c98daa5c98098c(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 99) {
                val = l.getUTF(1);
                if (val == 108) {
                    if (((l.getUTF(4) == 115) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 97)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                } else if (val == 111) {
                    if (((l.getUTF(4) == 116) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 110)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_57da255105f722f9(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 101) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 108)) && (l.getUTF(1) == 97)) && (l.getUTF(0) == 102)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_57e43262d833cfeb(l) {
            let ACCEPT = false;
            if ((((l.getUTF(3) == 115) && (l.getUTF(2) == 105)) && (l.getUTF(1) == 104)) && (l.getUTF(0) == 116)) {
                l.ty = TokenSymbol;
                l.tl = 4;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_5892ddf818179b1b(l) {
            let ACCEPT = false;
            if (((l.getUTF(3) != NaN) && (l.getUTF(3) != NaN)) && (((l.getUTF(2) == 61) && (l.getUTF(1) == 60)) && (l.getUTF(0) == 60))) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_5ae254f69676cbf1(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 102) {
                val = l.getUTF(1);
                if (val == 105) {
                    if (((((l.getUTF(6) == 121) && (l.getUTF(5) == 108)) && (l.getUTF(4) == 108)) && (l.getUTF(3) == 97)) && (l.getUTF(2) == 110)) {
                        l.ty = TokenSymbol;
                        l.tl = 7;
                        ACCEPT = true;
                    }
                } else if (val == 111) {
                    if (l.getUTF(2) == 114) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                } else if (val == 117) {
                    if ((((((l.getUTF(7) == 110) && (l.getUTF(6) == 111)) && (l.getUTF(5) == 105)) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 99)) && (l.getUTF(2) == 110)) {
                        l.ty = TokenSymbol;
                        l.tl = 8;
                        ACCEPT = true;
                    }
                } else if (val == 97) {
                    if (((l.getUTF(4) == 101) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 108)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_5bca542dce980d9c(l) {
            let ACCEPT = false;
            if (((l.getUTF(2) == 116) && (l.getUTF(1) == 101)) && (l.getUTF(0) == 115)) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_60c8247a60511d72(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 120) && (l.getUTF(0) == 48)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_6135305a1f53a41a(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 105) {
                val = l.getUTF(1);
                if (val == 109) {
                    if ((((((((l.getUTF(9) == 115) && (l.getUTF(8) == 116)) && (l.getUTF(7) == 110)) && (l.getUTF(6) == 101)) && (l.getUTF(5) == 109)) && (l.getUTF(4) == 101)) && (l.getUTF(3) == 108)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 10;
                        ACCEPT = true;
                    }
                } else if (val == 110) {
                    if (((((((l.getUTF(8) == 101) && (l.getUTF(7) == 99)) && (l.getUTF(6) == 97)) && (l.getUTF(5) == 102)) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 116)) {
                        l.ty = TokenSymbol;
                        l.tl = 9;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_62e66454a337f212(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 124) && (l.getUTF(0) == 124)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_663cc31c85f53275(l) {
            let ACCEPT = false;
            if ((((((((l.getUTF(7) == 101) && (l.getUTF(6) == 117)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 105)) && (l.getUTF(3) == 116)) && (l.getUTF(2) == 110)) && (l.getUTF(1) == 111)) && (l.getUTF(0) == 99)) {
                l.ty = TokenSymbol;
                l.tl = 8;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_670f23e41126e00b(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 97) {
                val = l.getUTF(1);
                if (val == 115) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    if (l.getUTF(2) == 121) {
                        if ((l.getUTF(4) == 99) && (l.getUTF(3) == 110)) {
                            l.ty = TokenSymbol;
                            l.tl = 5;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 119) {
                    if (((l.getUTF(4) == 116) && (l.getUTF(3) == 105)) && (l.getUTF(2) == 97)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_675b48fc93d1800c(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 46) && (l.getUTF(0) == 63))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_67a732a27c736a2f(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 43) && (l.getUTF(0) == 43)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_67da9f7ceaf8e451(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 119) {
                val = l.getUTF(1);
                if (val == 105) {
                    if ((l.getUTF(3) == 104) && (l.getUTF(2) == 116)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 104) {
                    if (((l.getUTF(4) == 101) && (l.getUTF(3) == 108)) && (l.getUTF(2) == 105)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_6b20aa97513f1fc7(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 47) && (l.getUTF(0) == 47)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_6d4f77707d3e0e5a(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 43) && (l.getUTF(0) == 43))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_6fe6f90f8fe15dd0(l) {
            let ACCEPT = false;
            if ((((l.getUTF(3) == 108) && (l.getUTF(2) == 108)) && (l.getUTF(1) == 117)) && (l.getUTF(0) == 110)) {
                l.ty = TokenSymbol;
                l.tl = 4;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_7330fb2be3dc26eb(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 43) {
                val = l.getUTF(1);
                if (val == 43) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_74535e89586ef7a1(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 101) {
                val = l.getUTF(1);
                if (val == 108) {
                    if ((l.getUTF(3) == 101) && (l.getUTF(2) == 115)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 120) {
                    if ((((l.getUTF(5) == 116) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 111)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_75d68ac65a42afc4(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 123) && (l.getUTF(0) == 36)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_79ab361fc2644f92(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 62) {
                val = l.getUTF(1);
                if (val == 62) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    if (l.getUTF(2) == 62) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                } else if (val == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_79b82aa5b55f0605(l) {
            let ACCEPT = false;
            if (((l.getUTF(2) == 119) && (l.getUTF(1) == 101)) && (l.getUTF(0) == 110)) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_7a48bf3a46a95de4(l) {
            let ACCEPT = false;
            if ((((l.getUTF(3) == 97) && (l.getUTF(2) == 116)) && (l.getUTF(1) == 101)) && (l.getUTF(0) == 109)) {
                l.ty = TokenSymbol;
                l.tl = 4;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_7b465f3c7dd55e63(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 102) {
                val = l.getUTF(1);
                if (val == 117) {
                    if ((((((l.getUTF(7) == 110) && (l.getUTF(6) == 111)) && (l.getUTF(5) == 105)) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 99)) && (l.getUTF(2) == 110)) {
                        l.ty = TokenSymbol;
                        l.tl = 8;
                        ACCEPT = true;
                    }
                } else if (val == 114) {
                    if ((l.getUTF(3) == 109) && (l.getUTF(2) == 111)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 97) {
                    if (((l.getUTF(4) == 101) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 108)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_7c714fc2ee65a23e(l) {
            let ACCEPT = false;
            if ((((l.getUTF(3) == 101) && (l.getUTF(2) == 115)) && (l.getUTF(1) == 108)) && (l.getUTF(0) == 101)) {
                l.ty = TokenSymbol;
                l.tl = 4;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_7c7dc8357e27bfc9(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 61) && (l.getUTF(0) == 60))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_845a30f46ac258a6(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 97) {
                if (l.getUTF(1) == 115) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    if (l.getUTF(2) == 121) {
                        if ((l.getUTF(4) == 99) && (l.getUTF(3) == 110)) {
                            l.ty = TokenSymbol;
                            l.tl = 5;
                            ACCEPT = true;
                        }
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_870ef36bec3a881f(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 43) {
                val = l.getUTF(1);
                if (val == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 43) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_876f036172605c26(l) {
            let ACCEPT = false;
            if ((((((l.getUTF(5) == 110) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 117)) && (l.getUTF(2) == 116)) && (l.getUTF(1) == 101)) && (l.getUTF(0) == 114)) {
                l.ty = TokenSymbol;
                l.tl = 6;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_87b2bbc4cf92dae2(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 63) && (l.getUTF(0) == 63)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_87cd28843f68bc2f(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 61) && (l.getUTF(0) == 94)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_88fe0e82e8d7b114(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 42) && (l.getUTF(0) == 47)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_8b998ab1c79c37f4(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 100) {
                val = l.getUTF(1);
                if (val == 101) {
                    val = l.getUTF(2);
                    if (val == 102) {
                        if ((((l.getUTF(6) == 116) && (l.getUTF(5) == 108)) && (l.getUTF(4) == 117)) && (l.getUTF(3) == 97)) {
                            l.ty = TokenSymbol;
                            l.tl = 7;
                            ACCEPT = true;
                        }
                    } else if (val == 108) {
                        if (((l.getUTF(5) == 101) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 101)) {
                            l.ty = TokenSymbol;
                            l.tl = 6;
                            ACCEPT = true;
                        }
                    } else if (val == 98) {
                        if (((((l.getUTF(7) == 114) && (l.getUTF(6) == 101)) && (l.getUTF(5) == 103)) && (l.getUTF(4) == 103)) && (l.getUTF(3) == 117)) {
                            l.ty = TokenSymbol;
                            l.tl = 8;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 111) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_8bbb4e33781aec74(l) {
            let ACCEPT = false;
            if ((l.getUTF(10) != NaN) && ((((((((((l.getUTF(9) == 102) && (l.getUTF(8) == 111)) && (l.getUTF(7) == 101)) && (l.getUTF(6) == 99)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 97)) && (l.getUTF(3) == 116)) && (l.getUTF(2) == 115)) && (l.getUTF(1) == 110)) && (l.getUTF(0) == 105))) {
                l.ty = TokenSymbol;
                l.tl = 10;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_8c2d44d7057fe753(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 61) && (l.getUTF(0) == 94))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_8c647931e6bf0c07(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 45) {
                val = l.getUTF(1);
                if (val == 45) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_8d305de3f9ddde92(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 61) && (l.getUTF(0) == 38)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_8e8ee78381c90ca5(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 116) {
                val = l.getUTF(1);
                if (val == 104) {
                    val = l.getUTF(2);
                    if (val == 105) {
                        if (l.getUTF(3) == 115) {
                            l.ty = TokenSymbol;
                            l.tl = 4;
                            ACCEPT = true;
                        }
                    } else if (val == 114) {
                        if ((l.getUTF(4) == 119) && (l.getUTF(3) == 111)) {
                            l.ty = TokenSymbol;
                            l.tl = 5;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 97) {
                    if ((((l.getUTF(5) == 116) && (l.getUTF(4) == 101)) && (l.getUTF(3) == 103)) && (l.getUTF(2) == 114)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                } else if (val == 114) {
                    val = l.getUTF(2);
                    if (val == 117) {
                        if (l.getUTF(3) == 101) {
                            l.ty = TokenSymbol;
                            l.tl = 4;
                            ACCEPT = true;
                        }
                    } else if (val == 121) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                } else if (val == 121) {
                    if ((((l.getUTF(5) == 102) && (l.getUTF(4) == 111)) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_8ed5fb4bce429503(l) {
            let ACCEPT = false;
            if ((((((l.getUTF(5) == 101) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 108)) && (l.getUTF(1) == 101)) && (l.getUTF(0) == 100)) {
                l.ty = TokenSymbol;
                l.tl = 6;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_8f5d282f35165648(l) {
            let ACCEPT = false;
            if (((l.getUTF(2) == 116) && (l.getUTF(1) == 101)) && (l.getUTF(0) == 103)) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_8fdd5a50d81134d2(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 114) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 112)) && (l.getUTF(1) == 117)) && (l.getUTF(0) == 115)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_910c81aa02511c5e(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 62) {
                if (l.getUTF(1) == 62) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    if (l.getUTF(2) == 62) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_911b730840de3b6c(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 102) && (l.getUTF(0) == 105)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_912bb2f6b2683177(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 99) {
                val = l.getUTF(1);
                if (val == 111) {
                    if (l.getUTF(2) == 110) {
                        val = l.getUTF(3);
                        if (val == 116) {
                            if ((((l.getUTF(7) == 101) && (l.getUTF(6) == 117)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 105)) {
                                l.ty = TokenSymbol;
                                l.tl = 8;
                                ACCEPT = true;
                            }
                        } else if (val == 115) {
                            if (l.getUTF(4) == 116) {
                                l.ty = TokenSymbol;
                                l.tl = 5;
                                ACCEPT = true;
                            }
                        }
                    }
                } else if (val == 108) {
                    if (((l.getUTF(4) == 115) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 97)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_926ab0b5b37a4ddd(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 101) && (l.getUTF(3) == 108)) && (l.getUTF(2) == 105)) && (l.getUTF(1) == 104)) && (l.getUTF(0) == 119)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_93b20e8c3e2b885c(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 105) {
                val = l.getUTF(1);
                if (val == 109) {
                    if ((((((((l.getUTF(9) == 115) && (l.getUTF(8) == 116)) && (l.getUTF(7) == 110)) && (l.getUTF(6) == 101)) && (l.getUTF(5) == 109)) && (l.getUTF(4) == 101)) && (l.getUTF(3) == 108)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 10;
                        ACCEPT = true;
                    }
                } else if (val == 110) {
                    if ((l.getUTF(9) != NaN) && (((((((l.getUTF(8) == 101) && (l.getUTF(7) == 99)) && (l.getUTF(6) == 97)) && (l.getUTF(5) == 102)) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 116))) {
                        l.ty = TokenSymbol;
                        l.tl = 9;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_9451180aac506098(l) {
            let ACCEPT = false;
            if ((((((l.getUTF(5) == 102) && (l.getUTF(4) == 111)) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 112)) && (l.getUTF(1) == 121)) && (l.getUTF(0) == 116)) {
                l.ty = TokenSymbol;
                l.tl = 6;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_967ffd9bf1cf840d(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 102) {
                val = l.getUTF(1);
                if (val == 114) {
                    if ((l.getUTF(3) == 109) && (l.getUTF(2) == 111)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 97) {
                    if (((l.getUTF(4) == 101) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 108)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                } else if (val == 111) {
                    if (l.getUTF(2) == 114) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                } else if (val == 117) {
                    if ((((((l.getUTF(7) == 110) && (l.getUTF(6) == 111)) && (l.getUTF(5) == 105)) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 99)) && (l.getUTF(2) == 110)) {
                        l.ty = TokenSymbol;
                        l.tl = 8;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_97755a959607b02c(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 61) && (l.getUTF(0) == 43))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_97774f2b5bfeb250(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 61) && (l.getUTF(0) == 47)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_99035833d16742d9(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 110) {
                val = l.getUTF(1);
                if (val == 101) {
                    if (l.getUTF(2) == 119) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                } else if (val == 117) {
                    if ((l.getUTF(3) == 108) && (l.getUTF(2) == 108)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_99376be254728810(l) {
            let ACCEPT = false;
            if ((((l.getUTF(3) == 101) && (l.getUTF(2) == 117)) && (l.getUTF(1) == 114)) && (l.getUTF(0) == 116)) {
                l.ty = TokenSymbol;
                l.tl = 4;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_9d56a2003e2b2110(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 61) && (l.getUTF(0) == 45)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_a3300687f6beda2f(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 116) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 110)) && (l.getUTF(1) == 111)) && (l.getUTF(0) == 99)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_a7b718719b23bb48(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 99) {
                val = l.getUTF(1);
                if (val == 111) {
                    if (l.getUTF(2) == 110) {
                        val = l.getUTF(3);
                        if (val == 116) {
                            if ((((l.getUTF(7) == 101) && (l.getUTF(6) == 117)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 105)) {
                                l.ty = TokenSymbol;
                                l.tl = 8;
                                ACCEPT = true;
                            }
                        } else if (val == 115) {
                            if (l.getUTF(4) == 116) {
                                l.ty = TokenSymbol;
                                l.tl = 5;
                                ACCEPT = true;
                            }
                        }
                    }
                } else if (val == 108) {
                    if (((l.getUTF(4) == 115) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 97)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                } else if (val == 97) {
                    if ((l.getUTF(3) == 101) && (l.getUTF(2) == 115)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_aaa75300a4a9f79d(l) {
            let ACCEPT = false;
            if (((l.getUTF(3) != NaN) && (l.getUTF(3) != NaN)) && (((l.getUTF(2) == 61) && (l.getUTF(1) == 42)) && (l.getUTF(0) == 42))) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_aac16ca323764d7a(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 119) {
                val = l.getUTF(1);
                if (val == 104) {
                    if (((l.getUTF(4) == 101) && (l.getUTF(3) == 108)) && (l.getUTF(2) == 105)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                } else if (val == 105) {
                    if ((l.getUTF(3) == 104) && (l.getUTF(2) == 116)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_ac4e40d39583f370(l) {
            let ACCEPT = false;
            if (((((((l.getUTF(6) == 121) && (l.getUTF(5) == 108)) && (l.getUTF(4) == 108)) && (l.getUTF(3) == 97)) && (l.getUTF(2) == 110)) && (l.getUTF(1) == 105)) && (l.getUTF(0) == 102)) {
                l.ty = TokenSymbol;
                l.tl = 7;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_acb0e4ed01f91aec(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 116) {
                val = l.getUTF(1);
                if (val == 104) {
                    if ((l.getUTF(3) == 115) && (l.getUTF(2) == 105)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 114) {
                    if ((l.getUTF(3) == 101) && (l.getUTF(2) == 117)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_ad665389bc23e01f(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 48) {
                val = l.getUTF(1);
                if (val == 111) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 79) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_af69c622b99813ca(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 105) {
                if (l.getUTF(1) == 110) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    if (l.getUTF(2) == 115) {
                        if (((((((l.getUTF(9) == 102) && (l.getUTF(8) == 111)) && (l.getUTF(7) == 101)) && (l.getUTF(6) == 99)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 97)) && (l.getUTF(3) == 116)) {
                            l.ty = TokenSymbol;
                            l.tl = 10;
                            ACCEPT = true;
                        }
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_b4440dba03e6daa2(l) {
            let ACCEPT = false;
            if (((l.getUTF(2) == 61) && (l.getUTF(1) == 60)) && (l.getUTF(0) == 60)) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_b564093a441eda05(l) {
            let ACCEPT = false;
            if ((((((l.getUTF(5) == 99) && (l.getUTF(4) == 105)) && (l.getUTF(3) == 116)) && (l.getUTF(2) == 97)) && (l.getUTF(1) == 116)) && (l.getUTF(0) == 115)) {
                l.ty = TokenSymbol;
                l.tl = 6;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_b64c7c58a10dcef3(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 118) {
                val = l.getUTF(1);
                if (val == 97) {
                    if (l.getUTF(2) == 114) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                } else if (val == 111) {
                    if ((l.getUTF(3) == 100) && (l.getUTF(2) == 105)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_b6bc2531754746f6(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 104) && (l.getUTF(3) == 99)) && (l.getUTF(2) == 116)) && (l.getUTF(1) == 97)) && (l.getUTF(0) == 99)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_b7730e2b48fe68f8(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 105) {
                val = l.getUTF(1);
                if (val == 102) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 109) {
                    if (l.getUTF(2) == 112) {
                        val = l.getUTF(3);
                        if (val == 111) {
                            if ((l.getUTF(5) == 116) && (l.getUTF(4) == 114)) {
                                l.ty = TokenSymbol;
                                l.tl = 6;
                                ACCEPT = true;
                            }
                        } else if (val == 108) {
                            if ((((((l.getUTF(9) == 115) && (l.getUTF(8) == 116)) && (l.getUTF(7) == 110)) && (l.getUTF(6) == 101)) && (l.getUTF(5) == 109)) && (l.getUTF(4) == 101)) {
                                l.ty = TokenSymbol;
                                l.tl = 10;
                                ACCEPT = true;
                            }
                        }
                    }
                } else if (val == 110) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                    val = l.getUTF(2);
                    if (val == 115) {
                        if (((((((l.getUTF(9) == 102) && (l.getUTF(8) == 111)) && (l.getUTF(7) == 101)) && (l.getUTF(6) == 99)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 97)) && (l.getUTF(3) == 116)) {
                            l.ty = TokenSymbol;
                            l.tl = 10;
                            ACCEPT = true;
                        }
                    } else if (val == 116) {
                        if ((((((l.getUTF(8) == 101) && (l.getUTF(7) == 99)) && (l.getUTF(6) == 97)) && (l.getUTF(5) == 102)) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 101)) {
                            l.ty = TokenSymbol;
                            l.tl = 9;
                            ACCEPT = true;
                        }
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_b821a301e2038a49(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 62) {
                if (l.getUTF(1) == 62) {
                    val = l.getUTF(2);
                    if (val == 61) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    } else if (val == 62) {
                        if (l.getUTF(3) == 61) {
                            l.ty = TokenSymbol;
                            l.tl = 4;
                            ACCEPT = true;
                        }
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_b910302f4210711c(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 110) && (l.getUTF(0) == 105)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_b9a9416a75e8c551(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 99) {
                val = l.getUTF(1);
                if (val == 97) {
                    val = l.getUTF(2);
                    if (val == 115) {
                        if (l.getUTF(3) == 101) {
                            l.ty = TokenSymbol;
                            l.tl = 4;
                            ACCEPT = true;
                        }
                    } else if (val == 116) {
                        if ((l.getUTF(4) == 104) && (l.getUTF(3) == 99)) {
                            l.ty = TokenSymbol;
                            l.tl = 5;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 111) {
                    if (l.getUTF(2) == 110) {
                        val = l.getUTF(3);
                        if (val == 115) {
                            if (l.getUTF(4) == 116) {
                                l.ty = TokenSymbol;
                                l.tl = 5;
                                ACCEPT = true;
                            }
                        } else if (val == 116) {
                            if ((((l.getUTF(7) == 101) && (l.getUTF(6) == 117)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 105)) {
                                l.ty = TokenSymbol;
                                l.tl = 8;
                                ACCEPT = true;
                            }
                        }
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_bab67a61f0334bce(l) {
            let ACCEPT = false;
            if ((((((((l.getUTF(7) == 114) && (l.getUTF(6) == 101)) && (l.getUTF(5) == 103)) && (l.getUTF(4) == 103)) && (l.getUTF(3) == 117)) && (l.getUTF(2) == 98)) && (l.getUTF(1) == 101)) && (l.getUTF(0) == 100)) {
                l.ty = TokenSymbol;
                l.tl = 8;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_bc9f32cdea34416c(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 60) && (l.getUTF(0) == 60))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_bfaf50116b98d6b4(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 63) && (l.getUTF(0) == 63))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_c1fd3ef6c0b69274(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 47) && (l.getUTF(0) == 42)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_c24c5cb9b7913dbc(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 61) && (l.getUTF(0) == 43)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_c3524ff0dce64492(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 107) && (l.getUTF(3) == 97)) && (l.getUTF(2) == 101)) && (l.getUTF(1) == 114)) && (l.getUTF(0) == 98)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_c460df0c19b30757(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 99) {
                val = l.getUTF(1);
                if (val == 97) {
                    val = l.getUTF(2);
                    if (val == 115) {
                        if (l.getUTF(3) == 101) {
                            l.ty = TokenSymbol;
                            l.tl = 4;
                            ACCEPT = true;
                        }
                    } else if (val == 116) {
                        if ((l.getUTF(4) == 104) && (l.getUTF(3) == 99)) {
                            l.ty = TokenSymbol;
                            l.tl = 5;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 108) {
                    if (((l.getUTF(4) == 115) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 97)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                } else if (val == 111) {
                    if (l.getUTF(2) == 110) {
                        val = l.getUTF(3);
                        if (val == 115) {
                            if (l.getUTF(4) == 116) {
                                l.ty = TokenSymbol;
                                l.tl = 5;
                                ACCEPT = true;
                            }
                        } else if (val == 116) {
                            if ((((l.getUTF(7) == 101) && (l.getUTF(6) == 117)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 105)) {
                                l.ty = TokenSymbol;
                                l.tl = 8;
                                ACCEPT = true;
                            }
                        }
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_c4d5aeb40acb5412(l) {
            let ACCEPT = false;
            if ((((((l.getUTF(5) == 104) && (l.getUTF(4) == 99)) && (l.getUTF(3) == 116)) && (l.getUTF(2) == 105)) && (l.getUTF(1) == 119)) && (l.getUTF(0) == 115)) {
                l.ty = TokenSymbol;
                l.tl = 6;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_c6b5fbb944702d5a(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 102) && (l.getUTF(0) == 111)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_c7d7983a743dfb89(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 61) && (l.getUTF(0) == 38))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_ca53d8e93addfaf5(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 116) {
                val = l.getUTF(1);
                if (val == 104) {
                    if ((l.getUTF(3) == 115) && (l.getUTF(2) == 105)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 97) {
                    if ((((l.getUTF(5) == 116) && (l.getUTF(4) == 101)) && (l.getUTF(3) == 103)) && (l.getUTF(2) == 114)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                } else if (val == 114) {
                    if ((l.getUTF(3) == 101) && (l.getUTF(2) == 117)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 121) {
                    if ((((l.getUTF(5) == 102) && (l.getUTF(4) == 111)) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_ca5929fc31557c51(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 99) {
                val = l.getUTF(1);
                if (val == 97) {
                    if ((l.getUTF(3) == 101) && (l.getUTF(2) == 115)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 111) {
                    if (l.getUTF(2) == 110) {
                        val = l.getUTF(3);
                        if (val == 116) {
                            if ((((l.getUTF(7) == 101) && (l.getUTF(6) == 117)) && (l.getUTF(5) == 110)) && (l.getUTF(4) == 105)) {
                                l.ty = TokenSymbol;
                                l.tl = 8;
                                ACCEPT = true;
                            }
                        } else if (val == 115) {
                            if (l.getUTF(4) == 116) {
                                l.ty = TokenSymbol;
                                l.tl = 5;
                                ACCEPT = true;
                            }
                        }
                    }
                } else if (val == 108) {
                    if (((l.getUTF(4) == 115) && (l.getUTF(3) == 115)) && (l.getUTF(2) == 97)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_cd7d86e12c2bad20(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 116) {
                val = l.getUTF(1);
                if (val == 104) {
                    if ((l.getUTF(3) == 115) && (l.getUTF(2) == 105)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 114) {
                    if ((l.getUTF(3) == 101) && (l.getUTF(2) == 117)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 121) {
                    if ((((l.getUTF(5) == 102) && (l.getUTF(4) == 111)) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_cf0f887595c20618(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 102) {
                val = l.getUTF(1);
                if (val == 105) {
                    if (((((l.getUTF(6) == 121) && (l.getUTF(5) == 108)) && (l.getUTF(4) == 108)) && (l.getUTF(3) == 97)) && (l.getUTF(2) == 110)) {
                        l.ty = TokenSymbol;
                        l.tl = 7;
                        ACCEPT = true;
                    }
                } else if (val == 111) {
                    if (l.getUTF(2) == 114) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                } else if (val == 117) {
                    if ((((((l.getUTF(7) == 110) && (l.getUTF(6) == 111)) && (l.getUTF(5) == 105)) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 99)) && (l.getUTF(2) == 110)) {
                        l.ty = TokenSymbol;
                        l.tl = 8;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_cf21971e32338a79(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 61) && (l.getUTF(0) == 124))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_d1de557e71993f67(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 124) {
                val = l.getUTF(1);
                if (val == 61) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 124) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_d38e0913b811b457(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 115) {
                val = l.getUTF(1);
                if (val == 117) {
                    if (((l.getUTF(4) == 114) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 5;
                        ACCEPT = true;
                    }
                } else if (val == 101) {
                    if (l.getUTF(2) == 116) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_d4a7e22f69f4ee35(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 99) && (l.getUTF(3) == 110)) && (l.getUTF(2) == 121)) && (l.getUTF(1) == 115)) && (l.getUTF(0) == 97)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_d4bc8ae8e31ef3aa(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 116) {
                val = l.getUTF(1);
                if (val == 104) {
                    val = l.getUTF(2);
                    if (val == 105) {
                        if (l.getUTF(3) == 115) {
                            l.ty = TokenSymbol;
                            l.tl = 4;
                            ACCEPT = true;
                        }
                    } else if (val == 114) {
                        if ((l.getUTF(4) == 119) && (l.getUTF(3) == 111)) {
                            l.ty = TokenSymbol;
                            l.tl = 5;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 114) {
                    val = l.getUTF(2);
                    if (val == 121) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    } else if (val == 117) {
                        if (l.getUTF(3) == 101) {
                            l.ty = TokenSymbol;
                            l.tl = 4;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 121) {
                    if ((((l.getUTF(5) == 102) && (l.getUTF(4) == 111)) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 112)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_d7fada38689346c4(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 102) {
                val = l.getUTF(1);
                if (val == 105) {
                    if (((((l.getUTF(6) == 121) && (l.getUTF(5) == 108)) && (l.getUTF(4) == 108)) && (l.getUTF(3) == 97)) && (l.getUTF(2) == 110)) {
                        l.ty = TokenSymbol;
                        l.tl = 7;
                        ACCEPT = true;
                    }
                } else if (val == 111) {
                    if (l.getUTF(2) == 114) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_d8f9d336d83ac87c(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 100) && (l.getUTF(3) == 108)) && (l.getUTF(2) == 101)) && (l.getUTF(1) == 105)) && (l.getUTF(0) == 121)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_da195cd7e0c0b959(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 119) && (l.getUTF(3) == 111)) && (l.getUTF(2) == 114)) && (l.getUTF(1) == 104)) && (l.getUTF(0) == 116)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_dad2c38b0a2035e1(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 61) && (l.getUTF(0) == 62))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_dc17de0546cfa0c9(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 112) {
                val = l.getUTF(1);
                if (val == 97) {
                    if (((((l.getUTF(6) == 101) && (l.getUTF(5) == 103)) && (l.getUTF(4) == 97)) && (l.getUTF(3) == 107)) && (l.getUTF(2) == 99)) {
                        l.ty = TokenSymbol;
                        l.tl = 7;
                        ACCEPT = true;
                    }
                } else if (val == 114) {
                    val = l.getUTF(2);
                    if (val == 111) {
                        if ((((((l.getUTF(8) == 100) && (l.getUTF(7) == 101)) && (l.getUTF(6) == 116)) && (l.getUTF(5) == 99)) && (l.getUTF(4) == 101)) && (l.getUTF(3) == 116)) {
                            l.ty = TokenSymbol;
                            l.tl = 9;
                            ACCEPT = true;
                        }
                    } else if (val == 105) {
                        if ((((l.getUTF(6) == 101) && (l.getUTF(5) == 116)) && (l.getUTF(4) == 97)) && (l.getUTF(3) == 118)) {
                            l.ty = TokenSymbol;
                            l.tl = 7;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 117) {
                    if ((((l.getUTF(5) == 99) && (l.getUTF(4) == 105)) && (l.getUTF(3) == 108)) && (l.getUTF(2) == 98)) {
                        l.ty = TokenSymbol;
                        l.tl = 6;
                        ACCEPT = true;
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_ded0f96a7228c7c5(l) {
            let ACCEPT = false;
            if (((((l.getUTF(4) == 116) && (l.getUTF(3) == 105)) && (l.getUTF(2) == 97)) && (l.getUTF(1) == 119)) && (l.getUTF(0) == 97)) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_e021d8532f9147fd(l) {
            let ACCEPT = false;
            if (((((((l.getUTF(6) == 115) && (l.getUTF(5) == 100)) && (l.getUTF(4) == 110)) && (l.getUTF(3) == 101)) && (l.getUTF(2) == 116)) && (l.getUTF(1) == 120)) && (l.getUTF(0) == 101)) {
                l.ty = TokenSymbol;
                l.tl = 7;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_e043e2118bdadad0(l) {
            let ACCEPT = false;
            if ((((((((l.getUTF(7) == 110) && (l.getUTF(6) == 111)) && (l.getUTF(5) == 105)) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 99)) && (l.getUTF(2) == 110)) && (l.getUTF(1) == 117)) && (l.getUTF(0) == 102)) {
                l.ty = TokenSymbol;
                l.tl = 8;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_e1e77579dc125345(l) {
            let ACCEPT = false;
            if ((l.getUTF(5) != NaN) && (((((l.getUTF(4) == 99) && (l.getUTF(3) == 110)) && (l.getUTF(2) == 121)) && (l.getUTF(1) == 115)) && (l.getUTF(0) == 97))) {
                l.ty = TokenSymbol;
                l.tl = 5;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_e8ddfc9b5a509a6c(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 100) {
                val = l.getUTF(1);
                if (val == 101) {
                    val = l.getUTF(2);
                    if (val == 108) {
                        if (((l.getUTF(5) == 101) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 101)) {
                            l.ty = TokenSymbol;
                            l.tl = 6;
                            ACCEPT = true;
                        }
                    } else if (val == 98) {
                        if (((((l.getUTF(7) == 114) && (l.getUTF(6) == 101)) && (l.getUTF(5) == 103)) && (l.getUTF(4) == 103)) && (l.getUTF(3) == 117)) {
                            l.ty = TokenSymbol;
                            l.tl = 8;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 111) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_e98e2785cdca6f7a(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 100) {
                val = l.getUTF(1);
                if (val == 101) {
                    val = l.getUTF(2);
                    if (val == 108) {
                        if (((l.getUTF(5) == 101) && (l.getUTF(4) == 116)) && (l.getUTF(3) == 101)) {
                            l.ty = TokenSymbol;
                            l.tl = 6;
                            ACCEPT = true;
                        }
                    } else if (val == 98) {
                        if (((((l.getUTF(7) == 114) && (l.getUTF(6) == 101)) && (l.getUTF(5) == 103)) && (l.getUTF(4) == 103)) && (l.getUTF(3) == 117)) {
                            l.ty = TokenSymbol;
                            l.tl = 8;
                            ACCEPT = true;
                        }
                    } else if (val == 102) {
                        if ((((l.getUTF(6) == 116) && (l.getUTF(5) == 108)) && (l.getUTF(4) == 117)) && (l.getUTF(3) == 97)) {
                            l.ty = TokenSymbol;
                            l.tl = 7;
                            ACCEPT = true;
                        }
                    }
                } else if (val == 111) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_eaad0114272c4ffc(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 62) {
                if (l.getUTF(1) == 62) {
                    val = l.getUTF(2);
                    if (val == 61) {
                        l.ty = TokenSymbol;
                        l.tl = 3;
                        ACCEPT = true;
                    } else if (val == 62) {
                        if ((l.getUTF(4) != NaN) && (l.getUTF(3) == 61)) {
                            l.ty = TokenSymbol;
                            l.tl = 4;
                            ACCEPT = true;
                        }
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_eac5c307c1a80303(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 61) && (l.getUTF(0) == 45))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_eb7f69039a78f607(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 101) {
                val = l.getUTF(1);
                if (val == 108) {
                    if ((l.getUTF(3) == 101) && (l.getUTF(2) == 115)) {
                        l.ty = TokenSymbol;
                        l.tl = 4;
                        ACCEPT = true;
                    }
                } else if (val == 120) {
                    val = l.getUTF(2);
                    if (val == 112) {
                        if (((l.getUTF(5) == 116) && (l.getUTF(4) == 114)) && (l.getUTF(3) == 111)) {
                            l.ty = TokenSymbol;
                            l.tl = 6;
                            ACCEPT = true;
                        }
                    } else if (val == 116) {
                        if ((((l.getUTF(6) == 115) && (l.getUTF(5) == 100)) && (l.getUTF(4) == 110)) && (l.getUTF(3) == 101)) {
                            l.ty = TokenSymbol;
                            l.tl = 7;
                            ACCEPT = true;
                        }
                    }
                }
            }
            return ACCEPT;
        }
        function defined_token_f188f6806e50797b(l) {
            let ACCEPT = false;
            if (((l.getUTF(2) == 116) && (l.getUTF(1) == 101)) && (l.getUTF(0) == 108)) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_f2ef34011f64cef0(l) {
            let ACCEPT = false;
            if ((l.getUTF(2) != NaN) && ((l.getUTF(1) == 45) && (l.getUTF(0) == 45))) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_f47f6de2d28c24e5(l) {
            let ACCEPT = false;
            if (((l.getUTF(2) == 46) && (l.getUTF(1) == 46)) && (l.getUTF(0) == 46)) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_f5b15d408b6280ad(l) {
            let ACCEPT = false;
            let val = 0;
            if (l.getUTF(0) == 63) {
                val = l.getUTF(1);
                if (val == 46) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                } else if (val == 63) {
                    l.ty = TokenSymbol;
                    l.tl = 2;
                    ACCEPT = true;
                }
            }
            return ACCEPT;
        }
        function defined_token_f9bb6ce14e19288e(l) {
            let ACCEPT = false;
            if (((l.getUTF(2) == 114) && (l.getUTF(1) == 97)) && (l.getUTF(0) == 118)) {
                l.ty = TokenSymbol;
                l.tl = 3;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_fa8b90636881e66b(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 61) && (l.getUTF(0) == 124)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_fcc8b8fe09802878(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 115) && (l.getUTF(0) == 97)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_fdb42ce5868e4404(l) {
            let ACCEPT = false;
            if (((((((l.getUTF(6) == 116) && (l.getUTF(5) == 108)) && (l.getUTF(4) == 117)) && (l.getUTF(3) == 97)) && (l.getUTF(2) == 102)) && (l.getUTF(1) == 101)) && (l.getUTF(0) == 100)) {
                l.ty = TokenSymbol;
                l.tl = 7;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function defined_token_fe70b6f5a727a201(l) {
            let ACCEPT = false;
            if ((l.getUTF(1) == 45) && (l.getUTF(0) == 45)) {
                l.ty = TokenSymbol;
                l.tl = 2;
                ACCEPT = true;
            }
            return ACCEPT;
        }
        function non_capture_5730bfe813b6b040(l) {
            if (((l.utf == 123/*[{]*/) || l.END()) || l.isNL()/*[nl]*/) {
                l.tl = 0;
                return true;
            }
            return false;
        }
        function non_capture_bde7550a3d6b8d46(l) {
            if (l.isNL()/*[nl]*/) {
                l.tl = 0;
                return true;
            }
            return false;
        }
        function sk_0496d836f85249a7(l) {
            while (1) {
                if (!((comments_tok_e92f206c4db1b5da(l) || l.isNL()/*[nl]*/) || l.isSP()/*[ws]*/)) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function sk_2c33967dd3fbc823(l) {
            while (1) {
                if (!((comments_tok_e92f206c4db1b5da(l) || l.isNL()/*[nl]*/) || l.isSP()/*[ws]*/)) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function sk_2d66b1a40da93fb6(l) {
            while (1) {
                if (!(comments_tok_e92f206c4db1b5da(l) || l.isSP()/*[ws]*/)) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function sk_4f4880b4f72c035c(l) {
            while (1) {
                if (!(l.isSP()/*[ws]*/)) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function sk_65e591bca2634fa4(l) {
            while (1) {
                if (!(l.isNL()/*[nl]*/)) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function sk_8b3beafb7f007517(l) {
            while (1) {
                if (!(l.isNL()/*[nl]*/ || l.isSP()/*[ws]*/)) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function sk_a0c13bfa5d5bd422(l) {
            while (1) {
                if (!(comments_tok_e92f206c4db1b5da(l) || l.isSP()/*[ws]*/)) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function sk_b9190bf1b860503a(l) {
            while (1) {
                if (!(comments_tok_e92f206c4db1b5da(l) || l.isNL()/*[nl]*/)) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function sk_cad28caf21b86881(l) {
            while (1) {
                if (!((comments_tok_e92f206c4db1b5da(l) || l.isNL()/*[nl]*/) || l.isSP()/*[ws]*/)) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function sk_d065c58d10ee093b(l) {
            while (1) {
                if (!(comments_tok_e92f206c4db1b5da(l))) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function sk_d9819c16e680c950(l) {
            while (1) {
                if (!(comments_tok_e92f206c4db1b5da(l) || l.isSP()/*[ws]*/)) {
                    break;
                }
                l.next();
            }
            return l;
        }
        function set_error(val) {
            if (error_ptr >= 40980) {
                return;
            }
            store((error_ptr++ << 2) + error_array_offset, val);
        }
        function set_action(val) {
            store((action_ptr++ << 2) + action_array_offset, val);
        }
        function mark() {
            return action_ptr;
        }
        function assert_table(l, a, b, c, d) {
            const utf = l.utf;
            if (utf < 32) {
                return (a & (1 << utf)) != 0;
            } else if (utf < 64) {
                return (b & (1 << (utf - 32))) != 0;
            } else if (utf < 96) {
                return (c & (1 << (utf - 64))) != 0;
            } else if (utf < 128) {
                return (d & (1 << (utf - 96))) != 0;
            }
            return false;
        }
        function reset(mark, origin, advanced, state) {
            action_ptr = mark;
            advanced.sync(origin);
            return state;
        }
        function add_shift(l, char_len) {
            const skip_delta = l.getOffsetRegionDelta();
            let has_skip = skip_delta > 0;
            let has_len = char_len > 0;
            let val = 1;
            val |= (skip_delta << 3);
            if (has_skip && ((skip_delta > 36863) || (char_len > 36863))) {
                add_shift(l, 0);
                has_skip = 0;
                val = 1;
            }
            val |= (((has_skip << 2) | (has_len << 1)) | (char_len << (3 + (15 * has_skip))));
            set_action(val);
            l.advanceOffsetRegion();
        }
        function add_reduce(state, sym_len, body, DNP = false) {
            if (isOutputEnabled(state)) {
                set_action(((DNP << 1) | ((sym_len & 16383) << 2)) | (body << 16));
            }
        }
        function fail(l, state) {
            if (!hasStateFailed(state) && isOutputEnabled(state)) {
                soft_fail(l, state);
            }
            return 0;
        }
        function soft_fail(l, state) {
            set_error(l.off);
        }
        function assertSuccess(l, state, condition) {
            if (!condition || hasStateFailed(state)) {
                return fail(l, state);
            }
            return state;
        }
        function consume(l, state) {
            if (isOutputEnabled(state)) {
                add_shift(l, l.tl);
            }
            l.next();
        }
        function consume_empty(l) {
            add_shift(l, 0);
        }
        function assert_consume(l, state, accept) {
            if (hasStateFailed(state)) {
                return 0;
            }
            if (accept) {
                consume(l, state);
                return state;
            } else {
                return 0;
            }
        }
        function reset_counters_and_pointers() {
            error_ptr = 0;
            action_ptr = 0;
        }
/*production name: javascript
            grammar index: 0
            bodies:
	0:0 javascript=>• start - 
            compile time: 14.256ms*/;
        function $javascript(l, state) {
            debug_stack.push({ name: "javascript RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $module_body(l, state)) {
                /*--unique-id--0--DO-NOT-REPLACE*/
                add_reduce(state, 1, 2);
                add_reduce(state, 1, 1);
                debug_stack.push({ name: "javascript RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "javascript RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: comments_group_07_100
            grammar index: 2
            bodies:
	2:2 comments_group_07_100=>• θws - 
		2:3 comments_group_07_100=>• θnl - 
		2:4 comments_group_07_100=>• θid - 
		2:5 comments_group_07_100=>• θnum - 
		2:6 comments_group_07_100=>• θsym - 
            compile time: 16.31ms*/;
        function $comments_group_07_100(l, state) {
            debug_stack.push({ name: "comments_group_07_100 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*ws nl id num sym*/
            if (assert_consume(l, state, (((l.isID()/*[id]*/ || l.isNL()/*[nl]*/) || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/)) {
                /*consume*/
                /*
                   2:2 comments_group_07_100=>θws •
                   2:3 comments_group_07_100=>θnl •
                   2:4 comments_group_07_100=>θid •
                   2:5 comments_group_07_100=>θnum •
                   2:6 comments_group_07_100=>θsym •
                */
                /*--unique-id--2--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "comments_group_07_100 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "comments_group_07_100 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: comments_HC_listbody1_101
            grammar index: 3
            bodies:
	3:7 comments_HC_listbody1_101=>• comments_HC_listbody1_101 comments_group_07_100 - 
		3:8 comments_HC_listbody1_101=>• comments_group_07_100 - 
            compile time: 20.335ms*/;
        function $comments_HC_listbody1_101(l, state) {
            debug_stack.push({ name: "comments_HC_listbody1_101 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $comments_group_07_100(l, state)) {
                /*--unique-id--3--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $comments_HC_listbody1_101_goto(l, state, 3);
            }
            debug_stack.push({ name: "comments_HC_listbody1_101 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $comments_HC_listbody1_101_goto(l, state, prod) {
            debug_stack.push({ name: "comments_HC_listbody1_101 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                if (defined_token_c1fd3ef6c0b69274(l)/*[asterisk/]*/) {
                    return state;
                }
                /*peek_level:0 offset:0 -- clause*/
                /*ws nl id num sym*/
                if ((((l.isID()/*[id]*/ || l.isNL()/*[nl]*/) || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/) {
                    /*peek-production-closure*/
                    /*
                       3:7 comments_HC_listbody1_101=>comments_HC_listbody1_101 • comments_group_07_100
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $comments_group_07_100(l, state)) {
                        /*--unique-id--3--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 3);
                        prod = 3;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "comments_HC_listbody1_101 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 3);
        }
/*production name: comments_group_012_102
            grammar index: 4
            bodies:
	4:9 comments_group_012_102=>• θws - 
		4:10 comments_group_012_102=>• θid - 
		4:11 comments_group_012_102=>• θnum - 
		4:12 comments_group_012_102=>• θsym - 
            compile time: 17.166ms*/;
        function $comments_group_012_102(l, state) {
            debug_stack.push({ name: "comments_group_012_102 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*ws id num sym*/
            if (assert_consume(l, state, ((l.isID()/*[id]*/ || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/)) {
                /*consume*/
                /*
                   4:9 comments_group_012_102=>θws •
                   4:10 comments_group_012_102=>θid •
                   4:11 comments_group_012_102=>θnum •
                   4:12 comments_group_012_102=>θsym •
                */
                /*--unique-id--4--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "comments_group_012_102 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "comments_group_012_102 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: comments_HC_listbody1_103
            grammar index: 5
            bodies:
	5:13 comments_HC_listbody1_103=>• comments_HC_listbody1_103 comments_group_012_102 - 
		5:14 comments_HC_listbody1_103=>• comments_group_012_102 - 
            compile time: 22.741ms*/;
        function $comments_HC_listbody1_103(l, state) {
            debug_stack.push({ name: "comments_HC_listbody1_103 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $comments_group_012_102(l, state)) {
                /*--unique-id--5--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $comments_HC_listbody1_103_goto(l, state, 5);
            }
            debug_stack.push({ name: "comments_HC_listbody1_103 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $comments_HC_listbody1_103_goto(l, state, prod) {
            debug_stack.push({ name: "comments_HC_listbody1_103 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                if (l.isNL()/*[nl]*/) {
                    return state;
                }
                /*peek_level:0 offset:0 -- clause*/
                /*ws id num sym*/
                if (((l.isID()/*[id]*/ || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/) {
                    /*peek-production-closure*/
                    /*
                       5:13 comments_HC_listbody1_103=>comments_HC_listbody1_103 • comments_group_012_102
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $comments_group_012_102(l, state)) {
                        /*--unique-id--5--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 3);
                        prod = 5;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "comments_HC_listbody1_103 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 5);
        }
/*production name: comments
            grammar index: 6
            bodies:
	6:15 comments=>• /* comments_HC_listbody1_101 * / - 
		6:16 comments=>• // comments_HC_listbody1_103 θnl - 
		6:17 comments=>• /* * / - 
		6:18 comments=>• // θnl - 
            compile time: 31.768ms*/;
        function $comments(l, state) {
            debug_stack.push({ name: "comments RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*/* //*/
            if (defined_token_88fe0e82e8d7b114(l)/*[/asterisk]*/) {
                /*peek*/
                /*
                   6:15 comments=>• /* comments_HC_listbody1_101 * /
                   6:17 comments=>• /* * /
                */
                /*peek_level:1 offset:0 -- clause*/
                /** / ws nl id num sym*/
                let pk = l.copy();
                if (defined_token_c1fd3ef6c0b69274(pk)/*[asterisk/]*/) {
                    /*peek-production-closure*/
                    /*
                       6:17 comments=>• /* * /
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, defined_token_88fe0e82e8d7b114(l)/*[/asterisk]*/)) {
                        sk_8b3beafb7f007517(l/*[ ws ][ nl ]*/);
                        if (assert_consume(l, state, defined_token_c1fd3ef6c0b69274(l)/*[asterisk/]*/)) {
                            /*--unique-id--6--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 0);
                            debug_stack.push({ name: "comments RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       6:15 comments=>• /* comments_HC_listbody1_101 * /
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, defined_token_88fe0e82e8d7b114(l)/*[/asterisk]*/)) {
                        if (state = $comments_HC_listbody1_101(l, state)) {
                            sk_8b3beafb7f007517(l/*[ ws ][ nl ]*/);
                            if (assert_consume(l, state, defined_token_c1fd3ef6c0b69274(l)/*[asterisk/]*/)) {
                                /*--unique-id--6--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 0);
                                debug_stack.push({ name: "comments RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                }
            } else if (defined_token_6b20aa97513f1fc7(l)/*[//]*/) {
                /*peek*/
                /*
                   6:16 comments=>• // comments_HC_listbody1_103 θnl
                   6:18 comments=>• // θnl
                */
                /*peek_level:1 offset:0 -- clause*/
                /*nl ws id num sym*/
                let pk = l.copy();
                if (pk.isNL()/*[nl]*/) {
                    /*peek-production-closure*/
                    /*
                       6:18 comments=>• // θnl
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, defined_token_6b20aa97513f1fc7(l)/*[//]*/)) {
                        sk_4f4880b4f72c035c(l/*[ ws ]*/);
                        if (assert_consume(l, state, l.isNL()/*[nl]*/)) {
                            /*--unique-id--6--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 0);
                            debug_stack.push({ name: "comments RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       6:16 comments=>• // comments_HC_listbody1_103 θnl
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, defined_token_6b20aa97513f1fc7(l)/*[//]*/)) {
                        sk_65e591bca2634fa4(l/*[ nl ]*/);
                        if (state = $comments_HC_listbody1_103(l, state)) {
                            sk_4f4880b4f72c035c(l/*[ ws ]*/);
                            if (assert_consume(l, state, l.isNL()/*[nl]*/)) {
                                /*--unique-id--6--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 0);
                                debug_stack.push({ name: "comments RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "comments RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: asi_group_017_104
            grammar index: 7
            bodies:
	7:19 asi_group_017_104=>• ; - 
		7:20 asi_group_017_104=>• { - 
		7:21 asi_group_017_104=>• θnl - 
		7:22 asi_group_017_104=>• END_OF_FILE - 
            compile time: 10.274ms*/;
        function $asi_group_017_104(l, state) {
            debug_stack.push({ name: "asi_group_017_104 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*; { nl END_OF_FILE*/
            if (assert_consume(l, state, non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || (l.utf == 59/*[;]*/))) {
                /*consume*/
                /*
                   7:19 asi_group_017_104=>; •
                   7:20 asi_group_017_104=>{ •
                   7:21 asi_group_017_104=>θnl •
                   7:22 asi_group_017_104=>END_OF_FILE •
                */
                /*--unique-id--7--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "asi_group_017_104 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "asi_group_017_104 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: module_body
            grammar index: 11
            bodies:
	11:27 module_body=>• module_body module_item - 
		11:28 module_body=>• module_item - 
            compile time: 54.645ms*/;
        function $module_body(l, state) {
            debug_stack.push({ name: "module_body RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $module_item(l, state)) {
                /*--unique-id--11--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $module_body_goto(l, state, 11);
            }
            debug_stack.push({ name: "module_body RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $module_body_goto(l, state, prod) {
            debug_stack.push({ name: "module_body GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:-1 offset:0 -- clause*/
                /*import export { yield async new ( super this [ / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                if (((((((((((((((((((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_1f80f2e0a149fe3d(l)/*[import] [if]*/) || defined_token_15518d202137f56e(l)/*[export]*/) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_670f23e41126e00b(l)/*[async] [as] [await]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_0a34667347bd2a3a(l)/*[super] [set] [switch]*/) || defined_token_8e8ee78381c90ca5(l)/*[this] [target] [true] [typeof] [throw] [try]*/) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_967ffd9bf1cf840d(l)/*[from] [false] [for] [function]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_e8ddfc9b5a509a6c(l)/*[delete] [do] [debugger]*/) || defined_token_1ae4fe309b644fa1(l)/*[void] [var]*/) || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || defined_token_aac16ca323764d7a(l)/*[while] [with]*/) || defined_token_912bb2f6b2683177(l)/*[continue] [class] [const]*/) || defined_token_c3524ff0dce64492(l)/*[break]*/) || defined_token_876f036172605c26(l)/*[return]*/) || defined_token_f188f6806e50797b(l)/*[let]*/) || assert_table(l, 0x0, 0x800a986, 0x8000000, 0x48000001)/*tbl:[ { ] [ ( ] [ [ ] [ / ] [ " ] [ ' ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ] [ ; ]*/) || l.isNum()/*[num]*/) {
                    /*assert-production-closure*/
                    /*
                       11:27 module_body=>module_body • module_item
                    */
                    /*peek_level:-1 offset:1*/
                    if (state = $module_item(l, state)) {
                        /*--unique-id--11--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 3);
                        prod = 11;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "module_body GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 11);
        }
/*production name: module_item
            grammar index: 12
            bodies:
	12:29 module_item=>• import_declaration - 
		12:30 module_item=>• export_declaration - 
		12:31 module_item=>• statement_list_item - 
            compile time: 31.636ms*/;
        function $module_item(l, state) {
            debug_stack.push({ name: "module_item RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*import export { yield async new ( super this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
            if (defined_token_2ed685dc4925cfa4(l)/*[import]*/) {
                /*peek*/
                /*
                   12:29 module_item=>• import_declaration
                   12:31 module_item=>• statement_list_item
                */
                /*peek_level:1 offset:0 -- clause*/
                /*( . _ $ id async get set target as from * { " '*/
                let pk = l.copy();
                sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                if ((pk.utf == 40/*[(]*/) || (pk.utf == 46/*[.]*/)) {
                    /*peek-production-closure*/
                    /*
                       12:31 module_item=>• statement_list_item
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $statement_list_item(l, state)) {
                        /*--unique-id--12--DO-NOT-REPLACE*/
                        debug_stack.push({ name: "module_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       12:29 module_item=>• import_declaration
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $import_declaration(l, state)) {
                        /*--unique-id--12--DO-NOT-REPLACE*/
                        debug_stack.push({ name: "module_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            } else if (defined_token_15518d202137f56e(l)/*[export]*/) {
                /*peek-production-closure*/
                /*
                   12:30 module_item=>• export_declaration
                */
                /*peek_level:0 offset:0*/
                if (state = $export_declaration(l, state)) {
                    /*--unique-id--12--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "module_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   12:31 module_item=>• statement_list_item
                */
                /*peek_level:0 offset:0*/
                if (state = $statement_list_item(l, state)) {
                    /*--unique-id--12--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "module_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "module_item RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: import_declaration
            grammar index: 13
            bodies:
	13:32 import_declaration=>• τimport import_clause from_clause asi - 
		13:33 import_declaration=>• τimport module_specifier asi - 
            compile time: 24.715ms*/;
        function $import_declaration(l, state) {
            debug_stack.push({ name: "import_declaration RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*import*/
            if (assert_consume(l, state, defined_token_2ed685dc4925cfa4(l)/*[import]*/)) {
                /*consume*/
                /*
                   13:32 import_declaration=>τimport • import_clause from_clause asi
                   13:33 import_declaration=>τimport • module_specifier asi
                */
                /*peek_level:0 offset:1 -- clause*/
                /*" ' _ $ id async get set target as from * {*/
                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                if ((l.utf == 34/*["]*/) || (l.utf == 39/*[']*/)) {
                    /*peek-production-closure*/
                    /*
                       13:33 import_declaration=>τimport • module_specifier asi
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $string_literal(l, state)) {
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        if (state = $asi_group_017_104(l, state)) {
                            /*--unique-id--13--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 6);
                            debug_stack.push({ name: "import_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       13:32 import_declaration=>τimport • import_clause from_clause asi
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $import_clause(l, state)) {
                        sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $from_clause(l, state)) {
                            sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                            if (state = $asi_group_017_104(l, state)) {
                                /*--unique-id--13--DO-NOT-REPLACE*/
                                add_reduce(state, 4, 5);
                                debug_stack.push({ name: "import_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "import_declaration RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: import_clause
            grammar index: 14
            bodies:
	14:34 import_clause=>• imported_default_binding - 
		14:35 import_clause=>• name_space_import - 
		14:36 import_clause=>• named_imports - 
		14:37 import_clause=>• imported_default_binding , name_space_import - 
		14:38 import_clause=>• imported_default_binding , named_imports - 
            compile time: 318.43ms*/;
        function $import_clause(l, state) {
            debug_stack.push({ name: "import_clause RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /** { _ $ id async get set target as from*/
            if (l.utf == 42/*[*]*/) {
                /*peek-production-closure*/
                /*
                   14:35 import_clause=>• name_space_import
                */
                /*peek_level:0 offset:0*/
                if (state = $name_space_import(l, state)) {
                    /*--unique-id--14--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 7);
                    debug_stack.push({ name: "import_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (l.utf == 123/*[{]*/) {
                /*peek-production-closure*/
                /*
                   14:36 import_clause=>• named_imports
                */
                /*peek_level:0 offset:0*/
                if (state = $named_imports(l, state)) {
                    /*--unique-id--14--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 7);
                    debug_stack.push({ name: "import_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   14:34 import_clause=>• imported_default_binding
                   14:37 import_clause=>• imported_default_binding , name_space_import
                   14:38 import_clause=>• imported_default_binding , named_imports
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*15*/
                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $imported_default_binding(l, state)) {
                    /*assert*/
                    /*
                       14:34 import_clause=>• imported_default_binding
                       14:37 import_clause=>• imported_default_binding , name_space_import
                       14:38 import_clause=>• imported_default_binding , named_imports
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*, from END_OF_FILE*/
                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                        /*consume*/
                        /*
                           14:37 import_clause=>imported_default_binding , • name_space_import
                           14:38 import_clause=>imported_default_binding , • named_imports
                        */
                        /*peek_level:0 offset:4 -- clause*/
                        /** {*/
                        sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                        if (l.utf == 42/*[*]*/) {
                            /*peek-production-closure*/
                            /*
                               14:37 import_clause=>imported_default_binding , • name_space_import
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $name_space_import(l, state)) {
                                /*--unique-id--14--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 8);
                                debug_stack.push({ name: "import_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        } else {
                            /*peek-production-closure*/
                            /*
                               14:38 import_clause=>imported_default_binding , • named_imports
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $named_imports(l, state)) {
                                /*--unique-id--14--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 8);
                                debug_stack.push({ name: "import_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    } else {
                        /*assert-end*/
                        /*
                           14:34 import_clause=>imported_default_binding •
                        */
                        /*--unique-id--14--DO-NOT-REPLACE*/
                        /*peek_level:0 offset:4*/
                        add_reduce(state, 1, 7);
                        debug_stack.push({ name: "import_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "import_clause RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: imported_default_binding
            grammar index: 15
            bodies:
	15:39 imported_default_binding=>• imported_binding - 
            compile time: 2.952ms*/;
        function $imported_default_binding(l, state) {
            debug_stack.push({ name: "imported_default_binding RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $identifier(l, state)) {
                /*--unique-id--15--DO-NOT-REPLACE*/
                add_reduce(state, 1, 17);
                add_reduce(state, 1, 9);
                debug_stack.push({ name: "imported_default_binding RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "imported_default_binding RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: name_space_import
            grammar index: 16
            bodies:
	16:40 name_space_import=>• * τas imported_binding - 
            compile time: 19.246ms*/;
        function $name_space_import(l, state) {
            debug_stack.push({ name: "name_space_import RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /***/
            if (assert_consume(l, state, l.utf == 42/*[*]*/)) {
                /*consume*/
                /*
                   16:40 name_space_import=>* • τas imported_binding
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, defined_token_fcc8b8fe09802878(l)/*[as]*/)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $identifier(l, state)) {
                        /*--unique-id--16--DO-NOT-REPLACE*/
                        add_reduce(state, 1, 17);
                        add_reduce(state, 3, 10);
                        debug_stack.push({ name: "name_space_import RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "name_space_import RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: named_imports_HC_listbody1_106
            grammar index: 17
            bodies:
	17:41 named_imports_HC_listbody1_106=>• named_imports_HC_listbody1_106 , import_specifier - 
		17:42 named_imports_HC_listbody1_106=>• import_specifier - 
            compile time: 28.375ms*/;
        function $named_imports_HC_listbody1_106(l, state) {
            debug_stack.push({ name: "named_imports_HC_listbody1_106 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $import_specifier(l, state)) {
                /*--unique-id--17--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $named_imports_HC_listbody1_106_goto(l, state, 17);
            }
            debug_stack.push({ name: "named_imports_HC_listbody1_106 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $named_imports_HC_listbody1_106_goto(l, state, prod) {
            debug_stack.push({ name: "named_imports_HC_listbody1_106 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*,*/
                if (l.utf == 44/*[,]*/) {
                    /*peek*/
                    /*
                       17:41 named_imports_HC_listbody1_106=>named_imports_HC_listbody1_106 • , import_specifier
                       18:43 named_imports=>{ named_imports_HC_listbody1_106 • , }
                    */
                    /*peek_level:1 offset:1 -- clause*/
                    /*_ $ id async get set target as from*/
                    let pk = l.copy();
                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                    if (((pk.utf == 95/*[_]*/) || (pk.utf == 36/*[$]*/)) || pk.isID()/*[id]*/) {
                        /*peek*/
                        /*
                           17:41 named_imports_HC_listbody1_106=>named_imports_HC_listbody1_106 • , import_specifier
                        */
                        /*peek_level:1 offset:1*/
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $import_specifier(l, state)) {
                                /*--unique-id--17--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 11);
                                prod = 17;
                                continue;
                            }
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "named_imports_HC_listbody1_106 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 17);
        }
/*production name: named_imports
            grammar index: 18
            bodies:
	18:43 named_imports=>• { named_imports_HC_listbody1_106 , } - 
		18:44 named_imports=>• { , } - 
		18:45 named_imports=>• { named_imports_HC_listbody1_106 } - 
		18:46 named_imports=>• { } - 
            compile time: 249.368ms*/;
        function $named_imports(l, state) {
            debug_stack.push({ name: "named_imports RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*{*/
            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                /*consume*/
                /*
                   18:43 named_imports=>{ • named_imports_HC_listbody1_106 , }
                   18:44 named_imports=>{ • , }
                   18:45 named_imports=>{ • named_imports_HC_listbody1_106 }
                   18:46 named_imports=>{ • }
                */
                /*peek_level:0 offset:1 -- clause*/
                /*, } async get set target as from _ $ id*/
                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                    /*consume*/
                    /*
                       18:44 named_imports=>{ , • }
                    */
                    /*peek_level:-1 offset:1*/
                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                        /*--unique-id--18--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 13);
                        debug_stack.push({ name: "named_imports RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                    /*consume*/
                    /*
                       18:46 named_imports=>{ } •
                    */
                    /*--unique-id--18--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 13);
                    debug_stack.push({ name: "named_imports RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else {
                    /*peek-production-closure*/
                    /*
                       18:43 named_imports=>{ • named_imports_HC_listbody1_106 , }
                       18:45 named_imports=>{ • named_imports_HC_listbody1_106 }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*17*/
                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $named_imports_HC_listbody1_106(l, state)) {
                        /*assert*/
                        /*
                           18:43 named_imports=>{ • named_imports_HC_listbody1_106 , }
                           18:45 named_imports=>{ • named_imports_HC_listbody1_106 }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*, }*/
                        sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            /*consume*/
                            /*
                               18:43 named_imports=>{ named_imports_HC_listbody1_106 , • }
                            */
                            /*peek_level:-1 offset:4*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                /*--unique-id--18--DO-NOT-REPLACE*/
                                add_reduce(state, 4, 12);
                                debug_stack.push({ name: "named_imports RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        } else if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                            /*consume*/
                            /*
                               18:45 named_imports=>{ named_imports_HC_listbody1_106 } •
                            */
                            /*--unique-id--18--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 12);
                            debug_stack.push({ name: "named_imports RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "named_imports RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: from_clause
            grammar index: 19
            bodies:
	19:47 from_clause=>• τfrom module_specifier - 
            compile time: 9.081ms*/;
        function $from_clause(l, state) {
            debug_stack.push({ name: "from_clause RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*from*/
            if (assert_consume(l, state, defined_token_14469127dc9c2c1f(l)/*[from]*/)) {
                /*consume*/
                /*
                   19:47 from_clause=>τfrom • module_specifier
                */
                /*peek_level:-1 offset:0*/
                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $string_literal(l, state)) {
                    /*--unique-id--19--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 14);
                    debug_stack.push({ name: "from_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "from_clause RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: import_specifier
            grammar index: 20
            bodies:
	20:48 import_specifier=>• imported_binding - 
		20:49 import_specifier=>• identifier τas imported_binding - 
            compile time: 290.906ms*/;
        function $import_specifier(l, state) {
            debug_stack.push({ name: "import_specifier RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*_ $ id async get set target as from*/
            if (((l.utf == 95/*[_]*/) || (l.utf == 36/*[$]*/)) || l.isID()/*[id]*/) {
                /*peek*/
                /*
                   20:48 import_specifier=>• imported_binding
                   20:49 import_specifier=>• identifier τas imported_binding
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*228 async get set target as from*/
                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, ((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_845a30f46ac258a6(l)/*[async] [as]*/) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_5bca542dce980d9c(l)/*[set]*/) || defined_token_1cb42c7dd41b3a7e(l)/*[target]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/)) {
                    /*consume*/
                    /*
                       227:681 def$js_identifier=>tk:def$js_id_symbols •
                       191:538 unreserved_word=>τasync •
                       191:539 unreserved_word=>τget •
                       191:540 unreserved_word=>τset •
                       191:541 unreserved_word=>τtarget •
                       191:542 unreserved_word=>τas •
                       191:543 unreserved_word=>τfrom •
                    */
                    /*--unique-id--189--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 245);
                    return $import_specifier_goto(l, state, 189);
                }
            }
            debug_stack.push({ name: "import_specifier RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $import_specifier_goto(l, state, prod) {
            debug_stack.push({ name: "import_specifier GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                /*peek_level:-1 offset:0 -- clause*/
                /*as from , } END_OF_FILE*/
                if (assert_consume(l, state, defined_token_fcc8b8fe09802878(l)/*[as]*/)) {
                    /*consume*/
                    /*
                       20:49 import_specifier=>identifier τas • imported_binding
                    */
                    /*peek_level:-1 offset:1*/
                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $identifier(l, state)) {
                        /*--unique-id--20--DO-NOT-REPLACE*/
                        add_reduce(state, 1, 17);
                        add_reduce(state, 3, 16);
                        prod = 20;
                        continue;
                    }
                } else {
                    /*assert-end*/
                    /*
                       22:51 imported_binding=>identifier •
                    */
                    /*--unique-id--20--DO-NOT-REPLACE*/
                    /*peek_level:0 offset:2*/
                    add_reduce(state, 1, 17);
                    add_reduce(state, 1, 15);
                    prod = 20;
                    continue;
                }
                break;
            }
            debug_stack.push({ name: "import_specifier GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 20);
        }
/*production name: export_declaration
            grammar index: 23
            bodies:
	23:52 export_declaration=>• τexport * from_clause asi - 
		23:53 export_declaration=>• τexport export_clause from_clause asi - 
		23:54 export_declaration=>• τexport variable_statement - 
		23:55 export_declaration=>• τexport declaration - 
		23:56 export_declaration=>• τexport τdefault hoistable_declaration - 
		23:57 export_declaration=>• τexport τdefault class_declaration - 
		23:58 export_declaration=>• τexport τdefault assignment_expression asi - 
		23:59 export_declaration=>• τexport export_clause asi - 
            compile time: 356.626ms*/;
        function $export_declaration(l, state) {
            debug_stack.push({ name: "export_declaration RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*export*/
            if (assert_consume(l, state, defined_token_15518d202137f56e(l)/*[export]*/)) {
                /*consume*/
                /*
                   23:52 export_declaration=>τexport • * from_clause asi
                   23:53 export_declaration=>τexport • export_clause from_clause asi
                   23:54 export_declaration=>τexport • variable_statement
                   23:55 export_declaration=>τexport • declaration
                   23:56 export_declaration=>τexport • τdefault hoistable_declaration
                   23:57 export_declaration=>τexport • τdefault class_declaration
                   23:58 export_declaration=>τexport • τdefault assignment_expression asi
                   23:59 export_declaration=>τexport • export_clause asi
                */
                /*peek_level:-1 offset:1 -- clause*/
                /** { var default class async function let const*/
                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 42/*[*]*/)) {
                    /*consume*/
                    /*
                       23:52 export_declaration=>τexport * • from_clause asi
                    */
                    /*peek_level:-1 offset:1*/
                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $from_clause(l, state)) {
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        if (state = $asi_group_017_104(l, state)) {
                            /*--unique-id--23--DO-NOT-REPLACE*/
                            add_reduce(state, 4, 18);
                            debug_stack.push({ name: "export_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else if (l.utf == 123/*[{]*/) {
                    /*peek-production-closure*/
                    /*
                       23:53 export_declaration=>τexport • export_clause from_clause asi
                       23:59 export_declaration=>τexport • export_clause asi
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*25*/
                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $export_clause(l, state)) {
                        /*assert*/
                        /*
                           23:53 export_declaration=>τexport • export_clause from_clause asi
                           23:59 export_declaration=>τexport • export_clause asi
                        */
                        /*peek_level:0 offset:4 -- clause*/
                        /*from ; { nl END_OF_FILE*/
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        if (defined_token_14469127dc9c2c1f(l)/*[from]*/) {
                            /*peek-production-closure*/
                            /*
                               23:53 export_declaration=>τexport export_clause • from_clause asi
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $from_clause(l, state)) {
                                sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                                if (state = $asi_group_017_104(l, state)) {
                                    /*--unique-id--23--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 19);
                                    debug_stack.push({ name: "export_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            }
                        } else {
                            /*peek-production-closure*/
                            /*
                               23:59 export_declaration=>τexport export_clause • asi
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $asi_group_017_104(l, state)) {
                                /*--unique-id--23--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 22);
                                debug_stack.push({ name: "export_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                } else if (defined_token_f9bb6ce14e19288e(l)/*[var]*/) {
                    /*peek-production-closure*/
                    /*
                       23:54 export_declaration=>τexport • variable_statement
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $variable_statement(l, state)) {
                        /*--unique-id--23--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 20);
                        debug_stack.push({ name: "export_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else if (defined_token_fdb42ce5868e4404(l)/*[default]*/) {
                    /*peek*/
                    /*
                       23:56 export_declaration=>τexport • τdefault hoistable_declaration
                       23:57 export_declaration=>τexport • τdefault class_declaration
                       23:58 export_declaration=>τexport • τdefault assignment_expression asi
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*default*/
                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_fdb42ce5868e4404(l)/*[default]*/)) {
                        /*consume*/
                        /*
                           23:56 export_declaration=>τexport τdefault • hoistable_declaration
                           23:57 export_declaration=>τexport τdefault • class_declaration
                           23:58 export_declaration=>τexport τdefault • assignment_expression asi
                        */
                        /*peek_level:0 offset:4 -- clause*/
                        /*async function class ++ -- delete void typeof + ~ ! - await new yield _ $ id get set target as from ( this true false null " ' num [ { / `` ` super import*/
                        sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                        if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                            /*peek*/
                            /*
                               23:56 export_declaration=>τexport τdefault • hoistable_declaration
                               23:58 export_declaration=>τexport τdefault • assignment_expression asi
                            */
                            /*peek_level:1 offset:4 -- clause*/
                            /*function _ $ id async get set target as from ( ?. `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of extends*/
                            let pk = l.copy();
                            sk_d9819c16e680c950(pk.next()/*[ ws ][ 6 ]*/);
                            if (defined_token_e043e2118bdadad0(pk)/*[function]*/) {
                                /*peek-production-closure*/
                                /*
                                   23:56 export_declaration=>τexport τdefault • hoistable_declaration
                                */
                                /*peek_level:1 offset:4*/
                                if (state = $function_declaration(l, state)) {
                                    /*--unique-id--23--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 21);
                                    debug_stack.push({ name: "export_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            } else {
                                /*peek-production-closure*/
                                /*
                                   23:58 export_declaration=>τexport τdefault • assignment_expression asi
                                */
                                /*peek_level:1 offset:4*/
                                if (state = $assignment_expression(l, state)) {
                                    sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                                    if (state = $asi_group_017_104(l, state)) {
                                        /*--unique-id--23--DO-NOT-REPLACE*/
                                        add_reduce(state, 4, 21);
                                        debug_stack.push({ name: "export_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            }
                        } else if (defined_token_e043e2118bdadad0(l)/*[function]*/) {
                            /*peek-production-closure*/
                            /*
                               23:56 export_declaration=>τexport τdefault • hoistable_declaration
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $function_declaration(l, state)) {
                                /*--unique-id--23--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 21);
                                debug_stack.push({ name: "export_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        } else if (defined_token_2d05a4070a3ebcf4(l)/*[class]*/) {
                            /*peek-production-closure*/
                            /*
                               23:57 export_declaration=>τexport τdefault • class_declaration
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $class_declaration(l, state)) {
                                /*--unique-id--23--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 21);
                                debug_stack.push({ name: "export_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        } else {
                            /*peek-production-closure*/
                            /*
                               23:58 export_declaration=>τexport τdefault • assignment_expression asi
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $assignment_expression(l, state)) {
                                sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                                if (state = $asi_group_017_104(l, state)) {
                                    /*--unique-id--23--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 21);
                                    debug_stack.push({ name: "export_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            }
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       23:55 export_declaration=>τexport • declaration
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $declaration(l, state)) {
                        /*--unique-id--23--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 20);
                        debug_stack.push({ name: "export_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "export_declaration RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: export_clause_HC_listbody1_107
            grammar index: 24
            bodies:
	24:60 export_clause_HC_listbody1_107=>• export_clause_HC_listbody1_107 , export_specifier - 
		24:61 export_clause_HC_listbody1_107=>• export_specifier - 
            compile time: 21.343ms*/;
        function $export_clause_HC_listbody1_107(l, state) {
            debug_stack.push({ name: "export_clause_HC_listbody1_107 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $export_specifier(l, state)) {
                /*--unique-id--24--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $export_clause_HC_listbody1_107_goto(l, state, 24);
            }
            debug_stack.push({ name: "export_clause_HC_listbody1_107 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $export_clause_HC_listbody1_107_goto(l, state, prod) {
            debug_stack.push({ name: "export_clause_HC_listbody1_107 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*,*/
                if (l.utf == 44/*[,]*/) {
                    /*peek*/
                    /*
                       24:60 export_clause_HC_listbody1_107=>export_clause_HC_listbody1_107 • , export_specifier
                       25:62 export_clause=>{ export_clause_HC_listbody1_107 • , }
                    */
                    /*peek_level:1 offset:1 -- clause*/
                    /*_ $ id async get set target as from*/
                    let pk = l.copy();
                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                    if (((pk.utf == 95/*[_]*/) || (pk.utf == 36/*[$]*/)) || pk.isID()/*[id]*/) {
                        /*peek*/
                        /*
                           24:60 export_clause_HC_listbody1_107=>export_clause_HC_listbody1_107 • , export_specifier
                        */
                        /*peek_level:1 offset:1*/
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $export_specifier(l, state)) {
                                /*--unique-id--24--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 11);
                                prod = 24;
                                continue;
                            }
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "export_clause_HC_listbody1_107 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 24);
        }
/*production name: export_clause
            grammar index: 25
            bodies:
	25:62 export_clause=>• { export_clause_HC_listbody1_107 , } - 
		25:63 export_clause=>• { , } - 
		25:64 export_clause=>• { export_clause_HC_listbody1_107 } - 
		25:65 export_clause=>• { } - 
            compile time: 267.896ms*/;
        function $export_clause(l, state) {
            debug_stack.push({ name: "export_clause RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*{*/
            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                /*consume*/
                /*
                   25:62 export_clause=>{ • export_clause_HC_listbody1_107 , }
                   25:63 export_clause=>{ • , }
                   25:64 export_clause=>{ • export_clause_HC_listbody1_107 }
                   25:65 export_clause=>{ • }
                */
                /*peek_level:0 offset:1 -- clause*/
                /*, } async get set target as from _ $ id*/
                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                    /*consume*/
                    /*
                       25:63 export_clause=>{ , • }
                    */
                    /*peek_level:-1 offset:1*/
                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                        /*--unique-id--25--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 24);
                        debug_stack.push({ name: "export_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                    /*consume*/
                    /*
                       25:65 export_clause=>{ } •
                    */
                    /*--unique-id--25--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 24);
                    debug_stack.push({ name: "export_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else {
                    /*peek-production-closure*/
                    /*
                       25:62 export_clause=>{ • export_clause_HC_listbody1_107 , }
                       25:64 export_clause=>{ • export_clause_HC_listbody1_107 }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*24*/
                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $export_clause_HC_listbody1_107(l, state)) {
                        /*assert*/
                        /*
                           25:62 export_clause=>{ • export_clause_HC_listbody1_107 , }
                           25:64 export_clause=>{ • export_clause_HC_listbody1_107 }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*, }*/
                        sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            /*consume*/
                            /*
                               25:62 export_clause=>{ export_clause_HC_listbody1_107 , • }
                            */
                            /*peek_level:-1 offset:4*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                /*--unique-id--25--DO-NOT-REPLACE*/
                                add_reduce(state, 4, 23);
                                debug_stack.push({ name: "export_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        } else if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                            /*consume*/
                            /*
                               25:64 export_clause=>{ export_clause_HC_listbody1_107 } •
                            */
                            /*--unique-id--25--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 23);
                            debug_stack.push({ name: "export_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "export_clause RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: export_specifier
            grammar index: 26
            bodies:
	26:66 export_specifier=>• identifier - 
		26:67 export_specifier=>• identifier τas identifier - 
            compile time: 13.17ms*/;
        function $export_specifier(l, state) {
            debug_stack.push({ name: "export_specifier RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*189*/
            if (state = $identifier(l, state)) {
                /*assert*/
                /*
                   26:66 export_specifier=>• identifier
                   26:67 export_specifier=>• identifier τas identifier
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*as , } END_OF_FILE*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, defined_token_fcc8b8fe09802878(l)/*[as]*/)) {
                    /*consume*/
                    /*
                       26:67 export_specifier=>identifier τas • identifier
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $identifier(l, state)) {
                        /*--unique-id--26--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 16);
                        debug_stack.push({ name: "export_specifier RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*assert-end*/
                    /*
                       26:66 export_specifier=>identifier •
                    */
                    /*--unique-id--26--DO-NOT-REPLACE*/
                    /*peek_level:0 offset:2*/
                    add_reduce(state, 1, 15);
                    debug_stack.push({ name: "export_specifier RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "export_specifier RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: statement_list
            grammar index: 29
            bodies:
	29:70 statement_list=>• statement_list_item - 
		29:71 statement_list=>• statement_list statement_list_item - 
            compile time: 42.926ms*/;
        function $statement_list(l, state) {
            debug_stack.push({ name: "statement_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $statement_list_item(l, state)) {
                /*--unique-id--29--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $statement_list_goto(l, state, 29);
            }
            debug_stack.push({ name: "statement_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $statement_list_goto(l, state, prod) {
            debug_stack.push({ name: "statement_list GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*{ yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                if (((((defined_token_19cd74c69f5512e8(l)/*[``]*/ || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || assert_table(l, 0x0, 0x800a996, 0x88000000, 0x48000001)/*tbl:[ { ] [ ( ] [ [ ] [ / ] [ " ] [ ' ] [ _ ] [ $ ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ] [ ; ]*/) || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                    /*peek-production-closure*/
                    /*
                       29:71 statement_list=>statement_list • statement_list_item
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $statement_list_item(l, state)) {
                        /*--unique-id--29--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 26);
                        prod = 29;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "statement_list GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 29);
        }
/*production name: statement_list_item
            grammar index: 30
            bodies:
	30:72 statement_list_item=>• statement - 
		30:73 statement_list_item=>• declaration - 
            compile time: 131.721ms*/;
        function $statement_list_item(l, state) {
            debug_stack.push({ name: "statement_list_item RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*async class function let const { yield new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger*/
            if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                /*peek*/
                /*
                   30:72 statement_list_item=>• statement
                   30:73 statement_list_item=>• declaration
                */
                /*peek_level:1 offset:0 -- clause*/
                /*function _ $ id async get set target as from ( ?. `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of extends*/
                let pk = l.copy();
                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                if (defined_token_e043e2118bdadad0(pk)/*[function]*/) {
                    /*peek-production-closure*/
                    /*
                       30:73 statement_list_item=>• declaration
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $declaration(l, state)) {
                        /*--unique-id--30--DO-NOT-REPLACE*/
                        debug_stack.push({ name: "statement_list_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       30:72 statement_list_item=>• statement
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $statement(l, state)) {
                        /*--unique-id--30--DO-NOT-REPLACE*/
                        debug_stack.push({ name: "statement_list_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            } else if ((defined_token_57c98daa5c98098c(l)/*[class] [const]*/ || defined_token_e043e2118bdadad0(l)/*[function]*/) || defined_token_f188f6806e50797b(l)/*[let]*/) {
                /*peek-production-closure*/
                /*
                   30:73 statement_list_item=>• declaration
                */
                /*peek_level:0 offset:0*/
                if (state = $declaration(l, state)) {
                    /*--unique-id--30--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "statement_list_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   30:72 statement_list_item=>• statement
                */
                /*peek_level:0 offset:0*/
                if (state = $statement(l, state)) {
                    /*--unique-id--30--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "statement_list_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "statement_list_item RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: statement
            grammar index: 31
            bodies:
	31:74 statement=>• block_statement - 
		31:75 statement=>• expression_statement - 
		31:76 statement=>• labeled_statement - 
		31:77 statement=>• variable_statement - 
		31:78 statement=>• empty_statement - 
		31:79 statement=>• if_statement - 
		31:80 statement=>• breakable_statement - 
		31:81 statement=>• continue_statement - 
		31:82 statement=>• break_statement - 
		31:83 statement=>• return_statement - 
		31:84 statement=>• with_statement - 
		31:85 statement=>• throw_statement - 
		31:86 statement=>• try_statement - 
		31:87 statement=>• debugger_statement - 
            compile time: 569.137ms*/;
        function $statement(l, state) {
            set_debug_data(number_of_items, l.off,);




            debug_stack.push({ name: "statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*{ get set target as from _ $ id async var ; if continue break return with throw try debugger do while for switch yield new ( super import this [ / true false null " ' num `` ` delete void typeof + ~ ! - await ++ --*/
            if (l.utf == 123/*[{]*/) {
                /*peek-production-closure*/
                /*
                   31:74 statement=>• block_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $block(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (((l.utf == 95/*[_]*/) || (l.utf == 36/*[$]*/)) || l.isID()/*[id]*/) {
                /*peek*/
                /*
                   31:75 statement=>• expression_statement
                   31:76 statement=>• labeled_statement
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*get set target as from 228*/
                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, ((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_5bca542dce980d9c(l)/*[set]*/) || defined_token_1cb42c7dd41b3a7e(l)/*[target]*/) || defined_token_fcc8b8fe09802878(l)/*[as]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/)) {
                    /*consume*/
                    /*
                       191:539 unreserved_word=>τget •
                       191:540 unreserved_word=>τset •
                       191:541 unreserved_word=>τtarget •
                       191:542 unreserved_word=>τas •
                       191:543 unreserved_word=>τfrom •
                       227:681 def$js_identifier=>tk:def$js_id_symbols •
                    */
                    /*--unique-id--189--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 245);
                    return $statement_goto(l, state, 189);
                }
            } else if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                /*peek*/
                /*
                   31:75 statement=>• expression_statement
                   31:76 statement=>• labeled_statement
                */
                /*peek_level:1 offset:0 -- clause*/
                /*as from ( ?. `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of extends _ $ id async get set target*/
                let pk = l.copy();
                sk_d9819c16e680c950(pk.next()/*[ ws ][ 6 ]*/);
                if ((((((((((((((((((((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || defined_token_fcc8b8fe09802878(pk)/*[as]*/) || defined_token_14469127dc9c2c1f(pk)/*[from]*/) || defined_token_f5b15d408b6280ad(pk)/*[?.] [??]*/) || defined_token_19cd74c69f5512e8(pk)/*[``]*/) || defined_token_8c647931e6bf0c07(pk)/*[--] [-=]*/) || defined_token_7330fb2be3dc26eb(pk)/*[++] [+=]*/) || defined_token_37edf5ebc00dbfe6(pk)/*[/=]*/) || defined_token_2c342d130718e813(pk)/*[%=]*/) || defined_token_318c95b1e64de46d(pk)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(pk)/*[>>=] [>>>=] [>>>] [>>] [>=]*/) || defined_token_2c51a4b82e64ba22(pk)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(pk)/*[^=]*/) || defined_token_d1de557e71993f67(pk)/*[|=] [||]*/) || defined_token_485338d34f29b52a(pk)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(pk)/*[instanceof] [in]*/) || defined_token_04e94f0279c3936b(pk)/*[!==] [!=]*/) || defined_token_4df9552a310b74e2(pk)/*[===] [==]*/) || defined_token_c6b5fbb944702d5a(pk)/*[of]*/) || defined_token_e021d8532f9147fd(pk)/*[extends]*/) || assert_table(pk, 0x0, 0xfc00ff60, 0x68000000, 0x38000001)/*tbl:[ ( ] [ ` ] [ . ] [ [ ] [ * ] [ = ] [ % ] [ / ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ ] ] [ : ] [ ) ] [ ; ] [ , ] [ } ] [ { ]*/) {
                    /*peek*/
                    /*
                       31:75 statement=>• expression_statement
                       31:76 statement=>• labeled_statement
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*async*/
                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                        /*consume*/
                        /*
                           85:215 arrow_function=>τasync • arrow_parameters = > concise_body
                           191:538 unreserved_word=>τasync •
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE 228 async get set target*/
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        if (((((((((((((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_14469127dc9c2c1f(l)/*[from]*/) || defined_token_fcc8b8fe09802878(l)/*[as]*/) || defined_token_37edf5ebc00dbfe6(l)/*[/=]*/) || defined_token_f5b15d408b6280ad(l)/*[?.] [??]*/) || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_e021d8532f9147fd(l)/*[extends]*/) || defined_token_870ef36bec3a881f(l)/*[+=] [++]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_4749150ec48378d0(l)/*[-=] [--]*/) || defined_token_318c95b1e64de46d(l)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(l)/*[>>=] [>>>=] [>>] [>>>] [>=]*/) || defined_token_2c51a4b82e64ba22(l)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_d1de557e71993f67(l)/*[|=] [||]*/) || defined_token_485338d34f29b52a(l)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_c6b5fbb944702d5a(l)/*[of]*/) || assert_table(l, 0x0, 0xfc00ff60, 0x68000000, 0x38000001)/*tbl:[ , ] [ } ] [ = ] [ ] ] [ * ] [ ) ] [ ( ] [ : ] [ ; ] [ { ] [ [ ] [ . ] [ ` ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               191:538 unreserved_word=>τasync •
                            */
                            /*--unique-id--189--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:4*/
                            add_reduce(state, 1, 245);
                            return $statement_goto(l, state, 189);
                        } else {
                            /*assert-production-closure*/
                            /*
                               85:215 arrow_function=>τasync • arrow_parameters = > concise_body
                            */
                            /*peek_level:-1 offset:3*/
                            if (state = $arrow_parameters(l, state)) {
                                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 62/*[>]*/)) {
                                        sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (state = $concise_body(l, state)) {
                                            /*--unique-id--96--DO-NOT-REPLACE*/
                                            add_reduce(state, 5, 109);
                                            return $statement_goto(l, state, 96);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       31:75 statement=>• expression_statement
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $expression_statement(l, state)) {
                        /*--unique-id--31--DO-NOT-REPLACE*/
                        return $statement_goto(l, state, 31);
                    }
                }
            } else if (defined_token_f9bb6ce14e19288e(l)/*[var]*/) {
                /*peek-production-closure*/
                /*
                   31:77 statement=>• variable_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $variable_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (l.utf == 59/*[;]*/) {
                /*peek-production-closure*/
                /*
                   31:78 statement=>• empty_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $empty_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (defined_token_911b730840de3b6c(l)/*[if]*/) {
                /*peek-production-closure*/
                /*
                   31:79 statement=>• if_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $if_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (defined_token_663cc31c85f53275(l)/*[continue]*/) {
                /*peek-production-closure*/
                /*
                   31:81 statement=>• continue_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $continue_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (defined_token_c3524ff0dce64492(l)/*[break]*/) {
                /*peek-production-closure*/
                /*
                   31:82 statement=>• break_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $break_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (defined_token_876f036172605c26(l)/*[return]*/) {
                /*peek-production-closure*/
                /*
                   31:83 statement=>• return_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $return_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (defined_token_2cf552cd86bb015e(l)/*[with]*/) {
                /*peek-production-closure*/
                /*
                   31:84 statement=>• with_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $with_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (defined_token_da195cd7e0c0b959(l)/*[throw]*/) {
                /*peek-production-closure*/
                /*
                   31:85 statement=>• throw_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $throw_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (defined_token_1c4bd208294c1ee4(l)/*[try]*/) {
                /*peek-production-closure*/
                /*
                   31:86 statement=>• try_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $try_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (defined_token_bab67a61f0334bce(l)/*[debugger]*/) {
                /*peek-production-closure*/
                /*
                   31:87 statement=>• debugger_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $debugger_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else if (((defined_token_4c51ded3b971fa93(l)/*[do]*/ || defined_token_926ab0b5b37a4ddd(l)/*[while]*/) || defined_token_22a3e3a7de4e4fb7(l)/*[for]*/) || defined_token_c4d5aeb40acb5412(l)/*[switch]*/) {
                /*peek-production-closure*/
                /*
                   31:80 statement=>• breakable_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $breakable_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            } else {
                /*peek-production-closure*/
                /*
                   31:75 statement=>• expression_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $expression_statement(l, state)) {
                    /*--unique-id--31--DO-NOT-REPLACE*/
                    return $statement_goto(l, state, 31);
                }
            }
            debug_stack.push({ name: "statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $statement_goto(l, state, prod) {
            debug_stack.push({ name: "statement GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                switch (prod) {
                    case 86:
                        sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*=*/
                        if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                            /*consume*/
                            /*
                               85:216 arrow_function=>arrow_parameters = • > concise_body
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 62/*[>]*/)) {
                                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $concise_body(l, state)) {
                                    /*--unique-id--96--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 110);
                                    prod = 96;
                                    continue;
                                }
                            }
                        }
                        break;
                    case 96:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:0 offset:0 -- clause*/
                        /*, ; { nl END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            /*consume*/
                            /*
                               96:266 expression=>expression , • assignment_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                /*--unique-id--96--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 147);
                                prod = 96;
                                continue;
                            }
                        } else if (non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || (l.utf == 59/*[;]*/)) {
                            /*peek-production-closure*/
                            /*
                               38:98 expression_statement=>expression • asi
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $asi_group_017_104(l, state)) {
                                /*--unique-id--31--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 30);
                                prod = 31;
                                continue;
                            }
                        }
                        break;
                    case 97:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= ; ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE ++ -- /= %= += -= <<= >>= >>>= &= ^= |= **=*/
                        if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                            /*consume*/
                            /*
                               115:330 assignment_expression=>left_hand_side_expression = • assignment_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                /*--unique-id--96--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 169);
                                prod = 96;
                                continue;
                            }
                        } else if (((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/) || defined_token_02147395f110c9cd(l)/*[<<] [<=]*/) || defined_token_79ab361fc2644f92(l)/*[>>] [>>>] [>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc00be60, 0x60000000, 0x30000000)/*tbl:[ ; ] [ * ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               134:396 update_expression=>left_hand_side_expression •
                            */
                            /*--unique-id--134--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 134;
                            continue;
                        } else if (assert_consume(l, state, defined_token_6d4f77707d3e0e5a(l)/*[++]*/ || defined_token_f2ef34011f64cef0(l)/*[--]*/)) {
                            /*consume*/
                            /*
                               134:397 update_expression=>left_hand_side_expression ++ •
                               134:398 update_expression=>left_hand_side_expression -- •
                            */
                            /*--unique-id--134--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 2, 188);
                            prod = 134;
                            continue;
                        } else if ((((((((((defined_token_37edf5ebc00dbfe6(l)/*[/=]*/ || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_97755a959607b02c(l)/*[+=]*/) || defined_token_eac5c307c1a80303(l)/*[-=]*/) || defined_token_5892ddf818179b1b(l)/*[<<=]*/) || defined_token_eaad0114272c4ffc(l)/*[>>=] [>>>=]*/) || defined_token_c7d7983a743dfb89(l)/*[&=]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_cf21971e32338a79(l)/*[|=]*/) || defined_token_aaa75300a4a9f79d(l)/*[asteriskasterisk=]*/) || (l.utf == 42/*[*]*/)) {
                            /*peek-production-closure*/
                            /*
                               115:331 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $assignment_operator(l, state)) {
                                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $assignment_expression(l, state)) {
                                    /*--unique-id--96--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 170);
                                    prod = 96;
                                    continue;
                                }
                            }
                        }
                        break;
                    case 99:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:0 offset:0 -- clause*/
                        /*( ?. [ . `` ` += -= <<= >>= >>>= &= ^= |= **= { %= ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } /= ) * = ] , END_OF_FILE*/
                        if (l.utf == 40/*[(]*/) {
                            /*peek-production-closure*/
                            /*
                               88:221 cover_call_expression_and_async_arrow_head=>member_expression • arguments
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 114);
                                prod = 104;
                                continue;
                            }
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*peek-production-closure*/
                            /*
                               111:305 optional_expression=>member_expression • optional_chain
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               99:274 member_expression=>member_expression [ • expression ]
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 149);
                                    prod = 99;
                                    continue;
                                }
                            }
                        } else if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               99:275 member_expression=>member_expression . • identifier_name
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 150);
                                prod = 99;
                                continue;
                            }
                        } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                            /*peek-production-closure*/
                            /*
                               99:276 member_expression=>member_expression • template_literal
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $template_literal(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 151);
                                prod = 99;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               98:271 new_expression=>member_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        }
                        break;
                    case 104:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*. ( [ ?. `` ` = * /= %= += -= <<= >>= >>>= &= ^= |= **= { ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               104:286 call_expression=>call_expression . • identifier_name
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 150);
                                prod = 104;
                                continue;
                            }
                        } else if (l.utf == 40/*[(]*/) {
                            /*peek-production-closure*/
                            /*
                               104:289 call_expression=>call_expression • arguments
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 157);
                                prod = 104;
                                continue;
                            }
                        } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               104:290 call_expression=>call_expression [ • expression ]
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--104--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 149);
                                    prod = 104;
                                    continue;
                                }
                            }
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*peek-production-closure*/
                            /*
                               111:306 optional_expression=>call_expression • optional_chain
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                            /*peek-production-closure*/
                            /*
                               104:292 call_expression=>call_expression • template_literal
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $template_literal(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 158);
                                prod = 104;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               97:269 left_hand_side_expression=>call_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        }
                        break;
                    case 111:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= * /= %= += -= <<= >>= >>>= &= ^= |= **= { ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } ) ] , END_OF_FILE ?.*/
                        if (((((((((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_37edf5ebc00dbfe6(l)/*[/=]*/) || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_870ef36bec3a881f(l)/*[+=] [++]*/) || defined_token_4749150ec48378d0(l)/*[-=] [--]*/) || defined_token_318c95b1e64de46d(l)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(l)/*[>>=] [>>>=] [>>] [>>>] [>=]*/) || defined_token_2c51a4b82e64ba22(l)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_d1de557e71993f67(l)/*[|=] [||]*/) || defined_token_485338d34f29b52a(l)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || defined_token_c6b5fbb944702d5a(l)/*[of]*/) || assert_table(l, 0x0, 0xfc00be60, 0x60000000, 0x38000000)/*tbl:[ = ] [ * ] [ { ] [ ; ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               97:270 left_hand_side_expression=>optional_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*assert-production-closure*/
                            /*
                               111:307 optional_expression=>optional_expression • optional_chain
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        }
                        break;
                    case 118:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*? ; : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 63/*[?]*/)) {
                            /*consume*/
                            /*
                               117:345 conditional_expression=>short_circuit_expression ? • assignment_expression : assignment_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 58/*[:]*/)) {
                                    sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $assignment_expression(l, state)) {
                                        /*--unique-id--96--DO-NOT-REPLACE*/
                                        add_reduce(state, 5, 171);
                                        prod = 96;
                                        continue;
                                    }
                                }
                            }
                        } else {
                            /*assert-end*/
                            /*
                               117:344 conditional_expression=>short_circuit_expression •
                            */
                            /*--unique-id--96--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 96;
                            continue;
                        }
                        break;
                    case 119:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*|| ; ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_62e66454a337f212(l)/*[||]*/)) {
                            /*consume*/
                            /*
                               119:349 logical_or_expression=>logical_or_expression || • logical_and_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $logical_and_expression(l, state)) {
                                /*--unique-id--119--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 172);
                                prod = 119;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               118:346 short_circuit_expression=>logical_or_expression •
                            */
                            /*--unique-id--118--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 118;
                            continue;
                        }
                        break;
                    case 120:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*&& ; || ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_39fb08573e91f166(l)/*[&&]*/)) {
                            /*consume*/
                            /*
                               120:351 logical_and_expression=>logical_and_expression && • bitwise_or_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_or_expression(l, state)) {
                                /*--unique-id--120--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 172);
                                prod = 120;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               119:348 logical_or_expression=>logical_and_expression •
                            */
                            /*--unique-id--119--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 119;
                            continue;
                        }
                        break;
                    case 121:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*? , ; { nl END_OF_FILE ??*/
                        if (non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || assert_table(l, 0x0, 0x88001000, 0x0, 0x0)/*tbl:[ ? ] [ , ] [ ; ]*/) {
                            /*assert-end*/
                            /*
                               118:347 short_circuit_expression=>coalesce_expression •
                            */
                            /*--unique-id--118--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 118;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               122:353 coalesce_expression_head_group_0247_118=>coalesce_expression •
                            */
                            /*--unique-id--123--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 123;
                            continue;
                        }
                        break;
                    case 123:
                        sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*??*/
                        if (assert_consume(l, state, defined_token_87b2bbc4cf92dae2(l)/*[??]*/)) {
                            /*consume*/
                            /*
                               121:352 coalesce_expression=>coalesce_expression_head ?? • bitwise_or_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_or_expression(l, state)) {
                                /*--unique-id--121--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 173);
                                prod = 121;
                                continue;
                            }
                        }
                        break;
                    case 124:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*| ?? || ? , ; { nl END_OF_FILE &&*/
                        if (assert_consume(l, state, l.utf == 124/*[|]*/)) {
                            /*consume*/
                            /*
                               124:357 bitwise_or_expression=>bitwise_or_expression | • bitwise_xor_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_xor_expression(l, state)) {
                                /*--unique-id--124--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 174);
                                prod = 124;
                                continue;
                            }
                        } else if (defined_token_bfaf50116b98d6b4(l)/*[??]*/) {
                            /*assert-end*/
                            /*
                               122:354 coalesce_expression_head_group_0247_118=>bitwise_or_expression •
                            */
                            /*--unique-id--123--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 123;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               120:350 logical_and_expression=>bitwise_or_expression •
                            */
                            /*--unique-id--120--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 120;
                            continue;
                        }
                        break;
                    case 125:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*^ ; | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 94/*[^]*/)) {
                            /*consume*/
                            /*
                               125:359 bitwise_xor_expression=>bitwise_xor_expression ^ • bitwise_and_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_and_expression(l, state)) {
                                /*--unique-id--125--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 174);
                                prod = 125;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               124:356 bitwise_or_expression=>bitwise_xor_expression •
                            */
                            /*--unique-id--124--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 124;
                            continue;
                        }
                        break;
                    case 126:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*& ; ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 38/*[&]*/)) {
                            /*consume*/
                            /*
                               126:361 bitwise_and_expression=>bitwise_and_expression & • equality_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $equality_expression(l, state)) {
                                /*--unique-id--126--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 174);
                                prod = 126;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               125:358 bitwise_xor_expression=>bitwise_and_expression •
                            */
                            /*--unique-id--125--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 125;
                            continue;
                        }
                        break;
                    case 127:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*== != === !== ; & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_4df9552a310b74e2(l)/*[==] [===]*/ || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/)) {
                            /*consume*/
                            /*
                               127:363 equality_expression=>equality_expression == • relational_expression
                               127:364 equality_expression=>equality_expression != • relational_expression
                               127:365 equality_expression=>equality_expression === • relational_expression
                               127:366 equality_expression=>equality_expression !== • relational_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $relational_expression(l, state)) {
                                /*--unique-id--127--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 175);
                                prod = 127;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               126:360 bitwise_and_expression=>equality_expression •
                            */
                            /*--unique-id--126--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 126;
                            continue;
                        }
                        break;
                    case 128:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*in instanceof < > <= >= ; == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_b910302f4210711c(l)/*[in]*/)) {
                            /*consume*/
                            /*
                               128:373 relational_expression=>relational_expression τin • shift_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $shift_expression(l, state)) {
                                /*--unique-id--128--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 178);
                                prod = 128;
                                continue;
                            }
                        } else if (assert_consume(l, state, defined_token_8bbb4e33781aec74(l)/*[instanceof]*/)) {
                            /*consume*/
                            /*
                               128:372 relational_expression=>relational_expression τinstanceof • shift_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $shift_expression(l, state)) {
                                /*--unique-id--128--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 177);
                                prod = 128;
                                continue;
                            }
                        } else if (assert_consume(l, state, ((defined_token_7c7dc8357e27bfc9(l)/*[<=]*/ || defined_token_dad2c38b0a2035e1(l)/*[>=]*/) || (l.utf == 60/*[<]*/)) || (l.utf == 62/*[>]*/))) {
                            /*consume*/
                            /*
                               128:368 relational_expression=>relational_expression < • shift_expression
                               128:369 relational_expression=>relational_expression > • shift_expression
                               128:370 relational_expression=>relational_expression <= • shift_expression
                               128:371 relational_expression=>relational_expression >= • shift_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $shift_expression(l, state)) {
                                /*--unique-id--128--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 176);
                                prod = 128;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               127:362 equality_expression=>relational_expression •
                            */
                            /*--unique-id--127--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 127;
                            continue;
                        }
                        break;
                    case 129:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*; < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE << >> >>>*/
                        if ((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_7c7dc8357e27bfc9(l)/*[<=]*/) || defined_token_dad2c38b0a2035e1(l)/*[>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc001240, 0x60000000, 0x30000000)/*tbl:[ ; ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               128:367 relational_expression=>shift_expression •
                            */
                            /*--unique-id--128--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 128;
                            continue;
                        } else if (assert_consume(l, state, defined_token_bc9f32cdea34416c(l)/*[<<]*/ || defined_token_910c81aa02511c5e(l)/*[>>] [>>>]*/)) {
                            /*consume*/
                            /*
                               129:375 shift_expression=>shift_expression << • additive_expression
                               129:376 shift_expression=>shift_expression >> • additive_expression
                               129:377 shift_expression=>shift_expression >>> • additive_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $additive_expression(l, state)) {
                                /*--unique-id--129--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 179);
                                prod = 129;
                                continue;
                            }
                        }
                        break;
                    case 130:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*+ - ; << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, (l.utf == 43/*[+]*/) || (l.utf == 45/*[-]*/))) {
                            /*consume*/
                            /*
                               130:379 additive_expression=>additive_expression + • multiplicative_expression
                               130:380 additive_expression=>additive_expression - • multiplicative_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $multiplicative_expression(l, state)) {
                                /*--unique-id--130--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 180);
                                prod = 130;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               129:374 shift_expression=>additive_expression •
                            */
                            /*--unique-id--129--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 129;
                            continue;
                        }
                        break;
                    case 131:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /** / % ; + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, assert_table(l, 0x0, 0x8420, 0x0, 0x0)/*tbl:[ * ] [ / ] [ % ]*/)) {
                            /*consume*/
                            /*
                               131:382 multiplicative_expression=>multiplicative_expression * • exponentiation_expression
                               131:383 multiplicative_expression=>multiplicative_expression / • exponentiation_expression
                               131:384 multiplicative_expression=>multiplicative_expression % • exponentiation_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $exponentiation_expression(l, state)) {
                                /*--unique-id--131--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 181);
                                prod = 131;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               130:378 additive_expression=>multiplicative_expression •
                            */
                            /*--unique-id--130--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 130;
                            continue;
                        }
                        break;
                    case 134:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*; ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/) || defined_token_02147395f110c9cd(l)/*[<<] [<=]*/) || defined_token_79ab361fc2644f92(l)/*[>>] [>>>] [>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc00be60, 0x60000000, 0x30000000)/*tbl:[ ; ] [ * ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               133:387 unary_expression=>update_expression •
                            */
                            /*--unique-id--131--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 131;
                            continue;
                        } else if (assert_consume(l, state, defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/)) {
                            /*consume*/
                            /*
                               132:386 exponentiation_expression=>update_expression ** • exponentiation_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $exponentiation_expression(l, state)) {
                                /*--unique-id--131--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 182);
                                prod = 131;
                                continue;
                            }
                        }
                        break;
                    case 186:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*:*/
                        if (assert_consume(l, state, l.utf == 58/*[:]*/)) {
                            /*consume*/
                            /*
                               57:151 labeled_statement=>label_identifier : • labeled_item
                            */
                            /*peek_level:-1 offset:1*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $labeled_item(l, state)) {
                                /*--unique-id--31--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 73);
                                prod = 31;
                                continue;
                            }
                        }
                        break;
                    case 187:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= ( ?. [ . `` ` * /= %= += -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % - + << >> >>> in instanceof >= <= > < == != === !== & ^ | ?? && || ? , ; { nl END_OF_FILE*/
                        if (l.utf == 61/*[=]*/) {
                            /*peek*/
                            /*
                               113:317 primary_expression=>identifier_reference •
                               86:217 arrow_parameters=>identifier_reference •
                            */
                            /*peek_level:0 offset:1 -- clause*/
                            /*> ++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import*/
                            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
                            if (l.utf == 62/*[>]*/) {
                                /*assert-end*/
                                /*
                                   86:217 arrow_parameters=>identifier_reference •
                                */
                                /*--unique-id--86--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:1*/
                                add_reduce(state, 1, 111);
                                prod = 86;
                                continue;
                            } else {
                                /*assert-end*/
                                /*
                                   113:317 primary_expression=>identifier_reference •
                                */
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:1*/
                                prod = 99;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               113:317 primary_expression=>identifier_reference •
                            */
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 99;
                            continue;
                        }
                        break;
                    case 189:
                        sk_d9819c16e680c950(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*: = `` ` . [ ?. ( -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ; { nl END_OF_FILE , ??*/
                        if (l.utf == 58/*[:]*/) {
                            /*assert-end*/
                            /*
                               186:530 label_identifier=>identifier •
                            */
                            /*--unique-id--186--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 243);
                            prod = 186;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               187:531 identifier_reference=>identifier •
                            */
                            /*--unique-id--187--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 244);
                            prod = 187;
                            continue;
                        }
                        break;
                }
                break;
            }
            debug_stack.push({ name: "statement GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 31);
        }
/*production name: declaration
            grammar index: 32
            bodies:
	32:88 declaration=>• class_declaration - 
		32:89 declaration=>• hoistable_declaration - 
		32:90 declaration=>• lexical_declaration - 
            compile time: 6.826ms*/;
        function $declaration(l, state) {
            debug_stack.push({ name: "declaration RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*class async function let const*/
            if (defined_token_2d05a4070a3ebcf4(l)/*[class]*/) {
                /*peek-production-closure*/
                /*
                   32:88 declaration=>• class_declaration
                */
                /*peek_level:0 offset:0*/
                if (state = $class_declaration(l, state)) {
                    /*--unique-id--32--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (defined_token_d4a7e22f69f4ee35(l)/*[async]*/ || defined_token_e043e2118bdadad0(l)/*[function]*/) {
                /*peek-production-closure*/
                /*
                   32:89 declaration=>• hoistable_declaration
                */
                /*peek_level:0 offset:0*/
                if (state = $function_declaration(l, state)) {
                    /*--unique-id--32--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   32:90 declaration=>• lexical_declaration
                */
                /*peek_level:0 offset:0*/
                if (state = $lexical_declaration(l, state)) {
                    /*--unique-id--32--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "declaration RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: breakable_statement
            grammar index: 34
            bodies:
	34:92 breakable_statement=>• iteration_statement - 
		34:93 breakable_statement=>• switch_statement - 
            compile time: 5.272ms*/;
        function $breakable_statement(l, state) {
            debug_stack.push({ name: "breakable_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*switch do while for*/
            if (defined_token_c4d5aeb40acb5412(l)/*[switch]*/) {
                /*peek-production-closure*/
                /*
                   34:93 breakable_statement=>• switch_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $switch_statement(l, state)) {
                    /*--unique-id--34--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "breakable_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   34:92 breakable_statement=>• iteration_statement
                */
                /*peek_level:0 offset:0*/
                if (state = $iteration_statement(l, state)) {
                    /*--unique-id--34--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "breakable_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "breakable_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: block
            grammar index: 36
            bodies:
	36:95 block=>• { statement_list } - 
		36:96 block=>• { } - 
            compile time: 25.096ms*/;
        function $block(l, state) {
            debug_stack.push({ name: "block RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*{*/
            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                /*consume*/
                /*
                   36:95 block=>{ • statement_list }
                   36:96 block=>{ • }
                */
                /*peek_level:0 offset:1 -- clause*/
                /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                    /*consume*/
                    /*
                       36:96 block=>{ } •
                    */
                    /*--unique-id--36--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 28);
                    debug_stack.push({ name: "block RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else {
                    /*peek-production-closure*/
                    /*
                       36:95 block=>{ • statement_list }
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $statement_list(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                            /*--unique-id--36--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 27);
                            debug_stack.push({ name: "block RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "block RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: empty_statement
            grammar index: 37
            bodies:
	37:97 empty_statement=>• ; - 
            compile time: 4.076ms*/;
        function $empty_statement(l, state) {
            debug_stack.push({ name: "empty_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*;*/
            if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                /*consume*/
                /*
                   37:97 empty_statement=>; •
                */
                /*--unique-id--37--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                add_reduce(state, 1, 29);
                debug_stack.push({ name: "empty_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "empty_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: expression_statement
            grammar index: 38
            bodies:
	38:98 expression_statement=>• expression asi - 
            compile time: 4.432ms*/;
        function $expression_statement(l, state) {
            debug_stack.push({ name: "expression_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $expression(l, state)) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (state = $asi_group_017_104(l, state)) {
                    /*--unique-id--38--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 30);
                    debug_stack.push({ name: "expression_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "expression_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: if_statement_group_179_108
            grammar index: 39
            bodies:
	39:99 if_statement_group_179_108=>• τelse statement - 
            compile time: 4.148ms*/;
        function $if_statement_group_179_108(l, state) {
            debug_stack.push({ name: "if_statement_group_179_108 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*else*/
            if (assert_consume(l, state, defined_token_7c714fc2ee65a23e(l)/*[else]*/)) {
                /*consume*/
                /*
                   39:99 if_statement_group_179_108=>τelse • statement
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $statement(l, state)) {
                    /*--unique-id--39--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 0);
                    debug_stack.push({ name: "if_statement_group_179_108 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "if_statement_group_179_108 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: if_statement
            grammar index: 40
            bodies:
	40:100 if_statement=>• τif ( expression ) statement if_statement_group_179_108 - 
		40:101 if_statement=>• τif ( expression ) statement - 
            compile time: 40.552ms*/;
        function $if_statement(l, state) {
            debug_stack.push({ name: "if_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*if*/
            if (assert_consume(l, state, defined_token_911b730840de3b6c(l)/*[if]*/)) {
                /*consume*/
                /*
                   40:100 if_statement=>τif • ( expression ) statement if_statement_group_179_108
                   40:101 if_statement=>τif • ( expression ) statement
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*(*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                    /*consume*/
                    /*
                       40:100 if_statement=>τif ( • expression ) statement if_statement_group_179_108
                       40:101 if_statement=>τif ( • expression ) statement
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*96*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        /*assert*/
                        /*
                           40:100 if_statement=>τif ( • expression ) statement if_statement_group_179_108
                           40:101 if_statement=>τif ( • expression ) statement
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*)*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            /*consume*/
                            /*
                               40:100 if_statement=>τif ( expression ) • statement if_statement_group_179_108
                               40:101 if_statement=>τif ( expression ) • statement
                            */
                            /*peek_level:-1 offset:4 -- clause*/
                            /*31*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $statement(l, state)) {
                                /*assert*/
                                /*
                                   40:100 if_statement=>τif ( expression ) • statement if_statement_group_179_108
                                   40:101 if_statement=>τif ( expression ) • statement
                                */
                                /*peek_level:-1 offset:5 -- clause*/
                                /*else yield async new ( super import this [ / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ -- var ; if do for switch continue break return with throw try debugger class function let const default case while { } export END_OF_FILE*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (defined_token_7c714fc2ee65a23e(l)/*[else]*/) {
                                    /*assert-production-closure*/
                                    /*
                                       40:100 if_statement=>τif ( expression ) statement • if_statement_group_179_108
                                    */
                                    /*peek_level:-1 offset:5*/
                                    if (state = $if_statement_group_179_108(l, state)) {
                                        /*--unique-id--40--DO-NOT-REPLACE*/
                                        add_reduce(state, 6, 31);
                                        debug_stack.push({ name: "if_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                } else {
                                    /*assert-end*/
                                    /*
                                       40:101 if_statement=>τif ( expression ) statement •
                                    */
                                    /*--unique-id--40--DO-NOT-REPLACE*/
                                    /*peek_level:0 offset:6*/
                                    add_reduce(state, 5, 32);
                                    debug_stack.push({ name: "if_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "if_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: iteration_statement_group_184_109
            grammar index: 41
            bodies:
	41:102 iteration_statement_group_184_109=>• expression - 
		41:103 iteration_statement_group_184_109=>• τvar variable_declaration_list - 
            compile time: 17.518ms*/;
        function $iteration_statement_group_184_109(l, state) {
            debug_stack.push({ name: "iteration_statement_group_184_109 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*var yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
            if (assert_consume(l, state, defined_token_f9bb6ce14e19288e(l)/*[var]*/)) {
                /*consume*/
                /*
                   41:103 iteration_statement_group_184_109=>τvar • variable_declaration_list
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $variable_declaration_list(l, state)) {
                    /*--unique-id--41--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 33);
                    debug_stack.push({ name: "iteration_statement_group_184_109 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   41:102 iteration_statement_group_184_109=>• expression
                */
                /*peek_level:0 offset:0*/
                if (state = $expression(l, state)) {
                    /*--unique-id--41--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "iteration_statement_group_184_109 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "iteration_statement_group_184_109 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: iteration_statement_group_089_110
            grammar index: 42
            bodies:
	42:104 iteration_statement_group_089_110=>• left_hand_side_expression - 
		42:105 iteration_statement_group_089_110=>• τvar for_binding - 
		42:106 iteration_statement_group_089_110=>• for_declaration - 
            compile time: 15.94ms*/;
        function $iteration_statement_group_089_110(l, state) {
            debug_stack.push({ name: "iteration_statement_group_089_110 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*var let const this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import*/
            if (assert_consume(l, state, defined_token_f9bb6ce14e19288e(l)/*[var]*/)) {
                /*consume*/
                /*
                   42:105 iteration_statement_group_089_110=>τvar • for_binding
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $for_binding(l, state)) {
                    /*--unique-id--42--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 34);
                    debug_stack.push({ name: "iteration_statement_group_089_110 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (defined_token_f188f6806e50797b(l)/*[let]*/ || defined_token_a3300687f6beda2f(l)/*[const]*/) {
                /*peek-production-closure*/
                /*
                   42:106 iteration_statement_group_089_110=>• for_declaration
                */
                /*peek_level:0 offset:0*/
                if (state = $for_declaration(l, state)) {
                    /*--unique-id--42--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "iteration_statement_group_089_110 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   42:104 iteration_statement_group_089_110=>• left_hand_side_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $left_hand_side_expression(l, state)) {
                    /*--unique-id--42--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "iteration_statement_group_089_110 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "iteration_statement_group_089_110 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: iteration_statement
            grammar index: 43
            bodies:
	43:107 iteration_statement=>• τdo statement τwhile ( expression ) asi - 
		43:108 iteration_statement=>• τwhile ( expression ) statement - 
		43:109 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; expression ; expression ) statement - 
		43:110 iteration_statement=>• τfor ( lexical_declaration expression ; expression ) statement - 
		43:111 iteration_statement=>• τfor ( iteration_statement_group_089_110 τin expression ) statement - 
		43:112 iteration_statement=>• τfor τawait ( iteration_statement_group_089_110 τof expression ) statement - 
		43:113 iteration_statement=>• τfor ( ; expression ; expression ) statement - 
		43:114 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; ; expression ) statement - 
		43:115 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; expression ; ) statement - 
		43:116 iteration_statement=>• τfor ( lexical_declaration ; expression ) statement - 
		43:117 iteration_statement=>• τfor ( lexical_declaration expression ; ) statement - 
		43:118 iteration_statement=>• τfor ( iteration_statement_group_089_110 τof expression ) statement - 
		43:119 iteration_statement=>• τfor ( ; ; expression ) statement - 
		43:120 iteration_statement=>• τfor ( ; expression ; ) statement - 
		43:121 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; ; ) statement - 
		43:122 iteration_statement=>• τfor ( lexical_declaration ; ) statement - 
		43:123 iteration_statement=>• τfor ( ; ; ) statement - 
            compile time: 2620.972ms*/;
        function $iteration_statement(l, state) {
            debug_stack.push({ name: "iteration_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*do while for*/
            if (assert_consume(l, state, defined_token_4c51ded3b971fa93(l)/*[do]*/)) {
                /*consume*/
                /*
                   43:107 iteration_statement=>τdo • statement τwhile ( expression ) asi
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $statement(l, state)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_926ab0b5b37a4ddd(l)/*[while]*/)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                                    if (state = $asi_group_017_104(l, state)) {
                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                        add_reduce(state, 7, 35);
                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            }
                        }
                    }
                }
            } else if (assert_consume(l, state, defined_token_926ab0b5b37a4ddd(l)/*[while]*/)) {
                /*consume*/
                /*
                   43:108 iteration_statement=>τwhile • ( expression ) statement
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $statement(l, state)) {
                                /*--unique-id--43--DO-NOT-REPLACE*/
                                add_reduce(state, 5, 36);
                                debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                }
            } else if (defined_token_22a3e3a7de4e4fb7(l)/*[for]*/) {
                /*peek*/
                /*
                   43:109 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; expression ; expression ) statement
                   43:110 iteration_statement=>• τfor ( lexical_declaration expression ; expression ) statement
                   43:111 iteration_statement=>• τfor ( iteration_statement_group_089_110 τin expression ) statement
                   43:112 iteration_statement=>• τfor τawait ( iteration_statement_group_089_110 τof expression ) statement
                   43:113 iteration_statement=>• τfor ( ; expression ; expression ) statement
                   43:114 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; ; expression ) statement
                   43:115 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; expression ; ) statement
                   43:116 iteration_statement=>• τfor ( lexical_declaration ; expression ) statement
                   43:117 iteration_statement=>• τfor ( lexical_declaration expression ; ) statement
                   43:118 iteration_statement=>• τfor ( iteration_statement_group_089_110 τof expression ) statement
                   43:119 iteration_statement=>• τfor ( ; ; expression ) statement
                   43:120 iteration_statement=>• τfor ( ; expression ; ) statement
                   43:121 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; ; ) statement
                   43:122 iteration_statement=>• τfor ( lexical_declaration ; ) statement
                   43:123 iteration_statement=>• τfor ( ; ; ) statement
                */
                /*peek_level:1 offset:0 -- clause*/
                /*( await*/
                let pk = l.copy();
                sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                if (pk.utf == 40/*[(]*/) {
                    /*peek*/
                    /*
                       43:109 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; expression ; expression ) statement
                       43:110 iteration_statement=>• τfor ( lexical_declaration expression ; expression ) statement
                       43:111 iteration_statement=>• τfor ( iteration_statement_group_089_110 τin expression ) statement
                       43:113 iteration_statement=>• τfor ( ; expression ; expression ) statement
                       43:114 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; ; expression ) statement
                       43:115 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; expression ; ) statement
                       43:116 iteration_statement=>• τfor ( lexical_declaration ; expression ) statement
                       43:117 iteration_statement=>• τfor ( lexical_declaration expression ; ) statement
                       43:118 iteration_statement=>• τfor ( iteration_statement_group_089_110 τof expression ) statement
                       43:119 iteration_statement=>• τfor ( ; ; expression ) statement
                       43:120 iteration_statement=>• τfor ( ; expression ; ) statement
                       43:121 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; ; ) statement
                       43:122 iteration_statement=>• τfor ( lexical_declaration ; ) statement
                       43:123 iteration_statement=>• τfor ( ; ; ) statement
                    */
                    /*peek_level:2 offset:0 -- clause*/
                    /*; let const yield delete void typeof + ~ ! - await ++ -- async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` var*/
                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                    if (pk.utf == 59/*[;]*/) {
                        /*peek*/
                        /*
                           43:113 iteration_statement=>• τfor ( ; expression ; expression ) statement
                           43:119 iteration_statement=>• τfor ( ; ; expression ) statement
                           43:120 iteration_statement=>• τfor ( ; expression ; ) statement
                           43:123 iteration_statement=>• τfor ( ; ; ) statement
                        */
                        /*peek_level:-1 offset:2 -- clause*/
                        /*for*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_22a3e3a7de4e4fb7(l)/*[for]*/)) {
                            /*consume*/
                            /*
                               43:113 iteration_statement=>τfor • ( ; expression ; expression ) statement
                               43:119 iteration_statement=>τfor • ( ; ; expression ) statement
                               43:120 iteration_statement=>τfor • ( ; expression ; ) statement
                               43:123 iteration_statement=>τfor • ( ; ; ) statement
                            */
                            /*peek_level:-1 offset:3 -- clause*/
                            /*(*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                /*consume*/
                                /*
                                   43:113 iteration_statement=>τfor ( • ; expression ; expression ) statement
                                   43:119 iteration_statement=>τfor ( • ; ; expression ) statement
                                   43:120 iteration_statement=>τfor ( • ; expression ; ) statement
                                   43:123 iteration_statement=>τfor ( • ; ; ) statement
                                */
                                /*peek_level:-1 offset:4 -- clause*/
                                /*;*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                    /*consume*/
                                    /*
                                       43:113 iteration_statement=>τfor ( ; • expression ; expression ) statement
                                       43:119 iteration_statement=>τfor ( ; • ; expression ) statement
                                       43:120 iteration_statement=>τfor ( ; • expression ; ) statement
                                       43:123 iteration_statement=>τfor ( ; • ; ) statement
                                    */
                                    /*peek_level:0 offset:5 -- clause*/
                                    /*; yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (l.utf == 59/*[;]*/) {
                                        /*peek*/
                                        /*
                                           43:119 iteration_statement=>τfor ( ; • ; expression ) statement
                                           43:123 iteration_statement=>τfor ( ; • ; ) statement
                                        */
                                        /*peek_level:-1 offset:7 -- clause*/
                                        /*;*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                            /*consume*/
                                            /*
                                               43:119 iteration_statement=>τfor ( ; ; • expression ) statement
                                               43:123 iteration_statement=>τfor ( ; ; • ) statement
                                            */
                                            /*peek_level:0 offset:8 -- clause*/
                                            /*) yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                /*consume*/
                                                /*
                                                   43:123 iteration_statement=>τfor ( ; ; ) • statement
                                                */
                                                /*peek_level:-1 offset:8*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (state = $statement(l, state)) {
                                                    /*--unique-id--43--DO-NOT-REPLACE*/
                                                    add_reduce(state, 6, 51);
                                                    debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                    return state;
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   43:119 iteration_statement=>τfor ( ; ; • expression ) statement
                                                */
                                                /*peek_level:0 offset:8*/
                                                if (state = $expression(l, state)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (state = $statement(l, state)) {
                                                            /*--unique-id--43--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 47);
                                                            debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                            return state;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        /*peek-production-closure*/
                                        /*
                                           43:113 iteration_statement=>τfor ( ; • expression ; expression ) statement
                                           43:120 iteration_statement=>τfor ( ; • expression ; ) statement
                                        */
                                        /*peek_level:-1 offset:7 -- clause*/
                                        /*96*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (state = $expression(l, state)) {
                                            /*assert*/
                                            /*
                                               43:113 iteration_statement=>τfor ( ; • expression ; expression ) statement
                                               43:120 iteration_statement=>τfor ( ; • expression ; ) statement
                                            */
                                            /*peek_level:-1 offset:8 -- clause*/
                                            /*;*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                                /*consume*/
                                                /*
                                                   43:113 iteration_statement=>τfor ( ; expression ; • expression ) statement
                                                   43:120 iteration_statement=>τfor ( ; expression ; • ) statement
                                                */
                                                /*peek_level:0 offset:9 -- clause*/
                                                /*) yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    /*consume*/
                                                    /*
                                                       43:120 iteration_statement=>τfor ( ; expression ; ) • statement
                                                    */
                                                    /*peek_level:-1 offset:9*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 48);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       43:113 iteration_statement=>τfor ( ; expression ; • expression ) statement
                                                    */
                                                    /*peek_level:0 offset:9*/
                                                    if (state = $expression(l, state)) {
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (state = $statement(l, state)) {
                                                                /*--unique-id--43--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 41);
                                                                debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                return state;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else if (defined_token_f188f6806e50797b(pk)/*[let]*/ || defined_token_a3300687f6beda2f(pk)/*[const]*/) {
                        /*peek*/
                        /*
                           43:110 iteration_statement=>• τfor ( lexical_declaration expression ; expression ) statement
                           43:111 iteration_statement=>• τfor ( iteration_statement_group_089_110 τin expression ) statement
                           43:116 iteration_statement=>• τfor ( lexical_declaration ; expression ) statement
                           43:117 iteration_statement=>• τfor ( lexical_declaration expression ; ) statement
                           43:118 iteration_statement=>• τfor ( iteration_statement_group_089_110 τof expression ) statement
                           43:122 iteration_statement=>• τfor ( lexical_declaration ; ) statement
                        */
                        /*peek_level:-1 offset:2 -- clause*/
                        /*for*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_22a3e3a7de4e4fb7(l)/*[for]*/)) {
                            /*consume*/
                            /*
                               43:110 iteration_statement=>τfor • ( lexical_declaration expression ; expression ) statement
                               43:111 iteration_statement=>τfor • ( iteration_statement_group_089_110 τin expression ) statement
                               43:116 iteration_statement=>τfor • ( lexical_declaration ; expression ) statement
                               43:117 iteration_statement=>τfor • ( lexical_declaration expression ; ) statement
                               43:118 iteration_statement=>τfor • ( iteration_statement_group_089_110 τof expression ) statement
                               43:122 iteration_statement=>τfor • ( lexical_declaration ; ) statement
                            */
                            /*peek_level:-1 offset:3 -- clause*/
                            /*(*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                /*consume*/
                                /*
                                   43:110 iteration_statement=>τfor ( • lexical_declaration expression ; expression ) statement
                                   43:111 iteration_statement=>τfor ( • iteration_statement_group_089_110 τin expression ) statement
                                   43:116 iteration_statement=>τfor ( • lexical_declaration ; expression ) statement
                                   43:117 iteration_statement=>τfor ( • lexical_declaration expression ; ) statement
                                   43:118 iteration_statement=>τfor ( • iteration_statement_group_089_110 τof expression ) statement
                                   43:122 iteration_statement=>τfor ( • lexical_declaration ; ) statement
                                */
                                /*peek_level:0 offset:4 -- clause*/
                                /*let const this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import var*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (defined_token_f188f6806e50797b(l)/*[let]*/ || defined_token_a3300687f6beda2f(l)/*[const]*/) {
                                    /*peek*/
                                    /*
                                       43:110 iteration_statement=>τfor ( • lexical_declaration expression ; expression ) statement
                                       43:111 iteration_statement=>τfor ( • iteration_statement_group_089_110 τin expression ) statement
                                       43:116 iteration_statement=>τfor ( • lexical_declaration ; expression ) statement
                                       43:117 iteration_statement=>τfor ( • lexical_declaration expression ; ) statement
                                       43:118 iteration_statement=>τfor ( • iteration_statement_group_089_110 τof expression ) statement
                                       43:122 iteration_statement=>τfor ( • lexical_declaration ; ) statement
                                    */
                                    let mk = mark();
                                    let anchor = l.copy();
                                    let anchor_state = state;
                                    /*110,8,2,111,7,2,116,7,2,117,7,2,118,7,2,122,6,2*/
                                    /*43*/
                                    /*peek_level:-1 offset:4 -- clause*/
                                    /*68*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $lexical_declaration(l, state)) {
                                        /*assert*/
                                        /*
                                           43:110 iteration_statement=>τfor ( • lexical_declaration expression ; expression ) statement
                                           43:116 iteration_statement=>τfor ( • lexical_declaration ; expression ) statement
                                           43:117 iteration_statement=>τfor ( • lexical_declaration expression ; ) statement
                                           43:122 iteration_statement=>τfor ( • lexical_declaration ; ) statement
                                        */
                                        /*peek_level:0 offset:5 -- clause*/
                                        /*; yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (l.utf == 59/*[;]*/) {
                                            /*peek*/
                                            /*
                                               43:116 iteration_statement=>τfor ( lexical_declaration • ; expression ) statement
                                               43:122 iteration_statement=>τfor ( lexical_declaration • ; ) statement
                                            */
                                            /*peek_level:-1 offset:7 -- clause*/
                                            /*;*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                                /*consume*/
                                                /*
                                                   43:116 iteration_statement=>τfor ( lexical_declaration ; • expression ) statement
                                                   43:122 iteration_statement=>τfor ( lexical_declaration ; • ) statement
                                                */
                                                /*peek_level:0 offset:8 -- clause*/
                                                /*) yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    /*consume*/
                                                    /*
                                                       43:122 iteration_statement=>τfor ( lexical_declaration ; ) • statement
                                                    */
                                                    /*peek_level:-1 offset:8*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 6, 50);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       43:116 iteration_statement=>τfor ( lexical_declaration ; • expression ) statement
                                                    */
                                                    /*peek_level:0 offset:8*/
                                                    if (state = $expression(l, state)) {
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (state = $statement(l, state)) {
                                                                /*--unique-id--43--DO-NOT-REPLACE*/
                                                                add_reduce(state, 7, 44);
                                                                debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                return state;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               43:110 iteration_statement=>τfor ( lexical_declaration • expression ; expression ) statement
                                               43:117 iteration_statement=>τfor ( lexical_declaration • expression ; ) statement
                                            */
                                            /*peek_level:-1 offset:7 -- clause*/
                                            /*96*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $expression(l, state)) {
                                                /*assert*/
                                                /*
                                                   43:110 iteration_statement=>τfor ( lexical_declaration • expression ; expression ) statement
                                                   43:117 iteration_statement=>τfor ( lexical_declaration • expression ; ) statement
                                                */
                                                /*peek_level:-1 offset:8 -- clause*/
                                                /*;*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                                    /*consume*/
                                                    /*
                                                       43:110 iteration_statement=>τfor ( lexical_declaration expression ; • expression ) statement
                                                       43:117 iteration_statement=>τfor ( lexical_declaration expression ; • ) statement
                                                    */
                                                    /*peek_level:0 offset:9 -- clause*/
                                                    /*) yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                        /*consume*/
                                                        /*
                                                           43:117 iteration_statement=>τfor ( lexical_declaration expression ; ) • statement
                                                        */
                                                        /*peek_level:-1 offset:9*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (state = $statement(l, state)) {
                                                            /*--unique-id--43--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 45);
                                                            debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                            return state;
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           43:110 iteration_statement=>τfor ( lexical_declaration expression ; • expression ) statement
                                                        */
                                                        /*peek_level:0 offset:9*/
                                                        if (state = $expression(l, state)) {
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (state = $statement(l, state)) {
                                                                    /*--unique-id--43--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 38);
                                                                    debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                    return state;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    /*110,8,2,111,7,2,116,7,2,117,7,2,118,7,2,122,6,2*/
                                    state = reset(mk, anchor, l, anchor_state);
                                    /*peek_level:-1 offset:4 -- clause*/
                                    /*42*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $iteration_statement_group_089_110(l, state)) {
                                        /*assert*/
                                        /*
                                           43:111 iteration_statement=>τfor ( • iteration_statement_group_089_110 τin expression ) statement
                                           43:118 iteration_statement=>τfor ( • iteration_statement_group_089_110 τof expression ) statement
                                        */
                                        /*peek_level:-1 offset:5 -- clause*/
                                        /*in of*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, defined_token_b910302f4210711c(l)/*[in]*/)) {
                                            /*consume*/
                                            /*
                                               43:111 iteration_statement=>τfor ( iteration_statement_group_089_110 τin • expression ) statement
                                            */
                                            /*peek_level:-1 offset:5*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $expression(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 39);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        } else if (assert_consume(l, state, defined_token_c6b5fbb944702d5a(l)/*[of]*/)) {
                                            /*consume*/
                                            /*
                                               43:118 iteration_statement=>τfor ( iteration_statement_group_089_110 τof • expression ) statement
                                            */
                                            /*peek_level:-1 offset:5*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $expression(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 46);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    /*peek-production-closure*/
                                    /*
                                       43:111 iteration_statement=>τfor ( • iteration_statement_group_089_110 τin expression ) statement
                                       43:118 iteration_statement=>τfor ( • iteration_statement_group_089_110 τof expression ) statement
                                    */
                                    /*peek_level:-1 offset:6 -- clause*/
                                    /*42*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $iteration_statement_group_089_110(l, state)) {
                                        /*assert*/
                                        /*
                                           43:111 iteration_statement=>τfor ( • iteration_statement_group_089_110 τin expression ) statement
                                           43:118 iteration_statement=>τfor ( • iteration_statement_group_089_110 τof expression ) statement
                                        */
                                        /*peek_level:-1 offset:7 -- clause*/
                                        /*in of*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, defined_token_b910302f4210711c(l)/*[in]*/)) {
                                            /*consume*/
                                            /*
                                               43:111 iteration_statement=>τfor ( iteration_statement_group_089_110 τin • expression ) statement
                                            */
                                            /*peek_level:-1 offset:7*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $expression(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 39);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        } else if (assert_consume(l, state, defined_token_c6b5fbb944702d5a(l)/*[of]*/)) {
                                            /*consume*/
                                            /*
                                               43:118 iteration_statement=>τfor ( iteration_statement_group_089_110 τof • expression ) statement
                                            */
                                            /*peek_level:-1 offset:7*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $expression(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 46);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else if (((((((defined_token_d8f9d336d83ac87c(pk)/*[yield]*/ || defined_token_8ed5fb4bce429503(pk)/*[delete]*/) || defined_token_042ea6dc9657ee07(pk)/*[void]*/) || defined_token_9451180aac506098(pk)/*[typeof]*/) || defined_token_ded0f96a7228c7c5(pk)/*[await]*/) || defined_token_6d4f77707d3e0e5a(pk)/*[++]*/) || defined_token_f2ef34011f64cef0(pk)/*[--]*/) || assert_table(pk, 0x0, 0x2802, 0x0, 0x40000000)/*tbl:[ + ] [ ~ ] [ ! ] [ - ]*/) {
                        /*peek*/
                        /*
                           43:109 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; expression ; expression ) statement
                           43:114 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; ; expression ) statement
                           43:115 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; expression ; ) statement
                           43:121 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; ; ) statement
                        */
                        /*peek_level:-1 offset:2 -- clause*/
                        /*for*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_22a3e3a7de4e4fb7(l)/*[for]*/)) {
                            /*consume*/
                            /*
                               43:109 iteration_statement=>τfor • ( iteration_statement_group_184_109 ; expression ; expression ) statement
                               43:114 iteration_statement=>τfor • ( iteration_statement_group_184_109 ; ; expression ) statement
                               43:115 iteration_statement=>τfor • ( iteration_statement_group_184_109 ; expression ; ) statement
                               43:121 iteration_statement=>τfor • ( iteration_statement_group_184_109 ; ; ) statement
                            */
                            /*peek_level:-1 offset:3 -- clause*/
                            /*(*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                /*consume*/
                                /*
                                   43:109 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; expression ) statement
                                   43:114 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; expression ) statement
                                   43:115 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; ) statement
                                   43:121 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; ) statement
                                */
                                /*peek_level:-1 offset:4 -- clause*/
                                /*41*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $iteration_statement_group_184_109(l, state)) {
                                    /*assert*/
                                    /*
                                       43:109 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; expression ) statement
                                       43:114 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; expression ) statement
                                       43:115 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; ) statement
                                       43:121 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; ) statement
                                    */
                                    /*peek_level:-1 offset:5 -- clause*/
                                    /*;*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                        /*consume*/
                                        /*
                                           43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; expression ) statement
                                           43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; expression ) statement
                                           43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; ) statement
                                           43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; ) statement
                                        */
                                        /*peek_level:0 offset:6 -- clause*/
                                        /*; yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (l.utf == 59/*[;]*/) {
                                            /*peek*/
                                            /*
                                               43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; expression ) statement
                                               43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; ) statement
                                            */
                                            /*peek_level:-1 offset:8 -- clause*/
                                            /*;*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                                /*consume*/
                                                /*
                                                   43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; • expression ) statement
                                                   43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; • ) statement
                                                */
                                                /*peek_level:0 offset:9 -- clause*/
                                                /*) yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    /*consume*/
                                                    /*
                                                       43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; ) • statement
                                                    */
                                                    /*peek_level:-1 offset:9*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 49);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; • expression ) statement
                                                    */
                                                    /*peek_level:0 offset:9*/
                                                    if (state = $expression(l, state)) {
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (state = $statement(l, state)) {
                                                                /*--unique-id--43--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 42);
                                                                debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                return state;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; expression ) statement
                                               43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; ) statement
                                            */
                                            /*peek_level:-1 offset:8 -- clause*/
                                            /*96*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $expression(l, state)) {
                                                /*assert*/
                                                /*
                                                   43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; expression ) statement
                                                   43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; ) statement
                                                */
                                                /*peek_level:-1 offset:9 -- clause*/
                                                /*;*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                                    /*consume*/
                                                    /*
                                                       43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; • expression ) statement
                                                       43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; • ) statement
                                                    */
                                                    /*peek_level:0 offset:10 -- clause*/
                                                    /*) yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                        /*consume*/
                                                        /*
                                                           43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; ) • statement
                                                        */
                                                        /*peek_level:-1 offset:10*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (state = $statement(l, state)) {
                                                            /*--unique-id--43--DO-NOT-REPLACE*/
                                                            add_reduce(state, 8, 43);
                                                            debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                            return state;
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; • expression ) statement
                                                        */
                                                        /*peek_level:0 offset:10*/
                                                        if (state = $expression(l, state)) {
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (state = $statement(l, state)) {
                                                                    /*--unique-id--43--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 9, 37);
                                                                    debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                    return state;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else if (((defined_token_19cd74c69f5512e8(pk)/*[``]*/ || assert_table(pk, 0x0, 0x8194, 0x88000000, 0x8000001)/*tbl:[ ( ] [ [ ] [ { ] [ / ] [ " ] [ ' ] [ _ ] [ $ ] [ ` ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                        /*peek*/
                        /*
                           43:109 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; expression ; expression ) statement
                           43:111 iteration_statement=>• τfor ( iteration_statement_group_089_110 τin expression ) statement
                           43:114 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; ; expression ) statement
                           43:115 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; expression ; ) statement
                           43:118 iteration_statement=>• τfor ( iteration_statement_group_089_110 τof expression ) statement
                           43:121 iteration_statement=>• τfor ( iteration_statement_group_184_109 ; ; ) statement
                        */
                        /*peek_level:-1 offset:2 -- clause*/
                        /*for*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_22a3e3a7de4e4fb7(l)/*[for]*/)) {
                            /*consume*/
                            /*
                               43:109 iteration_statement=>τfor • ( iteration_statement_group_184_109 ; expression ; expression ) statement
                               43:111 iteration_statement=>τfor • ( iteration_statement_group_089_110 τin expression ) statement
                               43:114 iteration_statement=>τfor • ( iteration_statement_group_184_109 ; ; expression ) statement
                               43:115 iteration_statement=>τfor • ( iteration_statement_group_184_109 ; expression ; ) statement
                               43:118 iteration_statement=>τfor • ( iteration_statement_group_089_110 τof expression ) statement
                               43:121 iteration_statement=>τfor • ( iteration_statement_group_184_109 ; ; ) statement
                            */
                            /*peek_level:-1 offset:3 -- clause*/
                            /*(*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                /*consume*/
                                /*
                                   43:109 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; expression ) statement
                                   43:111 iteration_statement=>τfor ( • iteration_statement_group_089_110 τin expression ) statement
                                   43:114 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; expression ) statement
                                   43:115 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; ) statement
                                   43:118 iteration_statement=>τfor ( • iteration_statement_group_089_110 τof expression ) statement
                                   43:121 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; ) statement
                                */
                                /*peek_level:0 offset:4 -- clause*/
                                /*let const yield delete void typeof + ~ ! - await ++ -- async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` var*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (defined_token_f188f6806e50797b(l)/*[let]*/ || defined_token_a3300687f6beda2f(l)/*[const]*/) {
                                    /*peek-production-closure*/
                                    /*
                                       43:111 iteration_statement=>τfor ( • iteration_statement_group_089_110 τin expression ) statement
                                       43:118 iteration_statement=>τfor ( • iteration_statement_group_089_110 τof expression ) statement
                                    */
                                    /*peek_level:-1 offset:6 -- clause*/
                                    /*42*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $iteration_statement_group_089_110(l, state)) {
                                        /*assert*/
                                        /*
                                           43:111 iteration_statement=>τfor ( • iteration_statement_group_089_110 τin expression ) statement
                                           43:118 iteration_statement=>τfor ( • iteration_statement_group_089_110 τof expression ) statement
                                        */
                                        /*peek_level:-1 offset:7 -- clause*/
                                        /*in of*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, defined_token_b910302f4210711c(l)/*[in]*/)) {
                                            /*consume*/
                                            /*
                                               43:111 iteration_statement=>τfor ( iteration_statement_group_089_110 τin • expression ) statement
                                            */
                                            /*peek_level:-1 offset:7*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $expression(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 39);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        } else if (assert_consume(l, state, defined_token_c6b5fbb944702d5a(l)/*[of]*/)) {
                                            /*consume*/
                                            /*
                                               43:118 iteration_statement=>τfor ( iteration_statement_group_089_110 τof • expression ) statement
                                            */
                                            /*peek_level:-1 offset:7*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $expression(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 46);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else if (((((((defined_token_d8f9d336d83ac87c(l)/*[yield]*/ || defined_token_8ed5fb4bce429503(l)/*[delete]*/) || defined_token_042ea6dc9657ee07(l)/*[void]*/) || defined_token_9451180aac506098(l)/*[typeof]*/) || defined_token_ded0f96a7228c7c5(l)/*[await]*/) || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || assert_table(l, 0x0, 0x2802, 0x0, 0x40000000)/*tbl:[ + ] [ ~ ] [ ! ] [ - ]*/) {
                                    /*peek-production-closure*/
                                    /*
                                       43:109 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; expression ) statement
                                       43:114 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; expression ) statement
                                       43:115 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; ) statement
                                       43:121 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; ) statement
                                    */
                                    /*peek_level:-1 offset:6 -- clause*/
                                    /*41*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $iteration_statement_group_184_109(l, state)) {
                                        /*assert*/
                                        /*
                                           43:109 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; expression ) statement
                                           43:114 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; expression ) statement
                                           43:115 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; ) statement
                                           43:121 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; ) statement
                                        */
                                        /*peek_level:-1 offset:7 -- clause*/
                                        /*;*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                            /*consume*/
                                            /*
                                               43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; expression ) statement
                                               43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; expression ) statement
                                               43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; ) statement
                                               43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; ) statement
                                            */
                                            /*peek_level:0 offset:8 -- clause*/
                                            /*; yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (l.utf == 59/*[;]*/) {
                                                /*peek*/
                                                /*
                                                   43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; expression ) statement
                                                   43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; ) statement
                                                */
                                                /*peek_level:-1 offset:10 -- clause*/
                                                /*;*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                                    /*consume*/
                                                    /*
                                                       43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; • expression ) statement
                                                       43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; • ) statement
                                                    */
                                                    /*peek_level:0 offset:11 -- clause*/
                                                    /*) yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                        /*consume*/
                                                        /*
                                                           43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; ) • statement
                                                        */
                                                        /*peek_level:-1 offset:11*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (state = $statement(l, state)) {
                                                            /*--unique-id--43--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 49);
                                                            debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                            return state;
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; • expression ) statement
                                                        */
                                                        /*peek_level:0 offset:11*/
                                                        if (state = $expression(l, state)) {
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (state = $statement(l, state)) {
                                                                    /*--unique-id--43--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 42);
                                                                    debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                    return state;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; expression ) statement
                                                   43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; ) statement
                                                */
                                                /*peek_level:-1 offset:10 -- clause*/
                                                /*96*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (state = $expression(l, state)) {
                                                    /*assert*/
                                                    /*
                                                       43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; expression ) statement
                                                       43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; ) statement
                                                    */
                                                    /*peek_level:-1 offset:11 -- clause*/
                                                    /*;*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                                        /*consume*/
                                                        /*
                                                           43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; • expression ) statement
                                                           43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; • ) statement
                                                        */
                                                        /*peek_level:0 offset:12 -- clause*/
                                                        /*) yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                            /*consume*/
                                                            /*
                                                               43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; ) • statement
                                                            */
                                                            /*peek_level:-1 offset:12*/
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (state = $statement(l, state)) {
                                                                /*--unique-id--43--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 43);
                                                                debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                return state;
                                                            }
                                                        } else {
                                                            /*peek-production-closure*/
                                                            /*
                                                               43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; • expression ) statement
                                                            */
                                                            /*peek_level:0 offset:12*/
                                                            if (state = $expression(l, state)) {
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                    if (state = $statement(l, state)) {
                                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                                        add_reduce(state, 9, 37);
                                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                        return state;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else if (((defined_token_19cd74c69f5512e8(l)/*[``]*/ || assert_table(l, 0x0, 0x8194, 0x88000000, 0x8000001)/*tbl:[ ( ] [ [ ] [ { ] [ / ] [ " ] [ ' ] [ _ ] [ $ ] [ ` ]*/) || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                                    /*peek*/
                                    /*
                                       43:109 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; expression ) statement
                                       43:111 iteration_statement=>τfor ( • iteration_statement_group_089_110 τin expression ) statement
                                       43:114 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; expression ) statement
                                       43:115 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; ) statement
                                       43:118 iteration_statement=>τfor ( • iteration_statement_group_089_110 τof expression ) statement
                                       43:121 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; ) statement
                                    */
                                    let mk = mark();
                                    let anchor = l.copy();
                                    let anchor_state = state;
                                    /*109,9,2,111,7,2,114,8,2,115,8,2,118,7,2,121,7,2*/
                                    /*43*/
                                    /*peek_level:-1 offset:4 -- clause*/
                                    /*41*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $iteration_statement_group_184_109(l, state)) {
                                        /*assert*/
                                        /*
                                           43:109 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; expression ) statement
                                           43:114 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; expression ) statement
                                           43:115 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; expression ; ) statement
                                           43:121 iteration_statement=>τfor ( • iteration_statement_group_184_109 ; ; ) statement
                                        */
                                        /*peek_level:-1 offset:5 -- clause*/
                                        /*;*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                            /*consume*/
                                            /*
                                               43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; expression ) statement
                                               43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; expression ) statement
                                               43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; ) statement
                                               43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; ) statement
                                            */
                                            /*peek_level:0 offset:6 -- clause*/
                                            /*; yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (l.utf == 59/*[;]*/) {
                                                /*peek*/
                                                /*
                                                   43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; expression ) statement
                                                   43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • ; ) statement
                                                */
                                                /*peek_level:-1 offset:8 -- clause*/
                                                /*;*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                                    /*consume*/
                                                    /*
                                                       43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; • expression ) statement
                                                       43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; • ) statement
                                                    */
                                                    /*peek_level:0 offset:9 -- clause*/
                                                    /*) yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                        /*consume*/
                                                        /*
                                                           43:121 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; ) • statement
                                                        */
                                                        /*peek_level:-1 offset:9*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (state = $statement(l, state)) {
                                                            /*--unique-id--43--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 49);
                                                            debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                            return state;
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           43:114 iteration_statement=>τfor ( iteration_statement_group_184_109 ; ; • expression ) statement
                                                        */
                                                        /*peek_level:0 offset:9*/
                                                        if (state = $expression(l, state)) {
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (state = $statement(l, state)) {
                                                                    /*--unique-id--43--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 42);
                                                                    debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                    return state;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; expression ) statement
                                                   43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; ) statement
                                                */
                                                /*peek_level:-1 offset:8 -- clause*/
                                                /*96*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (state = $expression(l, state)) {
                                                    /*assert*/
                                                    /*
                                                       43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; expression ) statement
                                                       43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; • expression ; ) statement
                                                    */
                                                    /*peek_level:-1 offset:9 -- clause*/
                                                    /*;*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                                                        /*consume*/
                                                        /*
                                                           43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; • expression ) statement
                                                           43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; • ) statement
                                                        */
                                                        /*peek_level:0 offset:10 -- clause*/
                                                        /*) yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                            /*consume*/
                                                            /*
                                                               43:115 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; ) • statement
                                                            */
                                                            /*peek_level:-1 offset:10*/
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (state = $statement(l, state)) {
                                                                /*--unique-id--43--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 43);
                                                                debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                return state;
                                                            }
                                                        } else {
                                                            /*peek-production-closure*/
                                                            /*
                                                               43:109 iteration_statement=>τfor ( iteration_statement_group_184_109 ; expression ; • expression ) statement
                                                            */
                                                            /*peek_level:0 offset:10*/
                                                            if (state = $expression(l, state)) {
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                    if (state = $statement(l, state)) {
                                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                                        add_reduce(state, 9, 37);
                                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                        return state;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    /*109,9,2,111,7,2,114,8,2,115,8,2,118,7,2,121,7,2*/
                                    state = reset(mk, anchor, l, anchor_state);
                                    /*peek_level:-1 offset:4 -- clause*/
                                    /*42*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $iteration_statement_group_089_110(l, state)) {
                                        /*assert*/
                                        /*
                                           43:111 iteration_statement=>τfor ( • iteration_statement_group_089_110 τin expression ) statement
                                           43:118 iteration_statement=>τfor ( • iteration_statement_group_089_110 τof expression ) statement
                                        */
                                        /*peek_level:-1 offset:5 -- clause*/
                                        /*in of*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, defined_token_b910302f4210711c(l)/*[in]*/)) {
                                            /*consume*/
                                            /*
                                               43:111 iteration_statement=>τfor ( iteration_statement_group_089_110 τin • expression ) statement
                                            */
                                            /*peek_level:-1 offset:5*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $expression(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 39);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        } else if (assert_consume(l, state, defined_token_c6b5fbb944702d5a(l)/*[of]*/)) {
                                            /*consume*/
                                            /*
                                               43:118 iteration_statement=>τfor ( iteration_statement_group_089_110 τof • expression ) statement
                                            */
                                            /*peek_level:-1 offset:5*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $expression(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $statement(l, state)) {
                                                        /*--unique-id--43--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 46);
                                                        debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       43:112 iteration_statement=>• τfor τawait ( iteration_statement_group_089_110 τof expression ) statement
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, defined_token_22a3e3a7de4e4fb7(l)/*[for]*/)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_ded0f96a7228c7c5(l)/*[await]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $iteration_statement_group_089_110(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, defined_token_c6b5fbb944702d5a(l)/*[of]*/)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (state = $expression(l, state)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (state = $statement(l, state)) {
                                                    /*--unique-id--43--DO-NOT-REPLACE*/
                                                    add_reduce(state, 8, 40);
                                                    debug_stack.push({ name: "iteration_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                    return state;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "iteration_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: for_declaration
            grammar index: 44
            bodies:
	44:124 for_declaration=>• let_or_const for_binding - 
            compile time: 2.273ms*/;
        function $for_declaration(l, state) {
            debug_stack.push({ name: "for_declaration RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $let_or_const(l, state)) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $for_binding(l, state)) {
                    /*--unique-id--44--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 52);
                    debug_stack.push({ name: "for_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "for_declaration RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: for_binding
            grammar index: 45
            bodies:
	45:125 for_binding=>• binding_identifier - 
		45:126 for_binding=>• binding_pattern - 
            compile time: 5.209ms*/;
        function $for_binding(l, state) {
            debug_stack.push({ name: "for_binding RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*{ [ _ $ id async get set target as from*/
            if ((l.utf == 123/*[{]*/) || (l.utf == 91/*[[]*/)) {
                /*peek-production-closure*/
                /*
                   45:126 for_binding=>• binding_pattern
                */
                /*peek_level:0 offset:0*/
                if (state = $binding_pattern(l, state)) {
                    /*--unique-id--45--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "for_binding RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   45:125 for_binding=>• binding_identifier
                */
                /*peek_level:0 offset:0*/
                if (state = $identifier(l, state)) {
                    /*--unique-id--45--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 111);
                    debug_stack.push({ name: "for_binding RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "for_binding RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: continue_statement
            grammar index: 46
            bodies:
	46:127 continue_statement=>• τcontinue label_identifier asi - 
		46:128 continue_statement=>• τcontinue asi - 
            compile time: 8.235ms*/;
        function $continue_statement(l, state) {
            debug_stack.push({ name: "continue_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*continue*/
            if (assert_consume(l, state, defined_token_663cc31c85f53275(l)/*[continue]*/)) {
                /*consume*/
                /*
                   46:127 continue_statement=>τcontinue • label_identifier asi
                   46:128 continue_statement=>τcontinue • asi
                */
                /*peek_level:0 offset:1 -- clause*/
                /*; { nl END_OF_FILE _ $ id async get set target as from*/
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || (l.utf == 59/*[;]*/)) {
                    /*peek-production-closure*/
                    /*
                       46:128 continue_statement=>τcontinue • asi
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $asi_group_017_104(l, state)) {
                        /*--unique-id--46--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 54);
                        debug_stack.push({ name: "continue_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       46:127 continue_statement=>τcontinue • label_identifier asi
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $identifier(l, state)) {
                        add_reduce(state, 1, 243);
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        if (state = $asi_group_017_104(l, state)) {
                            /*--unique-id--46--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 53);
                            debug_stack.push({ name: "continue_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "continue_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: break_statement
            grammar index: 47
            bodies:
	47:129 break_statement=>• τbreak label_identifier asi - 
		47:130 break_statement=>• τbreak asi - 
            compile time: 8.811ms*/;
        function $break_statement(l, state) {
            debug_stack.push({ name: "break_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*break*/
            if (assert_consume(l, state, defined_token_c3524ff0dce64492(l)/*[break]*/)) {
                /*consume*/
                /*
                   47:129 break_statement=>τbreak • label_identifier asi
                   47:130 break_statement=>τbreak • asi
                */
                /*peek_level:0 offset:1 -- clause*/
                /*; { nl END_OF_FILE _ $ id async get set target as from*/
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || (l.utf == 59/*[;]*/)) {
                    /*peek-production-closure*/
                    /*
                       47:130 break_statement=>τbreak • asi
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $asi_group_017_104(l, state)) {
                        /*--unique-id--47--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 56);
                        debug_stack.push({ name: "break_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       47:129 break_statement=>τbreak • label_identifier asi
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $identifier(l, state)) {
                        add_reduce(state, 1, 243);
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        if (state = $asi_group_017_104(l, state)) {
                            /*--unique-id--47--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 55);
                            debug_stack.push({ name: "break_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "break_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: return_statement
            grammar index: 48
            bodies:
	48:131 return_statement=>• τreturn expression asi - 
		48:132 return_statement=>• τreturn asi - 
            compile time: 12.824ms*/;
        function $return_statement(l, state) {
            debug_stack.push({ name: "return_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*return*/
            if (assert_consume(l, state, defined_token_876f036172605c26(l)/*[return]*/)) {
                /*consume*/
                /*
                   48:131 return_statement=>τreturn • expression asi
                   48:132 return_statement=>τreturn • asi
                */
                /*peek_level:0 offset:1 -- clause*/
                /*; { nl END_OF_FILE yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || (l.utf == 59/*[;]*/)) {
                    /*peek-production-closure*/
                    /*
                       48:132 return_statement=>τreturn • asi
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $asi_group_017_104(l, state)) {
                        /*--unique-id--48--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 58);
                        debug_stack.push({ name: "return_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       48:131 return_statement=>τreturn • expression asi
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $expression(l, state)) {
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        if (state = $asi_group_017_104(l, state)) {
                            /*--unique-id--48--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 57);
                            debug_stack.push({ name: "return_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "return_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: throw_statement
            grammar index: 49
            bodies:
	49:133 throw_statement=>• τthrow expression asi - 
            compile time: 6.898ms*/;
        function $throw_statement(l, state) {
            debug_stack.push({ name: "throw_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*throw*/
            if (assert_consume(l, state, defined_token_da195cd7e0c0b959(l)/*[throw]*/)) {
                /*consume*/
                /*
                   49:133 throw_statement=>τthrow • expression asi
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $expression(l, state)) {
                    sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                    if (state = $asi_group_017_104(l, state)) {
                        /*--unique-id--49--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 59);
                        debug_stack.push({ name: "throw_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "throw_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: with_statement
            grammar index: 50
            bodies:
	50:134 with_statement=>• τwith ( expression ) statement - 
            compile time: 11.137ms*/;
        function $with_statement(l, state) {
            debug_stack.push({ name: "with_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*with*/
            if (assert_consume(l, state, defined_token_2cf552cd86bb015e(l)/*[with]*/)) {
                /*consume*/
                /*
                   50:134 with_statement=>τwith • ( expression ) statement
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $statement(l, state)) {
                                /*--unique-id--50--DO-NOT-REPLACE*/
                                add_reduce(state, 5, 60);
                                debug_stack.push({ name: "with_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "with_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: switch_statement
            grammar index: 51
            bodies:
	51:135 switch_statement=>• τswitch ( expression ) case_block - 
            compile time: 16.332ms*/;
        function $switch_statement(l, state) {
            debug_stack.push({ name: "switch_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*switch*/
            if (assert_consume(l, state, defined_token_c4d5aeb40acb5412(l)/*[switch]*/)) {
                /*consume*/
                /*
                   51:135 switch_statement=>τswitch • ( expression ) case_block
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $case_block(l, state)) {
                                /*--unique-id--51--DO-NOT-REPLACE*/
                                add_reduce(state, 5, 61);
                                debug_stack.push({ name: "switch_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "switch_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: case_block
            grammar index: 52
            bodies:
	52:136 case_block=>• { case_clauses default_clause case_clauses } - 
		52:137 case_block=>• { default_clause case_clauses } - 
		52:138 case_block=>• { case_clauses case_clauses } - 
		52:139 case_block=>• { case_clauses default_clause } - 
		52:140 case_block=>• { case_clauses } - 
		52:141 case_block=>• { default_clause } - 
		52:142 case_block=>• { } - 
            compile time: 458.089ms*/;
        function $case_block(l, state) {
            debug_stack.push({ name: "case_block RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*{*/
            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                /*consume*/
                /*
                   52:136 case_block=>{ • case_clauses default_clause case_clauses }
                   52:137 case_block=>{ • default_clause case_clauses }
                   52:138 case_block=>{ • case_clauses case_clauses }
                   52:139 case_block=>{ • case_clauses default_clause }
                   52:140 case_block=>{ • case_clauses }
                   52:141 case_block=>{ • default_clause }
                   52:142 case_block=>{ • }
                */
                /*peek_level:0 offset:1 -- clause*/
                /*case default }*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (defined_token_4b13d558acb940fb(l)/*[case]*/) {
                    /*peek-production-closure*/
                    /*
                       52:136 case_block=>{ • case_clauses default_clause case_clauses }
                       52:138 case_block=>{ • case_clauses case_clauses }
                       52:139 case_block=>{ • case_clauses default_clause }
                       52:140 case_block=>{ • case_clauses }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*54*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $case_clauses(l, state)) {
                        /*assert*/
                        /*
                           52:136 case_block=>{ • case_clauses default_clause case_clauses }
                           52:138 case_block=>{ • case_clauses case_clauses }
                           52:139 case_block=>{ • case_clauses default_clause }
                           52:140 case_block=>{ • case_clauses }
                        */
                        /*peek_level:0 offset:4 -- clause*/
                        /*default case }*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (defined_token_fdb42ce5868e4404(l)/*[default]*/) {
                            /*peek-production-closure*/
                            /*
                               52:136 case_block=>{ case_clauses • default_clause case_clauses }
                               52:139 case_block=>{ case_clauses • default_clause }
                            */
                            /*peek_level:-1 offset:6 -- clause*/
                            /*56*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $default_clause(l, state)) {
                                /*assert*/
                                /*
                                   52:136 case_block=>{ case_clauses • default_clause case_clauses }
                                   52:139 case_block=>{ case_clauses • default_clause }
                                */
                                /*peek_level:0 offset:7 -- clause*/
                                /*case }*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (defined_token_4b13d558acb940fb(l)/*[case]*/) {
                                    /*peek-production-closure*/
                                    /*
                                       52:136 case_block=>{ case_clauses default_clause • case_clauses }
                                    */
                                    /*peek_level:0 offset:7*/
                                    if (state = $case_clauses(l, state)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                            /*--unique-id--52--DO-NOT-REPLACE*/
                                            add_reduce(state, 5, 62);
                                            debug_stack.push({ name: "case_block RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                            return state;
                                        }
                                    }
                                } else if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                    /*consume*/
                                    /*
                                       52:139 case_block=>{ case_clauses default_clause } •
                                    */
                                    /*--unique-id--52--DO-NOT-REPLACE*/
                                    /*peek_level:-1 offset:7*/
                                    add_reduce(state, 4, 65);
                                    debug_stack.push({ name: "case_block RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            }
                        } else if (defined_token_4b13d558acb940fb(l)/*[case]*/) {
                            /*peek-production-closure*/
                            /*
                               52:138 case_block=>{ case_clauses • case_clauses }
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $case_clauses(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                    /*--unique-id--52--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 64);
                                    debug_stack.push({ name: "case_block RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            }
                        } else if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                            /*consume*/
                            /*
                               52:140 case_block=>{ case_clauses } •
                            */
                            /*--unique-id--52--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 66);
                            debug_stack.push({ name: "case_block RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else if (defined_token_fdb42ce5868e4404(l)/*[default]*/) {
                    /*peek-production-closure*/
                    /*
                       52:137 case_block=>{ • default_clause case_clauses }
                       52:141 case_block=>{ • default_clause }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*56*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $default_clause(l, state)) {
                        /*assert*/
                        /*
                           52:137 case_block=>{ • default_clause case_clauses }
                           52:141 case_block=>{ • default_clause }
                        */
                        /*peek_level:0 offset:4 -- clause*/
                        /*case }*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (defined_token_4b13d558acb940fb(l)/*[case]*/) {
                            /*peek-production-closure*/
                            /*
                               52:137 case_block=>{ default_clause • case_clauses }
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $case_clauses(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                    /*--unique-id--52--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 63);
                                    debug_stack.push({ name: "case_block RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            }
                        } else if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                            /*consume*/
                            /*
                               52:141 case_block=>{ default_clause } •
                            */
                            /*--unique-id--52--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 67);
                            debug_stack.push({ name: "case_block RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                    /*consume*/
                    /*
                       52:142 case_block=>{ } •
                    */
                    /*--unique-id--52--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 68);
                    debug_stack.push({ name: "case_block RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "case_block RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: case_clauses
            grammar index: 54
            bodies:
	54:145 case_clauses=>• case_clauses case_clause - 
		54:146 case_clauses=>• case_clause - 
            compile time: 530.899ms*/;
        function $case_clauses(l, state) {
            debug_stack.push({ name: "case_clauses RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $case_clause(l, state)) {
                /*--unique-id--54--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $case_clauses_goto(l, state, 54);
            }
            debug_stack.push({ name: "case_clauses RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $case_clauses_goto(l, state, prod) {
            debug_stack.push({ name: "case_clauses GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*case*/
                if (defined_token_4b13d558acb940fb(l)/*[case]*/) {
                    /*peek*/
                    /*
                       54:145 case_clauses=>case_clauses • case_clause
                       52:138 case_block=>{ case_clauses • case_clauses }
                    */
                    let mk = mark();
                    let anchor = l.copy();
                    let anchor_state = state;
                    /*145,2,1,138,4,2*/
                    /*54*/
                    /*peek_level:-1 offset:1*/
                    if (state = $case_clause(l, state)) {
                        /*--unique-id--54--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 3);
                        prod = 54;
                        continue;
                    }
                    state = reset(mk, anchor, l, anchor_state);
                }
                break;
            }
            debug_stack.push({ name: "case_clauses GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 54);
        }
/*production name: case_clause
            grammar index: 55
            bodies:
	55:147 case_clause=>• τcase expression : statement_list - 
		55:148 case_clause=>• τcase expression : - 
            compile time: 35.424ms*/;
        function $case_clause(l, state) {
            debug_stack.push({ name: "case_clause RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*case*/
            if (assert_consume(l, state, defined_token_4b13d558acb940fb(l)/*[case]*/)) {
                /*consume*/
                /*
                   55:147 case_clause=>τcase • expression : statement_list
                   55:148 case_clause=>τcase • expression :
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*96*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $expression(l, state)) {
                    /*assert*/
                    /*
                       55:147 case_clause=>τcase • expression : statement_list
                       55:148 case_clause=>τcase • expression :
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*:*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 58/*[:]*/)) {
                        /*consume*/
                        /*
                           55:147 case_clause=>τcase expression : • statement_list
                           55:148 case_clause=>τcase expression : •
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*{ yield async new ( super import this [ / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const } default case END_OF_FILE*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if ((((((((((((((((((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_670f23e41126e00b(l)/*[async] [as] [await]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_0a34667347bd2a3a(l)/*[super] [set] [switch]*/) || defined_token_1f80f2e0a149fe3d(l)/*[import] [if]*/) || defined_token_8e8ee78381c90ca5(l)/*[this] [target] [true] [typeof] [throw] [try]*/) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_967ffd9bf1cf840d(l)/*[from] [false] [for] [function]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_e8ddfc9b5a509a6c(l)/*[delete] [do] [debugger]*/) || defined_token_1ae4fe309b644fa1(l)/*[void] [var]*/) || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || defined_token_aac16ca323764d7a(l)/*[while] [with]*/) || defined_token_912bb2f6b2683177(l)/*[continue] [class] [const]*/) || defined_token_c3524ff0dce64492(l)/*[break]*/) || defined_token_876f036172605c26(l)/*[return]*/) || defined_token_f188f6806e50797b(l)/*[let]*/) || assert_table(l, 0x0, 0x800a986, 0x8000000, 0x48000001)/*tbl:[ { ] [ ( ] [ [ ] [ / ] [ " ] [ ' ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ] [ ; ]*/) || l.isNum()/*[num]*/) {
                            /*assert-production-closure*/
                            /*
                               55:147 case_clause=>τcase expression : • statement_list
                            */
                            /*peek_level:-1 offset:3*/
                            if (state = $statement_list(l, state)) {
                                /*--unique-id--55--DO-NOT-REPLACE*/
                                add_reduce(state, 4, 69);
                                debug_stack.push({ name: "case_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               55:148 case_clause=>τcase expression : •
                            */
                            /*--unique-id--55--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:4*/
                            add_reduce(state, 3, 70);
                            debug_stack.push({ name: "case_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "case_clause RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: default_clause
            grammar index: 56
            bodies:
	56:149 default_clause=>• τdefault : statement_list - 
		56:150 default_clause=>• τdefault : - 
            compile time: 38.314ms*/;
        function $default_clause(l, state) {
            debug_stack.push({ name: "default_clause RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*default*/
            if (assert_consume(l, state, defined_token_fdb42ce5868e4404(l)/*[default]*/)) {
                /*consume*/
                /*
                   56:149 default_clause=>τdefault • : statement_list
                   56:150 default_clause=>τdefault • :
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*:*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 58/*[:]*/)) {
                    /*consume*/
                    /*
                       56:149 default_clause=>τdefault : • statement_list
                       56:150 default_clause=>τdefault : •
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*{ yield async new ( super import this [ / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const case } END_OF_FILE*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if ((((((((((((((((((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_670f23e41126e00b(l)/*[async] [as] [await]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_0a34667347bd2a3a(l)/*[super] [set] [switch]*/) || defined_token_1f80f2e0a149fe3d(l)/*[import] [if]*/) || defined_token_8e8ee78381c90ca5(l)/*[this] [target] [true] [typeof] [throw] [try]*/) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_967ffd9bf1cf840d(l)/*[from] [false] [for] [function]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_e8ddfc9b5a509a6c(l)/*[delete] [do] [debugger]*/) || defined_token_1ae4fe309b644fa1(l)/*[void] [var]*/) || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || defined_token_aac16ca323764d7a(l)/*[while] [with]*/) || defined_token_912bb2f6b2683177(l)/*[continue] [class] [const]*/) || defined_token_c3524ff0dce64492(l)/*[break]*/) || defined_token_876f036172605c26(l)/*[return]*/) || defined_token_f188f6806e50797b(l)/*[let]*/) || assert_table(l, 0x0, 0x800a986, 0x8000000, 0x48000001)/*tbl:[ { ] [ ( ] [ [ ] [ / ] [ " ] [ ' ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ] [ ; ]*/) || l.isNum()/*[num]*/) {
                        /*assert-production-closure*/
                        /*
                           56:149 default_clause=>τdefault : • statement_list
                        */
                        /*peek_level:-1 offset:2*/
                        if (state = $statement_list(l, state)) {
                            /*--unique-id--56--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 71);
                            debug_stack.push({ name: "default_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    } else {
                        /*assert-end*/
                        /*
                           56:150 default_clause=>τdefault : •
                        */
                        /*--unique-id--56--DO-NOT-REPLACE*/
                        /*peek_level:0 offset:3*/
                        add_reduce(state, 2, 72);
                        debug_stack.push({ name: "default_clause RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "default_clause RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: labeled_item
            grammar index: 58
            bodies:
	58:152 labeled_item=>• statement - 
		58:153 labeled_item=>• function_declaration - 
            compile time: 84.086ms*/;
        function $labeled_item(l, state) {
            debug_stack.push({ name: "labeled_item RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*async function { yield new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger*/
            if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                /*peek*/
                /*
                   58:152 labeled_item=>• statement
                   58:153 labeled_item=>• function_declaration
                */
                /*peek_level:1 offset:0 -- clause*/
                /*function _ $ id async get set target as from ( ?. `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of extends*/
                let pk = l.copy();
                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                if (defined_token_e043e2118bdadad0(pk)/*[function]*/) {
                    /*peek-production-closure*/
                    /*
                       58:153 labeled_item=>• function_declaration
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $function_declaration(l, state)) {
                        /*--unique-id--58--DO-NOT-REPLACE*/
                        debug_stack.push({ name: "labeled_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       58:152 labeled_item=>• statement
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $statement(l, state)) {
                        /*--unique-id--58--DO-NOT-REPLACE*/
                        debug_stack.push({ name: "labeled_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            } else if (defined_token_e043e2118bdadad0(l)/*[function]*/) {
                /*peek-production-closure*/
                /*
                   58:153 labeled_item=>• function_declaration
                */
                /*peek_level:0 offset:0*/
                if (state = $function_declaration(l, state)) {
                    /*--unique-id--58--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "labeled_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   58:152 labeled_item=>• statement
                */
                /*peek_level:0 offset:0*/
                if (state = $statement(l, state)) {
                    /*--unique-id--58--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "labeled_item RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "labeled_item RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: try_statement
            grammar index: 59
            bodies:
	59:154 try_statement=>• τtry block catch - 
		59:155 try_statement=>• τtry block finally - 
		59:156 try_statement=>• τtry block catch finally - 
            compile time: 246.39ms*/;
        function $try_statement(l, state) {
            debug_stack.push({ name: "try_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*try*/
            if (assert_consume(l, state, defined_token_1c4bd208294c1ee4(l)/*[try]*/)) {
                /*consume*/
                /*
                   59:154 try_statement=>τtry • block catch
                   59:155 try_statement=>τtry • block finally
                   59:156 try_statement=>τtry • block catch finally
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*36*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $block(l, state)) {
                    /*assert*/
                    /*
                       59:154 try_statement=>τtry • block catch
                       59:155 try_statement=>τtry • block finally
                       59:156 try_statement=>τtry • block catch finally
                    */
                    /*peek_level:0 offset:2 -- clause*/
                    /*catch finally*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (defined_token_b6bc2531754746f6(l)/*[catch]*/) {
                        /*peek-production-closure*/
                        /*
                           59:154 try_statement=>τtry block • catch
                           59:156 try_statement=>τtry block • catch finally
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*60*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $catch(l, state)) {
                            /*assert*/
                            /*
                               59:154 try_statement=>τtry block • catch
                               59:156 try_statement=>τtry block • catch finally
                            */
                            /*peek_level:-1 offset:5 -- clause*/
                            /*finally else while case default yield async new ( super import this [ / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ -- var ; if do for switch continue break return with throw try debugger class function let const { } export END_OF_FILE*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (defined_token_ac4e40d39583f370(l)/*[finally]*/) {
                                /*assert-production-closure*/
                                /*
                                   59:156 try_statement=>τtry block catch • finally
                                */
                                /*peek_level:-1 offset:5*/
                                if (state = $finally(l, state)) {
                                    /*--unique-id--59--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 76);
                                    debug_stack.push({ name: "try_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            } else {
                                /*assert-end*/
                                /*
                                   59:154 try_statement=>τtry block catch •
                                */
                                /*--unique-id--59--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:6*/
                                add_reduce(state, 3, 74);
                                debug_stack.push({ name: "try_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    } else {
                        /*peek-production-closure*/
                        /*
                           59:155 try_statement=>τtry block • finally
                        */
                        /*peek_level:0 offset:2*/
                        if (state = $finally(l, state)) {
                            /*--unique-id--59--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 75);
                            debug_stack.push({ name: "try_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "try_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: catch
            grammar index: 60
            bodies:
	60:157 catch=>• τcatch ( catch_parameter ) block - 
            compile time: 6.658ms*/;
        function $catch(l, state) {
            debug_stack.push({ name: "catch RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*catch*/
            if (assert_consume(l, state, defined_token_b6bc2531754746f6(l)/*[catch]*/)) {
                /*consume*/
                /*
                   60:157 catch=>τcatch • ( catch_parameter ) block
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $catch_parameter(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $block(l, state)) {
                                /*--unique-id--60--DO-NOT-REPLACE*/
                                add_reduce(state, 5, 77);
                                debug_stack.push({ name: "catch RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "catch RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: finally
            grammar index: 61
            bodies:
	61:158 finally=>• τfinally block - 
            compile time: 3.971ms*/;
        function $finally(l, state) {
            debug_stack.push({ name: "finally RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*finally*/
            if (assert_consume(l, state, defined_token_ac4e40d39583f370(l)/*[finally]*/)) {
                /*consume*/
                /*
                   61:158 finally=>τfinally • block
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $block(l, state)) {
                    /*--unique-id--61--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 78);
                    debug_stack.push({ name: "finally RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "finally RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: catch_parameter
            grammar index: 62
            bodies:
	62:159 catch_parameter=>• binding_identifier - 
		62:160 catch_parameter=>• binding_pattern - 
            compile time: 3.562ms*/;
        function $catch_parameter(l, state) {
            debug_stack.push({ name: "catch_parameter RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*{ [ _ $ id async get set target as from*/
            if ((l.utf == 123/*[{]*/) || (l.utf == 91/*[[]*/)) {
                /*peek-production-closure*/
                /*
                   62:160 catch_parameter=>• binding_pattern
                */
                /*peek_level:0 offset:0*/
                if (state = $binding_pattern(l, state)) {
                    /*--unique-id--62--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "catch_parameter RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   62:159 catch_parameter=>• binding_identifier
                */
                /*peek_level:0 offset:0*/
                if (state = $identifier(l, state)) {
                    /*--unique-id--62--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 111);
                    debug_stack.push({ name: "catch_parameter RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "catch_parameter RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: debugger_statement
            grammar index: 63
            bodies:
	63:161 debugger_statement=>• τdebugger asi - 
            compile time: 4.952ms*/;
        function $debugger_statement(l, state) {
            debug_stack.push({ name: "debugger_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*debugger*/
            if (assert_consume(l, state, defined_token_bab67a61f0334bce(l)/*[debugger]*/)) {
                /*consume*/
                /*
                   63:161 debugger_statement=>τdebugger • asi
                */
                /*peek_level:-1 offset:0*/
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (state = $asi_group_017_104(l, state)) {
                    /*--unique-id--63--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 79);
                    debug_stack.push({ name: "debugger_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "debugger_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: variable_statement
            grammar index: 64
            bodies:
	64:162 variable_statement=>• τvar variable_declaration_list asi - 
            compile time: 7.43ms*/;
        function $variable_statement(l, state) {
            debug_stack.push({ name: "variable_statement RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*var*/
            if (assert_consume(l, state, defined_token_f9bb6ce14e19288e(l)/*[var]*/)) {
                /*consume*/
                /*
                   64:162 variable_statement=>τvar • variable_declaration_list asi
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $variable_declaration_list(l, state)) {
                    sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                    if (state = $asi_group_017_104(l, state)) {
                        /*--unique-id--64--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 80);
                        debug_stack.push({ name: "variable_statement RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "variable_statement RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: variable_declaration_list
            grammar index: 66
            bodies:
	66:165 variable_declaration_list=>• variable_declaration_list , variable_declaration - 
		66:166 variable_declaration_list=>• variable_declaration - 
            compile time: 13.16ms*/;
        function $variable_declaration_list(l, state) {
            debug_stack.push({ name: "variable_declaration_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $variable_declaration(l, state)) {
                /*--unique-id--66--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $variable_declaration_list_goto(l, state, 66);
            }
            debug_stack.push({ name: "variable_declaration_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $variable_declaration_list_goto(l, state, prod) {
            debug_stack.push({ name: "variable_declaration_list GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*,*/
                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                    /*consume*/
                    /*
                       66:165 variable_declaration_list=>variable_declaration_list , • variable_declaration
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $variable_declaration(l, state)) {
                        /*--unique-id--66--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 11);
                        prod = 66;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "variable_declaration_list GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 66);
        }
/*production name: variable_declaration
            grammar index: 67
            bodies:
	67:167 variable_declaration=>• binding_identifier initializer - 
		67:168 variable_declaration=>• binding_identifier - 
		67:169 variable_declaration=>• binding_pattern initializer - 
            compile time: 228.789ms*/;
        function $variable_declaration(l, state) {
            debug_stack.push({ name: "variable_declaration RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*{ [ _ $ id async get set target as from*/
            if ((l.utf == 123/*[{]*/) || (l.utf == 91/*[[]*/)) {
                /*peek-production-closure*/
                /*
                   67:169 variable_declaration=>• binding_pattern initializer
                */
                /*peek_level:0 offset:0*/
                if (state = $binding_pattern(l, state)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $initializer(l, state)) {
                        /*--unique-id--67--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 81);
                        debug_stack.push({ name: "variable_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            } else {
                /*peek-production-closure*/
                /*
                   67:167 variable_declaration=>• binding_identifier initializer
                   67:168 variable_declaration=>• binding_identifier
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*188*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $binding_identifier(l, state)) {
                    /*assert*/
                    /*
                       67:167 variable_declaration=>• binding_identifier initializer
                       67:168 variable_declaration=>• binding_identifier
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*= { nl END_OF_FILE ; , END_OF_FILE*/
                    sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                    if (l.utf == 61/*[=]*/) {
                        /*assert-production-closure*/
                        /*
                           67:167 variable_declaration=>binding_identifier • initializer
                        */
                        /*peek_level:-1 offset:3*/
                        if (state = $initializer(l, state)) {
                            /*--unique-id--67--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 81);
                            debug_stack.push({ name: "variable_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    } else {
                        /*assert-end*/
                        /*
                           67:168 variable_declaration=>binding_identifier •
                        */
                        /*--unique-id--67--DO-NOT-REPLACE*/
                        /*peek_level:0 offset:4*/
                        debug_stack.push({ name: "variable_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "variable_declaration RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: lexical_declaration
            grammar index: 68
            bodies:
	68:170 lexical_declaration=>• let_or_const binding_list asi - 
            compile time: 5.906ms*/;
        function $lexical_declaration(l, state) {
            debug_stack.push({ name: "lexical_declaration RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $let_or_const(l, state)) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $binding_list(l, state)) {
                    sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                    if (state = $asi_group_017_104(l, state)) {
                        /*--unique-id--68--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 82);
                        debug_stack.push({ name: "lexical_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "lexical_declaration RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: let_or_const
            grammar index: 69
            bodies:
	69:171 let_or_const=>• τlet - 
		69:172 let_or_const=>• τconst - 
            compile time: 6.447ms*/;
        function $let_or_const(l, state) {
            debug_stack.push({ name: "let_or_const RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*let const*/
            if (assert_consume(l, state, defined_token_f188f6806e50797b(l)/*[let]*/)) {
                /*consume*/
                /*
                   69:171 let_or_const=>τlet •
                */
                /*--unique-id--69--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                add_reduce(state, 1, 83);
                debug_stack.push({ name: "let_or_const RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            } else if (assert_consume(l, state, defined_token_a3300687f6beda2f(l)/*[const]*/)) {
                /*consume*/
                /*
                   69:172 let_or_const=>τconst •
                */
                /*--unique-id--69--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                add_reduce(state, 1, 84);
                debug_stack.push({ name: "let_or_const RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "let_or_const RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: binding_list
            grammar index: 71
            bodies:
	71:175 binding_list=>• binding_list , lexical_binding - 
		71:176 binding_list=>• lexical_binding - 
            compile time: 12.887ms*/;
        function $binding_list(l, state) {
            debug_stack.push({ name: "binding_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $lexical_binding(l, state)) {
                /*--unique-id--71--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $binding_list_goto(l, state, 71);
            }
            debug_stack.push({ name: "binding_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $binding_list_goto(l, state, prod) {
            debug_stack.push({ name: "binding_list GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*,*/
                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                    /*consume*/
                    /*
                       71:175 binding_list=>binding_list , • lexical_binding
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $lexical_binding(l, state)) {
                        /*--unique-id--71--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 11);
                        prod = 71;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "binding_list GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 71);
        }
/*production name: lexical_binding
            grammar index: 72
            bodies:
	72:177 lexical_binding=>• binding_identifier - 
		72:178 lexical_binding=>• binding_identifier initializer - 
		72:179 lexical_binding=>• binding_pattern initializer - 
            compile time: 296.56ms*/;
        function $lexical_binding(l, state) {
            debug_stack.push({ name: "lexical_binding RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*{ [ _ $ id async get set target as from*/
            if ((l.utf == 123/*[{]*/) || (l.utf == 91/*[[]*/)) {
                /*peek-production-closure*/
                /*
                   72:179 lexical_binding=>• binding_pattern initializer
                */
                /*peek_level:0 offset:0*/
                if (state = $binding_pattern(l, state)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $initializer(l, state)) {
                        /*--unique-id--72--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 81);
                        debug_stack.push({ name: "lexical_binding RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            } else {
                /*peek-production-closure*/
                /*
                   72:177 lexical_binding=>• binding_identifier
                   72:178 lexical_binding=>• binding_identifier initializer
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*188*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $binding_identifier(l, state)) {
                    /*assert*/
                    /*
                       72:177 lexical_binding=>• binding_identifier
                       72:178 lexical_binding=>• binding_identifier initializer
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*= , ; { nl END_OF_FILE END_OF_FILE*/
                    sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                    if (l.utf == 61/*[=]*/) {
                        /*assert-production-closure*/
                        /*
                           72:178 lexical_binding=>binding_identifier • initializer
                        */
                        /*peek_level:-1 offset:3*/
                        if (state = $initializer(l, state)) {
                            /*--unique-id--72--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 81);
                            debug_stack.push({ name: "lexical_binding RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    } else {
                        /*assert-end*/
                        /*
                           72:177 lexical_binding=>binding_identifier •
                        */
                        /*--unique-id--72--DO-NOT-REPLACE*/
                        /*peek_level:0 offset:4*/
                        debug_stack.push({ name: "lexical_binding RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "lexical_binding RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: function_declaration
            grammar index: 73
            bodies:
	73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body } - 
		73:181 function_declaration=>• τfunction * binding_identifier ( formal_parameters ) { function_body } - 
		73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body } - 
		73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body } - 
		73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body } - 
		73:185 function_declaration=>• τfunction binding_identifier ( formal_parameters ) { function_body } - 
		73:186 function_declaration=>• τfunction * ( formal_parameters ) { function_body } - 
		73:187 function_declaration=>• τfunction * binding_identifier ( ) { function_body } - 
		73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body } - 
		73:189 function_declaration=>• τasync τfunction binding_identifier ( ) { function_body } - 
		73:190 function_declaration=>• τasync τfunction * ( ) { function_body } - 
		73:191 function_declaration=>• τfunction ( formal_parameters ) { function_body } - 
		73:192 function_declaration=>• τfunction binding_identifier ( ) { function_body } - 
		73:193 function_declaration=>• τfunction * ( ) { function_body } - 
		73:194 function_declaration=>• τasync τfunction ( ) { function_body } - 
		73:195 function_declaration=>• τfunction ( ) { function_body } - 
            compile time: 981.465ms*/;
        function $function_declaration(l, state) {
            debug_stack.push({ name: "function_declaration RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*async function*/
            if (defined_token_d4a7e22f69f4ee35(l)/*[async]*/) {
                /*peek*/
                /*
                   73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                   73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                   73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                   73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                   73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                   73:189 function_declaration=>• τasync τfunction binding_identifier ( ) { function_body }
                   73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                   73:194 function_declaration=>• τasync τfunction ( ) { function_body }
                */
                /*peek_level:1 offset:0 -- clause*/
                /*function*/
                let pk = l.copy();
                sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                if (defined_token_e043e2118bdadad0(pk)/*[function]*/) {
                    /*peek*/
                    /*
                       73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                       73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                       73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                       73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                       73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                       73:189 function_declaration=>• τasync τfunction binding_identifier ( ) { function_body }
                       73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                       73:194 function_declaration=>• τasync τfunction ( ) { function_body }
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*async*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                        /*consume*/
                        /*
                           73:180 function_declaration=>τasync • τfunction * binding_identifier ( formal_parameters ) { function_body }
                           73:182 function_declaration=>τasync • τfunction binding_identifier ( formal_parameters ) { function_body }
                           73:183 function_declaration=>τasync • τfunction * ( formal_parameters ) { function_body }
                           73:184 function_declaration=>τasync • τfunction * binding_identifier ( ) { function_body }
                           73:188 function_declaration=>τasync • τfunction ( formal_parameters ) { function_body }
                           73:189 function_declaration=>τasync • τfunction binding_identifier ( ) { function_body }
                           73:190 function_declaration=>τasync • τfunction * ( ) { function_body }
                           73:194 function_declaration=>τasync • τfunction ( ) { function_body }
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*function*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_e043e2118bdadad0(l)/*[function]*/)) {
                            /*consume*/
                            /*
                               73:180 function_declaration=>τasync τfunction • * binding_identifier ( formal_parameters ) { function_body }
                               73:182 function_declaration=>τasync τfunction • binding_identifier ( formal_parameters ) { function_body }
                               73:183 function_declaration=>τasync τfunction • * ( formal_parameters ) { function_body }
                               73:184 function_declaration=>τasync τfunction • * binding_identifier ( ) { function_body }
                               73:188 function_declaration=>τasync τfunction • ( formal_parameters ) { function_body }
                               73:189 function_declaration=>τasync τfunction • binding_identifier ( ) { function_body }
                               73:190 function_declaration=>τasync τfunction • * ( ) { function_body }
                               73:194 function_declaration=>τasync τfunction • ( ) { function_body }
                            */
                            /*peek_level:0 offset:4 -- clause*/
                            /** ( _ $ id async get set target as from*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (l.utf == 42/*[*]*/) {
                                /*peek*/
                                /*
                                   73:180 function_declaration=>τasync τfunction • * binding_identifier ( formal_parameters ) { function_body }
                                   73:183 function_declaration=>τasync τfunction • * ( formal_parameters ) { function_body }
                                   73:184 function_declaration=>τasync τfunction • * binding_identifier ( ) { function_body }
                                   73:190 function_declaration=>τasync τfunction • * ( ) { function_body }
                                */
                                /*peek_level:1 offset:4 -- clause*/
                                /*( _ $ id async get set target as from*/
                                let pk = l.copy();
                                sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                                if (pk.utf == 40/*[(]*/) {
                                    /*peek*/
                                    /*
                                       73:183 function_declaration=>τasync τfunction • * ( formal_parameters ) { function_body }
                                       73:190 function_declaration=>τasync τfunction • * ( ) { function_body }
                                    */
                                    /*peek_level:-1 offset:6 -- clause*/
                                    /***/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 42/*[*]*/)) {
                                        /*consume*/
                                        /*
                                           73:183 function_declaration=>τasync τfunction * • ( formal_parameters ) { function_body }
                                           73:190 function_declaration=>τasync τfunction * • ( ) { function_body }
                                        */
                                        /*peek_level:-1 offset:7 -- clause*/
                                        /*(*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                            /*consume*/
                                            /*
                                               73:183 function_declaration=>τasync τfunction * ( • formal_parameters ) { function_body }
                                               73:190 function_declaration=>τasync τfunction * ( • ) { function_body }
                                            */
                                            /*peek_level:0 offset:8 -- clause*/
                                            /*) ... { [ async get set target as from _ $ id*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                /*consume*/
                                                /*
                                                   73:190 function_declaration=>τasync τfunction * ( ) • { function_body }
                                                */
                                                /*peek_level:-1 offset:8*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--73--DO-NOT-REPLACE*/
                                                            add_reduce(state, 8, 95);
                                                            debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                            return state;
                                                        }
                                                    }
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   73:183 function_declaration=>τasync τfunction * ( • formal_parameters ) { function_body }
                                                */
                                                /*peek_level:0 offset:8*/
                                                if (state = $formal_parameters(l, state)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--73--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 9, 88);
                                                                    debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                    return state;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else if (((pk.utf == 95/*[_]*/) || (pk.utf == 36/*[$]*/)) || pk.isID()/*[id]*/) {
                                    /*peek*/
                                    /*
                                       73:180 function_declaration=>τasync τfunction • * binding_identifier ( formal_parameters ) { function_body }
                                       73:184 function_declaration=>τasync τfunction • * binding_identifier ( ) { function_body }
                                    */
                                    /*peek_level:-1 offset:6 -- clause*/
                                    /***/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 42/*[*]*/)) {
                                        /*consume*/
                                        /*
                                           73:180 function_declaration=>τasync τfunction * • binding_identifier ( formal_parameters ) { function_body }
                                           73:184 function_declaration=>τasync τfunction * • binding_identifier ( ) { function_body }
                                        */
                                        /*peek_level:-1 offset:7 -- clause*/
                                        /*188*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (state = $binding_identifier(l, state)) {
                                            /*assert*/
                                            /*
                                               73:180 function_declaration=>τasync τfunction * • binding_identifier ( formal_parameters ) { function_body }
                                               73:184 function_declaration=>τasync τfunction * • binding_identifier ( ) { function_body }
                                            */
                                            /*peek_level:-1 offset:8 -- clause*/
                                            /*(*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                                /*consume*/
                                                /*
                                                   73:180 function_declaration=>τasync τfunction * binding_identifier ( • formal_parameters ) { function_body }
                                                   73:184 function_declaration=>τasync τfunction * binding_identifier ( • ) { function_body }
                                                */
                                                /*peek_level:0 offset:9 -- clause*/
                                                /*) ... { [ async get set target as from _ $ id*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    /*consume*/
                                                    /*
                                                       73:184 function_declaration=>τasync τfunction * binding_identifier ( ) • { function_body }
                                                    */
                                                    /*peek_level:-1 offset:9*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--73--DO-NOT-REPLACE*/
                                                                add_reduce(state, 9, 89);
                                                                debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                return state;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       73:180 function_declaration=>τasync τfunction * binding_identifier ( • formal_parameters ) { function_body }
                                                    */
                                                    /*peek_level:0 offset:9*/
                                                    if (state = $formal_parameters(l, state)) {
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (state = $function_statement_list(l, state)) {
                                                                    add_reduce(state, 1, 105);
                                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                        /*--unique-id--73--DO-NOT-REPLACE*/
                                                                        add_reduce(state, 10, 85);
                                                                        debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                        return state;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if (l.utf == 40/*[(]*/) {
                                /*peek*/
                                /*
                                   73:188 function_declaration=>τasync τfunction • ( formal_parameters ) { function_body }
                                   73:194 function_declaration=>τasync τfunction • ( ) { function_body }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*(*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                    /*consume*/
                                    /*
                                       73:188 function_declaration=>τasync τfunction ( • formal_parameters ) { function_body }
                                       73:194 function_declaration=>τasync τfunction ( • ) { function_body }
                                    */
                                    /*peek_level:0 offset:7 -- clause*/
                                    /*) ... { [ async get set target as from _ $ id*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*consume*/
                                        /*
                                           73:194 function_declaration=>τasync τfunction ( ) • { function_body }
                                        */
                                        /*peek_level:-1 offset:7*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--73--DO-NOT-REPLACE*/
                                                    add_reduce(state, 7, 99);
                                                    debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                    return state;
                                                }
                                            }
                                        }
                                    } else {
                                        /*peek-production-closure*/
                                        /*
                                           73:188 function_declaration=>τasync τfunction ( • formal_parameters ) { function_body }
                                        */
                                        /*peek_level:0 offset:7*/
                                        if (state = $formal_parameters(l, state)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--73--DO-NOT-REPLACE*/
                                                            add_reduce(state, 8, 93);
                                                            debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                            return state;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                /*peek-production-closure*/
                                /*
                                   73:182 function_declaration=>τasync τfunction • binding_identifier ( formal_parameters ) { function_body }
                                   73:189 function_declaration=>τasync τfunction • binding_identifier ( ) { function_body }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*188*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $binding_identifier(l, state)) {
                                    /*assert*/
                                    /*
                                       73:182 function_declaration=>τasync τfunction • binding_identifier ( formal_parameters ) { function_body }
                                       73:189 function_declaration=>τasync τfunction • binding_identifier ( ) { function_body }
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*(*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                        /*consume*/
                                        /*
                                           73:182 function_declaration=>τasync τfunction binding_identifier ( • formal_parameters ) { function_body }
                                           73:189 function_declaration=>τasync τfunction binding_identifier ( • ) { function_body }
                                        */
                                        /*peek_level:0 offset:8 -- clause*/
                                        /*) ... { [ async get set target as from _ $ id*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            /*consume*/
                                            /*
                                               73:189 function_declaration=>τasync τfunction binding_identifier ( ) • { function_body }
                                            */
                                            /*peek_level:-1 offset:8*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--73--DO-NOT-REPLACE*/
                                                        add_reduce(state, 8, 94);
                                                        debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               73:182 function_declaration=>τasync τfunction binding_identifier ( • formal_parameters ) { function_body }
                                            */
                                            /*peek_level:0 offset:8*/
                                            if (state = $formal_parameters(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--73--DO-NOT-REPLACE*/
                                                                add_reduce(state, 9, 87);
                                                                debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                return state;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else if (defined_token_e043e2118bdadad0(l)/*[function]*/) {
                /*peek*/
                /*
                   73:181 function_declaration=>• τfunction * binding_identifier ( formal_parameters ) { function_body }
                   73:185 function_declaration=>• τfunction binding_identifier ( formal_parameters ) { function_body }
                   73:186 function_declaration=>• τfunction * ( formal_parameters ) { function_body }
                   73:187 function_declaration=>• τfunction * binding_identifier ( ) { function_body }
                   73:191 function_declaration=>• τfunction ( formal_parameters ) { function_body }
                   73:192 function_declaration=>• τfunction binding_identifier ( ) { function_body }
                   73:193 function_declaration=>• τfunction * ( ) { function_body }
                   73:195 function_declaration=>• τfunction ( ) { function_body }
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*function*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, defined_token_e043e2118bdadad0(l)/*[function]*/)) {
                    /*consume*/
                    /*
                       73:181 function_declaration=>τfunction • * binding_identifier ( formal_parameters ) { function_body }
                       73:185 function_declaration=>τfunction • binding_identifier ( formal_parameters ) { function_body }
                       73:186 function_declaration=>τfunction • * ( formal_parameters ) { function_body }
                       73:187 function_declaration=>τfunction • * binding_identifier ( ) { function_body }
                       73:191 function_declaration=>τfunction • ( formal_parameters ) { function_body }
                       73:192 function_declaration=>τfunction • binding_identifier ( ) { function_body }
                       73:193 function_declaration=>τfunction • * ( ) { function_body }
                       73:195 function_declaration=>τfunction • ( ) { function_body }
                    */
                    /*peek_level:0 offset:3 -- clause*/
                    /** ( _ $ id async get set target as from*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (l.utf == 42/*[*]*/) {
                        /*peek*/
                        /*
                           73:181 function_declaration=>τfunction • * binding_identifier ( formal_parameters ) { function_body }
                           73:186 function_declaration=>τfunction • * ( formal_parameters ) { function_body }
                           73:187 function_declaration=>τfunction • * binding_identifier ( ) { function_body }
                           73:193 function_declaration=>τfunction • * ( ) { function_body }
                        */
                        /*peek_level:1 offset:3 -- clause*/
                        /*( _ $ id async get set target as from*/
                        let pk = l.copy();
                        sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                        if (pk.utf == 40/*[(]*/) {
                            /*peek*/
                            /*
                               73:186 function_declaration=>τfunction • * ( formal_parameters ) { function_body }
                               73:193 function_declaration=>τfunction • * ( ) { function_body }
                            */
                            /*peek_level:-1 offset:5 -- clause*/
                            /***/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 42/*[*]*/)) {
                                /*consume*/
                                /*
                                   73:186 function_declaration=>τfunction * • ( formal_parameters ) { function_body }
                                   73:193 function_declaration=>τfunction * • ( ) { function_body }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*(*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                    /*consume*/
                                    /*
                                       73:186 function_declaration=>τfunction * ( • formal_parameters ) { function_body }
                                       73:193 function_declaration=>τfunction * ( • ) { function_body }
                                    */
                                    /*peek_level:0 offset:7 -- clause*/
                                    /*) ... { [ async get set target as from _ $ id*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*consume*/
                                        /*
                                           73:193 function_declaration=>τfunction * ( ) • { function_body }
                                        */
                                        /*peek_level:-1 offset:7*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--73--DO-NOT-REPLACE*/
                                                    add_reduce(state, 7, 98);
                                                    debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                    return state;
                                                }
                                            }
                                        }
                                    } else {
                                        /*peek-production-closure*/
                                        /*
                                           73:186 function_declaration=>τfunction * ( • formal_parameters ) { function_body }
                                        */
                                        /*peek_level:0 offset:7*/
                                        if (state = $formal_parameters(l, state)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--73--DO-NOT-REPLACE*/
                                                            add_reduce(state, 8, 91);
                                                            debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                            return state;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else if (((pk.utf == 95/*[_]*/) || (pk.utf == 36/*[$]*/)) || pk.isID()/*[id]*/) {
                            /*peek*/
                            /*
                               73:181 function_declaration=>τfunction • * binding_identifier ( formal_parameters ) { function_body }
                               73:187 function_declaration=>τfunction • * binding_identifier ( ) { function_body }
                            */
                            /*peek_level:-1 offset:5 -- clause*/
                            /***/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 42/*[*]*/)) {
                                /*consume*/
                                /*
                                   73:181 function_declaration=>τfunction * • binding_identifier ( formal_parameters ) { function_body }
                                   73:187 function_declaration=>τfunction * • binding_identifier ( ) { function_body }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*188*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $binding_identifier(l, state)) {
                                    /*assert*/
                                    /*
                                       73:181 function_declaration=>τfunction * • binding_identifier ( formal_parameters ) { function_body }
                                       73:187 function_declaration=>τfunction * • binding_identifier ( ) { function_body }
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*(*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                        /*consume*/
                                        /*
                                           73:181 function_declaration=>τfunction * binding_identifier ( • formal_parameters ) { function_body }
                                           73:187 function_declaration=>τfunction * binding_identifier ( • ) { function_body }
                                        */
                                        /*peek_level:0 offset:8 -- clause*/
                                        /*) ... { [ async get set target as from _ $ id*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            /*consume*/
                                            /*
                                               73:187 function_declaration=>τfunction * binding_identifier ( ) • { function_body }
                                            */
                                            /*peek_level:-1 offset:8*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--73--DO-NOT-REPLACE*/
                                                        add_reduce(state, 8, 92);
                                                        debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               73:181 function_declaration=>τfunction * binding_identifier ( • formal_parameters ) { function_body }
                                            */
                                            /*peek_level:0 offset:8*/
                                            if (state = $formal_parameters(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--73--DO-NOT-REPLACE*/
                                                                add_reduce(state, 9, 86);
                                                                debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                                return state;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else if (l.utf == 40/*[(]*/) {
                        /*peek*/
                        /*
                           73:191 function_declaration=>τfunction • ( formal_parameters ) { function_body }
                           73:195 function_declaration=>τfunction • ( ) { function_body }
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*(*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                            /*consume*/
                            /*
                               73:191 function_declaration=>τfunction ( • formal_parameters ) { function_body }
                               73:195 function_declaration=>τfunction ( • ) { function_body }
                            */
                            /*peek_level:0 offset:6 -- clause*/
                            /*) ... { [ async get set target as from _ $ id*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                /*consume*/
                                /*
                                   73:195 function_declaration=>τfunction ( ) • { function_body }
                                */
                                /*peek_level:-1 offset:6*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $function_statement_list(l, state)) {
                                        add_reduce(state, 1, 105);
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                            /*--unique-id--73--DO-NOT-REPLACE*/
                                            add_reduce(state, 6, 100);
                                            debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                            return state;
                                        }
                                    }
                                }
                            } else {
                                /*peek-production-closure*/
                                /*
                                   73:191 function_declaration=>τfunction ( • formal_parameters ) { function_body }
                                */
                                /*peek_level:0 offset:6*/
                                if (state = $formal_parameters(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--73--DO-NOT-REPLACE*/
                                                    add_reduce(state, 7, 96);
                                                    debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                    return state;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        /*peek-production-closure*/
                        /*
                           73:185 function_declaration=>τfunction • binding_identifier ( formal_parameters ) { function_body }
                           73:192 function_declaration=>τfunction • binding_identifier ( ) { function_body }
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*188*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $binding_identifier(l, state)) {
                            /*assert*/
                            /*
                               73:185 function_declaration=>τfunction • binding_identifier ( formal_parameters ) { function_body }
                               73:192 function_declaration=>τfunction • binding_identifier ( ) { function_body }
                            */
                            /*peek_level:-1 offset:6 -- clause*/
                            /*(*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                /*consume*/
                                /*
                                   73:185 function_declaration=>τfunction binding_identifier ( • formal_parameters ) { function_body }
                                   73:192 function_declaration=>τfunction binding_identifier ( • ) { function_body }
                                */
                                /*peek_level:0 offset:7 -- clause*/
                                /*) ... { [ async get set target as from _ $ id*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*consume*/
                                    /*
                                       73:192 function_declaration=>τfunction binding_identifier ( ) • { function_body }
                                    */
                                    /*peek_level:-1 offset:7*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (state = $function_statement_list(l, state)) {
                                            add_reduce(state, 1, 105);
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*--unique-id--73--DO-NOT-REPLACE*/
                                                add_reduce(state, 7, 97);
                                                debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                return state;
                                            }
                                        }
                                    }
                                } else {
                                    /*peek-production-closure*/
                                    /*
                                       73:185 function_declaration=>τfunction binding_identifier ( • formal_parameters ) { function_body }
                                    */
                                    /*peek_level:0 offset:7*/
                                    if (state = $formal_parameters(l, state)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--73--DO-NOT-REPLACE*/
                                                        add_reduce(state, 8, 90);
                                                        debug_stack.push({ name: "function_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                        return state;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "function_declaration RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: unique_formal_parameters
            grammar index: 75
            bodies:
	75:197 unique_formal_parameters=>• formal_parameters - 
            compile time: 2.518ms*/;
        function $unique_formal_parameters(l, state) {
            debug_stack.push({ name: "unique_formal_parameters RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $formal_parameters(l, state)) {
                /*--unique-id--75--DO-NOT-REPLACE*/
                debug_stack.push({ name: "unique_formal_parameters RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "unique_formal_parameters RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: formal_parameters
            grammar index: 76
            bodies:
	76:198 formal_parameters=>• function_rest_parameter - 
		76:199 formal_parameters=>• formal_parameter_list , - 
		76:200 formal_parameters=>• formal_parameter_list , function_rest_parameter - 
		76:201 formal_parameters=>• formal_parameter_list - 
            compile time: 237.064ms*/;
        function $formal_parameters(l, state) {
            debug_stack.push({ name: "formal_parameters RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*... { [ async get set target as from _ $ id*/
            if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                /*peek-production-closure*/
                /*
                   76:198 formal_parameters=>• function_rest_parameter
                */
                /*peek_level:0 offset:0*/
                if (state = $binding_rest_element(l, state)) {
                    /*--unique-id--76--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 102);
                    debug_stack.push({ name: "formal_parameters RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   76:199 formal_parameters=>• formal_parameter_list ,
                   76:200 formal_parameters=>• formal_parameter_list , function_rest_parameter
                   76:201 formal_parameters=>• formal_parameter_list
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*78*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $formal_parameter_list(l, state)) {
                    /*assert*/
                    /*
                       76:199 formal_parameters=>• formal_parameter_list ,
                       76:200 formal_parameters=>• formal_parameter_list , function_rest_parameter
                       76:201 formal_parameters=>• formal_parameter_list
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*, ) END_OF_FILE*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                        /*consume*/
                        /*
                           76:199 formal_parameters=>formal_parameter_list , •
                           76:200 formal_parameters=>formal_parameter_list , • function_rest_parameter
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*... ) END_OF_FILE*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                            /*assert-production-closure*/
                            /*
                               76:200 formal_parameters=>formal_parameter_list , • function_rest_parameter
                            */
                            /*peek_level:-1 offset:4*/
                            if (state = $binding_rest_element(l, state)) {
                                /*--unique-id--76--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 104);
                                debug_stack.push({ name: "formal_parameters RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               76:199 formal_parameters=>formal_parameter_list , •
                            */
                            /*--unique-id--76--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:5*/
                            add_reduce(state, 2, 103);
                            debug_stack.push({ name: "formal_parameters RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    } else {
                        /*assert-end*/
                        /*
                           76:201 formal_parameters=>formal_parameter_list •
                        */
                        /*--unique-id--76--DO-NOT-REPLACE*/
                        /*peek_level:0 offset:4*/
                        add_reduce(state, 1, 103);
                        debug_stack.push({ name: "formal_parameters RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "formal_parameters RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: formal_parameter_list
            grammar index: 78
            bodies:
	78:204 formal_parameter_list=>• formal_parameter_list , formal_parameter - 
		78:205 formal_parameter_list=>• formal_parameter - 
            compile time: 16.566ms*/;
        function $formal_parameter_list(l, state) {
            debug_stack.push({ name: "formal_parameter_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $binding_element(l, state)) {
                /*--unique-id--78--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $formal_parameter_list_goto(l, state, 78);
            }
            debug_stack.push({ name: "formal_parameter_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $formal_parameter_list_goto(l, state, prod) {
            debug_stack.push({ name: "formal_parameter_list GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:-1 offset:0 -- clause*/
                /*,*/
                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                    /*consume*/
                    /*
                       78:204 formal_parameter_list=>formal_parameter_list , • formal_parameter
                       76:199 formal_parameters=>formal_parameter_list , •
                       76:200 formal_parameters=>formal_parameter_list , • function_rest_parameter
                    */
                    /*peek_level:0 offset:2 -- clause*/
                    /*_ $ id async get set target as from { [*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_table(l, 0x0, 0x10, 0x88000000, 0x8000000)/*tbl:[ _ ] [ $ ] [ { ] [ [ ]*/ || l.isID()/*[id]*/) {
                        /*peek-production-closure*/
                        /*
                           78:204 formal_parameter_list=>formal_parameter_list , • formal_parameter
                        */
                        /*peek_level:0 offset:2*/
                        if (state = $binding_element(l, state)) {
                            /*--unique-id--78--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 11);
                            prod = 78;
                            continue;
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "formal_parameter_list GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 78);
        }
/*production name: function_statement_list
            grammar index: 82
            bodies:
	82:209 function_statement_list=>• statement_list - 
		82:210 function_statement_list=>• - 
            compile time: 22.617ms*/;
        function $function_statement_list(l, state) {
            debug_stack.push({ name: "function_statement_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*{ yield async new ( super import this [ / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const } END_OF_FILE*/
            if ((((((((((((((((((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_670f23e41126e00b(l)/*[async] [as] [await]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_0a34667347bd2a3a(l)/*[super] [set] [switch]*/) || defined_token_1f80f2e0a149fe3d(l)/*[import] [if]*/) || defined_token_8e8ee78381c90ca5(l)/*[this] [target] [true] [typeof] [throw] [try]*/) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_967ffd9bf1cf840d(l)/*[from] [false] [for] [function]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_e8ddfc9b5a509a6c(l)/*[delete] [do] [debugger]*/) || defined_token_1ae4fe309b644fa1(l)/*[void] [var]*/) || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || defined_token_aac16ca323764d7a(l)/*[while] [with]*/) || defined_token_912bb2f6b2683177(l)/*[continue] [class] [const]*/) || defined_token_c3524ff0dce64492(l)/*[break]*/) || defined_token_876f036172605c26(l)/*[return]*/) || defined_token_f188f6806e50797b(l)/*[let]*/) || assert_table(l, 0x0, 0x800a986, 0x8000000, 0x48000001)/*tbl:[ { ] [ ( ] [ [ ] [ / ] [ " ] [ ' ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ] [ ; ]*/) || l.isNum()/*[num]*/) {
                /*assert-production-closure*/
                /*
                   82:209 function_statement_list=>• statement_list
                */
                /*peek_level:-1 offset:0*/
                if (state = $statement_list(l, state)) {
                    /*--unique-id--82--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "function_statement_list RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*assert-end*/
                /*
                   82:210 function_statement_list=>•
                */
                /*--unique-id--82--DO-NOT-REPLACE*/
                /*peek_level:0 offset:1*/
                debug_stack.push({ name: "function_statement_list RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "function_statement_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: yield_expression_group_0143_115
            grammar index: 83
            bodies:
	83:211 yield_expression_group_0143_115=>• * - 
            compile time: 1.503ms*/;
        function $yield_expression_group_0143_115(l, state) {
            debug_stack.push({ name: "yield_expression_group_0143_115 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /***/
            if (assert_consume(l, state, l.utf == 42/*[*]*/)) {
                /*consume*/
                /*
                   83:211 yield_expression_group_0143_115=>* •
                */
                /*--unique-id--83--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "yield_expression_group_0143_115 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "yield_expression_group_0143_115 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: yield_expression
            grammar index: 84
            bodies:
	84:212 yield_expression=>• τyield θnl - 
		84:213 yield_expression=>• τyield yield_expression_group_0143_115 assignment_expression - 
		84:214 yield_expression=>• τyield assignment_expression - 
            compile time: 12.308ms*/;
        function $yield_expression(l, state) {
            debug_stack.push({ name: "yield_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*yield*/
            if (assert_consume(l, state, defined_token_d8f9d336d83ac87c(l)/*[yield]*/)) {
                /*consume*/
                /*
                   84:212 yield_expression=>τyield • θnl
                   84:213 yield_expression=>τyield • yield_expression_group_0143_115 assignment_expression
                   84:214 yield_expression=>τyield • assignment_expression
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*nl * ++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import*/
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (assert_consume(l, state, l.isNL()/*[nl]*/)) {
                    /*consume*/
                    /*
                       84:212 yield_expression=>τyield θnl •
                    */
                    /*--unique-id--84--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 106);
                    debug_stack.push({ name: "yield_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else if (l.utf == 42/*[*]*/) {
                    /*peek-production-closure*/
                    /*
                       84:213 yield_expression=>τyield • yield_expression_group_0143_115 assignment_expression
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $yield_expression_group_0143_115(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $assignment_expression(l, state)) {
                            /*--unique-id--84--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 107);
                            debug_stack.push({ name: "yield_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       84:214 yield_expression=>τyield • assignment_expression
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $assignment_expression(l, state)) {
                        /*--unique-id--84--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 108);
                        debug_stack.push({ name: "yield_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "yield_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: arrow_function
            grammar index: 85
            bodies:
	85:215 arrow_function=>• τasync arrow_parameters = > concise_body - 
		85:216 arrow_function=>• arrow_parameters = > concise_body - 
            compile time: 258.587ms*/;
        function $arrow_function(l, state) {
            debug_stack.push({ name: "arrow_function RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*_ $ id get set target as from ( async*/
            if (assert_table(l, 0x0, 0x110, 0x80000000, 0x0)/*tbl:[ _ ] [ $ ] [ ( ]*/ || l.isID()/*[id]*/) {
                /*peek-production-closure*/
                /*
                   85:216 arrow_function=>• arrow_parameters = > concise_body
                */
                /*peek_level:0 offset:0*/
                if (state = $arrow_parameters(l, state)) {
                    sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                        sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 62/*[>]*/)) {
                            sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $concise_body(l, state)) {
                                /*--unique-id--85--DO-NOT-REPLACE*/
                                add_reduce(state, 4, 110);
                                return $arrow_function_goto(l, state, 85);
                            }
                        }
                    }
                }
            } else if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                /*peek*/
                /*
                   85:215 arrow_function=>• τasync arrow_parameters = > concise_body
                   85:216 arrow_function=>• arrow_parameters = > concise_body
                */
                /*peek_level:1 offset:0 -- clause*/
                /*as from ( ?. `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of extends _ $ id async get set target*/
                let pk = l.copy();
                sk_2d66b1a40da93fb6(pk.next()/*[ ws ][ 6 ]*/);
                if ((defined_token_fcc8b8fe09802878(pk)/*[as]*/ || defined_token_14469127dc9c2c1f(pk)/*[from]*/) || (pk.utf == 40/*[(]*/)) {
                    /*peek*/
                    /*
                       85:215 arrow_function=>• τasync arrow_parameters = > concise_body
                       85:216 arrow_function=>• arrow_parameters = > concise_body
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*async*/
                    sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                        /*consume*/
                        /*
                           85:215 arrow_function=>τasync • arrow_parameters = > concise_body
                           191:538 unreserved_word=>τasync •
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE 228 async get set target*/
                        sk_2d66b1a40da93fb6(l/*[ ws ][ 6 ]*/);
                        if (((((((((((((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_14469127dc9c2c1f(l)/*[from]*/) || defined_token_fcc8b8fe09802878(l)/*[as]*/) || defined_token_37edf5ebc00dbfe6(l)/*[/=]*/) || defined_token_f5b15d408b6280ad(l)/*[?.] [??]*/) || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_e021d8532f9147fd(l)/*[extends]*/) || defined_token_870ef36bec3a881f(l)/*[+=] [++]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_4749150ec48378d0(l)/*[-=] [--]*/) || defined_token_318c95b1e64de46d(l)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(l)/*[>>=] [>>>=] [>>] [>>>] [>=]*/) || defined_token_2c51a4b82e64ba22(l)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_d1de557e71993f67(l)/*[|=] [||]*/) || defined_token_485338d34f29b52a(l)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_c6b5fbb944702d5a(l)/*[of]*/) || assert_table(l, 0x0, 0xfc00ff60, 0x68000000, 0x38000001)/*tbl:[ , ] [ } ] [ = ] [ ] ] [ * ] [ ) ] [ ( ] [ : ] [ ; ] [ { ] [ [ ] [ . ] [ ` ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               191:538 unreserved_word=>τasync •
                            */
                            /*--unique-id--86--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:4*/
                            add_reduce(state, 1, 245);
                            add_reduce(state, 1, 244);
                            add_reduce(state, 1, 111);
                            return $arrow_function_goto(l, state, 86);
                        } else {
                            /*assert-production-closure*/
                            /*
                               85:215 arrow_function=>τasync • arrow_parameters = > concise_body
                            */
                            /*peek_level:-1 offset:3*/
                            if (state = $arrow_parameters(l, state)) {
                                sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                                    sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 62/*[>]*/)) {
                                        sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (state = $concise_body(l, state)) {
                                            /*--unique-id--85--DO-NOT-REPLACE*/
                                            add_reduce(state, 5, 109);
                                            return $arrow_function_goto(l, state, 85);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else if ((((((((((((((((((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || defined_token_f5b15d408b6280ad(pk)/*[?.] [??]*/) || defined_token_19cd74c69f5512e8(pk)/*[``]*/) || defined_token_8c647931e6bf0c07(pk)/*[--] [-=]*/) || defined_token_7330fb2be3dc26eb(pk)/*[++] [+=]*/) || defined_token_37edf5ebc00dbfe6(pk)/*[/=]*/) || defined_token_2c342d130718e813(pk)/*[%=]*/) || defined_token_318c95b1e64de46d(pk)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(pk)/*[>>=] [>>>=] [>>>] [>>] [>=]*/) || defined_token_2c51a4b82e64ba22(pk)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(pk)/*[^=]*/) || defined_token_d1de557e71993f67(pk)/*[|=] [||]*/) || defined_token_485338d34f29b52a(pk)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(pk)/*[instanceof] [in]*/) || defined_token_04e94f0279c3936b(pk)/*[!==] [!=]*/) || defined_token_4df9552a310b74e2(pk)/*[===] [==]*/) || defined_token_c6b5fbb944702d5a(pk)/*[of]*/) || defined_token_e021d8532f9147fd(pk)/*[extends]*/) || assert_table(pk, 0x0, 0xfc00fe60, 0x68000000, 0x38000001)/*tbl:[ ` ] [ . ] [ [ ] [ * ] [ = ] [ % ] [ / ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ ] ] [ : ] [ ) ] [ ; ] [ , ] [ } ] [ { ]*/) {
                    /*peek-production-closure*/
                    /*
                       85:216 arrow_function=>• arrow_parameters = > concise_body
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $arrow_parameters(l, state)) {
                        sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                            sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 62/*[>]*/)) {
                                sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $concise_body(l, state)) {
                                    /*--unique-id--85--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 110);
                                    return $arrow_function_goto(l, state, 85);
                                }
                            }
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       85:215 arrow_function=>• τasync arrow_parameters = > concise_body
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                        sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $arrow_parameters(l, state)) {
                            sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                                sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 62/*[>]*/)) {
                                    sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $concise_body(l, state)) {
                                        /*--unique-id--85--DO-NOT-REPLACE*/
                                        add_reduce(state, 5, 109);
                                        return $arrow_function_goto(l, state, 85);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "arrow_function RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $arrow_function_goto(l, state, prod) {
            debug_stack.push({ name: "arrow_function GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:-1 offset:0 -- clause*/
                /*=*/
                if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                    /*consume*/
                    /*
                       85:216 arrow_function=>arrow_parameters = • > concise_body
                    */
                    /*peek_level:-1 offset:1*/
                    sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 62/*[>]*/)) {
                        sk_cad28caf21b86881(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $concise_body(l, state)) {
                            /*--unique-id--85--DO-NOT-REPLACE*/
                            add_reduce(state, 4, 110);
                            prod = 85;
                            continue;
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "arrow_function GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 85);
        }
/*production name: arrow_parameters
            grammar index: 86
            bodies:
	86:217 arrow_parameters=>• identifier_reference - 
		86:218 arrow_parameters=>• cover_parenthesized_expression_and_arrow_parameter_list - 
            compile time: 4.307ms*/;
        function $arrow_parameters(l, state) {
            debug_stack.push({ name: "arrow_parameters RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*( _ $ id async get set target as from*/
            if (l.utf == 40/*[(]*/) {
                /*peek-production-closure*/
                /*
                   86:218 arrow_parameters=>• cover_parenthesized_expression_and_arrow_parameter_list
                */
                /*peek_level:0 offset:0*/
                if (state = $cover_parenthesized_expression_and_arrow_parameter_list(l, state)) {
                    /*--unique-id--86--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 112);
                    debug_stack.push({ name: "arrow_parameters RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   86:217 arrow_parameters=>• identifier_reference
                */
                /*peek_level:0 offset:0*/
                if (state = $identifier(l, state)) {
                    /*--unique-id--86--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 244);
                    add_reduce(state, 1, 111);
                    debug_stack.push({ name: "arrow_parameters RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "arrow_parameters RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: concise_body
            grammar index: 87
            bodies:
	87:219 concise_body=>• assignment_expression - 
		87:220 concise_body=>• { function_statement_list } - 
            compile time: 13.32ms*/;
        function $concise_body(l, state) {
            debug_stack.push({ name: "concise_body RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*{ ++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ function class / `` ` super import*/
            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                /*consume*/
                /*
                   87:220 concise_body=>{ • function_statement_list }
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $function_statement_list(l, state)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                        /*--unique-id--87--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 113);
                        debug_stack.push({ name: "concise_body RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            } else {
                /*peek-production-closure*/
                /*
                   87:219 concise_body=>• assignment_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $assignment_expression(l, state)) {
                    /*--unique-id--87--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "concise_body RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "concise_body RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: class_declaration
            grammar index: 89
            bodies:
	89:222 class_declaration=>• τclass binding_identifier class_heritage { class_body } - 
		89:223 class_declaration=>• τclass class_heritage { class_body } - 
		89:224 class_declaration=>• τclass binding_identifier { class_body } - 
		89:225 class_declaration=>• τclass binding_identifier class_heritage { } - 
		89:226 class_declaration=>• τclass { class_body } - 
		89:227 class_declaration=>• τclass class_heritage { } - 
		89:228 class_declaration=>• τclass binding_identifier { } - 
		89:229 class_declaration=>• τclass { } - 
            compile time: 522.064ms*/;
        function $class_declaration(l, state) {
            debug_stack.push({ name: "class_declaration RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*class*/
            if (assert_consume(l, state, defined_token_2d05a4070a3ebcf4(l)/*[class]*/)) {
                /*consume*/
                /*
                   89:222 class_declaration=>τclass • binding_identifier class_heritage { class_body }
                   89:223 class_declaration=>τclass • class_heritage { class_body }
                   89:224 class_declaration=>τclass • binding_identifier { class_body }
                   89:225 class_declaration=>τclass • binding_identifier class_heritage { }
                   89:226 class_declaration=>τclass • { class_body }
                   89:227 class_declaration=>τclass • class_heritage { }
                   89:228 class_declaration=>τclass • binding_identifier { }
                   89:229 class_declaration=>τclass • { }
                */
                /*peek_level:0 offset:1 -- clause*/
                /*extends { _ $ id async get set target as from*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (defined_token_e021d8532f9147fd(l)/*[extends]*/) {
                    /*peek-production-closure*/
                    /*
                       89:223 class_declaration=>τclass • class_heritage { class_body }
                       89:227 class_declaration=>τclass • class_heritage { }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*91*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $class_heritage(l, state)) {
                        /*assert*/
                        /*
                           89:223 class_declaration=>τclass • class_heritage { class_body }
                           89:227 class_declaration=>τclass • class_heritage { }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*{*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                            /*consume*/
                            /*
                               89:223 class_declaration=>τclass class_heritage { • class_body }
                               89:227 class_declaration=>τclass class_heritage { • }
                            */
                            /*peek_level:0 offset:5 -- clause*/
                            /*} async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [ static ;*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                /*consume*/
                                /*
                                   89:227 class_declaration=>τclass class_heritage { } •
                                */
                                /*--unique-id--89--DO-NOT-REPLACE*/
                                /*peek_level:-1 offset:5*/
                                add_reduce(state, 4, 120);
                                debug_stack.push({ name: "class_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            } else {
                                /*peek-production-closure*/
                                /*
                                   89:223 class_declaration=>τclass class_heritage { • class_body }
                                */
                                /*peek_level:0 offset:5*/
                                if (state = $class_body(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                        /*--unique-id--89--DO-NOT-REPLACE*/
                                        add_reduce(state, 5, 116);
                                        debug_stack.push({ name: "class_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            }
                        }
                    }
                } else if (l.utf == 123/*[{]*/) {
                    /*peek*/
                    /*
                       89:226 class_declaration=>τclass • { class_body }
                       89:229 class_declaration=>τclass • { }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*{*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                        /*consume*/
                        /*
                           89:226 class_declaration=>τclass { • class_body }
                           89:229 class_declaration=>τclass { • }
                        */
                        /*peek_level:0 offset:4 -- clause*/
                        /*} async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [ static ;*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                            /*consume*/
                            /*
                               89:229 class_declaration=>τclass { } •
                            */
                            /*--unique-id--89--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 122);
                            debug_stack.push({ name: "class_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        } else {
                            /*peek-production-closure*/
                            /*
                               89:226 class_declaration=>τclass { • class_body }
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $class_body(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                    /*--unique-id--89--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 119);
                                    debug_stack.push({ name: "class_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            }
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       89:222 class_declaration=>τclass • binding_identifier class_heritage { class_body }
                       89:224 class_declaration=>τclass • binding_identifier { class_body }
                       89:225 class_declaration=>τclass • binding_identifier class_heritage { }
                       89:228 class_declaration=>τclass • binding_identifier { }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*188*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $binding_identifier(l, state)) {
                        /*assert*/
                        /*
                           89:222 class_declaration=>τclass • binding_identifier class_heritage { class_body }
                           89:224 class_declaration=>τclass • binding_identifier { class_body }
                           89:225 class_declaration=>τclass • binding_identifier class_heritage { }
                           89:228 class_declaration=>τclass • binding_identifier { }
                        */
                        /*peek_level:0 offset:4 -- clause*/
                        /*extends {*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (defined_token_e021d8532f9147fd(l)/*[extends]*/) {
                            /*peek-production-closure*/
                            /*
                               89:222 class_declaration=>τclass binding_identifier • class_heritage { class_body }
                               89:225 class_declaration=>τclass binding_identifier • class_heritage { }
                            */
                            /*peek_level:-1 offset:6 -- clause*/
                            /*91*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $class_heritage(l, state)) {
                                /*assert*/
                                /*
                                   89:222 class_declaration=>τclass binding_identifier • class_heritage { class_body }
                                   89:225 class_declaration=>τclass binding_identifier • class_heritage { }
                                */
                                /*peek_level:-1 offset:7 -- clause*/
                                /*{*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                    /*consume*/
                                    /*
                                       89:222 class_declaration=>τclass binding_identifier class_heritage { • class_body }
                                       89:225 class_declaration=>τclass binding_identifier class_heritage { • }
                                    */
                                    /*peek_level:0 offset:8 -- clause*/
                                    /*} async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [ static ;*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                        /*consume*/
                                        /*
                                           89:225 class_declaration=>τclass binding_identifier class_heritage { } •
                                        */
                                        /*--unique-id--89--DO-NOT-REPLACE*/
                                        /*peek_level:-1 offset:8*/
                                        add_reduce(state, 5, 118);
                                        debug_stack.push({ name: "class_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    } else {
                                        /*peek-production-closure*/
                                        /*
                                           89:222 class_declaration=>τclass binding_identifier class_heritage { • class_body }
                                        */
                                        /*peek_level:0 offset:8*/
                                        if (state = $class_body(l, state)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*--unique-id--89--DO-NOT-REPLACE*/
                                                add_reduce(state, 6, 115);
                                                debug_stack.push({ name: "class_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                return state;
                                            }
                                        }
                                    }
                                }
                            }
                        } else if (l.utf == 123/*[{]*/) {
                            /*peek*/
                            /*
                               89:224 class_declaration=>τclass binding_identifier • { class_body }
                               89:228 class_declaration=>τclass binding_identifier • { }
                            */
                            /*peek_level:-1 offset:6 -- clause*/
                            /*{*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                /*consume*/
                                /*
                                   89:224 class_declaration=>τclass binding_identifier { • class_body }
                                   89:228 class_declaration=>τclass binding_identifier { • }
                                */
                                /*peek_level:0 offset:7 -- clause*/
                                /*} async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [ static ;*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                    /*consume*/
                                    /*
                                       89:228 class_declaration=>τclass binding_identifier { } •
                                    */
                                    /*--unique-id--89--DO-NOT-REPLACE*/
                                    /*peek_level:-1 offset:7*/
                                    add_reduce(state, 4, 121);
                                    debug_stack.push({ name: "class_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                } else {
                                    /*peek-production-closure*/
                                    /*
                                       89:224 class_declaration=>τclass binding_identifier { • class_body }
                                    */
                                    /*peek_level:0 offset:7*/
                                    if (state = $class_body(l, state)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                            /*--unique-id--89--DO-NOT-REPLACE*/
                                            add_reduce(state, 5, 117);
                                            debug_stack.push({ name: "class_declaration RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                            return state;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "class_declaration RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: class_expression
            grammar index: 90
            bodies:
	90:230 class_expression=>• τclass binding_identifier class_heritage { class_body } - 
		90:231 class_expression=>• τclass class_heritage { class_body } - 
		90:232 class_expression=>• τclass binding_identifier { class_body } - 
		90:233 class_expression=>• τclass binding_identifier class_heritage { } - 
		90:234 class_expression=>• τclass { class_body } - 
		90:235 class_expression=>• τclass class_heritage { } - 
		90:236 class_expression=>• τclass binding_identifier { } - 
		90:237 class_expression=>• τclass { } - 
            compile time: 456.931ms*/;
        function $class_expression(l, state) {
            debug_stack.push({ name: "class_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*class*/
            if (assert_consume(l, state, defined_token_2d05a4070a3ebcf4(l)/*[class]*/)) {
                /*consume*/
                /*
                   90:230 class_expression=>τclass • binding_identifier class_heritage { class_body }
                   90:231 class_expression=>τclass • class_heritage { class_body }
                   90:232 class_expression=>τclass • binding_identifier { class_body }
                   90:233 class_expression=>τclass • binding_identifier class_heritage { }
                   90:234 class_expression=>τclass • { class_body }
                   90:235 class_expression=>τclass • class_heritage { }
                   90:236 class_expression=>τclass • binding_identifier { }
                   90:237 class_expression=>τclass • { }
                */
                /*peek_level:0 offset:1 -- clause*/
                /*extends { _ $ id async get set target as from*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (defined_token_e021d8532f9147fd(l)/*[extends]*/) {
                    /*peek-production-closure*/
                    /*
                       90:231 class_expression=>τclass • class_heritage { class_body }
                       90:235 class_expression=>τclass • class_heritage { }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*91*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $class_heritage(l, state)) {
                        /*assert*/
                        /*
                           90:231 class_expression=>τclass • class_heritage { class_body }
                           90:235 class_expression=>τclass • class_heritage { }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*{*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                            /*consume*/
                            /*
                               90:231 class_expression=>τclass class_heritage { • class_body }
                               90:235 class_expression=>τclass class_heritage { • }
                            */
                            /*peek_level:0 offset:5 -- clause*/
                            /*} async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [ static ;*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                /*consume*/
                                /*
                                   90:235 class_expression=>τclass class_heritage { } •
                                */
                                /*--unique-id--90--DO-NOT-REPLACE*/
                                /*peek_level:-1 offset:5*/
                                add_reduce(state, 4, 120);
                                debug_stack.push({ name: "class_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            } else {
                                /*peek-production-closure*/
                                /*
                                   90:231 class_expression=>τclass class_heritage { • class_body }
                                */
                                /*peek_level:0 offset:5*/
                                if (state = $class_body(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                        /*--unique-id--90--DO-NOT-REPLACE*/
                                        add_reduce(state, 5, 116);
                                        debug_stack.push({ name: "class_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            }
                        }
                    }
                } else if (l.utf == 123/*[{]*/) {
                    /*peek*/
                    /*
                       90:234 class_expression=>τclass • { class_body }
                       90:237 class_expression=>τclass • { }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*{*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                        /*consume*/
                        /*
                           90:234 class_expression=>τclass { • class_body }
                           90:237 class_expression=>τclass { • }
                        */
                        /*peek_level:0 offset:4 -- clause*/
                        /*} async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [ static ;*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                            /*consume*/
                            /*
                               90:237 class_expression=>τclass { } •
                            */
                            /*--unique-id--90--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 122);
                            debug_stack.push({ name: "class_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        } else {
                            /*peek-production-closure*/
                            /*
                               90:234 class_expression=>τclass { • class_body }
                            */
                            /*peek_level:0 offset:4*/
                            if (state = $class_body(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                    /*--unique-id--90--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 119);
                                    debug_stack.push({ name: "class_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            }
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       90:230 class_expression=>τclass • binding_identifier class_heritage { class_body }
                       90:232 class_expression=>τclass • binding_identifier { class_body }
                       90:233 class_expression=>τclass • binding_identifier class_heritage { }
                       90:236 class_expression=>τclass • binding_identifier { }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*188*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $binding_identifier(l, state)) {
                        /*assert*/
                        /*
                           90:230 class_expression=>τclass • binding_identifier class_heritage { class_body }
                           90:232 class_expression=>τclass • binding_identifier { class_body }
                           90:233 class_expression=>τclass • binding_identifier class_heritage { }
                           90:236 class_expression=>τclass • binding_identifier { }
                        */
                        /*peek_level:0 offset:4 -- clause*/
                        /*extends {*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (defined_token_e021d8532f9147fd(l)/*[extends]*/) {
                            /*peek-production-closure*/
                            /*
                               90:230 class_expression=>τclass binding_identifier • class_heritage { class_body }
                               90:233 class_expression=>τclass binding_identifier • class_heritage { }
                            */
                            /*peek_level:-1 offset:6 -- clause*/
                            /*91*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $class_heritage(l, state)) {
                                /*assert*/
                                /*
                                   90:230 class_expression=>τclass binding_identifier • class_heritage { class_body }
                                   90:233 class_expression=>τclass binding_identifier • class_heritage { }
                                */
                                /*peek_level:-1 offset:7 -- clause*/
                                /*{*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                    /*consume*/
                                    /*
                                       90:230 class_expression=>τclass binding_identifier class_heritage { • class_body }
                                       90:233 class_expression=>τclass binding_identifier class_heritage { • }
                                    */
                                    /*peek_level:0 offset:8 -- clause*/
                                    /*} async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [ static ;*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                        /*consume*/
                                        /*
                                           90:233 class_expression=>τclass binding_identifier class_heritage { } •
                                        */
                                        /*--unique-id--90--DO-NOT-REPLACE*/
                                        /*peek_level:-1 offset:8*/
                                        add_reduce(state, 5, 118);
                                        debug_stack.push({ name: "class_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    } else {
                                        /*peek-production-closure*/
                                        /*
                                           90:230 class_expression=>τclass binding_identifier class_heritage { • class_body }
                                        */
                                        /*peek_level:0 offset:8*/
                                        if (state = $class_body(l, state)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*--unique-id--90--DO-NOT-REPLACE*/
                                                add_reduce(state, 6, 115);
                                                debug_stack.push({ name: "class_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                return state;
                                            }
                                        }
                                    }
                                }
                            }
                        } else if (l.utf == 123/*[{]*/) {
                            /*peek*/
                            /*
                               90:232 class_expression=>τclass binding_identifier • { class_body }
                               90:236 class_expression=>τclass binding_identifier • { }
                            */
                            /*peek_level:-1 offset:6 -- clause*/
                            /*{*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                /*consume*/
                                /*
                                   90:232 class_expression=>τclass binding_identifier { • class_body }
                                   90:236 class_expression=>τclass binding_identifier { • }
                                */
                                /*peek_level:0 offset:7 -- clause*/
                                /*} async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [ static ;*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                    /*consume*/
                                    /*
                                       90:236 class_expression=>τclass binding_identifier { } •
                                    */
                                    /*--unique-id--90--DO-NOT-REPLACE*/
                                    /*peek_level:-1 offset:7*/
                                    add_reduce(state, 4, 121);
                                    debug_stack.push({ name: "class_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                } else {
                                    /*peek-production-closure*/
                                    /*
                                       90:232 class_expression=>τclass binding_identifier { • class_body }
                                    */
                                    /*peek_level:0 offset:7*/
                                    if (state = $class_body(l, state)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                            /*--unique-id--90--DO-NOT-REPLACE*/
                                            add_reduce(state, 5, 117);
                                            debug_stack.push({ name: "class_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                            return state;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "class_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: class_heritage
            grammar index: 91
            bodies:
	91:238 class_heritage=>• τextends left_hand_side_expression - 
            compile time: 4.176ms*/;
        function $class_heritage(l, state) {
            debug_stack.push({ name: "class_heritage RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*extends*/
            if (assert_consume(l, state, defined_token_e021d8532f9147fd(l)/*[extends]*/)) {
                /*consume*/
                /*
                   91:238 class_heritage=>τextends • left_hand_side_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $left_hand_side_expression(l, state)) {
                    /*--unique-id--91--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 0);
                    debug_stack.push({ name: "class_heritage RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "class_heritage RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: class_body
            grammar index: 92
            bodies:
	92:239 class_body=>• class_element - 
		92:240 class_body=>• class_body class_element - 
		92:241 class_body=>• class_body asi - 
		92:242 class_body=>• ; - 
            compile time: 246.936ms*/;
        function $class_body(l, state) {
            debug_stack.push({ name: "class_body RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*; async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [ static*/
            if (assert_consume(l, state, l.utf == 59/*[;]*/)) {
                /*consume*/
                /*
                   92:242 class_body=>; •
                */
                /*--unique-id--92--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                add_reduce(state, 1, 125);
                return $class_body_goto(l, state, 92);
            } else {
                /*peek-production-closure*/
                /*
                   92:239 class_body=>• class_element
                */
                /*peek_level:0 offset:0*/
                if (state = $class_element(l, state)) {
                    /*--unique-id--92--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 4);
                    return $class_body_goto(l, state, 92);
                }
            }
            debug_stack.push({ name: "class_body RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $class_body_goto(l, state, prod) {
            debug_stack.push({ name: "class_body GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*; { nl END_OF_FILE async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [ static*/
                if (non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || (l.utf == 59/*[;]*/)) {
                    /*peek-production-closure*/
                    /*
                       92:241 class_body=>class_body • asi
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $asi_group_017_104(l, state)) {
                        /*--unique-id--92--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 124);
                        prod = 92;
                        continue;
                    }
                } else if ((assert_table(l, 0x0, 0x494, 0x88000000, 0x0)/*tbl:[ * ] [ _ ] [ $ ] [ " ] [ ' ] [ [ ]*/ || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                    /*peek-production-closure*/
                    /*
                       92:240 class_body=>class_body • class_element
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $class_element(l, state)) {
                        /*--unique-id--92--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 123);
                        prod = 92;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "class_body GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 92);
        }
/*production name: class_element
            grammar index: 93
            bodies:
	93:243 class_element=>• method_definition - 
		93:244 class_element=>• τstatic method_definition - 
            compile time: 6.803ms*/;
        function $class_element(l, state) {
            debug_stack.push({ name: "class_element RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*static async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [*/
            if (assert_consume(l, state, defined_token_b564093a441eda05(l)/*[static]*/)) {
                /*consume*/
                /*
                   93:244 class_element=>τstatic • method_definition
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $method_definition(l, state)) {
                    /*--unique-id--93--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 126);
                    debug_stack.push({ name: "class_element RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   93:243 class_element=>• method_definition
                */
                /*peek_level:0 offset:0*/
                if (state = $method_definition(l, state)) {
                    /*--unique-id--93--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "class_element RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "class_element RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: method_definition
            grammar index: 94
            bodies:
	94:245 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body } - 
		94:246 method_definition=>• τget property_name ( ) { function_body } - 
		94:247 method_definition=>• τset property_name ( property_set_parameter_list ) { function_body } - 
		94:248 method_definition=>• yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body } - 
		94:249 method_definition=>• τasync property_name ( unique_formal_parameters ) { function_body } - 
		94:250 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { function_body } - 
		94:251 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { } - 
		94:252 method_definition=>• τget property_name ( ) { } - 
		94:253 method_definition=>• τset property_name ( property_set_parameter_list ) { } - 
		94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body } - 
		94:255 method_definition=>• yield_expression_group_0143_115 property_name ( ) { function_body } - 
		94:256 method_definition=>• yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { } - 
		94:257 method_definition=>• τasync property_name ( ) { function_body } - 
		94:258 method_definition=>• τasync property_name ( unique_formal_parameters ) { } - 
		94:259 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { } - 
		94:260 method_definition=>• property_name ( ) { function_body } - 
		94:261 method_definition=>• property_name ( unique_formal_parameters ) { } - 
		94:262 method_definition=>• yield_expression_group_0143_115 property_name ( ) { } - 
		94:263 method_definition=>• τasync property_name ( ) { } - 
		94:264 method_definition=>• property_name ( ) { } - 
            compile time: 15905.005ms*/;
        function $method_definition(l, state) {
            debug_stack.push({ name: "method_definition RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*async get set * _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false target as from " ' num [*/
            if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                /*peek*/
                /*
                   94:245 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                   94:249 method_definition=>• τasync property_name ( unique_formal_parameters ) { function_body }
                   94:250 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { function_body }
                   94:251 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                   94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                   94:257 method_definition=>• τasync property_name ( ) { function_body }
                   94:258 method_definition=>• τasync property_name ( unique_formal_parameters ) { }
                   94:259 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { }
                   94:260 method_definition=>• property_name ( ) { function_body }
                   94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                   94:263 method_definition=>• τasync property_name ( ) { }
                   94:264 method_definition=>• property_name ( ) { }
                */
                /*peek_level:1 offset:0 -- clause*/
                /** extends in instanceof as from [ ?. ( `` ` . -- ++ /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of _ $ id await break case catch class const continue debugger default delete do else export finally for function if import new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false async get set target " ' num*/
                let pk = l.copy();
                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                if (pk.utf == 42/*[*]*/) {
                    /*peek*/
                    /*
                       94:245 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                       94:250 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { function_body }
                       94:251 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                       94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                       94:259 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { }
                       94:260 method_definition=>• property_name ( ) { function_body }
                       94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                       94:264 method_definition=>• property_name ( ) { }
                    */
                    /*peek_level:2 offset:0 -- clause*/
                    /*= break case catch const continue debugger default do else export extends finally for if in instanceof return switch throw try var while with yield implements package protected interface private public _ $ id await class delete function import new super this typeof void null true false async get set target as from " ' num [ ++ -- + ~ ! - ( { / `` `*/
                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                    if (pk.utf == 61/*[=]*/) {
                        /*peek-production-closure*/
                        /*
                           94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                           94:260 method_definition=>• property_name ( ) { function_body }
                           94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                           94:264 method_definition=>• property_name ( ) { }
                        */
                        /*peek_level:-1 offset:2 -- clause*/
                        /*155*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $property_name(l, state)) {
                            /*assert*/
                            /*
                               94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                               94:260 method_definition=>• property_name ( ) { function_body }
                               94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                               94:264 method_definition=>• property_name ( ) { }
                            */
                            /*peek_level:-1 offset:3 -- clause*/
                            /*(*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                /*consume*/
                                /*
                                   94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                                   94:260 method_definition=>property_name ( • ) { function_body }
                                   94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                                   94:264 method_definition=>property_name ( • ) { }
                                */
                                /*peek_level:0 offset:4 -- clause*/
                                /*) ... { [ async get set target as from _ $ id*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (l.utf == 41/*[)]*/) {
                                    /*peek*/
                                    /*
                                       94:260 method_definition=>property_name ( • ) { function_body }
                                       94:264 method_definition=>property_name ( • ) { }
                                    */
                                    /*peek_level:-1 offset:6 -- clause*/
                                    /*)*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*consume*/
                                        /*
                                           94:260 method_definition=>property_name ( ) • { function_body }
                                           94:264 method_definition=>property_name ( ) • { }
                                        */
                                        /*peek_level:-1 offset:7 -- clause*/
                                        /*{*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                            /*consume*/
                                            /*
                                               94:260 method_definition=>property_name ( ) { • function_body }
                                               94:264 method_definition=>property_name ( ) { • }
                                            */
                                            /*peek_level:0 offset:8 -- clause*/
                                            /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (l.utf == 125/*[}]*/) {
                                                /*peek*/
                                                /*
                                                   94:260 method_definition=>property_name ( ) { • function_body }
                                                   94:264 method_definition=>property_name ( ) { • }
                                                */
                                                /*peek_level:1 offset:8 -- clause*/
                                                /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                let pk = l.copy();
                                                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:260 method_definition=>property_name ( ) { • function_body }
                                                       94:264 method_definition=>property_name ( ) { • }
                                                    */
                                                    let mk = mark();
                                                    let anchor = l.copy();
                                                    let anchor_state = state;
                                                    /*260,6,4,264,5,4*/
                                                    /*94*/
                                                    /*peek_level:-1 offset:8*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 6, 142);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                    /*260,6,4,264,5,4*/
                                                    state = reset(mk, anchor, l, anchor_state);
                                                    /*peek_level:-1 offset:8 -- clause*/
                                                    /*}*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*consume*/
                                                        /*
                                                           94:264 method_definition=>property_name ( ) { } •
                                                        */
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        /*peek_level:-1 offset:8*/
                                                        add_reduce(state, 5, 146);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:260 method_definition=>property_name ( ) { • function_body }
                                                    */
                                                    /*peek_level:1 offset:8*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 6, 142);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:260 method_definition=>property_name ( ) { • function_body }
                                                */
                                                /*peek_level:0 offset:8*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 6, 142);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    /*peek-production-closure*/
                                    /*
                                       94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                                       94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                                    */
                                    /*peek_level:-1 offset:6 -- clause*/
                                    /*75*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $unique_formal_parameters(l, state)) {
                                        /*assert*/
                                        /*
                                           94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                                           94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                                        */
                                        /*peek_level:-1 offset:7 -- clause*/
                                        /*)*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            /*consume*/
                                            /*
                                               94:254 method_definition=>property_name ( unique_formal_parameters ) • { function_body }
                                               94:261 method_definition=>property_name ( unique_formal_parameters ) • { }
                                            */
                                            /*peek_level:-1 offset:8 -- clause*/
                                            /*{*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                /*consume*/
                                                /*
                                                   94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                   94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                                */
                                                /*peek_level:0 offset:9 -- clause*/
                                                /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (l.utf == 125/*[}]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                       94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                                    */
                                                    /*peek_level:1 offset:9 -- clause*/
                                                    /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                    let pk = l.copy();
                                                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                    if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                        /*peek*/
                                                        /*
                                                           94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                           94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                                        */
                                                        let mk = mark();
                                                        let anchor = l.copy();
                                                        let anchor_state = state;
                                                        /*254,7,5,261,6,5*/
                                                        /*94*/
                                                        /*peek_level:-1 offset:9*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                                add_reduce(state, 7, 136);
                                                                return $method_definition_goto(l, state, 94);
                                                            }
                                                        }
                                                        /*254,7,5,261,6,5*/
                                                        state = reset(mk, anchor, l, anchor_state);
                                                        /*peek_level:-1 offset:9 -- clause*/
                                                        /*}*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*consume*/
                                                            /*
                                                               94:261 method_definition=>property_name ( unique_formal_parameters ) { } •
                                                            */
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            /*peek_level:-1 offset:9*/
                                                            add_reduce(state, 6, 143);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                        */
                                                        /*peek_level:1 offset:9*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                                add_reduce(state, 7, 136);
                                                                return $method_definition_goto(l, state, 94);
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                    */
                                                    /*peek_level:0 offset:9*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 136);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else if ((((((((((((defined_token_c3524ff0dce64492(pk)/*[break]*/ || defined_token_b9a9416a75e8c551(pk)/*[case] [catch] [const] [continue]*/) || defined_token_05441863ef2044a2(pk)/*[debugger] [default] [do]*/) || defined_token_eb7f69039a78f607(pk)/*[else] [export] [extends]*/) || defined_token_d7fada38689346c4(pk)/*[finally] [for]*/) || defined_token_150d4ae08ded9ad2(pk)/*[if] [in] [instanceof] [implements] [interface]*/) || defined_token_876f036172605c26(pk)/*[return]*/) || defined_token_c4d5aeb40acb5412(pk)/*[switch]*/) || defined_token_4d1002802d53d117(pk)/*[throw] [try]*/) || defined_token_f9bb6ce14e19288e(pk)/*[var]*/) || defined_token_aac16ca323764d7a(pk)/*[while] [with]*/) || defined_token_d8f9d336d83ac87c(pk)/*[yield]*/) || defined_token_dc17de0546cfa0c9(pk)/*[package] [protected] [private] [public]*/) {
                        /*peek*/
                        /*
                           94:245 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                           94:250 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { function_body }
                           94:251 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                           94:259 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { }
                        */
                        /*peek_level:-1 offset:2 -- clause*/
                        /*async*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                            /*consume*/
                            /*
                               94:245 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                               94:250 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { function_body }
                               94:251 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                               94:259 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { }
                            */
                            /*peek_level:-1 offset:3 -- clause*/
                            /*83*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $yield_expression_group_0143_115(l, state)) {
                                /*assert*/
                                /*
                                   94:245 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                                   94:250 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { function_body }
                                   94:251 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                                   94:259 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { }
                                */
                                /*peek_level:-1 offset:4 -- clause*/
                                /*155*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $property_name(l, state)) {
                                    /*assert*/
                                    /*
                                       94:245 method_definition=>τasync yield_expression_group_0143_115 • property_name ( unique_formal_parameters ) { function_body }
                                       94:250 method_definition=>τasync yield_expression_group_0143_115 • property_name ( ) { function_body }
                                       94:251 method_definition=>τasync yield_expression_group_0143_115 • property_name ( unique_formal_parameters ) { }
                                       94:259 method_definition=>τasync yield_expression_group_0143_115 • property_name ( ) { }
                                    */
                                    /*peek_level:-1 offset:5 -- clause*/
                                    /*(*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                        /*consume*/
                                        /*
                                           94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                           94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { function_body }
                                           94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                           94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { }
                                        */
                                        /*peek_level:0 offset:6 -- clause*/
                                        /*) ... { [ async get set target as from _ $ id*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (l.utf == 41/*[)]*/) {
                                            /*peek*/
                                            /*
                                               94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { function_body }
                                               94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { }
                                            */
                                            /*peek_level:-1 offset:8 -- clause*/
                                            /*)*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                /*consume*/
                                                /*
                                                   94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) • { function_body }
                                                   94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) • { }
                                                */
                                                /*peek_level:-1 offset:9 -- clause*/
                                                /*{*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                       94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • }
                                                    */
                                                    /*peek_level:0 offset:10 -- clause*/
                                                    /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (l.utf == 125/*[}]*/) {
                                                        /*peek*/
                                                        /*
                                                           94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                           94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • }
                                                        */
                                                        /*peek_level:1 offset:10 -- clause*/
                                                        /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                        let pk = l.copy();
                                                        sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                        if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                            /*peek*/
                                                            /*
                                                               94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                               94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • }
                                                            */
                                                            let mk = mark();
                                                            let anchor = l.copy();
                                                            let anchor_state = state;
                                                            /*250,8,6,259,7,6*/
                                                            /*94*/
                                                            /*peek_level:-1 offset:10*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 132);
                                                                    return $method_definition_goto(l, state, 94);
                                                                }
                                                            }
                                                            /*250,8,6,259,7,6*/
                                                            state = reset(mk, anchor, l, anchor_state);
                                                            /*peek_level:-1 offset:10 -- clause*/
                                                            /*}*/
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*consume*/
                                                                /*
                                                                   94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { } •
                                                                */
                                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                                /*peek_level:-1 offset:10*/
                                                                add_reduce(state, 7, 141);
                                                                return $method_definition_goto(l, state, 94);
                                                            }
                                                        } else {
                                                            /*peek-production-closure*/
                                                            /*
                                                               94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                            */
                                                            /*peek_level:1 offset:10*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 132);
                                                                    return $method_definition_goto(l, state, 94);
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                        */
                                                        /*peek_level:0 offset:10*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 132);
                                                                return $method_definition_goto(l, state, 94);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                               94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                            */
                                            /*peek_level:-1 offset:8 -- clause*/
                                            /*75*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $unique_formal_parameters(l, state)) {
                                                /*assert*/
                                                /*
                                                   94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                                   94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                                */
                                                /*peek_level:-1 offset:9 -- clause*/
                                                /*)*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) • { function_body }
                                                       94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) • { }
                                                    */
                                                    /*peek_level:-1 offset:10 -- clause*/
                                                    /*{*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                        /*consume*/
                                                        /*
                                                           94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                           94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                        */
                                                        /*peek_level:0 offset:11 -- clause*/
                                                        /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (l.utf == 125/*[}]*/) {
                                                            /*peek*/
                                                            /*
                                                               94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                               94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                            */
                                                            /*peek_level:1 offset:11 -- clause*/
                                                            /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                            let pk = l.copy();
                                                            sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                            if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                                /*peek*/
                                                                /*
                                                                   94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                                   94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                                */
                                                                let mk = mark();
                                                                let anchor = l.copy();
                                                                let anchor_state = state;
                                                                /*245,9,7,251,8,7*/
                                                                /*94*/
                                                                /*peek_level:-1 offset:11*/
                                                                if (state = $function_statement_list(l, state)) {
                                                                    add_reduce(state, 1, 105);
                                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                                        add_reduce(state, 9, 127);
                                                                        return $method_definition_goto(l, state, 94);
                                                                    }
                                                                }
                                                                /*245,9,7,251,8,7*/
                                                                state = reset(mk, anchor, l, anchor_state);
                                                                /*peek_level:-1 offset:11 -- clause*/
                                                                /*}*/
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*consume*/
                                                                    /*
                                                                       94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { } •
                                                                    */
                                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                                    /*peek_level:-1 offset:11*/
                                                                    add_reduce(state, 8, 133);
                                                                    return $method_definition_goto(l, state, 94);
                                                                }
                                                            } else {
                                                                /*peek-production-closure*/
                                                                /*
                                                                   94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                                */
                                                                /*peek_level:1 offset:11*/
                                                                if (state = $function_statement_list(l, state)) {
                                                                    add_reduce(state, 1, 105);
                                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                                        add_reduce(state, 9, 127);
                                                                        return $method_definition_goto(l, state, 94);
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            /*peek-production-closure*/
                                                            /*
                                                               94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                            */
                                                            /*peek_level:0 offset:11*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 9, 127);
                                                                    return $method_definition_goto(l, state, 94);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else if (((((defined_token_6d4f77707d3e0e5a(pk)/*[++]*/ || defined_token_f2ef34011f64cef0(pk)/*[--]*/) || defined_token_19cd74c69f5512e8(pk)/*[``]*/) || assert_table(pk, 0x0, 0xa996, 0x88000000, 0x48000001)/*tbl:[ _ ] [ $ ] [ " ] [ ' ] [ [ ] [ + ] [ ~ ] [ ! ] [ - ] [ ( ] [ { ] [ / ] [ ` ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                        /*peek*/
                        /*
                           94:245 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                           94:250 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { function_body }
                           94:251 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                           94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                           94:259 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { }
                           94:260 method_definition=>• property_name ( ) { function_body }
                           94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                           94:264 method_definition=>• property_name ( ) { }
                        */
                        /*peek_level:-1 offset:2 -- clause*/
                        /*async*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                            /*consume*/
                            /*
                               94:245 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                               94:250 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { function_body }
                               94:251 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                               191:538 unreserved_word=>τasync •
                               94:259 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { }
                            */
                            /*peek_level:-1 offset:3 -- clause*/
                            /*83 from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                            sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                            if (state = $yield_expression_group_0143_115(l, state)) {
                                /*assert*/
                                /*
                                   94:245 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                                   94:250 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { function_body }
                                   94:251 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                                   94:259 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { }
                                */
                                /*peek_level:-1 offset:4 -- clause*/
                                /*155*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $property_name(l, state)) {
                                    /*assert*/
                                    /*
                                       94:245 method_definition=>τasync yield_expression_group_0143_115 • property_name ( unique_formal_parameters ) { function_body }
                                       94:250 method_definition=>τasync yield_expression_group_0143_115 • property_name ( ) { function_body }
                                       94:251 method_definition=>τasync yield_expression_group_0143_115 • property_name ( unique_formal_parameters ) { }
                                       94:259 method_definition=>τasync yield_expression_group_0143_115 • property_name ( ) { }
                                    */
                                    /*peek_level:-1 offset:5 -- clause*/
                                    /*(*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                        /*consume*/
                                        /*
                                           94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                           94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { function_body }
                                           94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                           94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { }
                                        */
                                        /*peek_level:0 offset:6 -- clause*/
                                        /*) ... { [ async get set target as from _ $ id*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (l.utf == 41/*[)]*/) {
                                            /*peek*/
                                            /*
                                               94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { function_body }
                                               94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { }
                                            */
                                            /*peek_level:-1 offset:8 -- clause*/
                                            /*)*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                /*consume*/
                                                /*
                                                   94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) • { function_body }
                                                   94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) • { }
                                                */
                                                /*peek_level:-1 offset:9 -- clause*/
                                                /*{*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                       94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • }
                                                    */
                                                    /*peek_level:0 offset:10 -- clause*/
                                                    /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (l.utf == 125/*[}]*/) {
                                                        /*peek*/
                                                        /*
                                                           94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                           94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • }
                                                        */
                                                        /*peek_level:1 offset:10 -- clause*/
                                                        /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                        let pk = l.copy();
                                                        sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                        if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                            /*peek*/
                                                            /*
                                                               94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                               94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • }
                                                            */
                                                            let mk = mark();
                                                            let anchor = l.copy();
                                                            let anchor_state = state;
                                                            /*250,8,6,259,7,6*/
                                                            /*94*/
                                                            /*peek_level:-1 offset:10*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 132);
                                                                    return $method_definition_goto(l, state, 94);
                                                                }
                                                            }
                                                            /*250,8,6,259,7,6*/
                                                            state = reset(mk, anchor, l, anchor_state);
                                                            /*peek_level:-1 offset:10 -- clause*/
                                                            /*}*/
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*consume*/
                                                                /*
                                                                   94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { } •
                                                                */
                                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                                /*peek_level:-1 offset:10*/
                                                                add_reduce(state, 7, 141);
                                                                return $method_definition_goto(l, state, 94);
                                                            }
                                                        } else {
                                                            /*peek-production-closure*/
                                                            /*
                                                               94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                            */
                                                            /*peek_level:1 offset:10*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 132);
                                                                    return $method_definition_goto(l, state, 94);
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                        */
                                                        /*peek_level:0 offset:10*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 132);
                                                                return $method_definition_goto(l, state, 94);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                               94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                            */
                                            /*peek_level:-1 offset:8 -- clause*/
                                            /*75*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $unique_formal_parameters(l, state)) {
                                                /*assert*/
                                                /*
                                                   94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                                   94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                                */
                                                /*peek_level:-1 offset:9 -- clause*/
                                                /*)*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) • { function_body }
                                                       94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) • { }
                                                    */
                                                    /*peek_level:-1 offset:10 -- clause*/
                                                    /*{*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                        /*consume*/
                                                        /*
                                                           94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                           94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                        */
                                                        /*peek_level:0 offset:11 -- clause*/
                                                        /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (l.utf == 125/*[}]*/) {
                                                            /*peek*/
                                                            /*
                                                               94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                               94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                            */
                                                            /*peek_level:1 offset:11 -- clause*/
                                                            /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                            let pk = l.copy();
                                                            sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                            if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                                /*peek*/
                                                                /*
                                                                   94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                                   94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                                */
                                                                let mk = mark();
                                                                let anchor = l.copy();
                                                                let anchor_state = state;
                                                                /*245,9,7,251,8,7*/
                                                                /*94*/
                                                                /*peek_level:-1 offset:11*/
                                                                if (state = $function_statement_list(l, state)) {
                                                                    add_reduce(state, 1, 105);
                                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                                        add_reduce(state, 9, 127);
                                                                        return $method_definition_goto(l, state, 94);
                                                                    }
                                                                }
                                                                /*245,9,7,251,8,7*/
                                                                state = reset(mk, anchor, l, anchor_state);
                                                                /*peek_level:-1 offset:11 -- clause*/
                                                                /*}*/
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*consume*/
                                                                    /*
                                                                       94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { } •
                                                                    */
                                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                                    /*peek_level:-1 offset:11*/
                                                                    add_reduce(state, 8, 133);
                                                                    return $method_definition_goto(l, state, 94);
                                                                }
                                                            } else {
                                                                /*peek-production-closure*/
                                                                /*
                                                                   94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                                */
                                                                /*peek_level:1 offset:11*/
                                                                if (state = $function_statement_list(l, state)) {
                                                                    add_reduce(state, 1, 105);
                                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                                        add_reduce(state, 9, 127);
                                                                        return $method_definition_goto(l, state, 94);
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            /*peek-production-closure*/
                                                            /*
                                                               94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                            */
                                                            /*peek_level:0 offset:11*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 9, 127);
                                                                    return $method_definition_goto(l, state, 94);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                /*assert-end*/
                                /*
                                   191:538 unreserved_word=>τasync •
                                */
                                /*--unique-id--155--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:4*/
                                add_reduce(state, 1, 246);
                                add_reduce(state, 1, 214);
                                return $method_definition_goto(l, state, 155);
                            }
                        }
                    }
                } else if ((((defined_token_e021d8532f9147fd(pk)/*[extends]*/ || defined_token_af69c622b99813ca(pk)/*[in] [instanceof]*/) || defined_token_fcc8b8fe09802878(pk)/*[as]*/) || defined_token_14469127dc9c2c1f(pk)/*[from]*/) || (pk.utf == 91/*[[]*/)) {
                    /*peek*/
                    /*
                       94:249 method_definition=>• τasync property_name ( unique_formal_parameters ) { function_body }
                       94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                       94:257 method_definition=>• τasync property_name ( ) { function_body }
                       94:258 method_definition=>• τasync property_name ( unique_formal_parameters ) { }
                       94:260 method_definition=>• property_name ( ) { function_body }
                       94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                       94:263 method_definition=>• τasync property_name ( ) { }
                       94:264 method_definition=>• property_name ( ) { }
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*async*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                        /*consume*/
                        /*
                           94:249 method_definition=>τasync • property_name ( unique_formal_parameters ) { function_body }
                           191:538 unreserved_word=>τasync •
                           94:257 method_definition=>τasync • property_name ( ) { function_body }
                           94:258 method_definition=>τasync • property_name ( unique_formal_parameters ) { }
                           94:263 method_definition=>τasync • property_name ( ) { }
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*155 from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        if (state = $property_name(l, state)) {
                            /*assert*/
                            /*
                               94:249 method_definition=>τasync • property_name ( unique_formal_parameters ) { function_body }
                               94:257 method_definition=>τasync • property_name ( ) { function_body }
                               94:258 method_definition=>τasync • property_name ( unique_formal_parameters ) { }
                               94:263 method_definition=>τasync • property_name ( ) { }
                            */
                            /*peek_level:-1 offset:4 -- clause*/
                            /*(*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                /*consume*/
                                /*
                                   94:249 method_definition=>τasync property_name ( • unique_formal_parameters ) { function_body }
                                   94:257 method_definition=>τasync property_name ( • ) { function_body }
                                   94:258 method_definition=>τasync property_name ( • unique_formal_parameters ) { }
                                   94:263 method_definition=>τasync property_name ( • ) { }
                                */
                                /*peek_level:0 offset:5 -- clause*/
                                /*) ... { [ async get set target as from _ $ id*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (l.utf == 41/*[)]*/) {
                                    /*peek*/
                                    /*
                                       94:257 method_definition=>τasync property_name ( • ) { function_body }
                                       94:263 method_definition=>τasync property_name ( • ) { }
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*)*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*consume*/
                                        /*
                                           94:257 method_definition=>τasync property_name ( ) • { function_body }
                                           94:263 method_definition=>τasync property_name ( ) • { }
                                        */
                                        /*peek_level:-1 offset:8 -- clause*/
                                        /*{*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                            /*consume*/
                                            /*
                                               94:257 method_definition=>τasync property_name ( ) { • function_body }
                                               94:263 method_definition=>τasync property_name ( ) { • }
                                            */
                                            /*peek_level:0 offset:9 -- clause*/
                                            /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (l.utf == 125/*[}]*/) {
                                                /*peek*/
                                                /*
                                                   94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                   94:263 method_definition=>τasync property_name ( ) { • }
                                                */
                                                /*peek_level:1 offset:9 -- clause*/
                                                /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                let pk = l.copy();
                                                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                       94:263 method_definition=>τasync property_name ( ) { • }
                                                    */
                                                    let mk = mark();
                                                    let anchor = l.copy();
                                                    let anchor_state = state;
                                                    /*257,7,5,263,6,5*/
                                                    /*94*/
                                                    /*peek_level:-1 offset:9*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 139);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                    /*257,7,5,263,6,5*/
                                                    state = reset(mk, anchor, l, anchor_state);
                                                    /*peek_level:-1 offset:9 -- clause*/
                                                    /*}*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*consume*/
                                                        /*
                                                           94:263 method_definition=>τasync property_name ( ) { } •
                                                        */
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        /*peek_level:-1 offset:9*/
                                                        add_reduce(state, 6, 145);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                    */
                                                    /*peek_level:1 offset:9*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 139);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                */
                                                /*peek_level:0 offset:9*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 139);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    /*peek-production-closure*/
                                    /*
                                       94:249 method_definition=>τasync property_name ( • unique_formal_parameters ) { function_body }
                                       94:258 method_definition=>τasync property_name ( • unique_formal_parameters ) { }
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*75*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $unique_formal_parameters(l, state)) {
                                        /*assert*/
                                        /*
                                           94:249 method_definition=>τasync property_name ( • unique_formal_parameters ) { function_body }
                                           94:258 method_definition=>τasync property_name ( • unique_formal_parameters ) { }
                                        */
                                        /*peek_level:-1 offset:8 -- clause*/
                                        /*)*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            /*consume*/
                                            /*
                                               94:249 method_definition=>τasync property_name ( unique_formal_parameters ) • { function_body }
                                               94:258 method_definition=>τasync property_name ( unique_formal_parameters ) • { }
                                            */
                                            /*peek_level:-1 offset:9 -- clause*/
                                            /*{*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                /*consume*/
                                                /*
                                                   94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                   94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { • }
                                                */
                                                /*peek_level:0 offset:10 -- clause*/
                                                /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (l.utf == 125/*[}]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                       94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { • }
                                                    */
                                                    /*peek_level:1 offset:10 -- clause*/
                                                    /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                    let pk = l.copy();
                                                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                    if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                        /*peek*/
                                                        /*
                                                           94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                           94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { • }
                                                        */
                                                        let mk = mark();
                                                        let anchor = l.copy();
                                                        let anchor_state = state;
                                                        /*249,8,6,258,7,6*/
                                                        /*94*/
                                                        /*peek_level:-1 offset:10*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 131);
                                                                return $method_definition_goto(l, state, 94);
                                                            }
                                                        }
                                                        /*249,8,6,258,7,6*/
                                                        state = reset(mk, anchor, l, anchor_state);
                                                        /*peek_level:-1 offset:10 -- clause*/
                                                        /*}*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*consume*/
                                                            /*
                                                               94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { } •
                                                            */
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            /*peek_level:-1 offset:10*/
                                                            add_reduce(state, 7, 140);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                        */
                                                        /*peek_level:1 offset:10*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 131);
                                                                return $method_definition_goto(l, state, 94);
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                    */
                                                    /*peek_level:0 offset:10*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 8, 131);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            /*assert-end*/
                            /*
                               191:538 unreserved_word=>τasync •
                            */
                            /*--unique-id--155--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:4*/
                            add_reduce(state, 1, 246);
                            add_reduce(state, 1, 214);
                            return $method_definition_goto(l, state, 155);
                        }
                    }
                } else if ((((((((((((((((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || defined_token_f5b15d408b6280ad(pk)/*[?.] [??]*/) || defined_token_19cd74c69f5512e8(pk)/*[``]*/) || defined_token_8c647931e6bf0c07(pk)/*[--] [-=]*/) || defined_token_7330fb2be3dc26eb(pk)/*[++] [+=]*/) || defined_token_37edf5ebc00dbfe6(pk)/*[/=]*/) || defined_token_2c342d130718e813(pk)/*[%=]*/) || defined_token_318c95b1e64de46d(pk)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(pk)/*[>>=] [>>>=] [>>>] [>>] [>=]*/) || defined_token_2c51a4b82e64ba22(pk)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(pk)/*[^=]*/) || defined_token_d1de557e71993f67(pk)/*[|=] [||]*/) || defined_token_485338d34f29b52a(pk)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_04e94f0279c3936b(pk)/*[!==] [!=]*/) || defined_token_4df9552a310b74e2(pk)/*[===] [==]*/) || defined_token_c6b5fbb944702d5a(pk)/*[of]*/) || assert_table(pk, 0x0, 0xfc00fb60, 0x60000000, 0x38000001)/*tbl:[ ( ] [ ` ] [ . ] [ = ] [ % ] [ / ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ ] ] [ : ] [ ) ] [ ; ] [ , ] [ } ] [ { ]*/) {
                    /*peek-production-closure*/
                    /*
                       94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                       94:260 method_definition=>• property_name ( ) { function_body }
                       94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                       94:264 method_definition=>• property_name ( ) { }
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*155*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $property_name(l, state)) {
                        /*assert*/
                        /*
                           94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                           94:260 method_definition=>• property_name ( ) { function_body }
                           94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                           94:264 method_definition=>• property_name ( ) { }
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*(*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                            /*consume*/
                            /*
                               94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                               94:260 method_definition=>property_name ( • ) { function_body }
                               94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                               94:264 method_definition=>property_name ( • ) { }
                            */
                            /*peek_level:0 offset:4 -- clause*/
                            /*) ... { [ async get set target as from _ $ id*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (l.utf == 41/*[)]*/) {
                                /*peek*/
                                /*
                                   94:260 method_definition=>property_name ( • ) { function_body }
                                   94:264 method_definition=>property_name ( • ) { }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*)*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*consume*/
                                    /*
                                       94:260 method_definition=>property_name ( ) • { function_body }
                                       94:264 method_definition=>property_name ( ) • { }
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*{*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                        /*consume*/
                                        /*
                                           94:260 method_definition=>property_name ( ) { • function_body }
                                           94:264 method_definition=>property_name ( ) { • }
                                        */
                                        /*peek_level:0 offset:8 -- clause*/
                                        /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (l.utf == 125/*[}]*/) {
                                            /*peek*/
                                            /*
                                               94:260 method_definition=>property_name ( ) { • function_body }
                                               94:264 method_definition=>property_name ( ) { • }
                                            */
                                            /*peek_level:1 offset:8 -- clause*/
                                            /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                            let pk = l.copy();
                                            sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                            if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                /*peek*/
                                                /*
                                                   94:260 method_definition=>property_name ( ) { • function_body }
                                                   94:264 method_definition=>property_name ( ) { • }
                                                */
                                                let mk = mark();
                                                let anchor = l.copy();
                                                let anchor_state = state;
                                                /*260,6,4,264,5,4*/
                                                /*94*/
                                                /*peek_level:-1 offset:8*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 6, 142);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                                /*260,6,4,264,5,4*/
                                                state = reset(mk, anchor, l, anchor_state);
                                                /*peek_level:-1 offset:8 -- clause*/
                                                /*}*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:264 method_definition=>property_name ( ) { } •
                                                    */
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    /*peek_level:-1 offset:8*/
                                                    add_reduce(state, 5, 146);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:260 method_definition=>property_name ( ) { • function_body }
                                                */
                                                /*peek_level:1 offset:8*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 6, 142);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:260 method_definition=>property_name ( ) { • function_body }
                                            */
                                            /*peek_level:0 offset:8*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    add_reduce(state, 6, 142);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                /*peek-production-closure*/
                                /*
                                   94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                                   94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*75*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $unique_formal_parameters(l, state)) {
                                    /*assert*/
                                    /*
                                       94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                                       94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*)*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*consume*/
                                        /*
                                           94:254 method_definition=>property_name ( unique_formal_parameters ) • { function_body }
                                           94:261 method_definition=>property_name ( unique_formal_parameters ) • { }
                                        */
                                        /*peek_level:-1 offset:8 -- clause*/
                                        /*{*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                            /*consume*/
                                            /*
                                               94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                               94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                            */
                                            /*peek_level:0 offset:9 -- clause*/
                                            /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (l.utf == 125/*[}]*/) {
                                                /*peek*/
                                                /*
                                                   94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                   94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                                */
                                                /*peek_level:1 offset:9 -- clause*/
                                                /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                let pk = l.copy();
                                                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                       94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                                    */
                                                    let mk = mark();
                                                    let anchor = l.copy();
                                                    let anchor_state = state;
                                                    /*254,7,5,261,6,5*/
                                                    /*94*/
                                                    /*peek_level:-1 offset:9*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 136);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                    /*254,7,5,261,6,5*/
                                                    state = reset(mk, anchor, l, anchor_state);
                                                    /*peek_level:-1 offset:9 -- clause*/
                                                    /*}*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*consume*/
                                                        /*
                                                           94:261 method_definition=>property_name ( unique_formal_parameters ) { } •
                                                        */
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        /*peek_level:-1 offset:9*/
                                                        add_reduce(state, 6, 143);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                    */
                                                    /*peek_level:1 offset:9*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 136);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                */
                                                /*peek_level:0 offset:9*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 136);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else if ((assert_table(pk, 0x0, 0x94, 0x80000000, 0x0)/*tbl:[ _ ] [ $ ] [ " ] [ ' ]*/ || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                    /*peek*/
                    /*
                       94:249 method_definition=>• τasync property_name ( unique_formal_parameters ) { function_body }
                       94:257 method_definition=>• τasync property_name ( ) { function_body }
                       94:258 method_definition=>• τasync property_name ( unique_formal_parameters ) { }
                       94:263 method_definition=>• τasync property_name ( ) { }
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*async*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                        /*consume*/
                        /*
                           94:249 method_definition=>τasync • property_name ( unique_formal_parameters ) { function_body }
                           94:257 method_definition=>τasync • property_name ( ) { function_body }
                           94:258 method_definition=>τasync • property_name ( unique_formal_parameters ) { }
                           94:263 method_definition=>τasync • property_name ( ) { }
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*155*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $property_name(l, state)) {
                            /*assert*/
                            /*
                               94:249 method_definition=>τasync • property_name ( unique_formal_parameters ) { function_body }
                               94:257 method_definition=>τasync • property_name ( ) { function_body }
                               94:258 method_definition=>τasync • property_name ( unique_formal_parameters ) { }
                               94:263 method_definition=>τasync • property_name ( ) { }
                            */
                            /*peek_level:-1 offset:4 -- clause*/
                            /*(*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                /*consume*/
                                /*
                                   94:249 method_definition=>τasync property_name ( • unique_formal_parameters ) { function_body }
                                   94:257 method_definition=>τasync property_name ( • ) { function_body }
                                   94:258 method_definition=>τasync property_name ( • unique_formal_parameters ) { }
                                   94:263 method_definition=>τasync property_name ( • ) { }
                                */
                                /*peek_level:0 offset:5 -- clause*/
                                /*) ... { [ async get set target as from _ $ id*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (l.utf == 41/*[)]*/) {
                                    /*peek*/
                                    /*
                                       94:257 method_definition=>τasync property_name ( • ) { function_body }
                                       94:263 method_definition=>τasync property_name ( • ) { }
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*)*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*consume*/
                                        /*
                                           94:257 method_definition=>τasync property_name ( ) • { function_body }
                                           94:263 method_definition=>τasync property_name ( ) • { }
                                        */
                                        /*peek_level:-1 offset:8 -- clause*/
                                        /*{*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                            /*consume*/
                                            /*
                                               94:257 method_definition=>τasync property_name ( ) { • function_body }
                                               94:263 method_definition=>τasync property_name ( ) { • }
                                            */
                                            /*peek_level:0 offset:9 -- clause*/
                                            /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (l.utf == 125/*[}]*/) {
                                                /*peek*/
                                                /*
                                                   94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                   94:263 method_definition=>τasync property_name ( ) { • }
                                                */
                                                /*peek_level:1 offset:9 -- clause*/
                                                /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                let pk = l.copy();
                                                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                       94:263 method_definition=>τasync property_name ( ) { • }
                                                    */
                                                    let mk = mark();
                                                    let anchor = l.copy();
                                                    let anchor_state = state;
                                                    /*257,7,5,263,6,5*/
                                                    /*94*/
                                                    /*peek_level:-1 offset:9*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 139);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                    /*257,7,5,263,6,5*/
                                                    state = reset(mk, anchor, l, anchor_state);
                                                    /*peek_level:-1 offset:9 -- clause*/
                                                    /*}*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*consume*/
                                                        /*
                                                           94:263 method_definition=>τasync property_name ( ) { } •
                                                        */
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        /*peek_level:-1 offset:9*/
                                                        add_reduce(state, 6, 145);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                    */
                                                    /*peek_level:1 offset:9*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 139);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                */
                                                /*peek_level:0 offset:9*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 139);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    /*peek-production-closure*/
                                    /*
                                       94:249 method_definition=>τasync property_name ( • unique_formal_parameters ) { function_body }
                                       94:258 method_definition=>τasync property_name ( • unique_formal_parameters ) { }
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*75*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $unique_formal_parameters(l, state)) {
                                        /*assert*/
                                        /*
                                           94:249 method_definition=>τasync property_name ( • unique_formal_parameters ) { function_body }
                                           94:258 method_definition=>τasync property_name ( • unique_formal_parameters ) { }
                                        */
                                        /*peek_level:-1 offset:8 -- clause*/
                                        /*)*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            /*consume*/
                                            /*
                                               94:249 method_definition=>τasync property_name ( unique_formal_parameters ) • { function_body }
                                               94:258 method_definition=>τasync property_name ( unique_formal_parameters ) • { }
                                            */
                                            /*peek_level:-1 offset:9 -- clause*/
                                            /*{*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                /*consume*/
                                                /*
                                                   94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                   94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { • }
                                                */
                                                /*peek_level:0 offset:10 -- clause*/
                                                /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (l.utf == 125/*[}]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                       94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { • }
                                                    */
                                                    /*peek_level:1 offset:10 -- clause*/
                                                    /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                    let pk = l.copy();
                                                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                    if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                        /*peek*/
                                                        /*
                                                           94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                           94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { • }
                                                        */
                                                        let mk = mark();
                                                        let anchor = l.copy();
                                                        let anchor_state = state;
                                                        /*249,8,6,258,7,6*/
                                                        /*94*/
                                                        /*peek_level:-1 offset:10*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 131);
                                                                return $method_definition_goto(l, state, 94);
                                                            }
                                                        }
                                                        /*249,8,6,258,7,6*/
                                                        state = reset(mk, anchor, l, anchor_state);
                                                        /*peek_level:-1 offset:10 -- clause*/
                                                        /*}*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*consume*/
                                                            /*
                                                               94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { } •
                                                            */
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            /*peek_level:-1 offset:10*/
                                                            add_reduce(state, 7, 140);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                        */
                                                        /*peek_level:1 offset:10*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 131);
                                                                return $method_definition_goto(l, state, 94);
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                    */
                                                    /*peek_level:0 offset:10*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 8, 131);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else if (defined_token_8f5d282f35165648(l)/*[get]*/) {
                /*peek*/
                /*
                   94:246 method_definition=>• τget property_name ( ) { function_body }
                   94:252 method_definition=>• τget property_name ( ) { }
                   94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                   94:260 method_definition=>• property_name ( ) { function_body }
                   94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                   94:264 method_definition=>• property_name ( ) { }
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*get*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, defined_token_8f5d282f35165648(l)/*[get]*/)) {
                    /*consume*/
                    /*
                       94:246 method_definition=>τget • property_name ( ) { function_body }
                       94:252 method_definition=>τget • property_name ( ) { }
                       191:539 unreserved_word=>τget •
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*155 from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                    sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                    if (state = $property_name(l, state)) {
                        /*assert*/
                        /*
                           94:246 method_definition=>τget • property_name ( ) { function_body }
                           94:252 method_definition=>τget • property_name ( ) { }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*(*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                            /*consume*/
                            /*
                               94:246 method_definition=>τget property_name ( • ) { function_body }
                               94:252 method_definition=>τget property_name ( • ) { }
                            */
                            /*peek_level:-1 offset:5 -- clause*/
                            /*)*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                /*consume*/
                                /*
                                   94:246 method_definition=>τget property_name ( ) • { function_body }
                                   94:252 method_definition=>τget property_name ( ) • { }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*{*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                    /*consume*/
                                    /*
                                       94:246 method_definition=>τget property_name ( ) { • function_body }
                                       94:252 method_definition=>τget property_name ( ) { • }
                                    */
                                    /*peek_level:0 offset:7 -- clause*/
                                    /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (l.utf == 125/*[}]*/) {
                                        /*peek*/
                                        /*
                                           94:246 method_definition=>τget property_name ( ) { • function_body }
                                           94:252 method_definition=>τget property_name ( ) { • }
                                        */
                                        /*peek_level:1 offset:7 -- clause*/
                                        /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                        let pk = l.copy();
                                        sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                        if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                            /*peek*/
                                            /*
                                               94:246 method_definition=>τget property_name ( ) { • function_body }
                                               94:252 method_definition=>τget property_name ( ) { • }
                                            */
                                            let mk = mark();
                                            let anchor = l.copy();
                                            let anchor_state = state;
                                            /*246,7,5,252,6,5*/
                                            /*94*/
                                            /*peek_level:-1 offset:7*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    add_reduce(state, 7, 128);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            }
                                            /*246,7,5,252,6,5*/
                                            state = reset(mk, anchor, l, anchor_state);
                                            /*peek_level:-1 offset:7 -- clause*/
                                            /*}*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*consume*/
                                                /*
                                                   94:252 method_definition=>τget property_name ( ) { } •
                                                */
                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                /*peek_level:-1 offset:7*/
                                                add_reduce(state, 6, 134);
                                                return $method_definition_goto(l, state, 94);
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:246 method_definition=>τget property_name ( ) { • function_body }
                                            */
                                            /*peek_level:1 offset:7*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    add_reduce(state, 7, 128);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            }
                                        }
                                    } else {
                                        /*peek-production-closure*/
                                        /*
                                           94:246 method_definition=>τget property_name ( ) { • function_body }
                                        */
                                        /*peek_level:0 offset:7*/
                                        if (state = $function_statement_list(l, state)) {
                                            add_reduce(state, 1, 105);
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                add_reduce(state, 7, 128);
                                                return $method_definition_goto(l, state, 94);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        /*assert-end*/
                        /*
                           191:539 unreserved_word=>τget •
                        */
                        /*--unique-id--155--DO-NOT-REPLACE*/
                        /*peek_level:0 offset:4*/
                        add_reduce(state, 1, 246);
                        add_reduce(state, 1, 214);
                        return $method_definition_goto(l, state, 155);
                    }
                }
            } else if (defined_token_5bca542dce980d9c(l)/*[set]*/) {
                /*peek*/
                /*
                   94:247 method_definition=>• τset property_name ( property_set_parameter_list ) { function_body }
                   94:253 method_definition=>• τset property_name ( property_set_parameter_list ) { }
                   94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                   94:260 method_definition=>• property_name ( ) { function_body }
                   94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                   94:264 method_definition=>• property_name ( ) { }
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*set*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, defined_token_5bca542dce980d9c(l)/*[set]*/)) {
                    /*consume*/
                    /*
                       94:247 method_definition=>τset • property_name ( property_set_parameter_list ) { function_body }
                       94:253 method_definition=>τset • property_name ( property_set_parameter_list ) { }
                       191:540 unreserved_word=>τset •
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*155 from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                    sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                    if (state = $property_name(l, state)) {
                        /*assert*/
                        /*
                           94:247 method_definition=>τset • property_name ( property_set_parameter_list ) { function_body }
                           94:253 method_definition=>τset • property_name ( property_set_parameter_list ) { }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*(*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                            /*consume*/
                            /*
                               94:247 method_definition=>τset property_name ( • property_set_parameter_list ) { function_body }
                               94:253 method_definition=>τset property_name ( • property_set_parameter_list ) { }
                            */
                            /*peek_level:-1 offset:5 -- clause*/
                            /*95*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $property_set_parameter_list(l, state)) {
                                /*assert*/
                                /*
                                   94:247 method_definition=>τset property_name ( • property_set_parameter_list ) { function_body }
                                   94:253 method_definition=>τset property_name ( • property_set_parameter_list ) { }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*)*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*consume*/
                                    /*
                                       94:247 method_definition=>τset property_name ( property_set_parameter_list ) • { function_body }
                                       94:253 method_definition=>τset property_name ( property_set_parameter_list ) • { }
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*{*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                        /*consume*/
                                        /*
                                           94:247 method_definition=>τset property_name ( property_set_parameter_list ) { • function_body }
                                           94:253 method_definition=>τset property_name ( property_set_parameter_list ) { • }
                                        */
                                        /*peek_level:0 offset:8 -- clause*/
                                        /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (l.utf == 125/*[}]*/) {
                                            /*peek*/
                                            /*
                                               94:247 method_definition=>τset property_name ( property_set_parameter_list ) { • function_body }
                                               94:253 method_definition=>τset property_name ( property_set_parameter_list ) { • }
                                            */
                                            /*peek_level:1 offset:8 -- clause*/
                                            /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                            let pk = l.copy();
                                            sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                            if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                /*peek*/
                                                /*
                                                   94:247 method_definition=>τset property_name ( property_set_parameter_list ) { • function_body }
                                                   94:253 method_definition=>τset property_name ( property_set_parameter_list ) { • }
                                                */
                                                let mk = mark();
                                                let anchor = l.copy();
                                                let anchor_state = state;
                                                /*247,8,6,253,7,6*/
                                                /*94*/
                                                /*peek_level:-1 offset:8*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 8, 129);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                                /*247,8,6,253,7,6*/
                                                state = reset(mk, anchor, l, anchor_state);
                                                /*peek_level:-1 offset:8 -- clause*/
                                                /*}*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:253 method_definition=>τset property_name ( property_set_parameter_list ) { } •
                                                    */
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    /*peek_level:-1 offset:8*/
                                                    add_reduce(state, 7, 135);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:247 method_definition=>τset property_name ( property_set_parameter_list ) { • function_body }
                                                */
                                                /*peek_level:1 offset:8*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 8, 129);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:247 method_definition=>τset property_name ( property_set_parameter_list ) { • function_body }
                                            */
                                            /*peek_level:0 offset:8*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    add_reduce(state, 8, 129);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        /*assert-end*/
                        /*
                           191:540 unreserved_word=>τset •
                        */
                        /*--unique-id--155--DO-NOT-REPLACE*/
                        /*peek_level:0 offset:4*/
                        add_reduce(state, 1, 246);
                        add_reduce(state, 1, 214);
                        return $method_definition_goto(l, state, 155);
                    }
                }
            } else if (l.utf == 42/*[*]*/) {
                /*peek-production-closure*/
                /*
                   94:248 method_definition=>• yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                   94:255 method_definition=>• yield_expression_group_0143_115 property_name ( ) { function_body }
                   94:256 method_definition=>• yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                   94:262 method_definition=>• yield_expression_group_0143_115 property_name ( ) { }
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*83*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $yield_expression_group_0143_115(l, state)) {
                    /*assert*/
                    /*
                       94:248 method_definition=>• yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                       94:255 method_definition=>• yield_expression_group_0143_115 property_name ( ) { function_body }
                       94:256 method_definition=>• yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                       94:262 method_definition=>• yield_expression_group_0143_115 property_name ( ) { }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*155*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $property_name(l, state)) {
                        /*assert*/
                        /*
                           94:248 method_definition=>yield_expression_group_0143_115 • property_name ( unique_formal_parameters ) { function_body }
                           94:255 method_definition=>yield_expression_group_0143_115 • property_name ( ) { function_body }
                           94:256 method_definition=>yield_expression_group_0143_115 • property_name ( unique_formal_parameters ) { }
                           94:262 method_definition=>yield_expression_group_0143_115 • property_name ( ) { }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*(*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                            /*consume*/
                            /*
                               94:248 method_definition=>yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                               94:255 method_definition=>yield_expression_group_0143_115 property_name ( • ) { function_body }
                               94:256 method_definition=>yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                               94:262 method_definition=>yield_expression_group_0143_115 property_name ( • ) { }
                            */
                            /*peek_level:0 offset:5 -- clause*/
                            /*) ... { [ async get set target as from _ $ id*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (l.utf == 41/*[)]*/) {
                                /*peek*/
                                /*
                                   94:255 method_definition=>yield_expression_group_0143_115 property_name ( • ) { function_body }
                                   94:262 method_definition=>yield_expression_group_0143_115 property_name ( • ) { }
                                */
                                /*peek_level:-1 offset:7 -- clause*/
                                /*)*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*consume*/
                                    /*
                                       94:255 method_definition=>yield_expression_group_0143_115 property_name ( ) • { function_body }
                                       94:262 method_definition=>yield_expression_group_0143_115 property_name ( ) • { }
                                    */
                                    /*peek_level:-1 offset:8 -- clause*/
                                    /*{*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                        /*consume*/
                                        /*
                                           94:255 method_definition=>yield_expression_group_0143_115 property_name ( ) { • function_body }
                                           94:262 method_definition=>yield_expression_group_0143_115 property_name ( ) { • }
                                        */
                                        /*peek_level:0 offset:9 -- clause*/
                                        /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (l.utf == 125/*[}]*/) {
                                            /*peek*/
                                            /*
                                               94:255 method_definition=>yield_expression_group_0143_115 property_name ( ) { • function_body }
                                               94:262 method_definition=>yield_expression_group_0143_115 property_name ( ) { • }
                                            */
                                            /*peek_level:1 offset:9 -- clause*/
                                            /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                            let pk = l.copy();
                                            sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                            if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                /*peek*/
                                                /*
                                                   94:255 method_definition=>yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                   94:262 method_definition=>yield_expression_group_0143_115 property_name ( ) { • }
                                                */
                                                let mk = mark();
                                                let anchor = l.copy();
                                                let anchor_state = state;
                                                /*255,7,5,262,6,5*/
                                                /*94*/
                                                /*peek_level:-1 offset:9*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 137);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                                /*255,7,5,262,6,5*/
                                                state = reset(mk, anchor, l, anchor_state);
                                                /*peek_level:-1 offset:9 -- clause*/
                                                /*}*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:262 method_definition=>yield_expression_group_0143_115 property_name ( ) { } •
                                                    */
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    /*peek_level:-1 offset:9*/
                                                    add_reduce(state, 6, 144);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:255 method_definition=>yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                */
                                                /*peek_level:1 offset:9*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 137);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:255 method_definition=>yield_expression_group_0143_115 property_name ( ) { • function_body }
                                            */
                                            /*peek_level:0 offset:9*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    add_reduce(state, 7, 137);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                /*peek-production-closure*/
                                /*
                                   94:248 method_definition=>yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                   94:256 method_definition=>yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                */
                                /*peek_level:-1 offset:7 -- clause*/
                                /*75*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $unique_formal_parameters(l, state)) {
                                    /*assert*/
                                    /*
                                       94:248 method_definition=>yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                       94:256 method_definition=>yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                    */
                                    /*peek_level:-1 offset:8 -- clause*/
                                    /*)*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*consume*/
                                        /*
                                           94:248 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) • { function_body }
                                           94:256 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) • { }
                                        */
                                        /*peek_level:-1 offset:9 -- clause*/
                                        /*{*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                            /*consume*/
                                            /*
                                               94:248 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                               94:256 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                            */
                                            /*peek_level:0 offset:10 -- clause*/
                                            /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (l.utf == 125/*[}]*/) {
                                                /*peek*/
                                                /*
                                                   94:248 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                   94:256 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                */
                                                /*peek_level:1 offset:10 -- clause*/
                                                /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                let pk = l.copy();
                                                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:248 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                       94:256 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                    */
                                                    let mk = mark();
                                                    let anchor = l.copy();
                                                    let anchor_state = state;
                                                    /*248,8,6,256,7,6*/
                                                    /*94*/
                                                    /*peek_level:-1 offset:10*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 8, 130);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                    /*248,8,6,256,7,6*/
                                                    state = reset(mk, anchor, l, anchor_state);
                                                    /*peek_level:-1 offset:10 -- clause*/
                                                    /*}*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*consume*/
                                                        /*
                                                           94:256 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { } •
                                                        */
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        /*peek_level:-1 offset:10*/
                                                        add_reduce(state, 7, 138);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:248 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                    */
                                                    /*peek_level:1 offset:10*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                                            add_reduce(state, 8, 130);
                                                            return $method_definition_goto(l, state, 94);
                                                        }
                                                    }
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:248 method_definition=>yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                */
                                                /*peek_level:0 offset:10*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 8, 130);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                /*peek-production-closure*/
                /*
                   94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                   94:260 method_definition=>• property_name ( ) { function_body }
                   94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                   94:264 method_definition=>• property_name ( ) { }
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*155*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $property_name(l, state)) {
                    /*assert*/
                    /*
                       94:254 method_definition=>• property_name ( unique_formal_parameters ) { function_body }
                       94:260 method_definition=>• property_name ( ) { function_body }
                       94:261 method_definition=>• property_name ( unique_formal_parameters ) { }
                       94:264 method_definition=>• property_name ( ) { }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*(*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                        /*consume*/
                        /*
                           94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                           94:260 method_definition=>property_name ( • ) { function_body }
                           94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                           94:264 method_definition=>property_name ( • ) { }
                        */
                        /*peek_level:0 offset:4 -- clause*/
                        /*) ... { [ async get set target as from _ $ id*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (l.utf == 41/*[)]*/) {
                            /*peek*/
                            /*
                               94:260 method_definition=>property_name ( • ) { function_body }
                               94:264 method_definition=>property_name ( • ) { }
                            */
                            /*peek_level:-1 offset:6 -- clause*/
                            /*)*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                /*consume*/
                                /*
                                   94:260 method_definition=>property_name ( ) • { function_body }
                                   94:264 method_definition=>property_name ( ) • { }
                                */
                                /*peek_level:-1 offset:7 -- clause*/
                                /*{*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                    /*consume*/
                                    /*
                                       94:260 method_definition=>property_name ( ) { • function_body }
                                       94:264 method_definition=>property_name ( ) { • }
                                    */
                                    /*peek_level:0 offset:8 -- clause*/
                                    /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (l.utf == 125/*[}]*/) {
                                        /*peek*/
                                        /*
                                           94:260 method_definition=>property_name ( ) { • function_body }
                                           94:264 method_definition=>property_name ( ) { • }
                                        */
                                        /*peek_level:1 offset:8 -- clause*/
                                        /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                        let pk = l.copy();
                                        sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                        if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                            /*peek*/
                                            /*
                                               94:260 method_definition=>property_name ( ) { • function_body }
                                               94:264 method_definition=>property_name ( ) { • }
                                            */
                                            let mk = mark();
                                            let anchor = l.copy();
                                            let anchor_state = state;
                                            /*260,6,4,264,5,4*/
                                            /*94*/
                                            /*peek_level:-1 offset:8*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    add_reduce(state, 6, 142);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            }
                                            /*260,6,4,264,5,4*/
                                            state = reset(mk, anchor, l, anchor_state);
                                            /*peek_level:-1 offset:8 -- clause*/
                                            /*}*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*consume*/
                                                /*
                                                   94:264 method_definition=>property_name ( ) { } •
                                                */
                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                /*peek_level:-1 offset:8*/
                                                add_reduce(state, 5, 146);
                                                return $method_definition_goto(l, state, 94);
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:260 method_definition=>property_name ( ) { • function_body }
                                            */
                                            /*peek_level:1 offset:8*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    add_reduce(state, 6, 142);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            }
                                        }
                                    } else {
                                        /*peek-production-closure*/
                                        /*
                                           94:260 method_definition=>property_name ( ) { • function_body }
                                        */
                                        /*peek_level:0 offset:8*/
                                        if (state = $function_statement_list(l, state)) {
                                            add_reduce(state, 1, 105);
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                add_reduce(state, 6, 142);
                                                return $method_definition_goto(l, state, 94);
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            /*peek-production-closure*/
                            /*
                               94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                               94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                            */
                            /*peek_level:-1 offset:6 -- clause*/
                            /*75*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $unique_formal_parameters(l, state)) {
                                /*assert*/
                                /*
                                   94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                                   94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                                */
                                /*peek_level:-1 offset:7 -- clause*/
                                /*)*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*consume*/
                                    /*
                                       94:254 method_definition=>property_name ( unique_formal_parameters ) • { function_body }
                                       94:261 method_definition=>property_name ( unique_formal_parameters ) • { }
                                    */
                                    /*peek_level:-1 offset:8 -- clause*/
                                    /*{*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                        /*consume*/
                                        /*
                                           94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                           94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                        */
                                        /*peek_level:0 offset:9 -- clause*/
                                        /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (l.utf == 125/*[}]*/) {
                                            /*peek*/
                                            /*
                                               94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                               94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                            */
                                            /*peek_level:1 offset:9 -- clause*/
                                            /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                            let pk = l.copy();
                                            sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                            if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                /*peek*/
                                                /*
                                                   94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                   94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                                */
                                                let mk = mark();
                                                let anchor = l.copy();
                                                let anchor_state = state;
                                                /*254,7,5,261,6,5*/
                                                /*94*/
                                                /*peek_level:-1 offset:9*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 136);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                                /*254,7,5,261,6,5*/
                                                state = reset(mk, anchor, l, anchor_state);
                                                /*peek_level:-1 offset:9 -- clause*/
                                                /*}*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:261 method_definition=>property_name ( unique_formal_parameters ) { } •
                                                    */
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    /*peek_level:-1 offset:9*/
                                                    add_reduce(state, 6, 143);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                */
                                                /*peek_level:1 offset:9*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--94--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 136);
                                                        return $method_definition_goto(l, state, 94);
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                            */
                                            /*peek_level:0 offset:9*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    add_reduce(state, 7, 136);
                                                    return $method_definition_goto(l, state, 94);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "method_definition RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $method_definition_goto(l, state, prod) {
            debug_stack.push({ name: "method_definition GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:-1 offset:0 -- clause*/
                /*(*/
                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                    /*consume*/
                    /*
                       94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                       94:260 method_definition=>property_name ( • ) { function_body }
                       94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                       94:264 method_definition=>property_name ( • ) { }
                    */
                    /*peek_level:0 offset:2 -- clause*/
                    /*) ... { [ async get set target as from _ $ id*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (l.utf == 41/*[)]*/) {
                        /*peek*/
                        /*
                           94:260 method_definition=>property_name ( • ) { function_body }
                           94:264 method_definition=>property_name ( • ) { }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*)*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            /*consume*/
                            /*
                               94:260 method_definition=>property_name ( ) • { function_body }
                               94:264 method_definition=>property_name ( ) • { }
                            */
                            /*peek_level:-1 offset:5 -- clause*/
                            /*{*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                /*consume*/
                                /*
                                   94:260 method_definition=>property_name ( ) { • function_body }
                                   94:264 method_definition=>property_name ( ) { • }
                                */
                                /*peek_level:0 offset:6 -- clause*/
                                /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (l.utf == 125/*[}]*/) {
                                    /*peek*/
                                    /*
                                       94:260 method_definition=>property_name ( ) { • function_body }
                                       94:264 method_definition=>property_name ( ) { • }
                                    */
                                    /*peek_level:1 offset:6 -- clause*/
                                    /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                    let pk = l.copy();
                                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                    if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                        /*peek*/
                                        /*
                                           94:260 method_definition=>property_name ( ) { • function_body }
                                           94:264 method_definition=>property_name ( ) { • }
                                        */
                                        let mk = mark();
                                        let anchor = l.copy();
                                        let anchor_state = state;
                                        /*260,6,4,264,5,4*/
                                        /*94*/
                                        /*peek_level:-1 offset:6*/
                                        if (state = $function_statement_list(l, state)) {
                                            add_reduce(state, 1, 105);
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                add_reduce(state, 6, 142);
                                                prod = 94;
                                                continue;
                                            }
                                        }
                                        /*260,6,4,264,5,4*/
                                        state = reset(mk, anchor, l, anchor_state);
                                        /*peek_level:-1 offset:6 -- clause*/
                                        /*}*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                            /*consume*/
                                            /*
                                               94:264 method_definition=>property_name ( ) { } •
                                            */
                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                            /*peek_level:-1 offset:6*/
                                            add_reduce(state, 5, 146);
                                            prod = 94;
                                            continue;
                                        }
                                    } else {
                                        /*peek-production-closure*/
                                        /*
                                           94:260 method_definition=>property_name ( ) { • function_body }
                                        */
                                        /*peek_level:1 offset:6*/
                                        if (state = $function_statement_list(l, state)) {
                                            add_reduce(state, 1, 105);
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                add_reduce(state, 6, 142);
                                                prod = 94;
                                                continue;
                                            }
                                        }
                                    }
                                } else {
                                    /*peek-production-closure*/
                                    /*
                                       94:260 method_definition=>property_name ( ) { • function_body }
                                    */
                                    /*peek_level:0 offset:6*/
                                    if (state = $function_statement_list(l, state)) {
                                        add_reduce(state, 1, 105);
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                            /*--unique-id--94--DO-NOT-REPLACE*/
                                            add_reduce(state, 6, 142);
                                            prod = 94;
                                            continue;
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        /*peek-production-closure*/
                        /*
                           94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                           94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*75*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $unique_formal_parameters(l, state)) {
                            /*assert*/
                            /*
                               94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                               94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                            */
                            /*peek_level:-1 offset:5 -- clause*/
                            /*)*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                /*consume*/
                                /*
                                   94:254 method_definition=>property_name ( unique_formal_parameters ) • { function_body }
                                   94:261 method_definition=>property_name ( unique_formal_parameters ) • { }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*{*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                    /*consume*/
                                    /*
                                       94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                       94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                    */
                                    /*peek_level:0 offset:7 -- clause*/
                                    /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (l.utf == 125/*[}]*/) {
                                        /*peek*/
                                        /*
                                           94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                           94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                        */
                                        /*peek_level:1 offset:7 -- clause*/
                                        /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                        let pk = l.copy();
                                        sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                        if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                            /*peek*/
                                            /*
                                               94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                               94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                            */
                                            let mk = mark();
                                            let anchor = l.copy();
                                            let anchor_state = state;
                                            /*254,7,5,261,6,5*/
                                            /*94*/
                                            /*peek_level:-1 offset:7*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    add_reduce(state, 7, 136);
                                                    prod = 94;
                                                    continue;
                                                }
                                            }
                                            /*254,7,5,261,6,5*/
                                            state = reset(mk, anchor, l, anchor_state);
                                            /*peek_level:-1 offset:7 -- clause*/
                                            /*}*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*consume*/
                                                /*
                                                   94:261 method_definition=>property_name ( unique_formal_parameters ) { } •
                                                */
                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                /*peek_level:-1 offset:7*/
                                                add_reduce(state, 6, 143);
                                                prod = 94;
                                                continue;
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                            */
                                            /*peek_level:1 offset:7*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--94--DO-NOT-REPLACE*/
                                                    add_reduce(state, 7, 136);
                                                    prod = 94;
                                                    continue;
                                                }
                                            }
                                        }
                                    } else {
                                        /*peek-production-closure*/
                                        /*
                                           94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                        */
                                        /*peek_level:0 offset:7*/
                                        if (state = $function_statement_list(l, state)) {
                                            add_reduce(state, 1, 105);
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                /*--unique-id--94--DO-NOT-REPLACE*/
                                                add_reduce(state, 7, 136);
                                                prod = 94;
                                                continue;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "method_definition GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 94);
        }
/*production name: property_set_parameter_list
            grammar index: 95
            bodies:
	95:265 property_set_parameter_list=>• formal_parameter - 
            compile time: 5.393ms*/;
        function $property_set_parameter_list(l, state) {
            debug_stack.push({ name: "property_set_parameter_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $binding_element(l, state)) {
                /*--unique-id--95--DO-NOT-REPLACE*/
                debug_stack.push({ name: "property_set_parameter_list RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "property_set_parameter_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: expression
            grammar index: 96
            bodies:
	96:266 expression=>• expression , assignment_expression - 
		96:267 expression=>• assignment_expression - 
            compile time: 1882.674ms*/;
        function $expression(l, state) {
            debug_stack.push({ name: "expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $assignment_expression(l, state)) {
                /*--unique-id--96--DO-NOT-REPLACE*/
                return $expression_goto(l, state, 96);
            }
            debug_stack.push({ name: "expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $expression_goto(l, state, prod) {
            debug_stack.push({ name: "expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*,*/
                if (l.utf == 44/*[,]*/) {
                    /*peek*/
                    /*
                       96:266 expression=>expression • , assignment_expression
                       137:404 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , )
                       137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                       137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                    */
                    /*peek_level:1 offset:1 -- clause*/
                    /*++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import*/
                    let pk = l.copy();
                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                    if (((((defined_token_6d4f77707d3e0e5a(pk)/*[++]*/ || defined_token_f2ef34011f64cef0(pk)/*[--]*/) || defined_token_19cd74c69f5512e8(pk)/*[``]*/) || assert_table(pk, 0x0, 0xa996, 0x88000000, 0x48000001)/*tbl:[ + ] [ ~ ] [ ! ] [ - ] [ _ ] [ $ ] [ ( ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                        /*peek*/
                        /*
                           96:266 expression=>expression • , assignment_expression
                        */
                        /*peek_level:1 offset:1*/
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                /*--unique-id--96--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 147);
                                prod = 96;
                                continue;
                            }
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 96);
        }
/*production name: left_hand_side_expression
            grammar index: 97
            bodies:
	97:268 left_hand_side_expression=>• new_expression - 
		97:269 left_hand_side_expression=>• call_expression - 
		97:270 left_hand_side_expression=>• optional_expression - 
            compile time: 1104.368ms*/;
        function $left_hand_side_expression(l, state) {
            debug_stack.push({ name: "left_hand_side_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import*/
            if (((defined_token_19cd74c69f5512e8(l)/*[``]*/ || assert_table(l, 0x0, 0x8194, 0x88000000, 0x8000001)/*tbl:[ _ ] [ $ ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ] [ ( ]*/) || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                /*peek*/
                /*
                   97:268 left_hand_side_expression=>• new_expression
                   97:269 left_hand_side_expression=>• call_expression
                   97:270 left_hand_side_expression=>• optional_expression
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*this async null [ { function class / ` `` ( new super import true false " ' 228 get set target as from num*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, defined_token_57e43262d833cfeb(l)/*[this]*/)) {
                    /*consume*/
                    /*
                       113:316 primary_expression=>τthis •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 166);
                    return $left_hand_side_expression_goto(l, state, 99);
                } else if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                    /*peek*/
                    /*
                       191:538 unreserved_word=>• τasync
                       73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                       73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                       73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                       73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                       73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                       73:189 function_declaration=>• τasync τfunction binding_identifier ( ) { function_body }
                       73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                       73:194 function_declaration=>• τasync τfunction ( ) { function_body }
                    */
                    /*peek_level:1 offset:2 -- clause*/
                    /*function as = ( extends { of in ) ; { nl END_OF_FILE , ] } ?. `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= ** % / + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? : ?? from*/
                    let pk = l.copy();
                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                    if (defined_token_e043e2118bdadad0(pk)/*[function]*/) {
                        /*peek*/
                        /*
                           73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                           73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                           73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                           73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                           73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                           73:189 function_declaration=>• τasync τfunction binding_identifier ( ) { function_body }
                           73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                           73:194 function_declaration=>• τasync τfunction ( ) { function_body }
                        */
                        /*peek_level:2 offset:2 -- clause*/
                        /** _ $ id async get set target as from (*/
                        sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                        if (pk.utf == 42/*[*]*/) {
                            /*peek*/
                            /*
                               73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                               73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                               73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                               73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                            */
                            /*peek_level:3 offset:2*/
                            if (state = $function_declaration(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 1, 101);
                                return $left_hand_side_expression_goto(l, state, 99);
                            }
                        } else {
                            /*assert-production-closure*/
                            /*
                               73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                               73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                            */
                            /*peek_level:2 offset:2*/
                            if (state = $function_declaration(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 1, 101);
                                return $left_hand_side_expression_goto(l, state, 99);
                            }
                        }
                    } else {
                        /*peek-production-closure*/
                        /*
                           191:538 unreserved_word=>• τasync
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $unreserved_word(l, state)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            add_reduce(state, 1, 245);
                            add_reduce(state, 1, 244);
                            return $left_hand_side_expression_goto(l, state, 99);
                        }
                    }
                } else if (assert_consume(l, state, defined_token_6fe6f90f8fe15dd0(l)/*[null]*/)) {
                    /*consume*/
                    /*
                       184:527 null_literal=>τnull •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 241);
                    return $left_hand_side_expression_goto(l, state, 99);
                } else if (l.utf == 91/*[[]*/) {
                    /*assert-production-closure*/
                    /*
                       160:464 array_literal=>• [ elision ]
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $array_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $left_hand_side_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 123/*[{]*/) {
                    /*assert-production-closure*/
                    /*
                       152:446 object_literal=>• { }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $object_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $left_hand_side_expression_goto(l, state, 99);
                    }
                } else if (defined_token_e043e2118bdadad0(l)/*[function]*/) {
                    /*assert-production-closure*/
                    /*
                       73:181 function_declaration=>• τfunction * binding_identifier ( formal_parameters ) { function_body }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $function_declaration(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        add_reduce(state, 1, 101);
                        return $left_hand_side_expression_goto(l, state, 99);
                    }
                } else if (defined_token_2d05a4070a3ebcf4(l)/*[class]*/) {
                    /*assert-production-closure*/
                    /*
                       90:230 class_expression=>• τclass binding_identifier class_heritage { class_body }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $class_expression(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $left_hand_side_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 47/*[/]*/) {
                    /*assert-production-closure*/
                    /*
                       150:443 regular_expression_literal=>• / / def$js_identifier
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $regular_expression_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $left_hand_side_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 96/*[`]*/) {
                    /*assert-production-closure*/
                    /*
                       170:490 template_head=>• ` template_head_HC_listbody1_121 ${
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $template_head(l, state)) {
                        /*--unique-id--170--DO-NOT-REPLACE*/
                        return $left_hand_side_expression_goto(l, state, 170);
                    }
                } else if (assert_consume(l, state, defined_token_19cd74c69f5512e8(l)/*[``]*/)) {
                    /*consume*/
                    /*
                       165:482 no_substitute_template=>`` •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 225);
                    return $left_hand_side_expression_goto(l, state, 99);
                } else if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                    /*consume*/
                    /*
                       138:410 parenthesized=>( • expression )
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 191);
                            add_reduce(state, 1, 167);
                            return $left_hand_side_expression_goto(l, state, 99);
                        }
                    }
                } else if (defined_token_79b82aa5b55f0605(l)/*[new]*/) {
                    /*peek*/
                    /*
                       99:279 member_expression=>• τnew member_expression arguments
                       103:285 new_target=>• τnew . τtarget
                       98:272 new_expression=>• τnew new_expression
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*new*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_79b82aa5b55f0605(l)/*[new]*/)) {
                        /*consume*/
                        /*
                           99:279 member_expression=>τnew • member_expression arguments
                           103:285 new_target=>τnew • . τtarget
                           98:272 new_expression=>τnew • new_expression
                        */
                        /*peek_level:0 offset:5 -- clause*/
                        /*. this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               103:285 new_target=>τnew . • τtarget
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, defined_token_1cb42c7dd41b3a7e(l)/*[target]*/)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 156);
                                return $left_hand_side_expression_goto(l, state, 99);
                            }
                        } else if (((defined_token_19cd74c69f5512e8(l)/*[``]*/ || assert_table(l, 0x0, 0x8194, 0x88000000, 0x8000001)/*tbl:[ _ ] [ $ ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ] [ ( ]*/) || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                            /*peek*/
                            /*
                               99:279 member_expression=>τnew • member_expression arguments
                               98:272 new_expression=>τnew • new_expression
                            */
                            let mk = mark();
                            let anchor = l.copy();
                            let anchor_state = state;
                            /*279,3,1,272,2,1*/
                            /*99*/
                            /*peek_level:-1 offset:5*/
                            if (state = $member_expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $arguments(l, state)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 152);
                                    return $left_hand_side_expression_goto(l, state, 99);
                                }
                            }
                            /*279,3,1,272,2,1*/
                            state = reset(mk, anchor, l, anchor_state);
                            /*peek_level:-1 offset:5*/
                            if (state = $new_expression(l, state)) {
                                /*--unique-id--97--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 148);
                                return $left_hand_side_expression_goto(l, state, 97);
                            }
                        }
                    }
                } else if (defined_token_8fdd5a50d81134d2(l)/*[super]*/) {
                    /*peek*/
                    /*
                       100:280 super_property=>• τsuper . identifier_name
                       100:281 super_property=>• τsuper [ expression ]
                       105:293 super_call=>• τsuper arguments
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*super*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_8fdd5a50d81134d2(l)/*[super]*/)) {
                        /*consume*/
                        /*
                           100:280 super_property=>τsuper • . identifier_name
                           100:281 super_property=>τsuper • [ expression ]
                           105:293 super_call=>τsuper • arguments
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*. [ (*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               100:280 super_property=>τsuper . • identifier_name
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 153);
                                return $left_hand_side_expression_goto(l, state, 99);
                            }
                        } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               100:281 super_property=>τsuper [ • expression ]
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 154);
                                    return $left_hand_side_expression_goto(l, state, 99);
                                }
                            }
                        } else {
                            /*peek-production-closure*/
                            /*
                               105:293 super_call=>τsuper • arguments
                            */
                            /*peek_level:0 offset:5*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 159);
                                return $left_hand_side_expression_goto(l, state, 104);
                            }
                        }
                    }
                } else if (defined_token_2ed685dc4925cfa4(l)/*[import]*/) {
                    /*peek*/
                    /*
                       102:284 import_meta=>• τimport . τmeta
                       106:294 import_call=>• τimport ( assignment_expression )
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*import*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_2ed685dc4925cfa4(l)/*[import]*/)) {
                        /*consume*/
                        /*
                           102:284 import_meta=>τimport • . τmeta
                           106:294 import_call=>τimport • ( assignment_expression )
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*. (*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               102:284 import_meta=>τimport . • τmeta
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, defined_token_7a48bf3a46a95de4(l)/*[meta]*/)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 155);
                                return $left_hand_side_expression_goto(l, state, 99);
                            }
                        } else if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                            /*consume*/
                            /*
                               106:294 import_call=>τimport ( • assignment_expression )
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*--unique-id--104--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 160);
                                    return $left_hand_side_expression_goto(l, state, 104);
                                }
                            }
                        }
                    }
                } else if (assert_consume(l, state, defined_token_99376be254728810(l)/*[true]*/ || defined_token_57da255105f722f9(l)/*[false]*/)) {
                    /*consume*/
                    /*
                       185:528 boolean_literal=>τtrue •
                       185:529 boolean_literal=>τfalse •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 242);
                    return $left_hand_side_expression_goto(l, state, 99);
                } else if ((l.utf == 34/*["]*/) || (l.utf == 39/*[']*/)) {
                    /*assert-production-closure*/
                    /*
                       179:514 string_literal=>• " string_literal_HC_listbody1_124 "
                       179:515 string_literal=>• ' string_literal_HC_listbody1_125 '
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $string_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $left_hand_side_expression_goto(l, state, 99);
                    }
                } else if (assert_consume(l, state, ((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_5bca542dce980d9c(l)/*[set]*/) || defined_token_1cb42c7dd41b3a7e(l)/*[target]*/) || defined_token_fcc8b8fe09802878(l)/*[as]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/)) {
                    /*consume*/
                    /*
                       227:681 def$js_identifier=>tk:def$js_id_symbols •
                       191:539 unreserved_word=>τget •
                       191:540 unreserved_word=>τset •
                       191:541 unreserved_word=>τtarget •
                       191:542 unreserved_word=>τas •
                       191:543 unreserved_word=>τfrom •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 245);
                    add_reduce(state, 1, 244);
                    return $left_hand_side_expression_goto(l, state, 99);
                } else if (l.isNum()/*[num]*/) {
                    /*peek*/
                    /*
                       183:526 numeric_literal=>• θnum
                       182:525 bigint=>• θnum τn
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*num*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.isNum()/*[num]*/)) {
                        /*consume*/
                        /*
                           183:526 numeric_literal=>θnum •
                           182:525 bigint=>θnum • τn
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*n , ] = * ) /= ( } : ; ?. %= { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 110/*[n]*/)) {
                            /*consume*/
                            /*
                               182:525 bigint=>θnum τn •
                            */
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:5*/
                            add_reduce(state, 2, 239);
                            return $left_hand_side_expression_goto(l, state, 99);
                        } else {
                            /*assert-end*/
                            /*
                               183:526 numeric_literal=>θnum •
                            */
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:6*/
                            add_reduce(state, 1, 240);
                            return $left_hand_side_expression_goto(l, state, 99);
                        }
                    }
                }
            }
            debug_stack.push({ name: "left_hand_side_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $left_hand_side_expression_goto(l, state, prod) {
            debug_stack.push({ name: "left_hand_side_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                switch (prod) {
                    case 99:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*[ . ( ?. `` ` += -= <<= >>= >>>= &= ^= |= **= { %= ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } /= ) * = ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               99:274 member_expression=>member_expression [ • expression ]
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 149);
                                    prod = 99;
                                    continue;
                                }
                            }
                        } else if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               99:275 member_expression=>member_expression . • identifier_name
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 150);
                                prod = 99;
                                continue;
                            }
                        } else if (l.utf == 40/*[(]*/) {
                            /*peek-production-closure*/
                            /*
                               88:221 cover_call_expression_and_async_arrow_head=>member_expression • arguments
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 114);
                                prod = 104;
                                continue;
                            }
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*peek-production-closure*/
                            /*
                               111:305 optional_expression=>member_expression • optional_chain
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                            /*peek-production-closure*/
                            /*
                               99:276 member_expression=>member_expression • template_literal
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $template_literal(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 151);
                                prod = 99;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               98:271 new_expression=>member_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        }
                        break;
                    case 104:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*. ( [ ?. `` ` = * /= %= += -= <<= >>= >>>= &= ^= |= **= { ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               104:286 call_expression=>call_expression . • identifier_name
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 150);
                                prod = 104;
                                continue;
                            }
                        } else if (l.utf == 40/*[(]*/) {
                            /*peek-production-closure*/
                            /*
                               104:289 call_expression=>call_expression • arguments
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 157);
                                prod = 104;
                                continue;
                            }
                        } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               104:290 call_expression=>call_expression [ • expression ]
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--104--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 149);
                                    prod = 104;
                                    continue;
                                }
                            }
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*peek-production-closure*/
                            /*
                               111:306 optional_expression=>call_expression • optional_chain
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                            /*peek-production-closure*/
                            /*
                               104:292 call_expression=>call_expression • template_literal
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $template_literal(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 158);
                                prod = 104;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               97:269 left_hand_side_expression=>call_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        }
                        break;
                    case 111:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= * /= %= += -= <<= >>= >>>= &= ^= |= **= { ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } ) ] , END_OF_FILE ?.*/
                        if (((((((((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_37edf5ebc00dbfe6(l)/*[/=]*/) || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_870ef36bec3a881f(l)/*[+=] [++]*/) || defined_token_4749150ec48378d0(l)/*[-=] [--]*/) || defined_token_318c95b1e64de46d(l)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(l)/*[>>=] [>>>=] [>>] [>>>] [>=]*/) || defined_token_2c51a4b82e64ba22(l)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_d1de557e71993f67(l)/*[|=] [||]*/) || defined_token_485338d34f29b52a(l)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || defined_token_c6b5fbb944702d5a(l)/*[of]*/) || assert_table(l, 0x0, 0xfc00be60, 0x60000000, 0x38000000)/*tbl:[ = ] [ * ] [ { ] [ ; ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               97:270 left_hand_side_expression=>optional_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*assert-production-closure*/
                            /*
                               111:307 optional_expression=>optional_expression • optional_chain
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        }
                        break;
                    case 170:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*yield async new ( super import this function class [ { / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ --*/
                        if ((((((((((((((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_670f23e41126e00b(l)/*[async] [as] [await]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_d38e0913b811b457(l)/*[super] [set]*/) || defined_token_2ed685dc4925cfa4(l)/*[import]*/) || defined_token_ca53d8e93addfaf5(l)/*[this] [target] [true] [typeof]*/) || defined_token_7b465f3c7dd55e63(l)/*[function] [from] [false]*/) || defined_token_2d05a4070a3ebcf4(l)/*[class]*/) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_8ed5fb4bce429503(l)/*[delete]*/) || defined_token_042ea6dc9657ee07(l)/*[void]*/) || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || assert_table(l, 0x0, 0xa986, 0x8000000, 0x48000001)/*tbl:[ ( ] [ [ ] [ { ] [ / ] [ " ] [ ' ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ]*/) || l.isNum()/*[num]*/) {
                            /*assert-production-closure*/
                            /*
                               166:483 substitute_template=>template_head • expression template_spans
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $template_spans(l, state)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 226);
                                    prod = 99;
                                    continue;
                                }
                            }
                        }
                        break;
                }
                break;
            }
            debug_stack.push({ name: "left_hand_side_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 97);
        }
/*production name: new_expression
            grammar index: 98
            bodies:
	98:271 new_expression=>• member_expression - 
		98:272 new_expression=>• τnew new_expression - 
            compile time: 715.197ms*/;
        function $new_expression(l, state) {
            debug_stack.push({ name: "new_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*new this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( super import*/
            if (defined_token_79b82aa5b55f0605(l)/*[new]*/) {
                /*peek*/
                /*
                   98:271 new_expression=>• member_expression
                   98:272 new_expression=>• τnew new_expression
                */
                /*peek_level:1 offset:0 -- clause*/
                /*. this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import*/
                let pk = l.copy();
                sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                if (pk.utf == 46/*[.]*/) {
                    /*peek-production-closure*/
                    /*
                       98:271 new_expression=>• member_expression
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $member_expression(l, state)) {
                        /*--unique-id--98--DO-NOT-REPLACE*/
                        return $new_expression_goto(l, state, 98);
                    }
                } else if (((defined_token_19cd74c69f5512e8(pk)/*[``]*/ || assert_table(pk, 0x0, 0x8194, 0x88000000, 0x8000001)/*tbl:[ _ ] [ $ ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ] [ ( ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                    /*peek*/
                    /*
                       98:271 new_expression=>• member_expression
                       98:272 new_expression=>• τnew new_expression
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*new*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_79b82aa5b55f0605(l)/*[new]*/)) {
                        /*consume*/
                        /*
                           99:279 member_expression=>τnew • member_expression arguments
                           98:272 new_expression=>τnew • new_expression
                        */
                        /*peek_level:0 offset:3 -- clause*/
                        /*this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (((defined_token_19cd74c69f5512e8(l)/*[``]*/ || assert_table(l, 0x0, 0x8194, 0x88000000, 0x8000001)/*tbl:[ _ ] [ $ ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ] [ ( ]*/) || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                            /*peek*/
                            /*
                               99:279 member_expression=>τnew • member_expression arguments
                               98:272 new_expression=>τnew • new_expression
                            */
                            let mk = mark();
                            let anchor = l.copy();
                            let anchor_state = state;
                            /*279,3,1,272,2,1*/
                            /*99*/
                            /*peek_level:-1 offset:3*/
                            if (state = $member_expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $arguments(l, state)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 152);
                                    return $new_expression_goto(l, state, 99);
                                }
                            }
                            /*279,3,1,272,2,1*/
                            state = reset(mk, anchor, l, anchor_state);
                            /*peek_level:-1 offset:3*/
                            if (state = $new_expression(l, state)) {
                                /*--unique-id--98--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 148);
                                return $new_expression_goto(l, state, 98);
                            }
                        }
                    }
                }
            } else {
                /*peek-production-closure*/
                /*
                   98:271 new_expression=>• member_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $member_expression(l, state)) {
                    /*--unique-id--98--DO-NOT-REPLACE*/
                    return $new_expression_goto(l, state, 98);
                }
            }
            debug_stack.push({ name: "new_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $new_expression_goto(l, state, prod) {
            debug_stack.push({ name: "new_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                /*peek_level:-1 offset:0 -- clause*/
                /*[ . `` ` += -= <<= >>= >>>= &= ^= |= **= { %= ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } /= ) * = ] , END_OF_FILE*/
                if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                    /*consume*/
                    /*
                       99:274 member_expression=>member_expression [ • expression ]
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            add_reduce(state, 4, 149);
                            prod = 99;
                            continue;
                        }
                    }
                } else if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                    /*consume*/
                    /*
                       99:275 member_expression=>member_expression . • identifier_name
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $identifier_name(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 150);
                        prod = 99;
                        continue;
                    }
                } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                    /*peek-production-closure*/
                    /*
                       99:276 member_expression=>member_expression • template_literal
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $template_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 151);
                        prod = 99;
                        continue;
                    }
                } else {
                    /*assert-end*/
                    /*
                       98:271 new_expression=>member_expression •
                    */
                    /*--unique-id--98--DO-NOT-REPLACE*/
                    /*peek_level:0 offset:2*/
                    prod = 98;
                    continue;
                }
                break;
            }
            debug_stack.push({ name: "new_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 98);
        }
/*production name: member_expression
            grammar index: 99
            bodies:
	99:273 member_expression=>• primary_expression - 
		99:274 member_expression=>• member_expression [ expression ] - 
		99:275 member_expression=>• member_expression . identifier_name - 
		99:276 member_expression=>• member_expression template_literal - 
		99:277 member_expression=>• super_property - 
		99:278 member_expression=>• meta_property - 
		99:279 member_expression=>• τnew member_expression arguments - 
            compile time: 27.01ms*/;
        function $member_expression(l, state) {
            debug_stack.push({ name: "member_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*super new import this _ $ id async get set target as from true false null " ' num [ { function class / `` ` (*/
            if (defined_token_8fdd5a50d81134d2(l)/*[super]*/) {
                /*peek-production-closure*/
                /*
                   99:277 member_expression=>• super_property
                */
                /*peek_level:0 offset:0*/
                if (state = $super_property(l, state)) {
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    return $member_expression_goto(l, state, 99);
                }
            } else if (defined_token_79b82aa5b55f0605(l)/*[new]*/) {
                /*peek*/
                /*
                   99:278 member_expression=>• meta_property
                   99:279 member_expression=>• τnew member_expression arguments
                */
                /*peek_level:1 offset:0 -- clause*/
                /*. this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import*/
                let pk = l.copy();
                sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                if (pk.utf == 46/*[.]*/) {
                    /*peek-production-closure*/
                    /*
                       99:278 member_expression=>• meta_property
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $meta_property(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $member_expression_goto(l, state, 99);
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       99:279 member_expression=>• τnew member_expression arguments
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, defined_token_79b82aa5b55f0605(l)/*[new]*/)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $member_expression(l, state)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $arguments(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 152);
                                return $member_expression_goto(l, state, 99);
                            }
                        }
                    }
                }
            } else if (defined_token_2ed685dc4925cfa4(l)/*[import]*/) {
                /*peek-production-closure*/
                /*
                   99:278 member_expression=>• meta_property
                */
                /*peek_level:0 offset:0*/
                if (state = $meta_property(l, state)) {
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    return $member_expression_goto(l, state, 99);
                }
            } else {
                /*peek-production-closure*/
                /*
                   99:273 member_expression=>• primary_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $primary_expression(l, state)) {
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    return $member_expression_goto(l, state, 99);
                }
            }
            debug_stack.push({ name: "member_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $member_expression_goto(l, state, prod) {
            debug_stack.push({ name: "member_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*[ . `` `*/
                if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                    /*consume*/
                    /*
                       99:274 member_expression=>member_expression [ • expression ]
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            add_reduce(state, 4, 149);
                            prod = 99;
                            continue;
                        }
                    }
                } else if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                    /*consume*/
                    /*
                       99:275 member_expression=>member_expression . • identifier_name
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $identifier_name(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 150);
                        prod = 99;
                        continue;
                    }
                } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                    /*peek-production-closure*/
                    /*
                       99:276 member_expression=>member_expression • template_literal
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $template_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 151);
                        prod = 99;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "member_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 99);
        }
/*production name: super_property
            grammar index: 100
            bodies:
	100:280 super_property=>• τsuper . identifier_name - 
		100:281 super_property=>• τsuper [ expression ] - 
            compile time: 9.925ms*/;
        function $super_property(l, state) {
            debug_stack.push({ name: "super_property RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*super*/
            if (assert_consume(l, state, defined_token_8fdd5a50d81134d2(l)/*[super]*/)) {
                /*consume*/
                /*
                   100:280 super_property=>τsuper • . identifier_name
                   100:281 super_property=>τsuper • [ expression ]
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*. [*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                    /*consume*/
                    /*
                       100:280 super_property=>τsuper . • identifier_name
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $identifier_name(l, state)) {
                        /*--unique-id--100--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 153);
                        debug_stack.push({ name: "super_property RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                    /*consume*/
                    /*
                       100:281 super_property=>τsuper [ • expression ]
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*--unique-id--100--DO-NOT-REPLACE*/
                            add_reduce(state, 4, 154);
                            debug_stack.push({ name: "super_property RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "super_property RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: meta_property
            grammar index: 101
            bodies:
	101:282 meta_property=>• new_target - 
		101:283 meta_property=>• import_meta - 
            compile time: 5.542ms*/;
        function $meta_property(l, state) {
            debug_stack.push({ name: "meta_property RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*new import*/
            if (defined_token_79b82aa5b55f0605(l)/*[new]*/) {
                /*peek-production-closure*/
                /*
                   101:282 meta_property=>• new_target
                */
                /*peek_level:0 offset:0*/
                if (state = $new_target(l, state)) {
                    /*--unique-id--101--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "meta_property RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   101:283 meta_property=>• import_meta
                */
                /*peek_level:0 offset:0*/
                if (state = $import_meta(l, state)) {
                    /*--unique-id--101--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "meta_property RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "meta_property RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: import_meta
            grammar index: 102
            bodies:
	102:284 import_meta=>• τimport . τmeta - 
            compile time: 4.182ms*/;
        function $import_meta(l, state) {
            debug_stack.push({ name: "import_meta RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*import*/
            if (assert_consume(l, state, defined_token_2ed685dc4925cfa4(l)/*[import]*/)) {
                /*consume*/
                /*
                   102:284 import_meta=>τimport • . τmeta
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_7a48bf3a46a95de4(l)/*[meta]*/)) {
                        /*--unique-id--102--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 155);
                        debug_stack.push({ name: "import_meta RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "import_meta RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: new_target
            grammar index: 103
            bodies:
	103:285 new_target=>• τnew . τtarget - 
            compile time: 4.46ms*/;
        function $new_target(l, state) {
            debug_stack.push({ name: "new_target RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*new*/
            if (assert_consume(l, state, defined_token_79b82aa5b55f0605(l)/*[new]*/)) {
                /*consume*/
                /*
                   103:285 new_target=>τnew • . τtarget
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_1cb42c7dd41b3a7e(l)/*[target]*/)) {
                        /*--unique-id--103--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 156);
                        debug_stack.push({ name: "new_target RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "new_target RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: arguments
            grammar index: 107
            bodies:
	107:295 arguments=>• ( argument_list , ) - 
		107:296 arguments=>• ( , ) - 
		107:297 arguments=>• ( argument_list ) - 
		107:298 arguments=>• ( ) - 
            compile time: 246.273ms*/;
        function $arguments(l, state) {
            debug_stack.push({ name: "arguments RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*(*/
            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                /*consume*/
                /*
                   107:295 arguments=>( • argument_list , )
                   107:296 arguments=>( • , )
                   107:297 arguments=>( • argument_list )
                   107:298 arguments=>( • )
                */
                /*peek_level:0 offset:1 -- clause*/
                /*, ) ... yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                    /*consume*/
                    /*
                       107:296 arguments=>( , • )
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                        /*--unique-id--107--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 162);
                        debug_stack.push({ name: "arguments RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                    /*consume*/
                    /*
                       107:298 arguments=>( ) •
                    */
                    /*--unique-id--107--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 162);
                    debug_stack.push({ name: "arguments RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else {
                    /*peek-production-closure*/
                    /*
                       107:295 arguments=>( • argument_list , )
                       107:297 arguments=>( • argument_list )
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*110*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $argument_list(l, state)) {
                        /*assert*/
                        /*
                           107:295 arguments=>( • argument_list , )
                           107:297 arguments=>( • argument_list )
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*, )*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            /*consume*/
                            /*
                               107:295 arguments=>( argument_list , • )
                            */
                            /*peek_level:-1 offset:4*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                /*--unique-id--107--DO-NOT-REPLACE*/
                                add_reduce(state, 4, 161);
                                debug_stack.push({ name: "arguments RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        } else if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            /*consume*/
                            /*
                               107:297 arguments=>( argument_list ) •
                            */
                            /*--unique-id--107--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 161);
                            debug_stack.push({ name: "arguments RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "arguments RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: argument_list_group_1196_116
            grammar index: 108
            bodies:
	108:299 argument_list_group_1196_116=>• assignment_expression - 
		108:300 argument_list_group_1196_116=>• ... assignment_expression - 
            compile time: 10.928ms*/;
        function $argument_list_group_1196_116(l, state) {
            debug_stack.push({ name: "argument_list_group_1196_116 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*... ++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import*/
            if (assert_consume(l, state, defined_token_f47f6de2d28c24e5(l)/*[...]*/)) {
                /*consume*/
                /*
                   108:300 argument_list_group_1196_116=>... • assignment_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $assignment_expression(l, state)) {
                    /*--unique-id--108--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 163);
                    debug_stack.push({ name: "argument_list_group_1196_116 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   108:299 argument_list_group_1196_116=>• assignment_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $assignment_expression(l, state)) {
                    /*--unique-id--108--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "argument_list_group_1196_116 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "argument_list_group_1196_116 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: argument_list
            grammar index: 110
            bodies:
	110:303 argument_list=>• argument_list , argument_list_group_1196_116 - 
		110:304 argument_list=>• argument_list_group_1196_116 - 
            compile time: 11.61ms*/;
        function $argument_list(l, state) {
            debug_stack.push({ name: "argument_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $argument_list_group_1196_116(l, state)) {
                /*--unique-id--110--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $argument_list_goto(l, state, 110);
            }
            debug_stack.push({ name: "argument_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $argument_list_goto(l, state, prod) {
            debug_stack.push({ name: "argument_list GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*,*/
                if (l.utf == 44/*[,]*/) {
                    /*peek*/
                    /*
                       110:303 argument_list=>argument_list • , argument_list_group_1196_116
                       107:295 arguments=>( argument_list • , )
                    */
                    /*peek_level:1 offset:1 -- clause*/
                    /*++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import ...*/
                    let pk = l.copy();
                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                    if ((((((defined_token_6d4f77707d3e0e5a(pk)/*[++]*/ || defined_token_f2ef34011f64cef0(pk)/*[--]*/) || defined_token_19cd74c69f5512e8(pk)/*[``]*/) || defined_token_f47f6de2d28c24e5(pk)/*[...]*/) || assert_table(pk, 0x0, 0xa996, 0x88000000, 0x48000001)/*tbl:[ + ] [ ~ ] [ ! ] [ - ] [ _ ] [ $ ] [ ( ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                        /*peek*/
                        /*
                           110:303 argument_list=>argument_list • , argument_list_group_1196_116
                        */
                        /*peek_level:1 offset:1*/
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $argument_list_group_1196_116(l, state)) {
                                /*--unique-id--110--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 11);
                                prod = 110;
                                continue;
                            }
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "argument_list GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 110);
        }
/*production name: optional_chain
            grammar index: 112
            bodies:
	112:308 optional_chain=>• ?. arguments - 
		112:309 optional_chain=>• ?. [ expression ] - 
		112:310 optional_chain=>• ?. identifier_name - 
		112:311 optional_chain=>• ?. template_literal - 
		112:312 optional_chain=>• optional_chain arguments - 
		112:313 optional_chain=>• optional_chain [ expression ] - 
		112:314 optional_chain=>• optional_chain . identifier_name - 
		112:315 optional_chain=>• optional_chain template_literal - 
            compile time: 26.823ms*/;
        function $optional_chain(l, state) {
            debug_stack.push({ name: "optional_chain RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*?.*/
            if (assert_consume(l, state, defined_token_3eff041ba9fc8573(l)/*[?.]*/)) {
                /*consume*/
                /*
                   112:308 optional_chain=>?. • arguments
                   112:309 optional_chain=>?. • [ expression ]
                   112:310 optional_chain=>?. • identifier_name
                   112:311 optional_chain=>?. • template_literal
                */
                /*peek_level:0 offset:1 -- clause*/
                /*( [ `` ` _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false async get set target as from*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (l.utf == 40/*[(]*/) {
                    /*peek-production-closure*/
                    /*
                       112:308 optional_chain=>?. • arguments
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $arguments(l, state)) {
                        /*--unique-id--112--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 0);
                        return $optional_chain_goto(l, state, 112);
                    }
                } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                    /*consume*/
                    /*
                       112:309 optional_chain=>?. [ • expression ]
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*--unique-id--112--DO-NOT-REPLACE*/
                            add_reduce(state, 4, 165);
                            return $optional_chain_goto(l, state, 112);
                        }
                    }
                } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                    /*peek-production-closure*/
                    /*
                       112:311 optional_chain=>?. • template_literal
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $template_literal(l, state)) {
                        /*--unique-id--112--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 0);
                        return $optional_chain_goto(l, state, 112);
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       112:310 optional_chain=>?. • identifier_name
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $identifier_name(l, state)) {
                        /*--unique-id--112--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 0);
                        return $optional_chain_goto(l, state, 112);
                    }
                }
            }
            debug_stack.push({ name: "optional_chain RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $optional_chain_goto(l, state, prod) {
            debug_stack.push({ name: "optional_chain GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:0 offset:0 -- clause*/
                /*( [ . `` `*/
                if (l.utf == 40/*[(]*/) {
                    /*peek-production-closure*/
                    /*
                       112:312 optional_chain=>optional_chain • arguments
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $arguments(l, state)) {
                        /*--unique-id--112--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 157);
                        prod = 112;
                        continue;
                    }
                } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                    /*consume*/
                    /*
                       112:313 optional_chain=>optional_chain [ • expression ]
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*--unique-id--112--DO-NOT-REPLACE*/
                            add_reduce(state, 4, 149);
                            prod = 112;
                            continue;
                        }
                    }
                } else if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                    /*consume*/
                    /*
                       112:314 optional_chain=>optional_chain . • identifier_name
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $identifier_name(l, state)) {
                        /*--unique-id--112--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 150);
                        prod = 112;
                        continue;
                    }
                } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                    /*peek-production-closure*/
                    /*
                       112:315 optional_chain=>optional_chain • template_literal
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $template_literal(l, state)) {
                        /*--unique-id--112--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 151);
                        prod = 112;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "optional_chain GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 112);
        }
/*production name: primary_expression
            grammar index: 113
            bodies:
	113:316 primary_expression=>• τthis - 
		113:317 primary_expression=>• identifier_reference - 
		113:318 primary_expression=>• literal - 
		113:319 primary_expression=>• array_literal - 
		113:320 primary_expression=>• object_literal - 
		113:321 primary_expression=>• function_expression - 
		113:322 primary_expression=>• class_expression - 
		113:323 primary_expression=>• regular_expression_literal - 
		113:324 primary_expression=>• template_literal - 
		113:325 primary_expression=>• parenthesized - 
            compile time: 55.166ms*/;
        function $primary_expression(l, state) {
            debug_stack.push({ name: "primary_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*this async [ { function class / ( `` ` true false null " ' num _ $ id get set target as from*/
            if (assert_consume(l, state, defined_token_57e43262d833cfeb(l)/*[this]*/)) {
                /*consume*/
                /*
                   113:316 primary_expression=>τthis •
                */
                /*--unique-id--113--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                add_reduce(state, 1, 166);
                debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            } else if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                /*peek*/
                /*
                   113:317 primary_expression=>• identifier_reference
                   113:321 primary_expression=>• function_expression
                */
                /*peek_level:1 offset:0 -- clause*/
                /*function ?. ( `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of as from extends*/
                let pk = l.copy();
                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                if (defined_token_e043e2118bdadad0(pk)/*[function]*/) {
                    /*peek-production-closure*/
                    /*
                       113:321 primary_expression=>• function_expression
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $function_declaration(l, state)) {
                        /*--unique-id--113--DO-NOT-REPLACE*/
                        add_reduce(state, 1, 101);
                        debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       113:317 primary_expression=>• identifier_reference
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $identifier(l, state)) {
                        /*--unique-id--113--DO-NOT-REPLACE*/
                        add_reduce(state, 1, 244);
                        debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            } else if (l.utf == 91/*[[]*/) {
                /*peek-production-closure*/
                /*
                   113:319 primary_expression=>• array_literal
                */
                /*peek_level:0 offset:0*/
                if (state = $array_literal(l, state)) {
                    /*--unique-id--113--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (l.utf == 123/*[{]*/) {
                /*peek-production-closure*/
                /*
                   113:320 primary_expression=>• object_literal
                */
                /*peek_level:0 offset:0*/
                if (state = $object_literal(l, state)) {
                    /*--unique-id--113--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (defined_token_e043e2118bdadad0(l)/*[function]*/) {
                /*peek-production-closure*/
                /*
                   113:321 primary_expression=>• function_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $function_declaration(l, state)) {
                    /*--unique-id--113--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 101);
                    debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (defined_token_2d05a4070a3ebcf4(l)/*[class]*/) {
                /*peek-production-closure*/
                /*
                   113:322 primary_expression=>• class_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $class_expression(l, state)) {
                    /*--unique-id--113--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (l.utf == 47/*[/]*/) {
                /*peek-production-closure*/
                /*
                   113:323 primary_expression=>• regular_expression_literal
                */
                /*peek_level:0 offset:0*/
                if (state = $regular_expression_literal(l, state)) {
                    /*--unique-id--113--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (l.utf == 40/*[(]*/) {
                /*peek-production-closure*/
                /*
                   113:325 primary_expression=>• parenthesized
                */
                /*peek_level:0 offset:0*/
                if (state = $parenthesized(l, state)) {
                    /*--unique-id--113--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 167);
                    debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                /*peek-production-closure*/
                /*
                   113:324 primary_expression=>• template_literal
                */
                /*peek_level:0 offset:0*/
                if (state = $template_literal(l, state)) {
                    /*--unique-id--113--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (((((defined_token_99376be254728810(l)/*[true]*/ || defined_token_57da255105f722f9(l)/*[false]*/) || defined_token_6fe6f90f8fe15dd0(l)/*[null]*/) || (l.utf == 34/*["]*/)) || (l.utf == 39/*[']*/)) || l.isNum()/*[num]*/) {
                /*peek-production-closure*/
                /*
                   113:318 primary_expression=>• literal
                */
                /*peek_level:0 offset:0*/
                if (state = $literal(l, state)) {
                    /*--unique-id--113--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   113:317 primary_expression=>• identifier_reference
                */
                /*peek_level:0 offset:0*/
                if (state = $identifier(l, state)) {
                    /*--unique-id--113--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 244);
                    debug_stack.push({ name: "primary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "primary_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: await_expression
            grammar index: 114
            bodies:
	114:326 await_expression=>• τawait unary_expression - 
            compile time: 2.214ms*/;
        function $await_expression(l, state) {
            debug_stack.push({ name: "await_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*await*/
            if (assert_consume(l, state, defined_token_ded0f96a7228c7c5(l)/*[await]*/)) {
                /*consume*/
                /*
                   114:326 await_expression=>τawait • unary_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $unary_expression(l, state)) {
                    /*--unique-id--114--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 168);
                    debug_stack.push({ name: "await_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "await_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: assignment_expression
            grammar index: 115
            bodies:
	115:327 assignment_expression=>• conditional_expression - 
		115:328 assignment_expression=>• yield_expression - 
		115:329 assignment_expression=>• arrow_function - 
		115:330 assignment_expression=>• left_hand_side_expression = assignment_expression - 
		115:331 assignment_expression=>• left_hand_side_expression assignment_operator assignment_expression - 
            compile time: 1958.041ms*/;
        function $assignment_expression(l, state) {
            debug_stack.push({ name: "assignment_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*yield ++ -- delete void typeof + ~ ! - await this true false null " ' num [ { function class / `` ` new super import async get set target as from ( _ $ id*/
            if (defined_token_d8f9d336d83ac87c(l)/*[yield]*/) {
                /*peek-production-closure*/
                /*
                   115:328 assignment_expression=>• yield_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $yield_expression(l, state)) {
                    /*--unique-id--115--DO-NOT-REPLACE*/
                    return $assignment_expression_goto(l, state, 115);
                }
            } else if ((((((defined_token_6d4f77707d3e0e5a(l)/*[++]*/ || defined_token_f2ef34011f64cef0(l)/*[--]*/) || defined_token_8ed5fb4bce429503(l)/*[delete]*/) || defined_token_042ea6dc9657ee07(l)/*[void]*/) || defined_token_9451180aac506098(l)/*[typeof]*/) || defined_token_ded0f96a7228c7c5(l)/*[await]*/) || assert_table(l, 0x0, 0x2802, 0x0, 0x40000000)/*tbl:[ + ] [ ~ ] [ ! ] [ - ]*/) {
                /*peek-production-closure*/
                /*
                   115:327 assignment_expression=>• conditional_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $conditional_expression(l, state)) {
                    /*--unique-id--115--DO-NOT-REPLACE*/
                    return $assignment_expression_goto(l, state, 115);
                }
            } else if ((((((((defined_token_acb0e4ed01f91aec(l)/*[this] [true]*/ || defined_token_42ebdf0a20e77f1c(l)/*[false] [function]*/) || defined_token_07f7913e30dbc995(l)/*[null] [new]*/) || defined_token_2d05a4070a3ebcf4(l)/*[class]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_8fdd5a50d81134d2(l)/*[super]*/) || defined_token_2ed685dc4925cfa4(l)/*[import]*/) || assert_table(l, 0x0, 0x8084, 0x8000000, 0x8000001)/*tbl:[ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ]*/) || l.isNum()/*[num]*/) {
                /*peek*/
                /*
                   115:327 assignment_expression=>• conditional_expression
                   115:330 assignment_expression=>• left_hand_side_expression = assignment_expression
                   115:331 assignment_expression=>• left_hand_side_expression assignment_operator assignment_expression
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*this null " ' [ { function class / ` `` new super import true false num*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, defined_token_57e43262d833cfeb(l)/*[this]*/)) {
                    /*consume*/
                    /*
                       113:316 primary_expression=>τthis •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 166);
                    return $assignment_expression_goto(l, state, 99);
                } else if (assert_consume(l, state, defined_token_6fe6f90f8fe15dd0(l)/*[null]*/)) {
                    /*consume*/
                    /*
                       184:527 null_literal=>τnull •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 241);
                    return $assignment_expression_goto(l, state, 99);
                } else if (l.utf == 34/*["]*/) {
                    /*peek*/
                    /*
                       179:514 string_literal=>• " string_literal_HC_listbody1_124 "
                       179:516 string_literal=>• " "
                    */
                    /*peek_level:1 offset:2 -- clause*/
                    /*nl ws sym num id \ "*/
                    let pk = l.copy();
                    sk_d065c58d10ee093b(pk.next()/*[ 6 ]*/);
                    if ((((pk.isID()/*[id]*/ || pk.isNL()/*[nl]*/) || pk.isNum()/*[num]*/) || pk.isSym()/*[sym]*/) || pk.isSP()/*[ws]*/) {
                        /*peek-production-closure*/
                        /*
                           179:514 string_literal=>• " string_literal_HC_listbody1_124 "
                           179:516 string_literal=>• " "
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $string_literal(l, state)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            return $assignment_expression_goto(l, state, 99);
                        }
                    }
                } else if (l.utf == 39/*[']*/) {
                    /*peek*/
                    /*
                       179:515 string_literal=>• ' string_literal_HC_listbody1_125 '
                       179:517 string_literal=>• ' '
                    */
                    /*peek_level:1 offset:2 -- clause*/
                    /*nl ws sym num id \ '*/
                    let pk = l.copy();
                    sk_d065c58d10ee093b(pk.next()/*[ 6 ]*/);
                    if ((((pk.isID()/*[id]*/ || pk.isNL()/*[nl]*/) || pk.isNum()/*[num]*/) || pk.isSym()/*[sym]*/) || pk.isSP()/*[ws]*/) {
                        /*peek-production-closure*/
                        /*
                           179:515 string_literal=>• ' string_literal_HC_listbody1_125 '
                           179:517 string_literal=>• ' '
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $string_literal(l, state)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            return $assignment_expression_goto(l, state, 99);
                        }
                    }
                } else if (l.utf == 91/*[[]*/) {
                    /*peek*/
                    /*
                       160:464 array_literal=>• [ elision ]
                       160:465 array_literal=>• [ element_list ]
                       160:466 array_literal=>• [ element_list , elision ]
                       160:467 array_literal=>• [ ]
                       160:468 array_literal=>• [ element_list , ]
                    */
                    /*peek_level:1 offset:2*/
                    if (state = $array_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $assignment_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 123/*[{]*/) {
                    /*assert-production-closure*/
                    /*
                       152:446 object_literal=>• { }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $object_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $assignment_expression_goto(l, state, 99);
                    }
                } else if (defined_token_e043e2118bdadad0(l)/*[function]*/) {
                    /*assert-production-closure*/
                    /*
                       73:181 function_declaration=>• τfunction * binding_identifier ( formal_parameters ) { function_body }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $function_declaration(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        add_reduce(state, 1, 101);
                        return $assignment_expression_goto(l, state, 99);
                    }
                } else if (defined_token_2d05a4070a3ebcf4(l)/*[class]*/) {
                    /*assert-production-closure*/
                    /*
                       90:230 class_expression=>• τclass binding_identifier class_heritage { class_body }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $class_expression(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $assignment_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 47/*[/]*/) {
                    /*assert-production-closure*/
                    /*
                       150:443 regular_expression_literal=>• / / def$js_identifier
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $regular_expression_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $assignment_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 96/*[`]*/) {
                    /*assert-production-closure*/
                    /*
                       170:490 template_head=>• ` template_head_HC_listbody1_121 ${
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $template_head(l, state)) {
                        /*--unique-id--170--DO-NOT-REPLACE*/
                        return $assignment_expression_goto(l, state, 170);
                    }
                } else if (assert_consume(l, state, defined_token_19cd74c69f5512e8(l)/*[``]*/)) {
                    /*consume*/
                    /*
                       165:482 no_substitute_template=>`` •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 225);
                    return $assignment_expression_goto(l, state, 99);
                } else if (defined_token_79b82aa5b55f0605(l)/*[new]*/) {
                    /*peek*/
                    /*
                       99:279 member_expression=>• τnew member_expression arguments
                       103:285 new_target=>• τnew . τtarget
                       98:272 new_expression=>• τnew new_expression
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*new*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_79b82aa5b55f0605(l)/*[new]*/)) {
                        /*consume*/
                        /*
                           99:279 member_expression=>τnew • member_expression arguments
                           103:285 new_target=>τnew • . τtarget
                           98:272 new_expression=>τnew • new_expression
                        */
                        /*peek_level:0 offset:5 -- clause*/
                        /*. this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               103:285 new_target=>τnew . • τtarget
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, defined_token_1cb42c7dd41b3a7e(l)/*[target]*/)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 156);
                                return $assignment_expression_goto(l, state, 99);
                            }
                        } else if (((defined_token_19cd74c69f5512e8(l)/*[``]*/ || assert_table(l, 0x0, 0x8194, 0x88000000, 0x8000001)/*tbl:[ _ ] [ $ ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ] [ ( ]*/) || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                            /*peek*/
                            /*
                               99:279 member_expression=>τnew • member_expression arguments
                               98:272 new_expression=>τnew • new_expression
                            */
                            let mk = mark();
                            let anchor = l.copy();
                            let anchor_state = state;
                            /*279,3,1,272,2,1*/
                            /*99*/
                            /*peek_level:-1 offset:5*/
                            if (state = $member_expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $arguments(l, state)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 152);
                                    return $assignment_expression_goto(l, state, 99);
                                }
                            }
                            /*279,3,1,272,2,1*/
                            state = reset(mk, anchor, l, anchor_state);
                            /*peek_level:-1 offset:5*/
                            if (state = $new_expression(l, state)) {
                                /*--unique-id--97--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 148);
                                return $assignment_expression_goto(l, state, 97);
                            }
                        }
                    }
                } else if (defined_token_8fdd5a50d81134d2(l)/*[super]*/) {
                    /*peek*/
                    /*
                       100:280 super_property=>• τsuper . identifier_name
                       100:281 super_property=>• τsuper [ expression ]
                       105:293 super_call=>• τsuper arguments
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*super*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_8fdd5a50d81134d2(l)/*[super]*/)) {
                        /*consume*/
                        /*
                           100:280 super_property=>τsuper • . identifier_name
                           100:281 super_property=>τsuper • [ expression ]
                           105:293 super_call=>τsuper • arguments
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*. [ (*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               100:280 super_property=>τsuper . • identifier_name
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 153);
                                return $assignment_expression_goto(l, state, 99);
                            }
                        } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               100:281 super_property=>τsuper [ • expression ]
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 154);
                                    return $assignment_expression_goto(l, state, 99);
                                }
                            }
                        } else {
                            /*peek-production-closure*/
                            /*
                               105:293 super_call=>τsuper • arguments
                            */
                            /*peek_level:0 offset:5*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 159);
                                return $assignment_expression_goto(l, state, 104);
                            }
                        }
                    }
                } else if (defined_token_2ed685dc4925cfa4(l)/*[import]*/) {
                    /*peek*/
                    /*
                       102:284 import_meta=>• τimport . τmeta
                       106:294 import_call=>• τimport ( assignment_expression )
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*import*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_2ed685dc4925cfa4(l)/*[import]*/)) {
                        /*consume*/
                        /*
                           102:284 import_meta=>τimport • . τmeta
                           106:294 import_call=>τimport • ( assignment_expression )
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*. (*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               102:284 import_meta=>τimport . • τmeta
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, defined_token_7a48bf3a46a95de4(l)/*[meta]*/)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 155);
                                return $assignment_expression_goto(l, state, 99);
                            }
                        } else if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                            /*consume*/
                            /*
                               106:294 import_call=>τimport ( • assignment_expression )
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*--unique-id--104--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 160);
                                    return $assignment_expression_goto(l, state, 104);
                                }
                            }
                        }
                    }
                } else if (assert_consume(l, state, defined_token_99376be254728810(l)/*[true]*/ || defined_token_57da255105f722f9(l)/*[false]*/)) {
                    /*consume*/
                    /*
                       185:528 boolean_literal=>τtrue •
                       185:529 boolean_literal=>τfalse •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 242);
                    return $assignment_expression_goto(l, state, 99);
                } else if (l.isNum()/*[num]*/) {
                    /*peek*/
                    /*
                       183:526 numeric_literal=>• θnum
                       182:525 bigint=>• θnum τn
                    */
                    /*peek_level:1 offset:2 -- clause*/
                    /*n ( : ?. `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] ) ; { nl END_OF_FILE , } ?? { of*/
                    let pk = l.copy();
                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                    if (pk.utf == 110/*[n]*/) {
                        /*peek-production-closure*/
                        /*
                           182:525 bigint=>• θnum τn
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $bigint(l, state)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            return $assignment_expression_goto(l, state, 99);
                        }
                    } else {
                        /*peek-production-closure*/
                        /*
                           183:526 numeric_literal=>• θnum
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $numeric_literal(l, state)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            return $assignment_expression_goto(l, state, 99);
                        }
                    }
                }
            } else if (assert_table(l, 0x0, 0x110, 0x80000000, 0x0)/*tbl:[ ( ] [ _ ] [ $ ]*/ || l.isID()/*[id]*/) {
                /*peek*/
                /*
                   115:327 assignment_expression=>• conditional_expression
                   115:329 assignment_expression=>• arrow_function
                   115:330 assignment_expression=>• left_hand_side_expression = assignment_expression
                   115:331 assignment_expression=>• left_hand_side_expression assignment_operator assignment_expression
                */
                /*peek_level:0 offset:2 -- clause*/
                /*( get set target as from 228 async*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (l.utf == 40/*[(]*/) {
                    /*peek*/
                    /*
                       138:410 parenthesized=>• ( expression )
                       137:403 cover_parenthesized_expression_and_arrow_parameter_list=>• ( )
                       137:404 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , )
                       137:405 cover_parenthesized_expression_and_arrow_parameter_list=>• ( cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                       137:406 cover_parenthesized_expression_and_arrow_parameter_list=>• ( cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                       137:407 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                       137:408 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*(*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                        /*consume*/
                        /*
                           138:410 parenthesized=>( • expression )
                           137:403 cover_parenthesized_expression_and_arrow_parameter_list=>( • )
                           137:404 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , )
                           137:405 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                           137:406 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                           137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                           137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                        */
                        /*peek_level:0 offset:5 -- clause*/
                        /*) ... yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            /*consume*/
                            /*
                               137:403 cover_parenthesized_expression_and_arrow_parameter_list=>( ) •
                            */
                            /*--unique-id--86--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:5*/
                            add_reduce(state, 2, 190);
                            add_reduce(state, 1, 112);
                            return $assignment_expression_goto(l, state, 86);
                        } else if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                            /*peek*/
                            /*
                               137:405 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                               137:406 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                            */
                            /*peek_level:0 offset:6 -- clause*/
                            /*...*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                                /*peek*/
                                /*
                                   137:405 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                                   137:406 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                                */
                                /*peek_level:1 offset:6 -- clause*/
                                /*{ [ _ $ id async get set target as from*/
                                let pk = l.copy();
                                sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                                if ((pk.utf == 123/*[{]*/) || (pk.utf == 91/*[[]*/)) {
                                    /*peek-production-closure*/
                                    /*
                                       137:406 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                                    */
                                    /*peek_level:1 offset:6*/
                                    if (state = $cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120(l, state)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            /*--unique-id--86--DO-NOT-REPLACE*/
                                            add_reduce(state, 3, 191);
                                            add_reduce(state, 1, 112);
                                            return $assignment_expression_goto(l, state, 86);
                                        }
                                    }
                                } else {
                                    /*peek-production-closure*/
                                    /*
                                       137:405 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                                    */
                                    /*peek_level:1 offset:6*/
                                    if (state = $cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119(l, state)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            /*--unique-id--86--DO-NOT-REPLACE*/
                                            add_reduce(state, 3, 191);
                                            add_reduce(state, 1, 112);
                                            return $assignment_expression_goto(l, state, 86);
                                        }
                                    }
                                }
                            }
                        } else {
                            /*peek-production-closure*/
                            /*
                               138:410 parenthesized=>( • expression )
                               137:404 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , )
                               137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                               137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                            */
                            /*peek_level:-1 offset:7 -- clause*/
                            /*96*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                /*assert*/
                                /*
                                   138:410 parenthesized=>( • expression )
                                   137:404 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , )
                                   137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                                   137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                                */
                                /*peek_level:-1 offset:8 -- clause*/
                                /*) ,*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*consume*/
                                    /*
                                       138:410 parenthesized=>( expression ) •
                                    */
                                    /*--unique-id--138--DO-NOT-REPLACE*/
                                    /*peek_level:-1 offset:8*/
                                    add_reduce(state, 3, 191);
                                    return $assignment_expression_goto(l, state, 138);
                                } else if (l.utf == 44/*[,]*/) {
                                    /*peek*/
                                    /*
                                       137:404 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , )
                                       137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                                       137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                                    */
                                    /*peek_level:1 offset:8 -- clause*/
                                    /*) ...*/
                                    let pk = l.copy();
                                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                                    if (pk.utf == 41/*[)]*/) {
                                        /*peek*/
                                        /*
                                           137:404 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , )
                                        */
                                        /*peek_level:1 offset:8*/
                                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                /*--unique-id--86--DO-NOT-REPLACE*/
                                                add_reduce(state, 4, 191);
                                                add_reduce(state, 1, 112);
                                                return $assignment_expression_goto(l, state, 86);
                                            }
                                        }
                                    } else if (defined_token_f47f6de2d28c24e5(pk)/*[...]*/) {
                                        /*peek*/
                                        /*
                                           137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                                           137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                                        */
                                        /*peek_level:2 offset:8 -- clause*/
                                        /*{ [ _ $ id async get set target as from*/
                                        sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                                        if ((pk.utf == 123/*[{]*/) || (pk.utf == 91/*[[]*/)) {
                                            /*peek*/
                                            /*
                                               137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                                            */
                                            /*peek_level:2 offset:8*/
                                            if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (state = $cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120(l, state)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                        /*--unique-id--86--DO-NOT-REPLACE*/
                                                        add_reduce(state, 5, 192);
                                                        add_reduce(state, 1, 112);
                                                        return $assignment_expression_goto(l, state, 86);
                                                    }
                                                }
                                            }
                                        } else if (((pk.utf == 95/*[_]*/) || (pk.utf == 36/*[$]*/)) || pk.isID()/*[id]*/) {
                                            /*peek*/
                                            /*
                                               137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                                            */
                                            /*peek_level:2 offset:8*/
                                            if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (state = $cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119(l, state)) {
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                        /*--unique-id--86--DO-NOT-REPLACE*/
                                                        add_reduce(state, 5, 192);
                                                        add_reduce(state, 1, 112);
                                                        return $assignment_expression_goto(l, state, 86);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else if (assert_consume(l, state, ((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_5bca542dce980d9c(l)/*[set]*/) || defined_token_1cb42c7dd41b3a7e(l)/*[target]*/) || defined_token_fcc8b8fe09802878(l)/*[as]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/)) {
                    /*consume*/
                    /*
                       191:539 unreserved_word=>τget •
                       191:540 unreserved_word=>τset •
                       191:541 unreserved_word=>τtarget •
                       191:542 unreserved_word=>τas •
                       191:543 unreserved_word=>τfrom •
                       227:681 def$js_identifier=>tk:def$js_id_symbols •
                    */
                    /*--unique-id--187--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 245);
                    add_reduce(state, 1, 244);
                    return $assignment_expression_goto(l, state, 187);
                } else if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                    /*peek*/
                    /*
                       191:538 unreserved_word=>• τasync
                       73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                       73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                       73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                       73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                       73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                       73:189 function_declaration=>• τasync τfunction binding_identifier ( ) { function_body }
                       73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                       73:194 function_declaration=>• τasync τfunction ( ) { function_body }
                       85:215 arrow_function=>• τasync arrow_parameters = > concise_body
                    */
                    /*peek_level:1 offset:2 -- clause*/
                    /*( function as from ?. `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of extends _ $ id async get set target*/
                    let pk = l.copy();
                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                    if (pk.utf == 40/*[(]*/) {
                        /*peek*/
                        /*
                           191:538 unreserved_word=>• τasync
                           85:215 arrow_function=>• τasync arrow_parameters = > concise_body
                        */
                        /*peek_level:2 offset:2 -- clause*/
                        /*, ... yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- )*/
                        sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                        if (pk.utf == 44/*[,]*/) {
                            /*peek-production-closure*/
                            /*
                               191:538 unreserved_word=>• τasync
                            */
                            /*peek_level:2 offset:2*/
                            if (state = $unreserved_word(l, state)) {
                                /*--unique-id--187--DO-NOT-REPLACE*/
                                add_reduce(state, 1, 245);
                                add_reduce(state, 1, 244);
                                return $assignment_expression_goto(l, state, 187);
                            }
                        } else if ((((((defined_token_f47f6de2d28c24e5(pk)/*[...]*/ || defined_token_19cd74c69f5512e8(pk)/*[``]*/) || defined_token_6d4f77707d3e0e5a(pk)/*[++]*/) || defined_token_f2ef34011f64cef0(pk)/*[--]*/) || assert_table(pk, 0x0, 0xab96, 0x88000000, 0x48000001)/*tbl:[ ( ] [ [ ] [ { ] [ / ] [ " ] [ ' ] [ _ ] [ $ ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ] [ ) ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                            /*peek*/
                            /*
                               191:538 unreserved_word=>• τasync
                               85:215 arrow_function=>• τasync arrow_parameters = > concise_body
                            */
                            /*peek_level:-1 offset:4 -- clause*/
                            /*async*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                                /*consume*/
                                /*
                                   191:538 unreserved_word=>τasync •
                                   85:215 arrow_function=>τasync • arrow_parameters = > concise_body
                                */
                                /*peek_level:-1 offset:5 -- clause*/
                                /*from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE 228 async get set target*/
                                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                                if (((((((((((((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_14469127dc9c2c1f(l)/*[from]*/) || defined_token_fcc8b8fe09802878(l)/*[as]*/) || defined_token_37edf5ebc00dbfe6(l)/*[/=]*/) || defined_token_f5b15d408b6280ad(l)/*[?.] [??]*/) || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_e021d8532f9147fd(l)/*[extends]*/) || defined_token_870ef36bec3a881f(l)/*[+=] [++]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_4749150ec48378d0(l)/*[-=] [--]*/) || defined_token_318c95b1e64de46d(l)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(l)/*[>>=] [>>>=] [>>] [>>>] [>=]*/) || defined_token_2c51a4b82e64ba22(l)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_d1de557e71993f67(l)/*[|=] [||]*/) || defined_token_485338d34f29b52a(l)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_c6b5fbb944702d5a(l)/*[of]*/) || assert_table(l, 0x0, 0xfc00ff60, 0x68000000, 0x38000001)/*tbl:[ , ] [ } ] [ = ] [ ] ] [ * ] [ ) ] [ ( ] [ : ] [ ; ] [ { ] [ [ ] [ . ] [ ` ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ]*/) || l.END()) {
                                    /*assert-end*/
                                    /*
                                       191:538 unreserved_word=>τasync •
                                    */
                                    /*--unique-id--187--DO-NOT-REPLACE*/
                                    /*peek_level:0 offset:6*/
                                    add_reduce(state, 1, 245);
                                    add_reduce(state, 1, 244);
                                    return $assignment_expression_goto(l, state, 187);
                                } else {
                                    /*assert-production-closure*/
                                    /*
                                       85:215 arrow_function=>τasync • arrow_parameters = > concise_body
                                    */
                                    /*peek_level:-1 offset:5*/
                                    if (state = $arrow_parameters(l, state)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 62/*[>]*/)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (state = $concise_body(l, state)) {
                                                    /*--unique-id--115--DO-NOT-REPLACE*/
                                                    add_reduce(state, 5, 109);
                                                    return $assignment_expression_goto(l, state, 115);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else if (defined_token_e043e2118bdadad0(pk)/*[function]*/) {
                        /*assert-production-closure*/
                        /*
                           73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $function_declaration(l, state)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            add_reduce(state, 1, 101);
                            return $assignment_expression_goto(l, state, 99);
                        }
                    } else if (defined_token_fcc8b8fe09802878(pk)/*[as]*/ || defined_token_14469127dc9c2c1f(pk)/*[from]*/) {
                        /*peek*/
                        /*
                           191:538 unreserved_word=>• τasync
                           85:215 arrow_function=>• τasync arrow_parameters = > concise_body
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*async*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                            /*consume*/
                            /*
                               191:538 unreserved_word=>τasync •
                               85:215 arrow_function=>τasync • arrow_parameters = > concise_body
                            */
                            /*peek_level:-1 offset:5 -- clause*/
                            /*from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE 228 async get set target*/
                            sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                            if (((((((((((((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_14469127dc9c2c1f(l)/*[from]*/) || defined_token_fcc8b8fe09802878(l)/*[as]*/) || defined_token_37edf5ebc00dbfe6(l)/*[/=]*/) || defined_token_f5b15d408b6280ad(l)/*[?.] [??]*/) || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_e021d8532f9147fd(l)/*[extends]*/) || defined_token_870ef36bec3a881f(l)/*[+=] [++]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_4749150ec48378d0(l)/*[-=] [--]*/) || defined_token_318c95b1e64de46d(l)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(l)/*[>>=] [>>>=] [>>] [>>>] [>=]*/) || defined_token_2c51a4b82e64ba22(l)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_d1de557e71993f67(l)/*[|=] [||]*/) || defined_token_485338d34f29b52a(l)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_c6b5fbb944702d5a(l)/*[of]*/) || assert_table(l, 0x0, 0xfc00ff60, 0x68000000, 0x38000001)/*tbl:[ , ] [ } ] [ = ] [ ] ] [ * ] [ ) ] [ ( ] [ : ] [ ; ] [ { ] [ [ ] [ . ] [ ` ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ]*/) || l.END()) {
                                /*assert-end*/
                                /*
                                   191:538 unreserved_word=>τasync •
                                */
                                /*--unique-id--187--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:6*/
                                add_reduce(state, 1, 245);
                                add_reduce(state, 1, 244);
                                return $assignment_expression_goto(l, state, 187);
                            } else {
                                /*assert-production-closure*/
                                /*
                                   85:215 arrow_function=>τasync • arrow_parameters = > concise_body
                                */
                                /*peek_level:-1 offset:5*/
                                if (state = $arrow_parameters(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 62/*[>]*/)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $concise_body(l, state)) {
                                                /*--unique-id--115--DO-NOT-REPLACE*/
                                                add_reduce(state, 5, 109);
                                                return $assignment_expression_goto(l, state, 115);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else if ((((((((((((((((((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || defined_token_f5b15d408b6280ad(pk)/*[?.] [??]*/) || defined_token_19cd74c69f5512e8(pk)/*[``]*/) || defined_token_8c647931e6bf0c07(pk)/*[--] [-=]*/) || defined_token_7330fb2be3dc26eb(pk)/*[++] [+=]*/) || defined_token_37edf5ebc00dbfe6(pk)/*[/=]*/) || defined_token_2c342d130718e813(pk)/*[%=]*/) || defined_token_318c95b1e64de46d(pk)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(pk)/*[>>=] [>>>=] [>>>] [>>] [>=]*/) || defined_token_2c51a4b82e64ba22(pk)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(pk)/*[^=]*/) || defined_token_d1de557e71993f67(pk)/*[|=] [||]*/) || defined_token_485338d34f29b52a(pk)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(pk)/*[instanceof] [in]*/) || defined_token_04e94f0279c3936b(pk)/*[!==] [!=]*/) || defined_token_4df9552a310b74e2(pk)/*[===] [==]*/) || defined_token_c6b5fbb944702d5a(pk)/*[of]*/) || defined_token_e021d8532f9147fd(pk)/*[extends]*/) || assert_table(pk, 0x0, 0xfc00fe60, 0x68000000, 0x38000001)/*tbl:[ ` ] [ . ] [ [ ] [ * ] [ = ] [ % ] [ / ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ ] ] [ : ] [ ) ] [ ; ] [ , ] [ } ] [ { ]*/) {
                        /*peek-production-closure*/
                        /*
                           191:538 unreserved_word=>• τasync
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $unreserved_word(l, state)) {
                            /*--unique-id--187--DO-NOT-REPLACE*/
                            add_reduce(state, 1, 245);
                            add_reduce(state, 1, 244);
                            return $assignment_expression_goto(l, state, 187);
                        }
                    } else {
                        /*peek-production-closure*/
                        /*
                           85:215 arrow_function=>• τasync arrow_parameters = > concise_body
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $arrow_function(l, state)) {
                            /*--unique-id--115--DO-NOT-REPLACE*/
                            return $assignment_expression_goto(l, state, 115);
                        }
                    }
                }
            }
            debug_stack.push({ name: "assignment_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $assignment_expression_goto(l, state, prod) {
            debug_stack.push({ name: "assignment_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                switch (prod) {
                    case 86:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*=*/
                        if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                            /*consume*/
                            /*
                               85:216 arrow_function=>arrow_parameters = • > concise_body
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 62/*[>]*/)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $concise_body(l, state)) {
                                    /*--unique-id--115--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 110);
                                    prod = 115;
                                    continue;
                                }
                            }
                        }
                        break;
                    case 97:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= ; ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE ++ -- /= %= += -= <<= >>= >>>= &= ^= |= **=*/
                        if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                            /*consume*/
                            /*
                               115:330 assignment_expression=>left_hand_side_expression = • assignment_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                /*--unique-id--115--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 169);
                                prod = 115;
                                continue;
                            }
                        } else if (((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/) || defined_token_02147395f110c9cd(l)/*[<<] [<=]*/) || defined_token_79ab361fc2644f92(l)/*[>>] [>>>] [>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc00be60, 0x60000000, 0x30000000)/*tbl:[ ; ] [ * ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               134:396 update_expression=>left_hand_side_expression •
                            */
                            /*--unique-id--134--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 134;
                            continue;
                        } else if (assert_consume(l, state, defined_token_6d4f77707d3e0e5a(l)/*[++]*/ || defined_token_f2ef34011f64cef0(l)/*[--]*/)) {
                            /*consume*/
                            /*
                               134:397 update_expression=>left_hand_side_expression ++ •
                               134:398 update_expression=>left_hand_side_expression -- •
                            */
                            /*--unique-id--134--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 2, 188);
                            prod = 134;
                            continue;
                        } else if ((((((((((defined_token_37edf5ebc00dbfe6(l)/*[/=]*/ || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_97755a959607b02c(l)/*[+=]*/) || defined_token_eac5c307c1a80303(l)/*[-=]*/) || defined_token_5892ddf818179b1b(l)/*[<<=]*/) || defined_token_eaad0114272c4ffc(l)/*[>>=] [>>>=]*/) || defined_token_c7d7983a743dfb89(l)/*[&=]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_cf21971e32338a79(l)/*[|=]*/) || defined_token_aaa75300a4a9f79d(l)/*[asteriskasterisk=]*/) || (l.utf == 42/*[*]*/)) {
                            /*peek-production-closure*/
                            /*
                               115:331 assignment_expression=>left_hand_side_expression • assignment_operator assignment_expression
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $assignment_operator(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $assignment_expression(l, state)) {
                                    /*--unique-id--115--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 170);
                                    prod = 115;
                                    continue;
                                }
                            }
                        }
                        break;
                    case 99:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*[ . ( ?. `` ` += -= <<= >>= >>>= &= ^= |= **= { %= ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } /= ) * = ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               99:274 member_expression=>member_expression [ • expression ]
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 149);
                                    prod = 99;
                                    continue;
                                }
                            }
                        } else if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               99:275 member_expression=>member_expression . • identifier_name
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 150);
                                prod = 99;
                                continue;
                            }
                        } else if (l.utf == 40/*[(]*/) {
                            /*peek-production-closure*/
                            /*
                               88:221 cover_call_expression_and_async_arrow_head=>member_expression • arguments
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 114);
                                prod = 104;
                                continue;
                            }
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*peek-production-closure*/
                            /*
                               111:305 optional_expression=>member_expression • optional_chain
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                            /*peek-production-closure*/
                            /*
                               99:276 member_expression=>member_expression • template_literal
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $template_literal(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 151);
                                prod = 99;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               98:271 new_expression=>member_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        }
                        break;
                    case 104:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*. ( [ ?. `` ` = * /= %= += -= <<= >>= >>>= &= ^= |= **= { ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               104:286 call_expression=>call_expression . • identifier_name
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 150);
                                prod = 104;
                                continue;
                            }
                        } else if (l.utf == 40/*[(]*/) {
                            /*peek-production-closure*/
                            /*
                               104:289 call_expression=>call_expression • arguments
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 157);
                                prod = 104;
                                continue;
                            }
                        } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               104:290 call_expression=>call_expression [ • expression ]
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--104--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 149);
                                    prod = 104;
                                    continue;
                                }
                            }
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*peek-production-closure*/
                            /*
                               111:306 optional_expression=>call_expression • optional_chain
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                            /*peek-production-closure*/
                            /*
                               104:292 call_expression=>call_expression • template_literal
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $template_literal(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 158);
                                prod = 104;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               97:269 left_hand_side_expression=>call_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        }
                        break;
                    case 111:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= * /= %= += -= <<= >>= >>>= &= ^= |= **= { ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } ) ] , END_OF_FILE ?.*/
                        if (((((((((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_37edf5ebc00dbfe6(l)/*[/=]*/) || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_870ef36bec3a881f(l)/*[+=] [++]*/) || defined_token_4749150ec48378d0(l)/*[-=] [--]*/) || defined_token_318c95b1e64de46d(l)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(l)/*[>>=] [>>>=] [>>] [>>>] [>=]*/) || defined_token_2c51a4b82e64ba22(l)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_d1de557e71993f67(l)/*[|=] [||]*/) || defined_token_485338d34f29b52a(l)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || defined_token_c6b5fbb944702d5a(l)/*[of]*/) || assert_table(l, 0x0, 0xfc00be60, 0x60000000, 0x38000000)/*tbl:[ = ] [ * ] [ { ] [ ; ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               97:270 left_hand_side_expression=>optional_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*assert-production-closure*/
                            /*
                               111:307 optional_expression=>optional_expression • optional_chain
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        }
                        break;
                    case 118:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*? ; : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 63/*[?]*/)) {
                            /*consume*/
                            /*
                               117:345 conditional_expression=>short_circuit_expression ? • assignment_expression : assignment_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 58/*[:]*/)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $assignment_expression(l, state)) {
                                        /*--unique-id--115--DO-NOT-REPLACE*/
                                        add_reduce(state, 5, 171);
                                        prod = 115;
                                        continue;
                                    }
                                }
                            }
                        } else {
                            /*assert-end*/
                            /*
                               117:344 conditional_expression=>short_circuit_expression •
                            */
                            /*--unique-id--115--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 115;
                            continue;
                        }
                        break;
                    case 119:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*|| ; ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_62e66454a337f212(l)/*[||]*/)) {
                            /*consume*/
                            /*
                               119:349 logical_or_expression=>logical_or_expression || • logical_and_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $logical_and_expression(l, state)) {
                                /*--unique-id--119--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 172);
                                prod = 119;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               118:346 short_circuit_expression=>logical_or_expression •
                            */
                            /*--unique-id--118--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 118;
                            continue;
                        }
                        break;
                    case 120:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*&& ; || ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_39fb08573e91f166(l)/*[&&]*/)) {
                            /*consume*/
                            /*
                               120:351 logical_and_expression=>logical_and_expression && • bitwise_or_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_or_expression(l, state)) {
                                /*--unique-id--120--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 172);
                                prod = 120;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               119:348 logical_or_expression=>logical_and_expression •
                            */
                            /*--unique-id--119--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 119;
                            continue;
                        }
                        break;
                    case 121:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*? ??*/
                        if (l.utf == 63/*[?]*/) {
                            /*assert-end*/
                            /*
                               118:347 short_circuit_expression=>coalesce_expression •
                            */
                            /*--unique-id--118--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 118;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               122:353 coalesce_expression_head_group_0247_118=>coalesce_expression •
                            */
                            /*--unique-id--123--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 123;
                            continue;
                        }
                        break;
                    case 123:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*??*/
                        if (assert_consume(l, state, defined_token_87b2bbc4cf92dae2(l)/*[??]*/)) {
                            /*consume*/
                            /*
                               121:352 coalesce_expression=>coalesce_expression_head ?? • bitwise_or_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_or_expression(l, state)) {
                                /*--unique-id--121--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 173);
                                prod = 121;
                                continue;
                            }
                        }
                        break;
                    case 124:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*| ?? || ? &&*/
                        if (assert_consume(l, state, l.utf == 124/*[|]*/)) {
                            /*consume*/
                            /*
                               124:357 bitwise_or_expression=>bitwise_or_expression | • bitwise_xor_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_xor_expression(l, state)) {
                                /*--unique-id--124--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 174);
                                prod = 124;
                                continue;
                            }
                        } else if (defined_token_bfaf50116b98d6b4(l)/*[??]*/) {
                            /*assert-end*/
                            /*
                               122:354 coalesce_expression_head_group_0247_118=>bitwise_or_expression •
                            */
                            /*--unique-id--123--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 123;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               120:350 logical_and_expression=>bitwise_or_expression •
                            */
                            /*--unique-id--120--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 120;
                            continue;
                        }
                        break;
                    case 125:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*^ ; | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 94/*[^]*/)) {
                            /*consume*/
                            /*
                               125:359 bitwise_xor_expression=>bitwise_xor_expression ^ • bitwise_and_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_and_expression(l, state)) {
                                /*--unique-id--125--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 174);
                                prod = 125;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               124:356 bitwise_or_expression=>bitwise_xor_expression •
                            */
                            /*--unique-id--124--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 124;
                            continue;
                        }
                        break;
                    case 126:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*& ; ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 38/*[&]*/)) {
                            /*consume*/
                            /*
                               126:361 bitwise_and_expression=>bitwise_and_expression & • equality_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $equality_expression(l, state)) {
                                /*--unique-id--126--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 174);
                                prod = 126;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               125:358 bitwise_xor_expression=>bitwise_and_expression •
                            */
                            /*--unique-id--125--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 125;
                            continue;
                        }
                        break;
                    case 127:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*== != === !== ; & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_4df9552a310b74e2(l)/*[==] [===]*/ || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/)) {
                            /*consume*/
                            /*
                               127:363 equality_expression=>equality_expression == • relational_expression
                               127:364 equality_expression=>equality_expression != • relational_expression
                               127:365 equality_expression=>equality_expression === • relational_expression
                               127:366 equality_expression=>equality_expression !== • relational_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $relational_expression(l, state)) {
                                /*--unique-id--127--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 175);
                                prod = 127;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               126:360 bitwise_and_expression=>equality_expression •
                            */
                            /*--unique-id--126--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 126;
                            continue;
                        }
                        break;
                    case 128:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*in instanceof < > <= >= ; == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_b910302f4210711c(l)/*[in]*/)) {
                            /*consume*/
                            /*
                               128:373 relational_expression=>relational_expression τin • shift_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $shift_expression(l, state)) {
                                /*--unique-id--128--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 178);
                                prod = 128;
                                continue;
                            }
                        } else if (assert_consume(l, state, defined_token_8bbb4e33781aec74(l)/*[instanceof]*/)) {
                            /*consume*/
                            /*
                               128:372 relational_expression=>relational_expression τinstanceof • shift_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $shift_expression(l, state)) {
                                /*--unique-id--128--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 177);
                                prod = 128;
                                continue;
                            }
                        } else if (assert_consume(l, state, ((defined_token_7c7dc8357e27bfc9(l)/*[<=]*/ || defined_token_dad2c38b0a2035e1(l)/*[>=]*/) || (l.utf == 60/*[<]*/)) || (l.utf == 62/*[>]*/))) {
                            /*consume*/
                            /*
                               128:368 relational_expression=>relational_expression < • shift_expression
                               128:369 relational_expression=>relational_expression > • shift_expression
                               128:370 relational_expression=>relational_expression <= • shift_expression
                               128:371 relational_expression=>relational_expression >= • shift_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $shift_expression(l, state)) {
                                /*--unique-id--128--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 176);
                                prod = 128;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               127:362 equality_expression=>relational_expression •
                            */
                            /*--unique-id--127--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 127;
                            continue;
                        }
                        break;
                    case 129:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*; < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE << >> >>>*/
                        if ((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_7c7dc8357e27bfc9(l)/*[<=]*/) || defined_token_dad2c38b0a2035e1(l)/*[>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc001240, 0x60000000, 0x30000000)/*tbl:[ ; ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               128:367 relational_expression=>shift_expression •
                            */
                            /*--unique-id--128--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 128;
                            continue;
                        } else if (assert_consume(l, state, defined_token_bc9f32cdea34416c(l)/*[<<]*/ || defined_token_910c81aa02511c5e(l)/*[>>] [>>>]*/)) {
                            /*consume*/
                            /*
                               129:375 shift_expression=>shift_expression << • additive_expression
                               129:376 shift_expression=>shift_expression >> • additive_expression
                               129:377 shift_expression=>shift_expression >>> • additive_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $additive_expression(l, state)) {
                                /*--unique-id--129--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 179);
                                prod = 129;
                                continue;
                            }
                        }
                        break;
                    case 130:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*+ - ; << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, (l.utf == 43/*[+]*/) || (l.utf == 45/*[-]*/))) {
                            /*consume*/
                            /*
                               130:379 additive_expression=>additive_expression + • multiplicative_expression
                               130:380 additive_expression=>additive_expression - • multiplicative_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $multiplicative_expression(l, state)) {
                                /*--unique-id--130--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 180);
                                prod = 130;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               129:374 shift_expression=>additive_expression •
                            */
                            /*--unique-id--129--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 129;
                            continue;
                        }
                        break;
                    case 131:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /** / % ; + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, assert_table(l, 0x0, 0x8420, 0x0, 0x0)/*tbl:[ * ] [ / ] [ % ]*/)) {
                            /*consume*/
                            /*
                               131:382 multiplicative_expression=>multiplicative_expression * • exponentiation_expression
                               131:383 multiplicative_expression=>multiplicative_expression / • exponentiation_expression
                               131:384 multiplicative_expression=>multiplicative_expression % • exponentiation_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $exponentiation_expression(l, state)) {
                                /*--unique-id--131--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 181);
                                prod = 131;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               130:378 additive_expression=>multiplicative_expression •
                            */
                            /*--unique-id--130--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 130;
                            continue;
                        }
                        break;
                    case 134:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*; ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/) || defined_token_02147395f110c9cd(l)/*[<<] [<=]*/) || defined_token_79ab361fc2644f92(l)/*[>>] [>>>] [>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc00be60, 0x60000000, 0x30000000)/*tbl:[ ; ] [ * ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               133:387 unary_expression=>update_expression •
                            */
                            /*--unique-id--131--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 131;
                            continue;
                        } else if (assert_consume(l, state, defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/)) {
                            /*consume*/
                            /*
                               132:386 exponentiation_expression=>update_expression ** • exponentiation_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $exponentiation_expression(l, state)) {
                                /*--unique-id--131--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 182);
                                prod = 131;
                                continue;
                            }
                        }
                        break;
                    case 138:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= ?. ( `` ` . [ * /= %= += -= <<= >>= >>>= &= ^= |= **= -- ++ ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ??*/
                        if (l.utf == 61/*[=]*/) {
                            /*peek*/
                            /*
                               113:325 primary_expression=>parenthesized •
                               137:409 cover_parenthesized_expression_and_arrow_parameter_list=>parenthesized •
                            */
                            /*peek_level:0 offset:1 -- clause*/
                            /*> ++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (l.utf == 62/*[>]*/) {
                                /*assert-end*/
                                /*
                                   137:409 cover_parenthesized_expression_and_arrow_parameter_list=>parenthesized •
                                */
                                /*--unique-id--86--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:1*/
                                add_reduce(state, 1, 112);
                                prod = 86;
                                continue;
                            } else {
                                /*assert-end*/
                                /*
                                   113:325 primary_expression=>parenthesized •
                                */
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:1*/
                                add_reduce(state, 1, 167);
                                prod = 99;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               113:325 primary_expression=>parenthesized •
                            */
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 167);
                            prod = 99;
                            continue;
                        }
                        break;
                    case 170:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*yield async new ( super import this function class [ { / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ --*/
                        if ((((((((((((((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_670f23e41126e00b(l)/*[async] [as] [await]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_d38e0913b811b457(l)/*[super] [set]*/) || defined_token_2ed685dc4925cfa4(l)/*[import]*/) || defined_token_ca53d8e93addfaf5(l)/*[this] [target] [true] [typeof]*/) || defined_token_7b465f3c7dd55e63(l)/*[function] [from] [false]*/) || defined_token_2d05a4070a3ebcf4(l)/*[class]*/) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_8ed5fb4bce429503(l)/*[delete]*/) || defined_token_042ea6dc9657ee07(l)/*[void]*/) || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || assert_table(l, 0x0, 0xa986, 0x8000000, 0x48000001)/*tbl:[ ( ] [ [ ] [ { ] [ / ] [ " ] [ ' ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ]*/) || l.isNum()/*[num]*/) {
                            /*assert-production-closure*/
                            /*
                               166:483 substitute_template=>template_head • expression template_spans
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $template_spans(l, state)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 226);
                                    prod = 99;
                                    continue;
                                }
                            }
                        }
                        break;
                    case 187:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= ?. ( `` ` . [ * /= %= += -= <<= >>= >>>= &= ^= |= **= -- ++ ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ??*/
                        if (l.utf == 61/*[=]*/) {
                            /*peek*/
                            /*
                               113:317 primary_expression=>identifier_reference •
                               86:217 arrow_parameters=>identifier_reference •
                            */
                            /*peek_level:0 offset:1 -- clause*/
                            /*> ++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (l.utf == 62/*[>]*/) {
                                /*assert-end*/
                                /*
                                   86:217 arrow_parameters=>identifier_reference •
                                */
                                /*--unique-id--86--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:1*/
                                add_reduce(state, 1, 111);
                                prod = 86;
                                continue;
                            } else {
                                /*assert-end*/
                                /*
                                   113:317 primary_expression=>identifier_reference •
                                */
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:1*/
                                prod = 99;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               113:317 primary_expression=>identifier_reference •
                            */
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 99;
                            continue;
                        }
                        break;
                }
                break;
            }
            debug_stack.push({ name: "assignment_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 115);
        }
/*production name: assignment_operator
            grammar index: 116
            bodies:
	116:332 assignment_operator=>• * = - 
		116:333 assignment_operator=>• /= - 
		116:334 assignment_operator=>• %= - 
		116:335 assignment_operator=>• += - 
		116:336 assignment_operator=>• -= - 
		116:337 assignment_operator=>• <<= - 
		116:338 assignment_operator=>• >>= - 
		116:339 assignment_operator=>• >>>= - 
		116:340 assignment_operator=>• &= - 
		116:341 assignment_operator=>• ^= - 
		116:342 assignment_operator=>• |= - 
		116:343 assignment_operator=>• **= - 
            compile time: 7.144ms*/;
        function $assignment_operator(l, state) {
            debug_stack.push({ name: "assignment_operator RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /** /= %= += -= <<= >>= >>>= &= ^= |= **=*/
            if (assert_consume(l, state, l.utf == 42/*[*]*/)) {
                /*consume*/
                /*
                   116:332 assignment_operator=>* • =
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                    /*--unique-id--116--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 0);
                    debug_stack.push({ name: "assignment_operator RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (assert_consume(l, state, ((((((((defined_token_97774f2b5bfeb250(l)/*[/=]*/ || defined_token_4733e5135a271ed8(l)/*[%=]*/) || defined_token_c24c5cb9b7913dbc(l)/*[+=]*/) || defined_token_9d56a2003e2b2110(l)/*[-=]*/) || defined_token_b4440dba03e6daa2(l)/*[<<=]*/) || defined_token_b821a301e2038a49(l)/*[>>=] [>>>=]*/) || defined_token_8d305de3f9ddde92(l)/*[&=]*/) || defined_token_87cd28843f68bc2f(l)/*[^=]*/) || defined_token_fa8b90636881e66b(l)/*[|=]*/) || defined_token_3e1cfcd85fb122d2(l)/*[asteriskasterisk=]*/)) {
                /*consume*/
                /*
                   116:333 assignment_operator=>/= •
                   116:334 assignment_operator=>%= •
                   116:335 assignment_operator=>+= •
                   116:336 assignment_operator=>-= •
                   116:337 assignment_operator=><<= •
                   116:338 assignment_operator=>>>= •
                   116:339 assignment_operator=>>>>= •
                   116:340 assignment_operator=>&= •
                   116:341 assignment_operator=>^= •
                   116:342 assignment_operator=>|= •
                   116:343 assignment_operator=>**= •
                */
                /*--unique-id--116--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "assignment_operator RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "assignment_operator RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: conditional_expression
            grammar index: 117
            bodies:
	117:344 conditional_expression=>• short_circuit_expression - 
		117:345 conditional_expression=>• short_circuit_expression ? assignment_expression : assignment_expression - 
            compile time: 11.605ms*/;
        function $conditional_expression(l, state) {
            debug_stack.push({ name: "conditional_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*118*/
            if (state = $short_circuit_expression(l, state)) {
                /*assert*/
                /*
                   117:344 conditional_expression=>• short_circuit_expression
                   117:345 conditional_expression=>• short_circuit_expression ? assignment_expression : assignment_expression
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*? ; : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 63/*[?]*/)) {
                    /*consume*/
                    /*
                       117:345 conditional_expression=>short_circuit_expression ? • assignment_expression : assignment_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $assignment_expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 58/*[:]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                /*--unique-id--117--DO-NOT-REPLACE*/
                                add_reduce(state, 5, 171);
                                debug_stack.push({ name: "conditional_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                } else {
                    /*assert-end*/
                    /*
                       117:344 conditional_expression=>short_circuit_expression •
                    */
                    /*--unique-id--117--DO-NOT-REPLACE*/
                    /*peek_level:0 offset:2*/
                    debug_stack.push({ name: "conditional_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "conditional_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: short_circuit_expression
            grammar index: 118
            bodies:
	118:346 short_circuit_expression=>• logical_or_expression - 
		118:347 short_circuit_expression=>• coalesce_expression - 
            compile time: 1298.269ms*/;
        function $short_circuit_expression(l, state) {
            debug_stack.push({ name: "short_circuit_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*this async get set target as from true false null " ' num [ { function class / `` ` ( new super import _ $ id ++ -- delete void typeof + ~ ! - await*/
            if (((((defined_token_19cd74c69f5512e8(l)/*[``]*/ || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || assert_table(l, 0x0, 0xa996, 0x88000000, 0x48000001)/*tbl:[ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ] [ ( ] [ _ ] [ $ ] [ + ] [ ~ ] [ ! ] [ - ]*/) || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                /*peek*/
                /*
                   118:346 short_circuit_expression=>• logical_or_expression
                   118:347 short_circuit_expression=>• coalesce_expression
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*this null [ { function class ` `` super delete void - await true false get set target as from 228 async / ( new import typeof " ' + ~ ! ++ -- num*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, defined_token_57e43262d833cfeb(l)/*[this]*/)) {
                    /*consume*/
                    /*
                       113:316 primary_expression=>τthis •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 166);
                    return $short_circuit_expression_goto(l, state, 99);
                } else if (assert_consume(l, state, defined_token_6fe6f90f8fe15dd0(l)/*[null]*/)) {
                    /*consume*/
                    /*
                       184:527 null_literal=>τnull •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 241);
                    return $short_circuit_expression_goto(l, state, 99);
                } else if (l.utf == 91/*[[]*/) {
                    /*assert-production-closure*/
                    /*
                       160:464 array_literal=>• [ elision ]
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $array_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $short_circuit_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 123/*[{]*/) {
                    /*assert-production-closure*/
                    /*
                       152:446 object_literal=>• { }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $object_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $short_circuit_expression_goto(l, state, 99);
                    }
                } else if (defined_token_e043e2118bdadad0(l)/*[function]*/) {
                    /*assert-production-closure*/
                    /*
                       73:181 function_declaration=>• τfunction * binding_identifier ( formal_parameters ) { function_body }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $function_declaration(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        add_reduce(state, 1, 101);
                        return $short_circuit_expression_goto(l, state, 99);
                    }
                } else if (defined_token_2d05a4070a3ebcf4(l)/*[class]*/) {
                    /*assert-production-closure*/
                    /*
                       90:230 class_expression=>• τclass binding_identifier class_heritage { class_body }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $class_expression(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $short_circuit_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 96/*[`]*/) {
                    /*assert-production-closure*/
                    /*
                       170:490 template_head=>• ` template_head_HC_listbody1_121 ${
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $template_head(l, state)) {
                        /*--unique-id--170--DO-NOT-REPLACE*/
                        return $short_circuit_expression_goto(l, state, 170);
                    }
                } else if (assert_consume(l, state, defined_token_19cd74c69f5512e8(l)/*[``]*/)) {
                    /*consume*/
                    /*
                       165:482 no_substitute_template=>`` •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 225);
                    return $short_circuit_expression_goto(l, state, 99);
                } else if (defined_token_8fdd5a50d81134d2(l)/*[super]*/) {
                    /*peek*/
                    /*
                       100:280 super_property=>• τsuper . identifier_name
                       100:281 super_property=>• τsuper [ expression ]
                       105:293 super_call=>• τsuper arguments
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*super*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_8fdd5a50d81134d2(l)/*[super]*/)) {
                        /*consume*/
                        /*
                           100:280 super_property=>τsuper • . identifier_name
                           100:281 super_property=>τsuper • [ expression ]
                           105:293 super_call=>τsuper • arguments
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*. [ (*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               100:280 super_property=>τsuper . • identifier_name
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 153);
                                return $short_circuit_expression_goto(l, state, 99);
                            }
                        } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               100:281 super_property=>τsuper [ • expression ]
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 154);
                                    return $short_circuit_expression_goto(l, state, 99);
                                }
                            }
                        } else {
                            /*peek-production-closure*/
                            /*
                               105:293 super_call=>τsuper • arguments
                            */
                            /*peek_level:0 offset:5*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 159);
                                return $short_circuit_expression_goto(l, state, 104);
                            }
                        }
                    }
                } else if (assert_consume(l, state, defined_token_8ed5fb4bce429503(l)/*[delete]*/)) {
                    /*consume*/
                    /*
                       133:388 unary_expression=>τdelete • unary_expression
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $unary_expression(l, state)) {
                        /*--unique-id--131--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 183);
                        return $short_circuit_expression_goto(l, state, 131);
                    }
                } else if (assert_consume(l, state, defined_token_042ea6dc9657ee07(l)/*[void]*/)) {
                    /*consume*/
                    /*
                       133:389 unary_expression=>τvoid • unary_expression
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $unary_expression(l, state)) {
                        /*--unique-id--131--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 184);
                        return $short_circuit_expression_goto(l, state, 131);
                    }
                } else if (assert_consume(l, state, l.utf == 45/*[-]*/)) {
                    /*consume*/
                    /*
                       133:394 unary_expression=>- • unary_expression
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $unary_expression(l, state)) {
                        /*--unique-id--131--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 187);
                        return $short_circuit_expression_goto(l, state, 131);
                    }
                } else if (assert_consume(l, state, defined_token_ded0f96a7228c7c5(l)/*[await]*/)) {
                    /*consume*/
                    /*
                       114:326 await_expression=>τawait • unary_expression
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $unary_expression(l, state)) {
                        /*--unique-id--131--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 168);
                        return $short_circuit_expression_goto(l, state, 131);
                    }
                } else if (assert_consume(l, state, defined_token_99376be254728810(l)/*[true]*/ || defined_token_57da255105f722f9(l)/*[false]*/)) {
                    /*consume*/
                    /*
                       185:528 boolean_literal=>τtrue •
                       185:529 boolean_literal=>τfalse •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 242);
                    return $short_circuit_expression_goto(l, state, 99);
                } else if (assert_consume(l, state, ((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_5bca542dce980d9c(l)/*[set]*/) || defined_token_1cb42c7dd41b3a7e(l)/*[target]*/) || defined_token_fcc8b8fe09802878(l)/*[as]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/)) {
                    /*consume*/
                    /*
                       191:539 unreserved_word=>τget •
                       191:540 unreserved_word=>τset •
                       191:541 unreserved_word=>τtarget •
                       191:542 unreserved_word=>τas •
                       191:543 unreserved_word=>τfrom •
                       227:681 def$js_identifier=>tk:def$js_id_symbols •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 245);
                    add_reduce(state, 1, 244);
                    return $short_circuit_expression_goto(l, state, 99);
                } else if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                    /*peek*/
                    /*
                       191:538 unreserved_word=>• τasync
                       73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                       73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                       73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                       73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                       73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                       73:189 function_declaration=>• τasync τfunction binding_identifier ( ) { function_body }
                       73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                       73:194 function_declaration=>• τasync τfunction ( ) { function_body }
                    */
                    /*peek_level:1 offset:2 -- clause*/
                    /*function ?. ( `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of as from extends*/
                    let pk = l.copy();
                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                    if (defined_token_e043e2118bdadad0(pk)/*[function]*/) {
                        /*peek*/
                        /*
                           73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                           73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                           73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                           73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                           73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                           73:189 function_declaration=>• τasync τfunction binding_identifier ( ) { function_body }
                           73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                           73:194 function_declaration=>• τasync τfunction ( ) { function_body }
                        */
                        /*peek_level:2 offset:2 -- clause*/
                        /** _ $ id async get set target as from (*/
                        sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                        if (pk.utf == 42/*[*]*/) {
                            /*peek*/
                            /*
                               73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                               73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                               73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                               73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                            */
                            /*peek_level:3 offset:2*/
                            if (state = $function_declaration(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 1, 101);
                                return $short_circuit_expression_goto(l, state, 99);
                            }
                        } else {
                            /*assert-production-closure*/
                            /*
                               73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                               73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                            */
                            /*peek_level:2 offset:2*/
                            if (state = $function_declaration(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 1, 101);
                                return $short_circuit_expression_goto(l, state, 99);
                            }
                        }
                    } else {
                        /*peek-production-closure*/
                        /*
                           191:538 unreserved_word=>• τasync
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $unreserved_word(l, state)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            add_reduce(state, 1, 245);
                            add_reduce(state, 1, 244);
                            return $short_circuit_expression_goto(l, state, 99);
                        }
                    }
                } else if (l.utf == 47/*[/]*/) {
                    /*assert-production-closure*/
                    /*
                       150:443 regular_expression_literal=>• / / def$js_identifier
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $regular_expression_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $short_circuit_expression_goto(l, state, 99);
                    }
                } else if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                    /*consume*/
                    /*
                       138:410 parenthesized=>( • expression )
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 191);
                            add_reduce(state, 1, 167);
                            return $short_circuit_expression_goto(l, state, 99);
                        }
                    }
                } else if (defined_token_79b82aa5b55f0605(l)/*[new]*/) {
                    /*peek*/
                    /*
                       99:279 member_expression=>• τnew member_expression arguments
                       103:285 new_target=>• τnew . τtarget
                       98:272 new_expression=>• τnew new_expression
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*new*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_79b82aa5b55f0605(l)/*[new]*/)) {
                        /*consume*/
                        /*
                           99:279 member_expression=>τnew • member_expression arguments
                           103:285 new_target=>τnew • . τtarget
                           98:272 new_expression=>τnew • new_expression
                        */
                        /*peek_level:0 offset:5 -- clause*/
                        /*. this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               103:285 new_target=>τnew . • τtarget
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, defined_token_1cb42c7dd41b3a7e(l)/*[target]*/)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 156);
                                return $short_circuit_expression_goto(l, state, 99);
                            }
                        } else if (((defined_token_19cd74c69f5512e8(l)/*[``]*/ || assert_table(l, 0x0, 0x8194, 0x88000000, 0x8000001)/*tbl:[ _ ] [ $ ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ] [ ( ]*/) || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                            /*peek*/
                            /*
                               99:279 member_expression=>τnew • member_expression arguments
                               98:272 new_expression=>τnew • new_expression
                            */
                            let mk = mark();
                            let anchor = l.copy();
                            let anchor_state = state;
                            /*279,3,1,272,2,1*/
                            /*99*/
                            /*peek_level:-1 offset:5*/
                            if (state = $member_expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $arguments(l, state)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 152);
                                    return $short_circuit_expression_goto(l, state, 99);
                                }
                            }
                            /*279,3,1,272,2,1*/
                            state = reset(mk, anchor, l, anchor_state);
                            /*peek_level:-1 offset:5*/
                            if (state = $new_expression(l, state)) {
                                /*--unique-id--97--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 148);
                                return $short_circuit_expression_goto(l, state, 97);
                            }
                        }
                    }
                } else if (defined_token_2ed685dc4925cfa4(l)/*[import]*/) {
                    /*peek*/
                    /*
                       102:284 import_meta=>• τimport . τmeta
                       106:294 import_call=>• τimport ( assignment_expression )
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*import*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_2ed685dc4925cfa4(l)/*[import]*/)) {
                        /*consume*/
                        /*
                           102:284 import_meta=>τimport • . τmeta
                           106:294 import_call=>τimport • ( assignment_expression )
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*. (*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               102:284 import_meta=>τimport . • τmeta
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, defined_token_7a48bf3a46a95de4(l)/*[meta]*/)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 155);
                                return $short_circuit_expression_goto(l, state, 99);
                            }
                        } else if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                            /*consume*/
                            /*
                               106:294 import_call=>τimport ( • assignment_expression )
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*--unique-id--104--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 160);
                                    return $short_circuit_expression_goto(l, state, 104);
                                }
                            }
                        }
                    }
                } else if (assert_consume(l, state, defined_token_9451180aac506098(l)/*[typeof]*/)) {
                    /*consume*/
                    /*
                       133:390 unary_expression=>τtypeof • unary_expression
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $unary_expression(l, state)) {
                        /*--unique-id--131--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 185);
                        return $short_circuit_expression_goto(l, state, 131);
                    }
                } else if ((l.utf == 34/*["]*/) || (l.utf == 39/*[']*/)) {
                    /*assert-production-closure*/
                    /*
                       179:514 string_literal=>• " string_literal_HC_listbody1_124 "
                       179:515 string_literal=>• ' string_literal_HC_listbody1_125 '
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $string_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $short_circuit_expression_goto(l, state, 99);
                    }
                } else if (assert_consume(l, state, assert_table(l, 0x0, 0x802, 0x0, 0x40000000)/*tbl:[ + ] [ ~ ] [ ! ]*/)) {
                    /*consume*/
                    /*
                       133:391 unary_expression=>+ • unary_expression
                       133:392 unary_expression=>~ • unary_expression
                       133:393 unary_expression=>! • unary_expression
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $unary_expression(l, state)) {
                        /*--unique-id--131--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 186);
                        return $short_circuit_expression_goto(l, state, 131);
                    }
                } else if (assert_consume(l, state, defined_token_6d4f77707d3e0e5a(l)/*[++]*/ || defined_token_f2ef34011f64cef0(l)/*[--]*/)) {
                    /*consume*/
                    /*
                       134:399 update_expression=>++ • unary_expression
                       134:400 update_expression=>-- • unary_expression
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $unary_expression(l, state)) {
                        /*--unique-id--134--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 189);
                        return $short_circuit_expression_goto(l, state, 134);
                    }
                } else if (l.isNum()/*[num]*/) {
                    /*peek*/
                    /*
                       183:526 numeric_literal=>• θnum
                       182:525 bigint=>• θnum τn
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*num*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.isNum()/*[num]*/)) {
                        /*consume*/
                        /*
                           183:526 numeric_literal=>θnum •
                           182:525 bigint=>θnum • τn
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*n , ] = * ) /= ( } : ; ?. %= { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 110/*[n]*/)) {
                            /*consume*/
                            /*
                               182:525 bigint=>θnum τn •
                            */
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:5*/
                            add_reduce(state, 2, 239);
                            return $short_circuit_expression_goto(l, state, 99);
                        } else {
                            /*assert-end*/
                            /*
                               183:526 numeric_literal=>θnum •
                            */
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:6*/
                            add_reduce(state, 1, 240);
                            return $short_circuit_expression_goto(l, state, 99);
                        }
                    }
                }
            }
            debug_stack.push({ name: "short_circuit_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $short_circuit_expression_goto(l, state, prod) {
            debug_stack.push({ name: "short_circuit_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                switch (prod) {
                    case 97:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*; ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE ++ --*/
                        if (((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/) || defined_token_02147395f110c9cd(l)/*[<<] [<=]*/) || defined_token_79ab361fc2644f92(l)/*[>>] [>>>] [>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc00be60, 0x60000000, 0x30000000)/*tbl:[ ; ] [ * ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               134:396 update_expression=>left_hand_side_expression •
                            */
                            /*--unique-id--134--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 134;
                            continue;
                        } else if (assert_consume(l, state, defined_token_6d4f77707d3e0e5a(l)/*[++]*/ || defined_token_f2ef34011f64cef0(l)/*[--]*/)) {
                            /*consume*/
                            /*
                               134:397 update_expression=>left_hand_side_expression ++ •
                               134:398 update_expression=>left_hand_side_expression -- •
                            */
                            /*--unique-id--134--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 2, 188);
                            prod = 134;
                            continue;
                        }
                        break;
                    case 99:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*[ . ( ?. `` ` += -= <<= >>= >>>= &= ^= |= **= { %= ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } /= ) * = ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               99:274 member_expression=>member_expression [ • expression ]
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 149);
                                    prod = 99;
                                    continue;
                                }
                            }
                        } else if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               99:275 member_expression=>member_expression . • identifier_name
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 150);
                                prod = 99;
                                continue;
                            }
                        } else if (l.utf == 40/*[(]*/) {
                            /*peek-production-closure*/
                            /*
                               88:221 cover_call_expression_and_async_arrow_head=>member_expression • arguments
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 114);
                                prod = 104;
                                continue;
                            }
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*peek-production-closure*/
                            /*
                               111:305 optional_expression=>member_expression • optional_chain
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                            /*peek-production-closure*/
                            /*
                               99:276 member_expression=>member_expression • template_literal
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $template_literal(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 151);
                                prod = 99;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               98:271 new_expression=>member_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        }
                        break;
                    case 104:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*. ( [ ?. `` ` = * /= %= += -= <<= >>= >>>= &= ^= |= **= { ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               104:286 call_expression=>call_expression . • identifier_name
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 150);
                                prod = 104;
                                continue;
                            }
                        } else if (l.utf == 40/*[(]*/) {
                            /*peek-production-closure*/
                            /*
                               104:289 call_expression=>call_expression • arguments
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 157);
                                prod = 104;
                                continue;
                            }
                        } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               104:290 call_expression=>call_expression [ • expression ]
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--104--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 149);
                                    prod = 104;
                                    continue;
                                }
                            }
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*peek-production-closure*/
                            /*
                               111:306 optional_expression=>call_expression • optional_chain
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                            /*peek-production-closure*/
                            /*
                               104:292 call_expression=>call_expression • template_literal
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $template_literal(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 158);
                                prod = 104;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               97:269 left_hand_side_expression=>call_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        }
                        break;
                    case 111:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= * /= %= += -= <<= >>= >>>= &= ^= |= **= { ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } ) ] , END_OF_FILE ?.*/
                        if (((((((((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_37edf5ebc00dbfe6(l)/*[/=]*/) || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_870ef36bec3a881f(l)/*[+=] [++]*/) || defined_token_4749150ec48378d0(l)/*[-=] [--]*/) || defined_token_318c95b1e64de46d(l)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(l)/*[>>=] [>>>=] [>>] [>>>] [>=]*/) || defined_token_2c51a4b82e64ba22(l)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_d1de557e71993f67(l)/*[|=] [||]*/) || defined_token_485338d34f29b52a(l)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || defined_token_c6b5fbb944702d5a(l)/*[of]*/) || assert_table(l, 0x0, 0xfc00be60, 0x60000000, 0x38000000)/*tbl:[ = ] [ * ] [ { ] [ ; ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               97:270 left_hand_side_expression=>optional_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*assert-production-closure*/
                            /*
                               111:307 optional_expression=>optional_expression • optional_chain
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        }
                        break;
                    case 119:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*|| ; ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_62e66454a337f212(l)/*[||]*/)) {
                            /*consume*/
                            /*
                               119:349 logical_or_expression=>logical_or_expression || • logical_and_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $logical_and_expression(l, state)) {
                                /*--unique-id--119--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 172);
                                prod = 119;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               118:346 short_circuit_expression=>logical_or_expression •
                            */
                            /*--unique-id--118--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 118;
                            continue;
                        }
                        break;
                    case 120:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*&& ; || ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_39fb08573e91f166(l)/*[&&]*/)) {
                            /*consume*/
                            /*
                               120:351 logical_and_expression=>logical_and_expression && • bitwise_or_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_or_expression(l, state)) {
                                /*--unique-id--120--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 172);
                                prod = 120;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               119:348 logical_or_expression=>logical_and_expression •
                            */
                            /*--unique-id--119--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 119;
                            continue;
                        }
                        break;
                    case 121:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*; ? : { nl END_OF_FILE } ) ] , END_OF_FILE ??*/
                        if ((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || assert_table(l, 0x0, 0x8c001200, 0x20000000, 0x20000000)/*tbl:[ ; ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               118:347 short_circuit_expression=>coalesce_expression •
                            */
                            /*--unique-id--118--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 118;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               122:353 coalesce_expression_head_group_0247_118=>coalesce_expression •
                            */
                            /*--unique-id--123--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 123;
                            continue;
                        }
                        break;
                    case 123:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*??*/
                        if (assert_consume(l, state, defined_token_87b2bbc4cf92dae2(l)/*[??]*/)) {
                            /*consume*/
                            /*
                               121:352 coalesce_expression=>coalesce_expression_head ?? • bitwise_or_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_or_expression(l, state)) {
                                /*--unique-id--121--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 173);
                                prod = 121;
                                continue;
                            }
                        }
                        break;
                    case 124:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*| ?? || &&*/
                        if (assert_consume(l, state, l.utf == 124/*[|]*/)) {
                            /*consume*/
                            /*
                               124:357 bitwise_or_expression=>bitwise_or_expression | • bitwise_xor_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_xor_expression(l, state)) {
                                /*--unique-id--124--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 174);
                                prod = 124;
                                continue;
                            }
                        } else if (defined_token_87b2bbc4cf92dae2(l)/*[??]*/) {
                            /*assert-end*/
                            /*
                               122:354 coalesce_expression_head_group_0247_118=>bitwise_or_expression •
                            */
                            /*--unique-id--123--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 123;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               120:350 logical_and_expression=>bitwise_or_expression •
                            */
                            /*--unique-id--120--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            prod = 120;
                            continue;
                        }
                        break;
                    case 125:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*^ ; | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 94/*[^]*/)) {
                            /*consume*/
                            /*
                               125:359 bitwise_xor_expression=>bitwise_xor_expression ^ • bitwise_and_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $bitwise_and_expression(l, state)) {
                                /*--unique-id--125--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 174);
                                prod = 125;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               124:356 bitwise_or_expression=>bitwise_xor_expression •
                            */
                            /*--unique-id--124--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 124;
                            continue;
                        }
                        break;
                    case 126:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*& ; ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 38/*[&]*/)) {
                            /*consume*/
                            /*
                               126:361 bitwise_and_expression=>bitwise_and_expression & • equality_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $equality_expression(l, state)) {
                                /*--unique-id--126--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 174);
                                prod = 126;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               125:358 bitwise_xor_expression=>bitwise_and_expression •
                            */
                            /*--unique-id--125--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 125;
                            continue;
                        }
                        break;
                    case 127:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*== != === !== ; & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_4df9552a310b74e2(l)/*[==] [===]*/ || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/)) {
                            /*consume*/
                            /*
                               127:363 equality_expression=>equality_expression == • relational_expression
                               127:364 equality_expression=>equality_expression != • relational_expression
                               127:365 equality_expression=>equality_expression === • relational_expression
                               127:366 equality_expression=>equality_expression !== • relational_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $relational_expression(l, state)) {
                                /*--unique-id--127--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 175);
                                prod = 127;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               126:360 bitwise_and_expression=>equality_expression •
                            */
                            /*--unique-id--126--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 126;
                            continue;
                        }
                        break;
                    case 128:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*in instanceof < > <= >= ; == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, defined_token_b910302f4210711c(l)/*[in]*/)) {
                            /*consume*/
                            /*
                               128:373 relational_expression=>relational_expression τin • shift_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $shift_expression(l, state)) {
                                /*--unique-id--128--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 178);
                                prod = 128;
                                continue;
                            }
                        } else if (assert_consume(l, state, defined_token_8bbb4e33781aec74(l)/*[instanceof]*/)) {
                            /*consume*/
                            /*
                               128:372 relational_expression=>relational_expression τinstanceof • shift_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $shift_expression(l, state)) {
                                /*--unique-id--128--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 177);
                                prod = 128;
                                continue;
                            }
                        } else if (assert_consume(l, state, ((defined_token_7c7dc8357e27bfc9(l)/*[<=]*/ || defined_token_dad2c38b0a2035e1(l)/*[>=]*/) || (l.utf == 60/*[<]*/)) || (l.utf == 62/*[>]*/))) {
                            /*consume*/
                            /*
                               128:368 relational_expression=>relational_expression < • shift_expression
                               128:369 relational_expression=>relational_expression > • shift_expression
                               128:370 relational_expression=>relational_expression <= • shift_expression
                               128:371 relational_expression=>relational_expression >= • shift_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $shift_expression(l, state)) {
                                /*--unique-id--128--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 176);
                                prod = 128;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               127:362 equality_expression=>relational_expression •
                            */
                            /*--unique-id--127--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 127;
                            continue;
                        }
                        break;
                    case 129:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*; < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE << >> >>>*/
                        if ((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_7c7dc8357e27bfc9(l)/*[<=]*/) || defined_token_dad2c38b0a2035e1(l)/*[>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc001240, 0x60000000, 0x30000000)/*tbl:[ ; ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               128:367 relational_expression=>shift_expression •
                            */
                            /*--unique-id--128--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 128;
                            continue;
                        } else if (assert_consume(l, state, defined_token_bc9f32cdea34416c(l)/*[<<]*/ || defined_token_910c81aa02511c5e(l)/*[>>] [>>>]*/)) {
                            /*consume*/
                            /*
                               129:375 shift_expression=>shift_expression << • additive_expression
                               129:376 shift_expression=>shift_expression >> • additive_expression
                               129:377 shift_expression=>shift_expression >>> • additive_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $additive_expression(l, state)) {
                                /*--unique-id--129--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 179);
                                prod = 129;
                                continue;
                            }
                        }
                        break;
                    case 130:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*+ - ; << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, (l.utf == 43/*[+]*/) || (l.utf == 45/*[-]*/))) {
                            /*consume*/
                            /*
                               130:379 additive_expression=>additive_expression + • multiplicative_expression
                               130:380 additive_expression=>additive_expression - • multiplicative_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $multiplicative_expression(l, state)) {
                                /*--unique-id--130--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 180);
                                prod = 130;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               129:374 shift_expression=>additive_expression •
                            */
                            /*--unique-id--129--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 129;
                            continue;
                        }
                        break;
                    case 131:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /** / % ; + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, assert_table(l, 0x0, 0x8420, 0x0, 0x0)/*tbl:[ * ] [ / ] [ % ]*/)) {
                            /*consume*/
                            /*
                               131:382 multiplicative_expression=>multiplicative_expression * • exponentiation_expression
                               131:383 multiplicative_expression=>multiplicative_expression / • exponentiation_expression
                               131:384 multiplicative_expression=>multiplicative_expression % • exponentiation_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $exponentiation_expression(l, state)) {
                                /*--unique-id--131--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 181);
                                prod = 131;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               130:378 additive_expression=>multiplicative_expression •
                            */
                            /*--unique-id--130--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 130;
                            continue;
                        }
                        break;
                    case 134:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*; ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/) || defined_token_02147395f110c9cd(l)/*[<<] [<=]*/) || defined_token_79ab361fc2644f92(l)/*[>>] [>>>] [>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc00be60, 0x60000000, 0x30000000)/*tbl:[ ; ] [ * ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               133:387 unary_expression=>update_expression •
                            */
                            /*--unique-id--131--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 131;
                            continue;
                        } else if (assert_consume(l, state, defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/)) {
                            /*consume*/
                            /*
                               132:386 exponentiation_expression=>update_expression ** • exponentiation_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $exponentiation_expression(l, state)) {
                                /*--unique-id--131--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 182);
                                prod = 131;
                                continue;
                            }
                        }
                        break;
                    case 170:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*yield async new ( super import this function class [ { / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ --*/
                        if ((((((((((((((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_670f23e41126e00b(l)/*[async] [as] [await]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_d38e0913b811b457(l)/*[super] [set]*/) || defined_token_2ed685dc4925cfa4(l)/*[import]*/) || defined_token_ca53d8e93addfaf5(l)/*[this] [target] [true] [typeof]*/) || defined_token_7b465f3c7dd55e63(l)/*[function] [from] [false]*/) || defined_token_2d05a4070a3ebcf4(l)/*[class]*/) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_8ed5fb4bce429503(l)/*[delete]*/) || defined_token_042ea6dc9657ee07(l)/*[void]*/) || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || assert_table(l, 0x0, 0xa986, 0x8000000, 0x48000001)/*tbl:[ ( ] [ [ ] [ { ] [ / ] [ " ] [ ' ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ]*/) || l.isNum()/*[num]*/) {
                            /*assert-production-closure*/
                            /*
                               166:483 substitute_template=>template_head • expression template_spans
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $template_spans(l, state)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 226);
                                    prod = 99;
                                    continue;
                                }
                            }
                        }
                        break;
                }
                break;
            }
            debug_stack.push({ name: "short_circuit_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 118);
        }
/*production name: logical_and_expression
            grammar index: 120
            bodies:
	120:350 logical_and_expression=>• bitwise_or_expression - 
		120:351 logical_and_expression=>• logical_and_expression && bitwise_or_expression - 
            compile time: 8.766ms*/;
        function $logical_and_expression(l, state) {
            debug_stack.push({ name: "logical_and_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $bitwise_or_expression(l, state)) {
                /*--unique-id--120--DO-NOT-REPLACE*/
                return $logical_and_expression_goto(l, state, 120);
            }
            debug_stack.push({ name: "logical_and_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $logical_and_expression_goto(l, state, prod) {
            debug_stack.push({ name: "logical_and_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*&&*/
                if (assert_consume(l, state, defined_token_39fb08573e91f166(l)/*[&&]*/)) {
                    /*consume*/
                    /*
                       120:351 logical_and_expression=>logical_and_expression && • bitwise_or_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $bitwise_or_expression(l, state)) {
                        /*--unique-id--120--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 172);
                        prod = 120;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "logical_and_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 120);
        }
/*production name: bitwise_or_expression
            grammar index: 124
            bodies:
	124:356 bitwise_or_expression=>• bitwise_xor_expression - 
		124:357 bitwise_or_expression=>• bitwise_or_expression | bitwise_xor_expression - 
            compile time: 8.023ms*/;
        function $bitwise_or_expression(l, state) {
            debug_stack.push({ name: "bitwise_or_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $bitwise_xor_expression(l, state)) {
                /*--unique-id--124--DO-NOT-REPLACE*/
                return $bitwise_or_expression_goto(l, state, 124);
            }
            debug_stack.push({ name: "bitwise_or_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $bitwise_or_expression_goto(l, state, prod) {
            debug_stack.push({ name: "bitwise_or_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/ || defined_token_06a0f520696bd72c(l)/*[||]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*|*/
                if (assert_consume(l, state, l.utf == 124/*[|]*/)) {
                    /*consume*/
                    /*
                       124:357 bitwise_or_expression=>bitwise_or_expression | • bitwise_xor_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $bitwise_xor_expression(l, state)) {
                        /*--unique-id--124--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 174);
                        prod = 124;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "bitwise_or_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 124);
        }
/*production name: bitwise_xor_expression
            grammar index: 125
            bodies:
	125:358 bitwise_xor_expression=>• bitwise_and_expression - 
		125:359 bitwise_xor_expression=>• bitwise_xor_expression ^ bitwise_and_expression - 
            compile time: 7.269ms*/;
        function $bitwise_xor_expression(l, state) {
            debug_stack.push({ name: "bitwise_xor_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $bitwise_and_expression(l, state)) {
                /*--unique-id--125--DO-NOT-REPLACE*/
                return $bitwise_xor_expression_goto(l, state, 125);
            }
            debug_stack.push({ name: "bitwise_xor_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $bitwise_xor_expression_goto(l, state, prod) {
            debug_stack.push({ name: "bitwise_xor_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*^*/
                if (assert_consume(l, state, l.utf == 94/*[^]*/)) {
                    /*consume*/
                    /*
                       125:359 bitwise_xor_expression=>bitwise_xor_expression ^ • bitwise_and_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $bitwise_and_expression(l, state)) {
                        /*--unique-id--125--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 174);
                        prod = 125;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "bitwise_xor_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 125);
        }
/*production name: bitwise_and_expression
            grammar index: 126
            bodies:
	126:360 bitwise_and_expression=>• equality_expression - 
		126:361 bitwise_and_expression=>• bitwise_and_expression & equality_expression - 
            compile time: 8.378ms*/;
        function $bitwise_and_expression(l, state) {
            debug_stack.push({ name: "bitwise_and_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $equality_expression(l, state)) {
                /*--unique-id--126--DO-NOT-REPLACE*/
                return $bitwise_and_expression_goto(l, state, 126);
            }
            debug_stack.push({ name: "bitwise_and_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $bitwise_and_expression_goto(l, state, prod) {
            debug_stack.push({ name: "bitwise_and_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/ || defined_token_075b04d35f74cc71(l)/*[&&]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*&*/
                if (assert_consume(l, state, l.utf == 38/*[&]*/)) {
                    /*consume*/
                    /*
                       126:361 bitwise_and_expression=>bitwise_and_expression & • equality_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $equality_expression(l, state)) {
                        /*--unique-id--126--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 174);
                        prod = 126;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "bitwise_and_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 126);
        }
/*production name: equality_expression
            grammar index: 127
            bodies:
	127:362 equality_expression=>• relational_expression - 
		127:363 equality_expression=>• equality_expression == relational_expression - 
		127:364 equality_expression=>• equality_expression != relational_expression - 
		127:365 equality_expression=>• equality_expression === relational_expression - 
		127:366 equality_expression=>• equality_expression !== relational_expression - 
            compile time: 9.759ms*/;
        function $equality_expression(l, state) {
            debug_stack.push({ name: "equality_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $relational_expression(l, state)) {
                /*--unique-id--127--DO-NOT-REPLACE*/
                return $equality_expression_goto(l, state, 127);
            }
            debug_stack.push({ name: "equality_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $equality_expression_goto(l, state, prod) {
            debug_stack.push({ name: "equality_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*== != === !==*/
                if (assert_consume(l, state, defined_token_4df9552a310b74e2(l)/*[==] [===]*/ || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/)) {
                    /*consume*/
                    /*
                       127:363 equality_expression=>equality_expression == • relational_expression
                       127:364 equality_expression=>equality_expression != • relational_expression
                       127:365 equality_expression=>equality_expression === • relational_expression
                       127:366 equality_expression=>equality_expression !== • relational_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $relational_expression(l, state)) {
                        /*--unique-id--127--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 175);
                        prod = 127;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "equality_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 127);
        }
/*production name: relational_expression
            grammar index: 128
            bodies:
	128:367 relational_expression=>• shift_expression - 
		128:368 relational_expression=>• relational_expression < shift_expression - 
		128:369 relational_expression=>• relational_expression > shift_expression - 
		128:370 relational_expression=>• relational_expression <= shift_expression - 
		128:371 relational_expression=>• relational_expression >= shift_expression - 
		128:372 relational_expression=>• relational_expression τinstanceof shift_expression - 
		128:373 relational_expression=>• relational_expression τin shift_expression - 
            compile time: 15.67ms*/;
        function $relational_expression(l, state) {
            debug_stack.push({ name: "relational_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $shift_expression(l, state)) {
                /*--unique-id--128--DO-NOT-REPLACE*/
                return $relational_expression_goto(l, state, 128);
            }
            debug_stack.push({ name: "relational_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $relational_expression_goto(l, state, prod) {
            debug_stack.push({ name: "relational_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*in instanceof < > <= >=*/
                if (assert_consume(l, state, defined_token_b910302f4210711c(l)/*[in]*/)) {
                    /*consume*/
                    /*
                       128:373 relational_expression=>relational_expression τin • shift_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $shift_expression(l, state)) {
                        /*--unique-id--128--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 178);
                        prod = 128;
                        continue;
                    }
                } else if (assert_consume(l, state, defined_token_8bbb4e33781aec74(l)/*[instanceof]*/)) {
                    /*consume*/
                    /*
                       128:372 relational_expression=>relational_expression τinstanceof • shift_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $shift_expression(l, state)) {
                        /*--unique-id--128--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 177);
                        prod = 128;
                        continue;
                    }
                } else if (assert_consume(l, state, ((defined_token_7c7dc8357e27bfc9(l)/*[<=]*/ || defined_token_dad2c38b0a2035e1(l)/*[>=]*/) || (l.utf == 60/*[<]*/)) || (l.utf == 62/*[>]*/))) {
                    /*consume*/
                    /*
                       128:368 relational_expression=>relational_expression < • shift_expression
                       128:369 relational_expression=>relational_expression > • shift_expression
                       128:370 relational_expression=>relational_expression <= • shift_expression
                       128:371 relational_expression=>relational_expression >= • shift_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $shift_expression(l, state)) {
                        /*--unique-id--128--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 176);
                        prod = 128;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "relational_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 128);
        }
/*production name: shift_expression
            grammar index: 129
            bodies:
	129:374 shift_expression=>• additive_expression - 
		129:375 shift_expression=>• shift_expression << additive_expression - 
		129:376 shift_expression=>• shift_expression >> additive_expression - 
		129:377 shift_expression=>• shift_expression >>> additive_expression - 
            compile time: 17.099ms*/;
        function $shift_expression(l, state) {
            debug_stack.push({ name: "shift_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $additive_expression(l, state)) {
                /*--unique-id--129--DO-NOT-REPLACE*/
                return $shift_expression_goto(l, state, 129);
            }
            debug_stack.push({ name: "shift_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $shift_expression_goto(l, state, prod) {
            debug_stack.push({ name: "shift_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*<< >> >>>*/
                if (assert_consume(l, state, defined_token_1110717de6c46549(l)/*[<<]*/ || defined_token_910c81aa02511c5e(l)/*[>>] [>>>]*/)) {
                    /*consume*/
                    /*
                       129:375 shift_expression=>shift_expression << • additive_expression
                       129:376 shift_expression=>shift_expression >> • additive_expression
                       129:377 shift_expression=>shift_expression >>> • additive_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $additive_expression(l, state)) {
                        /*--unique-id--129--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 179);
                        prod = 129;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "shift_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 129);
        }
/*production name: additive_expression
            grammar index: 130
            bodies:
	130:378 additive_expression=>• multiplicative_expression - 
		130:379 additive_expression=>• additive_expression + multiplicative_expression - 
		130:380 additive_expression=>• additive_expression - multiplicative_expression - 
            compile time: 20.203ms*/;
        function $additive_expression(l, state) {
            debug_stack.push({ name: "additive_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $multiplicative_expression(l, state)) {
                /*--unique-id--130--DO-NOT-REPLACE*/
                return $additive_expression_goto(l, state, 130);
            }
            debug_stack.push({ name: "additive_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $additive_expression_goto(l, state, prod) {
            debug_stack.push({ name: "additive_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*+ -*/
                if (assert_consume(l, state, (l.utf == 43/*[+]*/) || (l.utf == 45/*[-]*/))) {
                    /*consume*/
                    /*
                       130:379 additive_expression=>additive_expression + • multiplicative_expression
                       130:380 additive_expression=>additive_expression - • multiplicative_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $multiplicative_expression(l, state)) {
                        /*--unique-id--130--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 180);
                        prod = 130;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "additive_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 130);
        }
/*production name: multiplicative_expression
            grammar index: 131
            bodies:
	131:381 multiplicative_expression=>• exponentiation_expression - 
		131:382 multiplicative_expression=>• multiplicative_expression * exponentiation_expression - 
		131:383 multiplicative_expression=>• multiplicative_expression / exponentiation_expression - 
		131:384 multiplicative_expression=>• multiplicative_expression % exponentiation_expression - 
            compile time: 15.868ms*/;
        function $multiplicative_expression(l, state) {
            debug_stack.push({ name: "multiplicative_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $exponentiation_expression(l, state)) {
                /*--unique-id--131--DO-NOT-REPLACE*/
                return $multiplicative_expression_goto(l, state, 131);
            }
            debug_stack.push({ name: "multiplicative_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $multiplicative_expression_goto(l, state, prod) {
            debug_stack.push({ name: "multiplicative_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /** / %*/
                if (assert_consume(l, state, assert_table(l, 0x0, 0x8420, 0x0, 0x0)/*tbl:[ * ] [ / ] [ % ]*/)) {
                    /*consume*/
                    /*
                       131:382 multiplicative_expression=>multiplicative_expression * • exponentiation_expression
                       131:383 multiplicative_expression=>multiplicative_expression / • exponentiation_expression
                       131:384 multiplicative_expression=>multiplicative_expression % • exponentiation_expression
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $exponentiation_expression(l, state)) {
                        /*--unique-id--131--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 181);
                        prod = 131;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "multiplicative_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 131);
        }
/*production name: exponentiation_expression
            grammar index: 132
            bodies:
	132:385 exponentiation_expression=>• unary_expression - 
		132:386 exponentiation_expression=>• update_expression ** exponentiation_expression - 
            compile time: 1265.368ms*/;
        function $exponentiation_expression(l, state) {
            debug_stack.push({ name: "exponentiation_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*delete void typeof + ~ ! - await this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import ++ --*/
            if ((((defined_token_8ed5fb4bce429503(l)/*[delete]*/ || defined_token_042ea6dc9657ee07(l)/*[void]*/) || defined_token_9451180aac506098(l)/*[typeof]*/) || defined_token_ded0f96a7228c7c5(l)/*[await]*/) || assert_table(l, 0x0, 0x2802, 0x0, 0x40000000)/*tbl:[ + ] [ ~ ] [ ! ] [ - ]*/) {
                /*peek-production-closure*/
                /*
                   132:385 exponentiation_expression=>• unary_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $unary_expression(l, state)) {
                    /*--unique-id--132--DO-NOT-REPLACE*/
                    return $exponentiation_expression_goto(l, state, 132);
                }
            } else if (((((defined_token_19cd74c69f5512e8(l)/*[``]*/ || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || assert_table(l, 0x0, 0x8194, 0x88000000, 0x8000001)/*tbl:[ _ ] [ $ ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ] [ ( ]*/) || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                /*peek*/
                /*
                   132:385 exponentiation_expression=>• unary_expression
                   132:386 exponentiation_expression=>• update_expression ** exponentiation_expression
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*this async null [ { function class / ` `` ( new super import true false " ' ++ -- 228 get set target as from num*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, defined_token_57e43262d833cfeb(l)/*[this]*/)) {
                    /*consume*/
                    /*
                       113:316 primary_expression=>τthis •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 166);
                    return $exponentiation_expression_goto(l, state, 99);
                } else if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                    /*peek*/
                    /*
                       191:538 unreserved_word=>• τasync
                       73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                       73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                       73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                       73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                       73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                       73:189 function_declaration=>• τasync τfunction binding_identifier ( ) { function_body }
                       73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                       73:194 function_declaration=>• τasync τfunction ( ) { function_body }
                    */
                    /*peek_level:1 offset:2 -- clause*/
                    /*function ?. ( `` ` . [ -- ++ * /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= instanceof in !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of as from extends*/
                    let pk = l.copy();
                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                    if (defined_token_e043e2118bdadad0(pk)/*[function]*/) {
                        /*peek*/
                        /*
                           73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                           73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                           73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                           73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                           73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                           73:189 function_declaration=>• τasync τfunction binding_identifier ( ) { function_body }
                           73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                           73:194 function_declaration=>• τasync τfunction ( ) { function_body }
                        */
                        /*peek_level:2 offset:2 -- clause*/
                        /** _ $ id async get set target as from (*/
                        sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                        if (pk.utf == 42/*[*]*/) {
                            /*peek*/
                            /*
                               73:180 function_declaration=>• τasync τfunction * binding_identifier ( formal_parameters ) { function_body }
                               73:183 function_declaration=>• τasync τfunction * ( formal_parameters ) { function_body }
                               73:184 function_declaration=>• τasync τfunction * binding_identifier ( ) { function_body }
                               73:190 function_declaration=>• τasync τfunction * ( ) { function_body }
                            */
                            /*peek_level:3 offset:2*/
                            if (state = $function_declaration(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 1, 101);
                                return $exponentiation_expression_goto(l, state, 99);
                            }
                        } else {
                            /*assert-production-closure*/
                            /*
                               73:182 function_declaration=>• τasync τfunction binding_identifier ( formal_parameters ) { function_body }
                               73:188 function_declaration=>• τasync τfunction ( formal_parameters ) { function_body }
                            */
                            /*peek_level:2 offset:2*/
                            if (state = $function_declaration(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 1, 101);
                                return $exponentiation_expression_goto(l, state, 99);
                            }
                        }
                    } else {
                        /*peek-production-closure*/
                        /*
                           191:538 unreserved_word=>• τasync
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $unreserved_word(l, state)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            add_reduce(state, 1, 245);
                            add_reduce(state, 1, 244);
                            return $exponentiation_expression_goto(l, state, 99);
                        }
                    }
                } else if (assert_consume(l, state, defined_token_6fe6f90f8fe15dd0(l)/*[null]*/)) {
                    /*consume*/
                    /*
                       184:527 null_literal=>τnull •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 241);
                    return $exponentiation_expression_goto(l, state, 99);
                } else if (l.utf == 91/*[[]*/) {
                    /*assert-production-closure*/
                    /*
                       160:464 array_literal=>• [ elision ]
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $array_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $exponentiation_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 123/*[{]*/) {
                    /*assert-production-closure*/
                    /*
                       152:446 object_literal=>• { }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $object_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $exponentiation_expression_goto(l, state, 99);
                    }
                } else if (defined_token_e043e2118bdadad0(l)/*[function]*/) {
                    /*assert-production-closure*/
                    /*
                       73:181 function_declaration=>• τfunction * binding_identifier ( formal_parameters ) { function_body }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $function_declaration(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        add_reduce(state, 1, 101);
                        return $exponentiation_expression_goto(l, state, 99);
                    }
                } else if (defined_token_2d05a4070a3ebcf4(l)/*[class]*/) {
                    /*assert-production-closure*/
                    /*
                       90:230 class_expression=>• τclass binding_identifier class_heritage { class_body }
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $class_expression(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $exponentiation_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 47/*[/]*/) {
                    /*assert-production-closure*/
                    /*
                       150:443 regular_expression_literal=>• / / def$js_identifier
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $regular_expression_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $exponentiation_expression_goto(l, state, 99);
                    }
                } else if (l.utf == 96/*[`]*/) {
                    /*assert-production-closure*/
                    /*
                       170:490 template_head=>• ` template_head_HC_listbody1_121 ${
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $template_head(l, state)) {
                        /*--unique-id--170--DO-NOT-REPLACE*/
                        return $exponentiation_expression_goto(l, state, 170);
                    }
                } else if (assert_consume(l, state, defined_token_19cd74c69f5512e8(l)/*[``]*/)) {
                    /*consume*/
                    /*
                       165:482 no_substitute_template=>`` •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 225);
                    return $exponentiation_expression_goto(l, state, 99);
                } else if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                    /*consume*/
                    /*
                       138:410 parenthesized=>( • expression )
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 191);
                            add_reduce(state, 1, 167);
                            return $exponentiation_expression_goto(l, state, 99);
                        }
                    }
                } else if (defined_token_79b82aa5b55f0605(l)/*[new]*/) {
                    /*peek*/
                    /*
                       99:279 member_expression=>• τnew member_expression arguments
                       103:285 new_target=>• τnew . τtarget
                       98:272 new_expression=>• τnew new_expression
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*new*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_79b82aa5b55f0605(l)/*[new]*/)) {
                        /*consume*/
                        /*
                           99:279 member_expression=>τnew • member_expression arguments
                           103:285 new_target=>τnew • . τtarget
                           98:272 new_expression=>τnew • new_expression
                        */
                        /*peek_level:0 offset:5 -- clause*/
                        /*. this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               103:285 new_target=>τnew . • τtarget
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, defined_token_1cb42c7dd41b3a7e(l)/*[target]*/)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 156);
                                return $exponentiation_expression_goto(l, state, 99);
                            }
                        } else if (((defined_token_19cd74c69f5512e8(l)/*[``]*/ || assert_table(l, 0x0, 0x8194, 0x88000000, 0x8000001)/*tbl:[ _ ] [ $ ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ] [ ( ]*/) || l.isID()/*[id]*/) || l.isNum()/*[num]*/) {
                            /*peek*/
                            /*
                               99:279 member_expression=>τnew • member_expression arguments
                               98:272 new_expression=>τnew • new_expression
                            */
                            let mk = mark();
                            let anchor = l.copy();
                            let anchor_state = state;
                            /*279,3,1,272,2,1*/
                            /*99*/
                            /*peek_level:-1 offset:5*/
                            if (state = $member_expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $arguments(l, state)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 152);
                                    return $exponentiation_expression_goto(l, state, 99);
                                }
                            }
                            /*279,3,1,272,2,1*/
                            state = reset(mk, anchor, l, anchor_state);
                            /*peek_level:-1 offset:5*/
                            if (state = $new_expression(l, state)) {
                                /*--unique-id--97--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 148);
                                return $exponentiation_expression_goto(l, state, 97);
                            }
                        }
                    }
                } else if (defined_token_8fdd5a50d81134d2(l)/*[super]*/) {
                    /*peek*/
                    /*
                       100:280 super_property=>• τsuper . identifier_name
                       100:281 super_property=>• τsuper [ expression ]
                       105:293 super_call=>• τsuper arguments
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*super*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_8fdd5a50d81134d2(l)/*[super]*/)) {
                        /*consume*/
                        /*
                           100:280 super_property=>τsuper • . identifier_name
                           100:281 super_property=>τsuper • [ expression ]
                           105:293 super_call=>τsuper • arguments
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*. [ (*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               100:280 super_property=>τsuper . • identifier_name
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 153);
                                return $exponentiation_expression_goto(l, state, 99);
                            }
                        } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               100:281 super_property=>τsuper [ • expression ]
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 154);
                                    return $exponentiation_expression_goto(l, state, 99);
                                }
                            }
                        } else {
                            /*peek-production-closure*/
                            /*
                               105:293 super_call=>τsuper • arguments
                            */
                            /*peek_level:0 offset:5*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 159);
                                return $exponentiation_expression_goto(l, state, 104);
                            }
                        }
                    }
                } else if (defined_token_2ed685dc4925cfa4(l)/*[import]*/) {
                    /*peek*/
                    /*
                       102:284 import_meta=>• τimport . τmeta
                       106:294 import_call=>• τimport ( assignment_expression )
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*import*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_2ed685dc4925cfa4(l)/*[import]*/)) {
                        /*consume*/
                        /*
                           102:284 import_meta=>τimport • . τmeta
                           106:294 import_call=>τimport • ( assignment_expression )
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*. (*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               102:284 import_meta=>τimport . • τmeta
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, defined_token_7a48bf3a46a95de4(l)/*[meta]*/)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 155);
                                return $exponentiation_expression_goto(l, state, 99);
                            }
                        } else if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                            /*consume*/
                            /*
                               106:294 import_call=>τimport ( • assignment_expression )
                            */
                            /*peek_level:-1 offset:5*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*--unique-id--104--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 160);
                                    return $exponentiation_expression_goto(l, state, 104);
                                }
                            }
                        }
                    }
                } else if (assert_consume(l, state, defined_token_99376be254728810(l)/*[true]*/ || defined_token_57da255105f722f9(l)/*[false]*/)) {
                    /*consume*/
                    /*
                       185:528 boolean_literal=>τtrue •
                       185:529 boolean_literal=>τfalse •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 242);
                    return $exponentiation_expression_goto(l, state, 99);
                } else if ((l.utf == 34/*["]*/) || (l.utf == 39/*[']*/)) {
                    /*assert-production-closure*/
                    /*
                       179:514 string_literal=>• " string_literal_HC_listbody1_124 "
                       179:515 string_literal=>• ' string_literal_HC_listbody1_125 '
                    */
                    /*peek_level:0 offset:2*/
                    if (state = $string_literal(l, state)) {
                        /*--unique-id--99--DO-NOT-REPLACE*/
                        return $exponentiation_expression_goto(l, state, 99);
                    }
                } else if (assert_consume(l, state, defined_token_67a732a27c736a2f(l)/*[++]*/ || defined_token_fe70b6f5a727a201(l)/*[--]*/)) {
                    /*consume*/
                    /*
                       134:399 update_expression=>++ • unary_expression
                       134:400 update_expression=>-- • unary_expression
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $unary_expression(l, state)) {
                        /*--unique-id--134--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 189);
                        return $exponentiation_expression_goto(l, state, 134);
                    }
                } else if (assert_consume(l, state, ((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_5bca542dce980d9c(l)/*[set]*/) || defined_token_1cb42c7dd41b3a7e(l)/*[target]*/) || defined_token_fcc8b8fe09802878(l)/*[as]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/)) {
                    /*consume*/
                    /*
                       227:681 def$js_identifier=>tk:def$js_id_symbols •
                       191:539 unreserved_word=>τget •
                       191:540 unreserved_word=>τset •
                       191:541 unreserved_word=>τtarget •
                       191:542 unreserved_word=>τas •
                       191:543 unreserved_word=>τfrom •
                    */
                    /*--unique-id--99--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 245);
                    add_reduce(state, 1, 244);
                    return $exponentiation_expression_goto(l, state, 99);
                } else if (l.isNum()/*[num]*/) {
                    /*peek*/
                    /*
                       183:526 numeric_literal=>• θnum
                       182:525 bigint=>• θnum τn
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*num*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.isNum()/*[num]*/)) {
                        /*consume*/
                        /*
                           183:526 numeric_literal=>θnum •
                           182:525 bigint=>θnum • τn
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*n , ] = * ) /= ( } : ; ?. %= { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 110/*[n]*/)) {
                            /*consume*/
                            /*
                               182:525 bigint=>θnum τn •
                            */
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:5*/
                            add_reduce(state, 2, 239);
                            return $exponentiation_expression_goto(l, state, 99);
                        } else {
                            /*assert-end*/
                            /*
                               183:526 numeric_literal=>θnum •
                            */
                            /*--unique-id--99--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:6*/
                            add_reduce(state, 1, 240);
                            return $exponentiation_expression_goto(l, state, 99);
                        }
                    }
                }
            }
            debug_stack.push({ name: "exponentiation_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $exponentiation_expression_goto(l, state, prod) {
            debug_stack.push({ name: "exponentiation_expression GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                switch (prod) {
                    case 97:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*; ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE ++ --*/
                        if (((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/) || defined_token_02147395f110c9cd(l)/*[<<] [<=]*/) || defined_token_79ab361fc2644f92(l)/*[>>] [>>>] [>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc00be60, 0x60000000, 0x30000000)/*tbl:[ ; ] [ * ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               134:396 update_expression=>left_hand_side_expression •
                            */
                            /*--unique-id--134--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 134;
                            continue;
                        } else if (assert_consume(l, state, defined_token_6d4f77707d3e0e5a(l)/*[++]*/ || defined_token_f2ef34011f64cef0(l)/*[--]*/)) {
                            /*consume*/
                            /*
                               134:397 update_expression=>left_hand_side_expression ++ •
                               134:398 update_expression=>left_hand_side_expression -- •
                            */
                            /*--unique-id--134--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 2, 188);
                            prod = 134;
                            continue;
                        }
                        break;
                    case 99:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*[ . ( ?. `` ` += -= <<= >>= >>>= &= ^= |= **= { %= ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } /= ) * = ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               99:274 member_expression=>member_expression [ • expression ]
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 149);
                                    prod = 99;
                                    continue;
                                }
                            }
                        } else if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               99:275 member_expression=>member_expression . • identifier_name
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 150);
                                prod = 99;
                                continue;
                            }
                        } else if (l.utf == 40/*[(]*/) {
                            /*peek-production-closure*/
                            /*
                               88:221 cover_call_expression_and_async_arrow_head=>member_expression • arguments
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 114);
                                prod = 104;
                                continue;
                            }
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*peek-production-closure*/
                            /*
                               111:305 optional_expression=>member_expression • optional_chain
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                            /*peek-production-closure*/
                            /*
                               99:276 member_expression=>member_expression • template_literal
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $template_literal(l, state)) {
                                /*--unique-id--99--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 151);
                                prod = 99;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               98:271 new_expression=>member_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        }
                        break;
                    case 104:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*. ( [ ?. `` ` = * /= %= += -= <<= >>= >>>= &= ^= |= **= { ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } ) ] , END_OF_FILE*/
                        if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                            /*consume*/
                            /*
                               104:286 call_expression=>call_expression . • identifier_name
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $identifier_name(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 150);
                                prod = 104;
                                continue;
                            }
                        } else if (l.utf == 40/*[(]*/) {
                            /*peek-production-closure*/
                            /*
                               104:289 call_expression=>call_expression • arguments
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $arguments(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 157);
                                prod = 104;
                                continue;
                            }
                        } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                            /*consume*/
                            /*
                               104:290 call_expression=>call_expression [ • expression ]
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--104--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 149);
                                    prod = 104;
                                    continue;
                                }
                            }
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*peek-production-closure*/
                            /*
                               111:306 optional_expression=>call_expression • optional_chain
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        } else if (defined_token_19cd74c69f5512e8(l)/*[``]*/ || (l.utf == 96/*[`]*/)) {
                            /*peek-production-closure*/
                            /*
                               104:292 call_expression=>call_expression • template_literal
                            */
                            /*peek_level:0 offset:1*/
                            if (state = $template_literal(l, state)) {
                                /*--unique-id--104--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 158);
                                prod = 104;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               97:269 left_hand_side_expression=>call_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        }
                        break;
                    case 111:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= * /= %= += -= <<= >>= >>>= &= ^= |= **= { ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } ) ] , END_OF_FILE ?.*/
                        if (((((((((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_37edf5ebc00dbfe6(l)/*[/=]*/) || defined_token_2c342d130718e813(l)/*[%=]*/) || defined_token_870ef36bec3a881f(l)/*[+=] [++]*/) || defined_token_4749150ec48378d0(l)/*[-=] [--]*/) || defined_token_318c95b1e64de46d(l)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(l)/*[>>=] [>>>=] [>>] [>>>] [>=]*/) || defined_token_2c51a4b82e64ba22(l)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(l)/*[^=]*/) || defined_token_d1de557e71993f67(l)/*[|=] [||]*/) || defined_token_485338d34f29b52a(l)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || defined_token_c6b5fbb944702d5a(l)/*[of]*/) || assert_table(l, 0x0, 0xfc00be60, 0x60000000, 0x38000000)/*tbl:[ = ] [ * ] [ { ] [ ; ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               97:270 left_hand_side_expression=>optional_expression •
                            */
                            /*--unique-id--97--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 97;
                            continue;
                        } else if (defined_token_675b48fc93d1800c(l)/*[?.]*/) {
                            /*assert-production-closure*/
                            /*
                               111:307 optional_expression=>optional_expression • optional_chain
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $optional_chain(l, state)) {
                                /*--unique-id--111--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 164);
                                prod = 111;
                                continue;
                            }
                        }
                        break;
                    case 134:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*; ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE*/
                        if (((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/) || defined_token_02147395f110c9cd(l)/*[<<] [<=]*/) || defined_token_79ab361fc2644f92(l)/*[>>] [>>>] [>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc00be60, 0x60000000, 0x30000000)/*tbl:[ ; ] [ * ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                            /*assert-end*/
                            /*
                               133:387 unary_expression=>update_expression •
                            */
                            /*--unique-id--132--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            prod = 132;
                            continue;
                        } else if (assert_consume(l, state, defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/)) {
                            /*consume*/
                            /*
                               132:386 exponentiation_expression=>update_expression ** • exponentiation_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $exponentiation_expression(l, state)) {
                                /*--unique-id--132--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 182);
                                prod = 132;
                                continue;
                            }
                        }
                        break;
                    case 170:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*yield async new ( super import this function class [ { / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ --*/
                        if ((((((((((((((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_670f23e41126e00b(l)/*[async] [as] [await]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_d38e0913b811b457(l)/*[super] [set]*/) || defined_token_2ed685dc4925cfa4(l)/*[import]*/) || defined_token_ca53d8e93addfaf5(l)/*[this] [target] [true] [typeof]*/) || defined_token_7b465f3c7dd55e63(l)/*[function] [from] [false]*/) || defined_token_2d05a4070a3ebcf4(l)/*[class]*/) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_8ed5fb4bce429503(l)/*[delete]*/) || defined_token_042ea6dc9657ee07(l)/*[void]*/) || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || assert_table(l, 0x0, 0xa986, 0x8000000, 0x48000001)/*tbl:[ ( ] [ [ ] [ { ] [ / ] [ " ] [ ' ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ]*/) || l.isNum()/*[num]*/) {
                            /*assert-production-closure*/
                            /*
                               166:483 substitute_template=>template_head • expression template_spans
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $expression(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $template_spans(l, state)) {
                                    /*--unique-id--99--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 226);
                                    prod = 99;
                                    continue;
                                }
                            }
                        }
                        break;
                }
                break;
            }
            debug_stack.push({ name: "exponentiation_expression GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 132);
        }
/*production name: unary_expression
            grammar index: 133
            bodies:
	133:387 unary_expression=>• update_expression - 
		133:388 unary_expression=>• τdelete unary_expression - 
		133:389 unary_expression=>• τvoid unary_expression - 
		133:390 unary_expression=>• τtypeof unary_expression - 
		133:391 unary_expression=>• + unary_expression - 
		133:392 unary_expression=>• ~ unary_expression - 
		133:393 unary_expression=>• ! unary_expression - 
		133:394 unary_expression=>• - unary_expression - 
		133:395 unary_expression=>• await_expression - 
            compile time: 19.601ms*/;
        function $unary_expression(l, state) {
            debug_stack.push({ name: "unary_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*delete void typeof - await + ~ ! this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import ++ --*/
            if (assert_consume(l, state, defined_token_8ed5fb4bce429503(l)/*[delete]*/)) {
                /*consume*/
                /*
                   133:388 unary_expression=>τdelete • unary_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $unary_expression(l, state)) {
                    /*--unique-id--133--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 183);
                    debug_stack.push({ name: "unary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (assert_consume(l, state, defined_token_042ea6dc9657ee07(l)/*[void]*/)) {
                /*consume*/
                /*
                   133:389 unary_expression=>τvoid • unary_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $unary_expression(l, state)) {
                    /*--unique-id--133--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 184);
                    debug_stack.push({ name: "unary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (assert_consume(l, state, defined_token_9451180aac506098(l)/*[typeof]*/)) {
                /*consume*/
                /*
                   133:390 unary_expression=>τtypeof • unary_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $unary_expression(l, state)) {
                    /*--unique-id--133--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 185);
                    debug_stack.push({ name: "unary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (assert_consume(l, state, l.utf == 45/*[-]*/)) {
                /*consume*/
                /*
                   133:394 unary_expression=>- • unary_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $unary_expression(l, state)) {
                    /*--unique-id--133--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 187);
                    debug_stack.push({ name: "unary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (defined_token_ded0f96a7228c7c5(l)/*[await]*/) {
                /*peek-production-closure*/
                /*
                   133:395 unary_expression=>• await_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $await_expression(l, state)) {
                    /*--unique-id--133--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "unary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (assert_consume(l, state, assert_table(l, 0x0, 0x802, 0x0, 0x40000000)/*tbl:[ + ] [ ~ ] [ ! ]*/)) {
                /*consume*/
                /*
                   133:391 unary_expression=>+ • unary_expression
                   133:392 unary_expression=>~ • unary_expression
                   133:393 unary_expression=>! • unary_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $unary_expression(l, state)) {
                    /*--unique-id--133--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 186);
                    debug_stack.push({ name: "unary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   133:387 unary_expression=>• update_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $update_expression(l, state)) {
                    /*--unique-id--133--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "unary_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "unary_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: update_expression
            grammar index: 134
            bodies:
	134:396 update_expression=>• left_hand_side_expression - 
		134:397 update_expression=>• left_hand_side_expression ++ - 
		134:398 update_expression=>• left_hand_side_expression -- - 
		134:399 update_expression=>• ++ unary_expression - 
		134:400 update_expression=>• -- unary_expression - 
            compile time: 368.3ms*/;
        function $update_expression(l, state) {
            debug_stack.push({ name: "update_expression RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*++ -- this _ $ id async get set target as from true false null " ' num [ { function class / `` ` ( new super import*/
            if (assert_consume(l, state, defined_token_67a732a27c736a2f(l)/*[++]*/ || defined_token_fe70b6f5a727a201(l)/*[--]*/)) {
                /*consume*/
                /*
                   134:399 update_expression=>++ • unary_expression
                   134:400 update_expression=>-- • unary_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $unary_expression(l, state)) {
                    /*--unique-id--134--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 189);
                    debug_stack.push({ name: "update_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   134:396 update_expression=>• left_hand_side_expression
                   134:397 update_expression=>• left_hand_side_expression ++
                   134:398 update_expression=>• left_hand_side_expression --
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*97*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $left_hand_side_expression(l, state)) {
                    /*assert*/
                    /*
                       134:396 update_expression=>• left_hand_side_expression
                       134:397 update_expression=>• left_hand_side_expression ++
                       134:398 update_expression=>• left_hand_side_expression --
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*; ** * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE } ) ] , END_OF_FILE ++ --*/
                    sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                    if (((((((((((non_capture_5730bfe813b6b040(l)/*[{] [nl] [END_OF_FILE]*/ || defined_token_1fa4a9b14e1fe8cc(l)/*[asteriskasterisk]*/) || defined_token_02147395f110c9cd(l)/*[<<] [<=]*/) || defined_token_79ab361fc2644f92(l)/*[>>] [>>>] [>=]*/) || defined_token_af69c622b99813ca(l)/*[instanceof] [in]*/) || defined_token_4df9552a310b74e2(l)/*[==] [===]*/) || defined_token_04e94f0279c3936b(l)/*[!=] [!==]*/) || defined_token_075b04d35f74cc71(l)/*[&&]*/) || defined_token_06a0f520696bd72c(l)/*[||]*/) || defined_token_bfaf50116b98d6b4(l)/*[??]*/) || assert_table(l, 0x0, 0xdc00be60, 0x60000000, 0x30000000)/*tbl:[ ; ] [ * ] [ / ] [ % ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ : ] [ } ] [ ) ] [ ] ] [ , ]*/) || l.END()) {
                        /*assert-end*/
                        /*
                           134:396 update_expression=>left_hand_side_expression •
                        */
                        /*--unique-id--134--DO-NOT-REPLACE*/
                        /*peek_level:0 offset:4*/
                        debug_stack.push({ name: "update_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    } else if (assert_consume(l, state, defined_token_6d4f77707d3e0e5a(l)/*[++]*/ || defined_token_f2ef34011f64cef0(l)/*[--]*/)) {
                        /*consume*/
                        /*
                           134:397 update_expression=>left_hand_side_expression ++ •
                           134:398 update_expression=>left_hand_side_expression -- •
                        */
                        /*--unique-id--134--DO-NOT-REPLACE*/
                        /*peek_level:-1 offset:3*/
                        add_reduce(state, 2, 188);
                        debug_stack.push({ name: "update_expression RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "update_expression RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119
            grammar index: 135
            bodies:
	135:401 cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119=>• ... binding_identifier - 
            compile time: 6.573ms*/;
        function $cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119(l, state) {
            debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*...*/
            if (assert_consume(l, state, defined_token_f47f6de2d28c24e5(l)/*[...]*/)) {
                /*consume*/
                /*
                   135:401 cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119=>... • binding_identifier
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $identifier(l, state)) {
                    /*--unique-id--135--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 111);
                    add_reduce(state, 2, 163);
                    debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120
            grammar index: 136
            bodies:
	136:402 cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120=>• ... binding_pattern - 
            compile time: 5.589ms*/;
        function $cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120(l, state) {
            debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*...*/
            if (assert_consume(l, state, defined_token_f47f6de2d28c24e5(l)/*[...]*/)) {
                /*consume*/
                /*
                   136:402 cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120=>... • binding_pattern
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $binding_pattern(l, state)) {
                    /*--unique-id--136--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 163);
                    debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: cover_parenthesized_expression_and_arrow_parameter_list
            grammar index: 137
            bodies:
	137:403 cover_parenthesized_expression_and_arrow_parameter_list=>• ( ) - 
		137:404 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , ) - 
		137:405 cover_parenthesized_expression_and_arrow_parameter_list=>• ( cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 ) - 
		137:406 cover_parenthesized_expression_and_arrow_parameter_list=>• ( cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 ) - 
		137:407 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 ) - 
		137:408 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 ) - 
		137:409 cover_parenthesized_expression_and_arrow_parameter_list=>• parenthesized - 
            compile time: 270.661ms*/;
        function $cover_parenthesized_expression_and_arrow_parameter_list(l, state) {
            debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*(*/
            if (l.utf == 40/*[(]*/) {
                /*peek*/
                /*
                   137:403 cover_parenthesized_expression_and_arrow_parameter_list=>• ( )
                   137:404 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , )
                   137:405 cover_parenthesized_expression_and_arrow_parameter_list=>• ( cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                   137:406 cover_parenthesized_expression_and_arrow_parameter_list=>• ( cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                   137:407 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                   137:408 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                   137:409 cover_parenthesized_expression_and_arrow_parameter_list=>• parenthesized
                */
                /*peek_level:1 offset:0 -- clause*/
                /*) ... yield async new ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                let pk = l.copy();
                sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                if (pk.utf == 41/*[)]*/) {
                    /*peek-production-closure*/
                    /*
                       137:403 cover_parenthesized_expression_and_arrow_parameter_list=>• ( )
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                            /*--unique-id--137--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 190);
                            debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else if (defined_token_f47f6de2d28c24e5(pk)/*[...]*/) {
                    /*peek*/
                    /*
                       137:405 cover_parenthesized_expression_and_arrow_parameter_list=>• ( cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                       137:406 cover_parenthesized_expression_and_arrow_parameter_list=>• ( cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*(*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                        /*consume*/
                        /*
                           137:405 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                           137:406 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                        */
                        /*peek_level:0 offset:3 -- clause*/
                        /*...*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                            /*peek*/
                            /*
                               137:405 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                               137:406 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                            */
                            /*peek_level:1 offset:3 -- clause*/
                            /*{ [ _ $ id async get set target as from*/
                            let pk = l.copy();
                            sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                            if ((pk.utf == 123/*[{]*/) || (pk.utf == 91/*[[]*/)) {
                                /*peek-production-closure*/
                                /*
                                   137:406 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                                */
                                /*peek_level:1 offset:3*/
                                if (state = $cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*--unique-id--137--DO-NOT-REPLACE*/
                                        add_reduce(state, 3, 191);
                                        debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            } else {
                                /*peek-production-closure*/
                                /*
                                   137:405 cover_parenthesized_expression_and_arrow_parameter_list=>( • cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                                */
                                /*peek_level:1 offset:3*/
                                if (state = $cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*--unique-id--137--DO-NOT-REPLACE*/
                                        add_reduce(state, 3, 191);
                                        debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            }
                        }
                    }
                } else if (((((defined_token_19cd74c69f5512e8(pk)/*[``]*/ || defined_token_6d4f77707d3e0e5a(pk)/*[++]*/) || defined_token_f2ef34011f64cef0(pk)/*[--]*/) || assert_table(pk, 0x0, 0xa996, 0x88000000, 0x48000001)/*tbl:[ ( ] [ [ ] [ { ] [ / ] [ " ] [ ' ] [ _ ] [ $ ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                    /*peek*/
                    /*
                       137:404 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , )
                       137:407 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                       137:408 cover_parenthesized_expression_and_arrow_parameter_list=>• ( expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                       137:409 cover_parenthesized_expression_and_arrow_parameter_list=>• parenthesized
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*(*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                        /*consume*/
                        /*
                           137:404 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , )
                           137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                           137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                           138:410 parenthesized=>( • expression )
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*96*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $expression(l, state)) {
                            /*assert*/
                            /*
                               137:404 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , )
                               137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                               137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( • expression , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                               138:410 parenthesized=>( • expression )
                            */
                            /*peek_level:0 offset:4 -- clause*/
                            /*, )*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (l.utf == 44/*[,]*/) {
                                /*peek*/
                                /*
                                   137:404 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , )
                                   137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                                   137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                                */
                                /*peek_level:1 offset:4 -- clause*/
                                /*) ...*/
                                let pk = l.copy();
                                sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                                if (pk.utf == 41/*[)]*/) {
                                    /*peek*/
                                    /*
                                       137:404 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , )
                                    */
                                    /*peek_level:1 offset:4*/
                                    if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            /*--unique-id--137--DO-NOT-REPLACE*/
                                            add_reduce(state, 4, 191);
                                            debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                            return state;
                                        }
                                    }
                                } else if (defined_token_f47f6de2d28c24e5(pk)/*[...]*/) {
                                    /*peek*/
                                    /*
                                       137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                                       137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                                    */
                                    /*peek_level:2 offset:4 -- clause*/
                                    /*{ [ _ $ id async get set target as from*/
                                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                                    if ((pk.utf == 123/*[{]*/) || (pk.utf == 91/*[[]*/)) {
                                        /*peek*/
                                        /*
                                           137:408 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120 )
                                        */
                                        /*peek_level:2 offset:4*/
                                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $cover_parenthesized_expression_and_arrow_parameter_list_group_1298_120(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    /*--unique-id--137--DO-NOT-REPLACE*/
                                                    add_reduce(state, 5, 192);
                                                    debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                    return state;
                                                }
                                            }
                                        }
                                    } else if (((pk.utf == 95/*[_]*/) || (pk.utf == 36/*[$]*/)) || pk.isID()/*[id]*/) {
                                        /*peek*/
                                        /*
                                           137:407 cover_parenthesized_expression_and_arrow_parameter_list=>( expression • , cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119 )
                                        */
                                        /*peek_level:2 offset:4*/
                                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $cover_parenthesized_expression_and_arrow_parameter_list_group_1296_119(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    /*--unique-id--137--DO-NOT-REPLACE*/
                                                    add_reduce(state, 5, 192);
                                                    debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                    return state;
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                /*consume*/
                                /*
                                   138:410 parenthesized=>( expression ) •
                                */
                                /*--unique-id--137--DO-NOT-REPLACE*/
                                /*peek_level:-1 offset:4*/
                                add_reduce(state, 3, 191);
                                debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "cover_parenthesized_expression_and_arrow_parameter_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: parenthesized
            grammar index: 138
            bodies:
	138:410 parenthesized=>• ( expression ) - 
            compile time: 2.967ms*/;
        function $parenthesized(l, state) {
            debug_stack.push({ name: "parenthesized RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*(*/
            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                /*consume*/
                /*
                   138:410 parenthesized=>( • expression )
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $expression(l, state)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                        /*--unique-id--138--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 191);
                        debug_stack.push({ name: "parenthesized RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "parenthesized RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: binding_pattern
            grammar index: 139
            bodies:
	139:411 binding_pattern=>• object_binding_pattern - 
		139:412 binding_pattern=>• array_binding_pattern - 
            compile time: 5.074ms*/;
        function $binding_pattern(l, state) {
            debug_stack.push({ name: "binding_pattern RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*{ [*/
            if (l.utf == 123/*[{]*/) {
                /*peek-production-closure*/
                /*
                   139:411 binding_pattern=>• object_binding_pattern
                */
                /*peek_level:0 offset:0*/
                if (state = $object_binding_pattern(l, state)) {
                    /*--unique-id--139--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   139:412 binding_pattern=>• array_binding_pattern
                */
                /*peek_level:0 offset:0*/
                if (state = $array_binding_pattern(l, state)) {
                    /*--unique-id--139--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "binding_pattern RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: object_binding_pattern
            grammar index: 140
            bodies:
	140:413 object_binding_pattern=>• { } - 
		140:414 object_binding_pattern=>• { binding_rest_property } - 
		140:415 object_binding_pattern=>• { binding_property_list } - 
		140:416 object_binding_pattern=>• { binding_property_list , binding_rest_property } - 
		140:417 object_binding_pattern=>• { binding_property_list , } - 
            compile time: 265.559ms*/;
        function $object_binding_pattern(l, state) {
            debug_stack.push({ name: "object_binding_pattern RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*{*/
            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                /*consume*/
                /*
                   140:413 object_binding_pattern=>{ • }
                   140:414 object_binding_pattern=>{ • binding_rest_property }
                   140:415 object_binding_pattern=>{ • binding_property_list }
                   140:416 object_binding_pattern=>{ • binding_property_list , binding_rest_property }
                   140:417 object_binding_pattern=>{ • binding_property_list , }
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*} ... _ $ id async get set target as from await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false " ' num [*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                    /*consume*/
                    /*
                       140:413 object_binding_pattern=>{ } •
                    */
                    /*--unique-id--140--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 193);
                    debug_stack.push({ name: "object_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                    /*peek-production-closure*/
                    /*
                       140:414 object_binding_pattern=>{ • binding_rest_property }
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $binding_rest_property(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                            /*--unique-id--140--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 194);
                            debug_stack.push({ name: "object_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       140:415 object_binding_pattern=>{ • binding_property_list }
                       140:416 object_binding_pattern=>{ • binding_property_list , binding_rest_property }
                       140:417 object_binding_pattern=>{ • binding_property_list , }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*142*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $binding_property_list(l, state)) {
                        /*assert*/
                        /*
                           140:415 object_binding_pattern=>{ • binding_property_list }
                           140:416 object_binding_pattern=>{ • binding_property_list , binding_rest_property }
                           140:417 object_binding_pattern=>{ • binding_property_list , }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*} ,*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                            /*consume*/
                            /*
                               140:415 object_binding_pattern=>{ binding_property_list } •
                            */
                            /*--unique-id--140--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 195);
                            debug_stack.push({ name: "object_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        } else if (l.utf == 44/*[,]*/) {
                            /*peek*/
                            /*
                               140:416 object_binding_pattern=>{ binding_property_list • , binding_rest_property }
                               140:417 object_binding_pattern=>{ binding_property_list • , }
                            */
                            /*peek_level:1 offset:4 -- clause*/
                            /*... }*/
                            let pk = l.copy();
                            sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                            if (defined_token_f47f6de2d28c24e5(pk)/*[...]*/) {
                                /*peek*/
                                /*
                                   140:416 object_binding_pattern=>{ binding_property_list • , binding_rest_property }
                                */
                                /*peek_level:1 offset:4*/
                                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $binding_rest_property(l, state)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                            /*--unique-id--140--DO-NOT-REPLACE*/
                                            add_reduce(state, 5, 196);
                                            debug_stack.push({ name: "object_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                            return state;
                                        }
                                    }
                                }
                            } else if (pk.utf == 125/*[}]*/) {
                                /*peek*/
                                /*
                                   140:417 object_binding_pattern=>{ binding_property_list • , }
                                */
                                /*peek_level:1 offset:4*/
                                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                        /*--unique-id--140--DO-NOT-REPLACE*/
                                        add_reduce(state, 4, 195);
                                        debug_stack.push({ name: "object_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "object_binding_pattern RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: array_binding_pattern
            grammar index: 141
            bodies:
	141:418 array_binding_pattern=>• [ elision binding_rest_element ] - 
		141:419 array_binding_pattern=>• [ binding_element_list ] - 
		141:420 array_binding_pattern=>• [ binding_element_list , elision binding_rest_element ] - 
		141:421 array_binding_pattern=>• [ binding_rest_element ] - 
		141:422 array_binding_pattern=>• [ elision ] - 
		141:423 array_binding_pattern=>• [ binding_element_list , binding_rest_element ] - 
		141:424 array_binding_pattern=>• [ binding_element_list , elision ] - 
		141:425 array_binding_pattern=>• [ ] - 
		141:426 array_binding_pattern=>• [ binding_element_list , ] - 
            compile time: 1217.965ms*/;
        function $array_binding_pattern(l, state) {
            debug_stack.push({ name: "array_binding_pattern RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*[*/
            if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                /*consume*/
                /*
                   141:418 array_binding_pattern=>[ • elision binding_rest_element ]
                   141:419 array_binding_pattern=>[ • binding_element_list ]
                   141:420 array_binding_pattern=>[ • binding_element_list , elision binding_rest_element ]
                   141:421 array_binding_pattern=>[ • binding_rest_element ]
                   141:422 array_binding_pattern=>[ • elision ]
                   141:423 array_binding_pattern=>[ • binding_element_list , binding_rest_element ]
                   141:424 array_binding_pattern=>[ • binding_element_list , elision ]
                   141:425 array_binding_pattern=>[ • ]
                   141:426 array_binding_pattern=>[ • binding_element_list , ]
                */
                /*peek_level:0 offset:1 -- clause*/
                /*, ... ] _ $ id async get set target as from { [*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (l.utf == 44/*[,]*/) {
                    /*peek*/
                    /*
                       141:418 array_binding_pattern=>[ • elision binding_rest_element ]
                       141:419 array_binding_pattern=>[ • binding_element_list ]
                       141:420 array_binding_pattern=>[ • binding_element_list , elision binding_rest_element ]
                       141:422 array_binding_pattern=>[ • elision ]
                       141:423 array_binding_pattern=>[ • binding_element_list , binding_rest_element ]
                       141:424 array_binding_pattern=>[ • binding_element_list , elision ]
                       141:426 array_binding_pattern=>[ • binding_element_list , ]
                    */
                    let mk = mark();
                    let anchor = l.copy();
                    let anchor_state = state;
                    /*418,4,1,419,3,1,420,6,1,422,3,1,423,5,1,424,5,1,426,4,1*/
                    /*141*/
                    /*peek_level:-1 offset:1 -- clause*/
                    /*162*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $elision(l, state)) {
                        /*assert*/
                        /*
                           141:418 array_binding_pattern=>[ • elision binding_rest_element ]
                           141:422 array_binding_pattern=>[ • elision ]
                        */
                        /*peek_level:0 offset:2 -- clause*/
                        /*... ]*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                            /*peek-production-closure*/
                            /*
                               141:418 array_binding_pattern=>[ elision • binding_rest_element ]
                            */
                            /*peek_level:0 offset:2*/
                            if (state = $binding_rest_element(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                    /*--unique-id--141--DO-NOT-REPLACE*/
                                    add_reduce(state, 4, 197);
                                    debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                    return state;
                                }
                            }
                        } else if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*consume*/
                            /*
                               141:422 array_binding_pattern=>[ elision ] •
                            */
                            /*--unique-id--141--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:2*/
                            add_reduce(state, 3, 200);
                            debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                    /*418,4,1,419,3,1,420,6,1,422,3,1,423,5,1,424,5,1,426,4,1*/
                    state = reset(mk, anchor, l, anchor_state);
                    /*peek_level:-1 offset:1*/
                    if (state = $binding_element_list(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*--unique-id--141--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 198);
                            debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                    /*418,4,1,419,3,1,420,6,1,422,3,1,423,5,1,424,5,1,426,4,1*/
                    state = reset(mk, anchor, l, anchor_state);
                    /*peek_level:-1 offset:1 -- clause*/
                    /*143*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $binding_element_list(l, state)) {
                        /*assert*/
                        /*
                           141:420 array_binding_pattern=>[ • binding_element_list , elision binding_rest_element ]
                           141:423 array_binding_pattern=>[ • binding_element_list , binding_rest_element ]
                           141:424 array_binding_pattern=>[ • binding_element_list , elision ]
                           141:426 array_binding_pattern=>[ • binding_element_list , ]
                        */
                        /*peek_level:-1 offset:2 -- clause*/
                        /*,*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            /*consume*/
                            /*
                               141:420 array_binding_pattern=>[ binding_element_list , • elision binding_rest_element ]
                               141:423 array_binding_pattern=>[ binding_element_list , • binding_rest_element ]
                               141:424 array_binding_pattern=>[ binding_element_list , • elision ]
                               141:426 array_binding_pattern=>[ binding_element_list , • ]
                            */
                            /*peek_level:0 offset:3 -- clause*/
                            /*, ... ]*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (l.utf == 44/*[,]*/) {
                                /*peek-production-closure*/
                                /*
                                   141:420 array_binding_pattern=>[ binding_element_list , • elision binding_rest_element ]
                                   141:424 array_binding_pattern=>[ binding_element_list , • elision ]
                                */
                                /*peek_level:-1 offset:5 -- clause*/
                                /*162*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $elision(l, state)) {
                                    /*assert*/
                                    /*
                                       141:420 array_binding_pattern=>[ binding_element_list , • elision binding_rest_element ]
                                       141:424 array_binding_pattern=>[ binding_element_list , • elision ]
                                    */
                                    /*peek_level:0 offset:6 -- clause*/
                                    /*... ]*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                                        /*peek-production-closure*/
                                        /*
                                           141:420 array_binding_pattern=>[ binding_element_list , elision • binding_rest_element ]
                                        */
                                        /*peek_level:0 offset:6*/
                                        if (state = $binding_rest_element(l, state)) {
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                                /*--unique-id--141--DO-NOT-REPLACE*/
                                                add_reduce(state, 6, 199);
                                                debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                return state;
                                            }
                                        }
                                    } else if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                        /*consume*/
                                        /*
                                           141:424 array_binding_pattern=>[ binding_element_list , elision ] •
                                        */
                                        /*--unique-id--141--DO-NOT-REPLACE*/
                                        /*peek_level:-1 offset:6*/
                                        add_reduce(state, 5, 201);
                                        debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            } else if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                                /*peek-production-closure*/
                                /*
                                   141:423 array_binding_pattern=>[ binding_element_list , • binding_rest_element ]
                                */
                                /*peek_level:0 offset:3*/
                                if (state = $binding_rest_element(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                        /*--unique-id--141--DO-NOT-REPLACE*/
                                        add_reduce(state, 5, 201);
                                        debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            } else if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                /*consume*/
                                /*
                                   141:426 array_binding_pattern=>[ binding_element_list , ] •
                                */
                                /*--unique-id--141--DO-NOT-REPLACE*/
                                /*peek_level:-1 offset:3*/
                                add_reduce(state, 4, 198);
                                debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                } else if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                    /*peek-production-closure*/
                    /*
                       141:421 array_binding_pattern=>[ • binding_rest_element ]
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $binding_rest_element(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*--unique-id--141--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 200);
                            debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                    /*consume*/
                    /*
                       141:425 array_binding_pattern=>[ ] •
                    */
                    /*--unique-id--141--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 202);
                    debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else {
                    /*peek-production-closure*/
                    /*
                       141:419 array_binding_pattern=>[ • binding_element_list ]
                       141:420 array_binding_pattern=>[ • binding_element_list , elision binding_rest_element ]
                       141:423 array_binding_pattern=>[ • binding_element_list , binding_rest_element ]
                       141:424 array_binding_pattern=>[ • binding_element_list , elision ]
                       141:426 array_binding_pattern=>[ • binding_element_list , ]
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*143*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $binding_element_list(l, state)) {
                        /*assert*/
                        /*
                           141:419 array_binding_pattern=>[ • binding_element_list ]
                           141:420 array_binding_pattern=>[ • binding_element_list , elision binding_rest_element ]
                           141:423 array_binding_pattern=>[ • binding_element_list , binding_rest_element ]
                           141:424 array_binding_pattern=>[ • binding_element_list , elision ]
                           141:426 array_binding_pattern=>[ • binding_element_list , ]
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*] ,*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*consume*/
                            /*
                               141:419 array_binding_pattern=>[ binding_element_list ] •
                            */
                            /*--unique-id--141--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 198);
                            debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        } else if (l.utf == 44/*[,]*/) {
                            /*peek*/
                            /*
                               141:420 array_binding_pattern=>[ binding_element_list • , elision binding_rest_element ]
                               141:423 array_binding_pattern=>[ binding_element_list • , binding_rest_element ]
                               141:424 array_binding_pattern=>[ binding_element_list • , elision ]
                               141:426 array_binding_pattern=>[ binding_element_list • , ]
                            */
                            /*peek_level:1 offset:4 -- clause*/
                            /*, ... ]*/
                            let pk = l.copy();
                            sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                            if (pk.utf == 44/*[,]*/) {
                                /*peek*/
                                /*
                                   141:420 array_binding_pattern=>[ binding_element_list • , elision binding_rest_element ]
                                   141:424 array_binding_pattern=>[ binding_element_list • , elision ]
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*,*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                    /*consume*/
                                    /*
                                       141:420 array_binding_pattern=>[ binding_element_list , • elision binding_rest_element ]
                                       141:424 array_binding_pattern=>[ binding_element_list , • elision ]
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*162*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $elision(l, state)) {
                                        /*assert*/
                                        /*
                                           141:420 array_binding_pattern=>[ binding_element_list , • elision binding_rest_element ]
                                           141:424 array_binding_pattern=>[ binding_element_list , • elision ]
                                        */
                                        /*peek_level:0 offset:8 -- clause*/
                                        /*... ]*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                                            /*peek-production-closure*/
                                            /*
                                               141:420 array_binding_pattern=>[ binding_element_list , elision • binding_rest_element ]
                                            */
                                            /*peek_level:0 offset:8*/
                                            if (state = $binding_rest_element(l, state)) {
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                                    /*--unique-id--141--DO-NOT-REPLACE*/
                                                    add_reduce(state, 6, 199);
                                                    debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                                    return state;
                                                }
                                            }
                                        } else if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                            /*consume*/
                                            /*
                                               141:424 array_binding_pattern=>[ binding_element_list , elision ] •
                                            */
                                            /*--unique-id--141--DO-NOT-REPLACE*/
                                            /*peek_level:-1 offset:8*/
                                            add_reduce(state, 5, 201);
                                            debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                            return state;
                                        }
                                    }
                                }
                            } else if (defined_token_f47f6de2d28c24e5(pk)/*[...]*/) {
                                /*peek*/
                                /*
                                   141:423 array_binding_pattern=>[ binding_element_list • , binding_rest_element ]
                                */
                                /*peek_level:1 offset:4*/
                                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $binding_rest_element(l, state)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                            /*--unique-id--141--DO-NOT-REPLACE*/
                                            add_reduce(state, 5, 201);
                                            debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                            return state;
                                        }
                                    }
                                }
                            } else if (pk.utf == 93/*[]]*/) {
                                /*peek*/
                                /*
                                   141:426 array_binding_pattern=>[ binding_element_list • , ]
                                */
                                /*peek_level:1 offset:4*/
                                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                        /*--unique-id--141--DO-NOT-REPLACE*/
                                        add_reduce(state, 4, 198);
                                        debug_stack.push({ name: "array_binding_pattern RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "array_binding_pattern RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: binding_property_list
            grammar index: 142
            bodies:
	142:427 binding_property_list=>• binding_property - 
		142:428 binding_property_list=>• binding_property_list , binding_property - 
            compile time: 19.389ms*/;
        function $binding_property_list(l, state) {
            debug_stack.push({ name: "binding_property_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $binding_property(l, state)) {
                /*--unique-id--142--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $binding_property_list_goto(l, state, 142);
            }
            debug_stack.push({ name: "binding_property_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $binding_property_list_goto(l, state, prod) {
            debug_stack.push({ name: "binding_property_list GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*,*/
                if (l.utf == 44/*[,]*/) {
                    /*peek*/
                    /*
                       142:428 binding_property_list=>binding_property_list • , binding_property
                       140:416 object_binding_pattern=>{ binding_property_list • , binding_rest_property }
                       140:417 object_binding_pattern=>{ binding_property_list • , }
                    */
                    /*peek_level:1 offset:1 -- clause*/
                    /*_ $ id async get set target as from await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false " ' num [*/
                    let pk = l.copy();
                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                    if ((assert_table(pk, 0x0, 0x94, 0x88000000, 0x0)/*tbl:[ _ ] [ $ ] [ " ] [ ' ] [ [ ]*/ || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                        /*peek*/
                        /*
                           142:428 binding_property_list=>binding_property_list • , binding_property
                        */
                        /*peek_level:1 offset:1*/
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $binding_property(l, state)) {
                                /*--unique-id--142--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 203);
                                prod = 142;
                                continue;
                            }
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "binding_property_list GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 142);
        }
/*production name: binding_element_list
            grammar index: 143
            bodies:
	143:429 binding_element_list=>• binding_elision_element - 
		143:430 binding_element_list=>• binding_element_list , binding_elision_element - 
            compile time: 744.829ms*/;
        function $binding_element_list(l, state) {
            debug_stack.push({ name: "binding_element_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $binding_elision_element(l, state)) {
                /*--unique-id--143--DO-NOT-REPLACE*/
                return $binding_element_list_goto(l, state, 143);
            }
            debug_stack.push({ name: "binding_element_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $binding_element_list_goto(l, state, prod) {
            debug_stack.push({ name: "binding_element_list GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*,*/
                if (l.utf == 44/*[,]*/) {
                    /*peek*/
                    /*
                       143:430 binding_element_list=>binding_element_list • , binding_elision_element
                       141:420 array_binding_pattern=>[ binding_element_list • , elision binding_rest_element ]
                       141:423 array_binding_pattern=>[ binding_element_list • , binding_rest_element ]
                       141:424 array_binding_pattern=>[ binding_element_list • , elision ]
                       141:426 array_binding_pattern=>[ binding_element_list • , ]
                    */
                    /*peek_level:1 offset:1 -- clause*/
                    /*, _ $ id async get set target as from { [*/
                    let pk = l.copy();
                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                    if (pk.utf == 44/*[,]*/) {
                        /*peek*/
                        /*
                           143:430 binding_element_list=>binding_element_list • , binding_elision_element
                           141:420 array_binding_pattern=>[ binding_element_list • , elision binding_rest_element ]
                           141:424 array_binding_pattern=>[ binding_element_list • , elision ]
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*,*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            /*consume*/
                            /*
                               143:430 binding_element_list=>binding_element_list , • binding_elision_element
                               141:420 array_binding_pattern=>[ binding_element_list , • elision binding_rest_element ]
                               141:424 array_binding_pattern=>[ binding_element_list , • elision ]
                            */
                            /*peek_level:0 offset:4 -- clause*/
                            /*, _ $ id async get set target as from { [*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (l.utf == 44/*[,]*/) {
                                /*peek*/
                                /*
                                   143:430 binding_element_list=>binding_element_list , • binding_elision_element
                                   141:420 array_binding_pattern=>[ binding_element_list , • elision binding_rest_element ]
                                   141:424 array_binding_pattern=>[ binding_element_list , • elision ]
                                */
                                let mk = mark();
                                let anchor = l.copy();
                                let anchor_state = state;
                                /*430,3,2,420,6,3,424,5,3*/
                                /*143*/
                                /*peek_level:-1 offset:4*/
                                if (state = $binding_elision_element(l, state)) {
                                    /*--unique-id--143--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 204);
                                    prod = 143;
                                    continue;
                                }
                                state = reset(mk, anchor, l, anchor_state);
                            } else {
                                /*peek-production-closure*/
                                /*
                                   143:430 binding_element_list=>binding_element_list , • binding_elision_element
                                */
                                /*peek_level:0 offset:4*/
                                if (state = $binding_elision_element(l, state)) {
                                    /*--unique-id--143--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 204);
                                    prod = 143;
                                    continue;
                                }
                            }
                        }
                    } else if (assert_table(pk, 0x0, 0x10, 0x88000000, 0x8000000)/*tbl:[ _ ] [ $ ] [ { ] [ [ ]*/ || pk.isID()/*[id]*/) {
                        /*peek*/
                        /*
                           143:430 binding_element_list=>binding_element_list • , binding_elision_element
                        */
                        /*peek_level:1 offset:1*/
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $binding_elision_element(l, state)) {
                                /*--unique-id--143--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 204);
                                prod = 143;
                                continue;
                            }
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "binding_element_list GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 143);
        }
/*production name: binding_elision_element
            grammar index: 144
            bodies:
	144:431 binding_elision_element=>• elision binding_element - 
		144:432 binding_elision_element=>• binding_element - 
            compile time: 6.806ms*/;
        function $binding_elision_element(l, state) {
            debug_stack.push({ name: "binding_elision_element RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*, _ $ id async get set target as from { [*/
            if (l.utf == 44/*[,]*/) {
                /*peek-production-closure*/
                /*
                   144:431 binding_elision_element=>• elision binding_element
                */
                /*peek_level:0 offset:0*/
                if (state = $elision(l, state)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $binding_element(l, state)) {
                        /*--unique-id--144--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 205);
                        debug_stack.push({ name: "binding_elision_element RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            } else {
                /*peek-production-closure*/
                /*
                   144:432 binding_elision_element=>• binding_element
                */
                /*peek_level:0 offset:0*/
                if (state = $binding_element(l, state)) {
                    /*--unique-id--144--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 4);
                    debug_stack.push({ name: "binding_elision_element RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "binding_elision_element RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: binding_property
            grammar index: 145
            bodies:
	145:433 binding_property=>• single_name_binding - 
		145:434 binding_property=>• property_name : binding_element - 
            compile time: 259.437ms*/;
        function $binding_property(l, state) {
            debug_stack.push({ name: "binding_property RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false " ' num [ _ $ id async get set target as from*/
            if ((((((((((((((((defined_token_ded0f96a7228c7c5(l)/*[await]*/ || defined_token_c3524ff0dce64492(l)/*[break]*/) || defined_token_c460df0c19b30757(l)/*[case] [catch] [class] [const] [continue]*/) || defined_token_0b6f38e897a6033b(l)/*[debugger] [default] [delete] [do]*/) || defined_token_eb7f69039a78f607(l)/*[else] [export] [extends]*/) || defined_token_5ae254f69676cbf1(l)/*[finally] [for] [function] [false]*/) || defined_token_b7730e2b48fe68f8(l)/*[if] [import] [in] [instanceof] [implements] [interface]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_876f036172605c26(l)/*[return]*/) || defined_token_35cdf6168a8ead76(l)/*[super] [switch]*/) || defined_token_d4bc8ae8e31ef3aa(l)/*[this] [throw] [try] [typeof] [true]*/) || defined_token_b64c7c58a10dcef3(l)/*[var] [void]*/) || defined_token_aac16ca323764d7a(l)/*[while] [with]*/) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_dc17de0546cfa0c9(l)/*[package] [protected] [private] [public]*/) || assert_table(l, 0x0, 0x84, 0x8000000, 0x0)/*tbl:[ " ] [ ' ] [ [ ]*/) || l.isNum()/*[num]*/) {
                /*peek-production-closure*/
                /*
                   145:434 binding_property=>• property_name : binding_element
                */
                /*peek_level:0 offset:0*/
                if (state = $property_name(l, state)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 58/*[:]*/)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $binding_element(l, state)) {
                            /*--unique-id--145--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 206);
                            return $binding_property_goto(l, state, 145);
                        }
                    }
                }
            } else if (((l.utf == 95/*[_]*/) || (l.utf == 36/*[$]*/)) || l.isID()/*[id]*/) {
                /*peek*/
                /*
                   145:433 binding_property=>• single_name_binding
                   145:434 binding_property=>• property_name : binding_element
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*228 async get set target as from*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, def$js_id_symbols_tok_b3199095c9facd2b(l))) {
                    /*consume*/
                    /*
                       227:681 def$js_identifier=>tk:def$js_id_symbols •
                    */
                    /*--unique-id--194--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    return $binding_property_goto(l, state, 194);
                } else if (assert_consume(l, state, (((defined_token_845a30f46ac258a6(l)/*[async] [as]*/ || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_5bca542dce980d9c(l)/*[set]*/) || defined_token_1cb42c7dd41b3a7e(l)/*[target]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/)) {
                    /*consume*/
                    /*
                       191:538 unreserved_word=>τasync •
                       191:539 unreserved_word=>τget •
                       191:540 unreserved_word=>τset •
                       191:541 unreserved_word=>τtarget •
                       191:542 unreserved_word=>τas •
                       191:543 unreserved_word=>τfrom •
                    */
                    /*--unique-id--191--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    return $binding_property_goto(l, state, 191);
                }
            }
            debug_stack.push({ name: "binding_property RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $binding_property_goto(l, state, prod) {
            debug_stack.push({ name: "binding_property GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                switch (prod) {
                    case 155:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*:*/
                        if (assert_consume(l, state, l.utf == 58/*[:]*/)) {
                            /*consume*/
                            /*
                               145:434 binding_property=>property_name : • binding_element
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $binding_element(l, state)) {
                                /*--unique-id--145--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 206);
                                prod = 145;
                                continue;
                            }
                        }
                        break;
                    case 188:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= , ] } ) END_OF_FILE*/
                        if (l.utf == 61/*[=]*/) {
                            /*assert-production-closure*/
                            /*
                               147:438 single_name_binding=>binding_identifier • initializer
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $initializer(l, state)) {
                                /*--unique-id--145--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 207);
                                prod = 145;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               147:439 single_name_binding=>binding_identifier •
                            */
                            /*--unique-id--145--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            add_reduce(state, 1, 208);
                            prod = 145;
                            continue;
                        }
                        break;
                    case 191:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*: =*/
                        if (l.utf == 58/*[:]*/) {
                            /*assert-end*/
                            /*
                               190:537 identifier_name=>unreserved_word •
                            */
                            /*--unique-id--155--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 246);
                            add_reduce(state, 1, 214);
                            prod = 155;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               189:534 identifier=>unreserved_word •
                            */
                            /*--unique-id--188--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 245);
                            add_reduce(state, 1, 111);
                            prod = 188;
                            continue;
                        }
                        break;
                    case 194:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*: =*/
                        if (l.utf == 58/*[:]*/) {
                            /*assert-end*/
                            /*
                               190:535 identifier_name=>composite_identifier •
                            */
                            /*--unique-id--155--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 246);
                            add_reduce(state, 1, 214);
                            prod = 155;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               189:533 identifier=>composite_identifier •
                            */
                            /*--unique-id--188--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 245);
                            add_reduce(state, 1, 111);
                            prod = 188;
                            continue;
                        }
                        break;
                }
                break;
            }
            debug_stack.push({ name: "binding_property GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 145);
        }
/*production name: binding_element
            grammar index: 146
            bodies:
	146:435 binding_element=>• single_name_binding - 
		146:436 binding_element=>• binding_pattern initializer - 
		146:437 binding_element=>• binding_pattern - 
            compile time: 210.599ms*/;
        function $binding_element(l, state) {
            debug_stack.push({ name: "binding_element RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*{ [ _ $ id async get set target as from*/
            if ((l.utf == 123/*[{]*/) || (l.utf == 91/*[[]*/)) {
                /*peek-production-closure*/
                /*
                   146:436 binding_element=>• binding_pattern initializer
                   146:437 binding_element=>• binding_pattern
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*139*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $binding_pattern(l, state)) {
                    /*assert*/
                    /*
                       146:436 binding_element=>• binding_pattern initializer
                       146:437 binding_element=>• binding_pattern
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*= , ] } ) END_OF_FILE*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (l.utf == 61/*[=]*/) {
                        /*assert-production-closure*/
                        /*
                           146:436 binding_element=>binding_pattern • initializer
                        */
                        /*peek_level:-1 offset:3*/
                        if (state = $initializer(l, state)) {
                            /*--unique-id--146--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 207);
                            debug_stack.push({ name: "binding_element RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    } else {
                        /*assert-end*/
                        /*
                           146:437 binding_element=>binding_pattern •
                        */
                        /*--unique-id--146--DO-NOT-REPLACE*/
                        /*peek_level:0 offset:4*/
                        add_reduce(state, 1, 208);
                        debug_stack.push({ name: "binding_element RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            } else {
                /*peek-production-closure*/
                /*
                   146:435 binding_element=>• single_name_binding
                */
                /*peek_level:0 offset:0*/
                if (state = $single_name_binding(l, state)) {
                    /*--unique-id--146--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "binding_element RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "binding_element RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: single_name_binding
            grammar index: 147
            bodies:
	147:438 single_name_binding=>• binding_identifier initializer - 
		147:439 single_name_binding=>• binding_identifier - 
            compile time: 3.402ms*/;
        function $single_name_binding(l, state) {
            debug_stack.push({ name: "single_name_binding RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*188*/
            if (state = $binding_identifier(l, state)) {
                /*assert*/
                /*
                   147:438 single_name_binding=>• binding_identifier initializer
                   147:439 single_name_binding=>• binding_identifier
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*= , ] } ) END_OF_FILE*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (l.utf == 61/*[=]*/) {
                    /*assert-production-closure*/
                    /*
                       147:438 single_name_binding=>binding_identifier • initializer
                    */
                    /*peek_level:-1 offset:1*/
                    if (state = $initializer(l, state)) {
                        /*--unique-id--147--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 207);
                        debug_stack.push({ name: "single_name_binding RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*assert-end*/
                    /*
                       147:439 single_name_binding=>binding_identifier •
                    */
                    /*--unique-id--147--DO-NOT-REPLACE*/
                    /*peek_level:0 offset:2*/
                    add_reduce(state, 1, 208);
                    debug_stack.push({ name: "single_name_binding RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "single_name_binding RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: binding_rest_property
            grammar index: 148
            bodies:
	148:440 binding_rest_property=>• ... binding_identifier - 
            compile time: 3.862ms*/;
        function $binding_rest_property(l, state) {
            debug_stack.push({ name: "binding_rest_property RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*...*/
            if (assert_consume(l, state, defined_token_f47f6de2d28c24e5(l)/*[...]*/)) {
                /*consume*/
                /*
                   148:440 binding_rest_property=>... • binding_identifier
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $identifier(l, state)) {
                    /*--unique-id--148--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 111);
                    add_reduce(state, 2, 163);
                    debug_stack.push({ name: "binding_rest_property RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "binding_rest_property RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: binding_rest_element
            grammar index: 149
            bodies:
	149:441 binding_rest_element=>• ... binding_identifier - 
		149:442 binding_rest_element=>• ... binding_pattern - 
            compile time: 7.596ms*/;
        function $binding_rest_element(l, state) {
            debug_stack.push({ name: "binding_rest_element RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*...*/
            if (assert_consume(l, state, defined_token_f47f6de2d28c24e5(l)/*[...]*/)) {
                /*consume*/
                /*
                   149:441 binding_rest_element=>... • binding_identifier
                   149:442 binding_rest_element=>... • binding_pattern
                */
                /*peek_level:0 offset:1 -- clause*/
                /*{ [ _ $ id async get set target as from*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if ((l.utf == 123/*[{]*/) || (l.utf == 91/*[[]*/)) {
                    /*peek-production-closure*/
                    /*
                       149:442 binding_rest_element=>... • binding_pattern
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $binding_pattern(l, state)) {
                        /*--unique-id--149--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 163);
                        debug_stack.push({ name: "binding_rest_element RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       149:441 binding_rest_element=>... • binding_identifier
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $identifier(l, state)) {
                        /*--unique-id--149--DO-NOT-REPLACE*/
                        add_reduce(state, 1, 111);
                        add_reduce(state, 2, 163);
                        debug_stack.push({ name: "binding_rest_element RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "binding_rest_element RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: regular_expression_literal
            grammar index: 150
            bodies:
	150:443 regular_expression_literal=>• / / def$js_identifier - 
		150:444 regular_expression_literal=>• / / - 
            compile time: 26.882ms*/;
        function $regular_expression_literal(l, state) {
            debug_stack.push({ name: "regular_expression_literal RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*/*/
            if (assert_consume(l, state, l.utf == 47/*[/]*/)) {
                /*consume*/
                /*
                   150:443 regular_expression_literal=>/ • / def$js_identifier
                   150:444 regular_expression_literal=>/ • /
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*/*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 47/*[/]*/)) {
                    /*consume*/
                    /*
                       150:443 regular_expression_literal=>/ / • def$js_identifier
                       150:444 regular_expression_literal=>/ / •
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*228 { += [ . `` ` ( -= <<= >>= >>>= &= ^= |= **= %= ?. ; ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? : { nl END_OF_FILE of } /= ) * = ] , END_OF_FILE*/
                    sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                    if (def$js_id_symbols_tok_b3199095c9facd2b(l)) {
                        /*assert-production-closure*/
                        /*
                           150:443 regular_expression_literal=>/ / • def$js_identifier
                        */
                        /*peek_level:-1 offset:2*/
                        if (state = $def$js_identifier(l, state)) {
                            /*--unique-id--150--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 209);
                            debug_stack.push({ name: "regular_expression_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    } else {
                        /*assert-end*/
                        /*
                           150:444 regular_expression_literal=>/ / •
                        */
                        /*--unique-id--150--DO-NOT-REPLACE*/
                        /*peek_level:0 offset:3*/
                        add_reduce(state, 2, 210);
                        debug_stack.push({ name: "regular_expression_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "regular_expression_literal RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: object_literal
            grammar index: 152
            bodies:
	152:446 object_literal=>• { } - 
		152:447 object_literal=>• { property_definition_list , } - 
		152:448 object_literal=>• { property_definition_list } - 
            compile time: 245.261ms*/;
        function $object_literal(l, state) {
            debug_stack.push({ name: "object_literal RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*{*/
            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                /*consume*/
                /*
                   152:446 object_literal=>{ • }
                   152:447 object_literal=>{ • property_definition_list , }
                   152:448 object_literal=>{ • property_definition_list }
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*} _ $ id async get set target as from * await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false " ' num [ ...*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                    /*consume*/
                    /*
                       152:446 object_literal=>{ } •
                    */
                    /*--unique-id--152--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 211);
                    debug_stack.push({ name: "object_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else {
                    /*peek-production-closure*/
                    /*
                       152:447 object_literal=>{ • property_definition_list , }
                       152:448 object_literal=>{ • property_definition_list }
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*153*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $property_definition_list(l, state)) {
                        /*assert*/
                        /*
                           152:447 object_literal=>{ • property_definition_list , }
                           152:448 object_literal=>{ • property_definition_list }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*, }*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            /*consume*/
                            /*
                               152:447 object_literal=>{ property_definition_list , • }
                            */
                            /*peek_level:-1 offset:4*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                /*--unique-id--152--DO-NOT-REPLACE*/
                                add_reduce(state, 4, 212);
                                debug_stack.push({ name: "object_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        } else if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                            /*consume*/
                            /*
                               152:448 object_literal=>{ property_definition_list } •
                            */
                            /*--unique-id--152--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 212);
                            debug_stack.push({ name: "object_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "object_literal RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: property_definition_list
            grammar index: 153
            bodies:
	153:449 property_definition_list=>• property_definition - 
		153:450 property_definition_list=>• property_definition_list , property_definition - 
            compile time: 15.397ms*/;
        function $property_definition_list(l, state) {
            debug_stack.push({ name: "property_definition_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $property_definition(l, state)) {
                /*--unique-id--153--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $property_definition_list_goto(l, state, 153);
            }
            debug_stack.push({ name: "property_definition_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $property_definition_list_goto(l, state, prod) {
            debug_stack.push({ name: "property_definition_list GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*,*/
                if (l.utf == 44/*[,]*/) {
                    /*peek*/
                    /*
                       153:450 property_definition_list=>property_definition_list • , property_definition
                       152:447 object_literal=>{ property_definition_list • , }
                    */
                    /*peek_level:1 offset:1 -- clause*/
                    /*_ $ id async get set target as from * await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false " ' num [ ...*/
                    let pk = l.copy();
                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                    if (((defined_token_f47f6de2d28c24e5(pk)/*[...]*/ || assert_table(pk, 0x0, 0x494, 0x88000000, 0x0)/*tbl:[ _ ] [ $ ] [ * ] [ " ] [ ' ] [ [ ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                        /*peek*/
                        /*
                           153:450 property_definition_list=>property_definition_list • , property_definition
                        */
                        /*peek_level:1 offset:1*/
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $property_definition(l, state)) {
                                /*--unique-id--153--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 213);
                                prod = 153;
                                continue;
                            }
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "property_definition_list GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 153);
        }
/*production name: property_definition
            grammar index: 154
            bodies:
	154:451 property_definition=>• cover_initialized_name - 
		154:452 property_definition=>• identifier_reference - 
		154:453 property_definition=>• method_definition - 
		154:454 property_definition=>• ... assignment_expression - 
		154:455 property_definition=>• property_name : assignment_expression - 
            compile time: 6510.008ms*/;
        function $property_definition(l, state) {
            debug_stack.push({ name: "property_definition RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /** ... await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false " ' num [ _ $ id async get set target as from*/
            if (l.utf == 42/*[*]*/) {
                /*peek-production-closure*/
                /*
                   154:453 property_definition=>• method_definition
                */
                /*peek_level:0 offset:0*/
                if (state = $method_definition(l, state)) {
                    /*--unique-id--154--DO-NOT-REPLACE*/
                    return $property_definition_goto(l, state, 154);
                }
            } else if (assert_consume(l, state, defined_token_f47f6de2d28c24e5(l)/*[...]*/)) {
                /*consume*/
                /*
                   154:454 property_definition=>... • assignment_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $assignment_expression(l, state)) {
                    /*--unique-id--154--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 163);
                    return $property_definition_goto(l, state, 154);
                }
            } else if ((((((((((((((((defined_token_ded0f96a7228c7c5(l)/*[await]*/ || defined_token_c3524ff0dce64492(l)/*[break]*/) || defined_token_c460df0c19b30757(l)/*[case] [catch] [class] [const] [continue]*/) || defined_token_0b6f38e897a6033b(l)/*[debugger] [default] [delete] [do]*/) || defined_token_eb7f69039a78f607(l)/*[else] [export] [extends]*/) || defined_token_5ae254f69676cbf1(l)/*[finally] [for] [function] [false]*/) || defined_token_b7730e2b48fe68f8(l)/*[if] [import] [in] [instanceof] [implements] [interface]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_876f036172605c26(l)/*[return]*/) || defined_token_35cdf6168a8ead76(l)/*[super] [switch]*/) || defined_token_d4bc8ae8e31ef3aa(l)/*[this] [throw] [try] [typeof] [true]*/) || defined_token_b64c7c58a10dcef3(l)/*[var] [void]*/) || defined_token_aac16ca323764d7a(l)/*[while] [with]*/) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_dc17de0546cfa0c9(l)/*[package] [protected] [private] [public]*/) || assert_table(l, 0x0, 0x84, 0x8000000, 0x0)/*tbl:[ " ] [ ' ] [ [ ]*/) || l.isNum()/*[num]*/) {
                /*peek*/
                /*
                   154:453 property_definition=>• method_definition
                   154:455 property_definition=>• property_name : assignment_expression
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*" ' [ num await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (l.utf == 34/*["]*/) {
                    /*peek*/
                    /*
                       179:514 string_literal=>• " string_literal_HC_listbody1_124 "
                       179:516 string_literal=>• " "
                    */
                    /*peek_level:1 offset:2 -- clause*/
                    /*nl ws sym num id \ "*/
                    let pk = l.copy();
                    sk_d065c58d10ee093b(pk.next()/*[ 6 ]*/);
                    if ((((pk.isID()/*[id]*/ || pk.isNL()/*[nl]*/) || pk.isNum()/*[num]*/) || pk.isSym()/*[sym]*/) || pk.isSP()/*[ws]*/) {
                        /*peek-production-closure*/
                        /*
                           179:514 string_literal=>• " string_literal_HC_listbody1_124 "
                           179:516 string_literal=>• " "
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $string_literal(l, state)) {
                            /*--unique-id--155--DO-NOT-REPLACE*/
                            add_reduce(state, 1, 214);
                            return $property_definition_goto(l, state, 155);
                        }
                    }
                } else if (l.utf == 39/*[']*/) {
                    /*peek*/
                    /*
                       179:515 string_literal=>• ' string_literal_HC_listbody1_125 '
                       179:517 string_literal=>• ' '
                    */
                    /*peek_level:1 offset:2 -- clause*/
                    /*nl ws sym num id \ '*/
                    let pk = l.copy();
                    sk_d065c58d10ee093b(pk.next()/*[ 6 ]*/);
                    if ((((pk.isID()/*[id]*/ || pk.isNL()/*[nl]*/) || pk.isNum()/*[num]*/) || pk.isSym()/*[sym]*/) || pk.isSP()/*[ws]*/) {
                        /*peek-production-closure*/
                        /*
                           179:515 string_literal=>• ' string_literal_HC_listbody1_125 '
                           179:517 string_literal=>• ' '
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $string_literal(l, state)) {
                            /*--unique-id--155--DO-NOT-REPLACE*/
                            add_reduce(state, 1, 214);
                            return $property_definition_goto(l, state, 155);
                        }
                    }
                } else if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                    /*consume*/
                    /*
                       157:461 computed_property_name=>[ • assignment_expression ]
                    */
                    /*peek_level:-1 offset:2*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $assignment_expression(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*--unique-id--155--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 215);
                            add_reduce(state, 1, 214);
                            return $property_definition_goto(l, state, 155);
                        }
                    }
                } else if (assert_consume(l, state, l.isNum()/*[num]*/)) {
                    /*consume*/
                    /*
                       183:526 numeric_literal=>θnum •
                    */
                    /*--unique-id--155--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 240);
                    add_reduce(state, 1, 214);
                    return $property_definition_goto(l, state, 155);
                } else if (assert_consume(l, state, (((((((((((((defined_token_ded0f96a7228c7c5(l)/*[await]*/ || defined_token_c3524ff0dce64492(l)/*[break]*/) || defined_token_c460df0c19b30757(l)/*[case] [catch] [class] [const] [continue]*/) || defined_token_0b6f38e897a6033b(l)/*[debugger] [default] [delete] [do]*/) || defined_token_eb7f69039a78f607(l)/*[else] [export] [extends]*/) || defined_token_5ae254f69676cbf1(l)/*[finally] [for] [function] [false]*/) || defined_token_b7730e2b48fe68f8(l)/*[if] [import] [in] [instanceof] [implements] [interface]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_876f036172605c26(l)/*[return]*/) || defined_token_35cdf6168a8ead76(l)/*[super] [switch]*/) || defined_token_d4bc8ae8e31ef3aa(l)/*[this] [throw] [try] [typeof] [true]*/) || defined_token_b64c7c58a10dcef3(l)/*[var] [void]*/) || defined_token_aac16ca323764d7a(l)/*[while] [with]*/) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_dc17de0546cfa0c9(l)/*[package] [protected] [private] [public]*/)) {
                    /*consume*/
                    /*
                       195:556 keyword=>τawait •
                       195:557 keyword=>τbreak •
                       195:558 keyword=>τcase •
                       195:559 keyword=>τcatch •
                       195:560 keyword=>τclass •
                       195:561 keyword=>τconst •
                       195:562 keyword=>τcontinue •
                       195:563 keyword=>τdebugger •
                       195:564 keyword=>τdefault •
                       195:565 keyword=>τdelete •
                       195:566 keyword=>τdo •
                       195:567 keyword=>τelse •
                       195:568 keyword=>τexport •
                       195:569 keyword=>τextends •
                       195:570 keyword=>τfinally •
                       195:571 keyword=>τfor •
                       195:572 keyword=>τfunction •
                       195:573 keyword=>τif •
                       195:574 keyword=>τimport •
                       195:575 keyword=>τin •
                       195:576 keyword=>τinstanceof •
                       195:577 keyword=>τnew •
                       195:578 keyword=>τreturn •
                       195:579 keyword=>τsuper •
                       195:580 keyword=>τswitch •
                       195:581 keyword=>τthis •
                       195:582 keyword=>τthrow •
                       195:583 keyword=>τtry •
                       195:584 keyword=>τtypeof •
                       195:585 keyword=>τvar •
                       195:586 keyword=>τvoid •
                       195:587 keyword=>τwhile •
                       195:588 keyword=>τwith •
                       195:589 keyword=>τyield •
                       193:549 future_reserved_word=>τimplements •
                       193:550 future_reserved_word=>τpackage •
                       193:551 future_reserved_word=>τprotected •
                       193:552 future_reserved_word=>τinterface •
                       193:553 future_reserved_word=>τprivate •
                       193:554 future_reserved_word=>τpublic •
                       192:546 reserved_word=>τnull •
                       192:547 reserved_word=>τtrue •
                       192:548 reserved_word=>τfalse •
                    */
                    /*--unique-id--155--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    add_reduce(state, 1, 246);
                    add_reduce(state, 1, 214);
                    return $property_definition_goto(l, state, 155);
                }
            } else if (((l.utf == 95/*[_]*/) || (l.utf == 36/*[$]*/)) || l.isID()/*[id]*/) {
                /*peek*/
                /*
                   154:451 property_definition=>• cover_initialized_name
                   154:452 property_definition=>• identifier_reference
                   154:453 property_definition=>• method_definition
                   154:455 property_definition=>• property_name : assignment_expression
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*228 async get set target as from*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, def$js_id_symbols_tok_b3199095c9facd2b(l))) {
                    /*consume*/
                    /*
                       227:681 def$js_identifier=>tk:def$js_id_symbols •
                    */
                    /*--unique-id--194--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    return $property_definition_goto(l, state, 194);
                } else if (defined_token_e1e77579dc125345(l)/*[async]*/) {
                    /*peek*/
                    /*
                       191:538 unreserved_word=>• τasync
                       94:245 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                       94:249 method_definition=>• τasync property_name ( unique_formal_parameters ) { function_body }
                       94:250 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { function_body }
                       94:251 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                       94:257 method_definition=>• τasync property_name ( ) { function_body }
                       94:258 method_definition=>• τasync property_name ( unique_formal_parameters ) { }
                       94:259 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { }
                       94:263 method_definition=>• τasync property_name ( ) { }
                    */
                    /*peek_level:1 offset:2 -- clause*/
                    /** [ instanceof in as from extends ?. ( `` ` . -- ++ /= %= += -= <<= >>= >>>= &= ^= |= **= = ** % / + - >>> >> << < > <= >= !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ?? { of _ $ id await break case catch class const continue debugger default delete do else export finally for function if import new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false async get set target " ' num*/
                    let pk = l.copy();
                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                    if (pk.utf == 42/*[*]*/) {
                        /*peek*/
                        /*
                           191:538 unreserved_word=>• τasync
                           94:245 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                           94:250 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { function_body }
                           94:251 method_definition=>• τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                           94:259 method_definition=>• τasync yield_expression_group_0143_115 property_name ( ) { }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*async*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                            /*consume*/
                            /*
                               191:538 unreserved_word=>τasync •
                               94:245 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                               94:250 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { function_body }
                               94:251 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                               94:259 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { }
                            */
                            /*peek_level:-1 offset:5 -- clause*/
                            /*83 from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                            sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                            if (state = $yield_expression_group_0143_115(l, state)) {
                                /*assert*/
                                /*
                                   94:245 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { function_body }
                                   94:250 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { function_body }
                                   94:251 method_definition=>τasync • yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { }
                                   94:259 method_definition=>τasync • yield_expression_group_0143_115 property_name ( ) { }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*155*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $property_name(l, state)) {
                                    /*assert*/
                                    /*
                                       94:245 method_definition=>τasync yield_expression_group_0143_115 • property_name ( unique_formal_parameters ) { function_body }
                                       94:250 method_definition=>τasync yield_expression_group_0143_115 • property_name ( ) { function_body }
                                       94:251 method_definition=>τasync yield_expression_group_0143_115 • property_name ( unique_formal_parameters ) { }
                                       94:259 method_definition=>τasync yield_expression_group_0143_115 • property_name ( ) { }
                                    */
                                    /*peek_level:-1 offset:7 -- clause*/
                                    /*(*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                        /*consume*/
                                        /*
                                           94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                           94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { function_body }
                                           94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                           94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { }
                                        */
                                        /*peek_level:0 offset:8 -- clause*/
                                        /*) ... { [ async get set target as from _ $ id*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (l.utf == 41/*[)]*/) {
                                            /*peek*/
                                            /*
                                               94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { function_body }
                                               94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( • ) { }
                                            */
                                            /*peek_level:-1 offset:10 -- clause*/
                                            /*)*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                /*consume*/
                                                /*
                                                   94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) • { function_body }
                                                   94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) • { }
                                                */
                                                /*peek_level:-1 offset:11 -- clause*/
                                                /*{*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                       94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • }
                                                    */
                                                    /*peek_level:0 offset:12 -- clause*/
                                                    /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (l.utf == 125/*[}]*/) {
                                                        /*peek*/
                                                        /*
                                                           94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                           94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • }
                                                        */
                                                        /*peek_level:1 offset:12 -- clause*/
                                                        /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                        let pk = l.copy();
                                                        sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                        if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                            /*peek*/
                                                            /*
                                                               94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                               94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • }
                                                            */
                                                            let mk = mark();
                                                            let anchor = l.copy();
                                                            let anchor_state = state;
                                                            /*250,8,6,259,7,6*/
                                                            /*154*/
                                                            /*peek_level:-1 offset:12*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--154--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 132);
                                                                    return $property_definition_goto(l, state, 154);
                                                                }
                                                            }
                                                            /*250,8,6,259,7,6*/
                                                            state = reset(mk, anchor, l, anchor_state);
                                                            /*peek_level:-1 offset:12 -- clause*/
                                                            /*}*/
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*consume*/
                                                                /*
                                                                   94:259 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { } •
                                                                */
                                                                /*--unique-id--154--DO-NOT-REPLACE*/
                                                                /*peek_level:-1 offset:12*/
                                                                add_reduce(state, 7, 141);
                                                                return $property_definition_goto(l, state, 154);
                                                            }
                                                        } else {
                                                            /*peek-production-closure*/
                                                            /*
                                                               94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                            */
                                                            /*peek_level:1 offset:12*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--154--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 132);
                                                                    return $property_definition_goto(l, state, 154);
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           94:250 method_definition=>τasync yield_expression_group_0143_115 property_name ( ) { • function_body }
                                                        */
                                                        /*peek_level:0 offset:12*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--154--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 132);
                                                                return $property_definition_goto(l, state, 154);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                               94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                            */
                                            /*peek_level:-1 offset:10 -- clause*/
                                            /*75*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (state = $unique_formal_parameters(l, state)) {
                                                /*assert*/
                                                /*
                                                   94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { function_body }
                                                   94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( • unique_formal_parameters ) { }
                                                */
                                                /*peek_level:-1 offset:11 -- clause*/
                                                /*)*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) • { function_body }
                                                       94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) • { }
                                                    */
                                                    /*peek_level:-1 offset:12 -- clause*/
                                                    /*{*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                        /*consume*/
                                                        /*
                                                           94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                           94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                        */
                                                        /*peek_level:0 offset:13 -- clause*/
                                                        /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (l.utf == 125/*[}]*/) {
                                                            /*peek*/
                                                            /*
                                                               94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                               94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                            */
                                                            /*peek_level:1 offset:13 -- clause*/
                                                            /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                            let pk = l.copy();
                                                            sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                            if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                                /*peek*/
                                                                /*
                                                                   94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                                   94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • }
                                                                */
                                                                let mk = mark();
                                                                let anchor = l.copy();
                                                                let anchor_state = state;
                                                                /*245,9,7,251,8,7*/
                                                                /*154*/
                                                                /*peek_level:-1 offset:13*/
                                                                if (state = $function_statement_list(l, state)) {
                                                                    add_reduce(state, 1, 105);
                                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                        /*--unique-id--154--DO-NOT-REPLACE*/
                                                                        add_reduce(state, 9, 127);
                                                                        return $property_definition_goto(l, state, 154);
                                                                    }
                                                                }
                                                                /*245,9,7,251,8,7*/
                                                                state = reset(mk, anchor, l, anchor_state);
                                                                /*peek_level:-1 offset:13 -- clause*/
                                                                /*}*/
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*consume*/
                                                                    /*
                                                                       94:251 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { } •
                                                                    */
                                                                    /*--unique-id--154--DO-NOT-REPLACE*/
                                                                    /*peek_level:-1 offset:13*/
                                                                    add_reduce(state, 8, 133);
                                                                    return $property_definition_goto(l, state, 154);
                                                                }
                                                            } else {
                                                                /*peek-production-closure*/
                                                                /*
                                                                   94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                                */
                                                                /*peek_level:1 offset:13*/
                                                                if (state = $function_statement_list(l, state)) {
                                                                    add_reduce(state, 1, 105);
                                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                        /*--unique-id--154--DO-NOT-REPLACE*/
                                                                        add_reduce(state, 9, 127);
                                                                        return $property_definition_goto(l, state, 154);
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            /*peek-production-closure*/
                                                            /*
                                                               94:245 method_definition=>τasync yield_expression_group_0143_115 property_name ( unique_formal_parameters ) { • function_body }
                                                            */
                                                            /*peek_level:0 offset:13*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--154--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 9, 127);
                                                                    return $property_definition_goto(l, state, 154);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                /*assert-end*/
                                /*
                                   191:538 unreserved_word=>τasync •
                                */
                                /*--unique-id--191--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:6*/
                                return $property_definition_goto(l, state, 191);
                            }
                        }
                    } else if ((((defined_token_af69c622b99813ca(pk)/*[instanceof] [in]*/ || defined_token_fcc8b8fe09802878(pk)/*[as]*/) || defined_token_14469127dc9c2c1f(pk)/*[from]*/) || defined_token_e021d8532f9147fd(pk)/*[extends]*/) || (pk.utf == 91/*[[]*/)) {
                        /*peek*/
                        /*
                           191:538 unreserved_word=>• τasync
                           94:249 method_definition=>• τasync property_name ( unique_formal_parameters ) { function_body }
                           94:257 method_definition=>• τasync property_name ( ) { function_body }
                           94:258 method_definition=>• τasync property_name ( unique_formal_parameters ) { }
                           94:263 method_definition=>• τasync property_name ( ) { }
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*async*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_d4a7e22f69f4ee35(l)/*[async]*/)) {
                            /*consume*/
                            /*
                               191:538 unreserved_word=>τasync •
                               94:249 method_definition=>τasync • property_name ( unique_formal_parameters ) { function_body }
                               94:257 method_definition=>τasync • property_name ( ) { function_body }
                               94:258 method_definition=>τasync • property_name ( unique_formal_parameters ) { }
                               94:263 method_definition=>τasync • property_name ( ) { }
                            */
                            /*peek_level:-1 offset:5 -- clause*/
                            /*155 from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                            sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                            if (state = $property_name(l, state)) {
                                /*assert*/
                                /*
                                   94:249 method_definition=>τasync • property_name ( unique_formal_parameters ) { function_body }
                                   94:257 method_definition=>τasync • property_name ( ) { function_body }
                                   94:258 method_definition=>τasync • property_name ( unique_formal_parameters ) { }
                                   94:263 method_definition=>τasync • property_name ( ) { }
                                */
                                /*peek_level:-1 offset:6 -- clause*/
                                /*(*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                    /*consume*/
                                    /*
                                       94:249 method_definition=>τasync property_name ( • unique_formal_parameters ) { function_body }
                                       94:257 method_definition=>τasync property_name ( • ) { function_body }
                                       94:258 method_definition=>τasync property_name ( • unique_formal_parameters ) { }
                                       94:263 method_definition=>τasync property_name ( • ) { }
                                    */
                                    /*peek_level:0 offset:7 -- clause*/
                                    /*) ... { [ async get set target as from _ $ id*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (l.utf == 41/*[)]*/) {
                                        /*peek*/
                                        /*
                                           94:257 method_definition=>τasync property_name ( • ) { function_body }
                                           94:263 method_definition=>τasync property_name ( • ) { }
                                        */
                                        /*peek_level:-1 offset:9 -- clause*/
                                        /*)*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            /*consume*/
                                            /*
                                               94:257 method_definition=>τasync property_name ( ) • { function_body }
                                               94:263 method_definition=>τasync property_name ( ) • { }
                                            */
                                            /*peek_level:-1 offset:10 -- clause*/
                                            /*{*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                /*consume*/
                                                /*
                                                   94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                   94:263 method_definition=>τasync property_name ( ) { • }
                                                */
                                                /*peek_level:0 offset:11 -- clause*/
                                                /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (l.utf == 125/*[}]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                       94:263 method_definition=>τasync property_name ( ) { • }
                                                    */
                                                    /*peek_level:1 offset:11 -- clause*/
                                                    /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                    let pk = l.copy();
                                                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                    if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                        /*peek*/
                                                        /*
                                                           94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                           94:263 method_definition=>τasync property_name ( ) { • }
                                                        */
                                                        let mk = mark();
                                                        let anchor = l.copy();
                                                        let anchor_state = state;
                                                        /*257,7,5,263,6,5*/
                                                        /*154*/
                                                        /*peek_level:-1 offset:11*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--154--DO-NOT-REPLACE*/
                                                                add_reduce(state, 7, 139);
                                                                return $property_definition_goto(l, state, 154);
                                                            }
                                                        }
                                                        /*257,7,5,263,6,5*/
                                                        state = reset(mk, anchor, l, anchor_state);
                                                        /*peek_level:-1 offset:11 -- clause*/
                                                        /*}*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*consume*/
                                                            /*
                                                               94:263 method_definition=>τasync property_name ( ) { } •
                                                            */
                                                            /*--unique-id--154--DO-NOT-REPLACE*/
                                                            /*peek_level:-1 offset:11*/
                                                            add_reduce(state, 6, 145);
                                                            return $property_definition_goto(l, state, 154);
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                        */
                                                        /*peek_level:1 offset:11*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--154--DO-NOT-REPLACE*/
                                                                add_reduce(state, 7, 139);
                                                                return $property_definition_goto(l, state, 154);
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:257 method_definition=>τasync property_name ( ) { • function_body }
                                                    */
                                                    /*peek_level:0 offset:11*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--154--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 139);
                                                            return $property_definition_goto(l, state, 154);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        /*peek-production-closure*/
                                        /*
                                           94:249 method_definition=>τasync property_name ( • unique_formal_parameters ) { function_body }
                                           94:258 method_definition=>τasync property_name ( • unique_formal_parameters ) { }
                                        */
                                        /*peek_level:-1 offset:9 -- clause*/
                                        /*75*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (state = $unique_formal_parameters(l, state)) {
                                            /*assert*/
                                            /*
                                               94:249 method_definition=>τasync property_name ( • unique_formal_parameters ) { function_body }
                                               94:258 method_definition=>τasync property_name ( • unique_formal_parameters ) { }
                                            */
                                            /*peek_level:-1 offset:10 -- clause*/
                                            /*)*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                                /*consume*/
                                                /*
                                                   94:249 method_definition=>τasync property_name ( unique_formal_parameters ) • { function_body }
                                                   94:258 method_definition=>τasync property_name ( unique_formal_parameters ) • { }
                                                */
                                                /*peek_level:-1 offset:11 -- clause*/
                                                /*{*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                       94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { • }
                                                    */
                                                    /*peek_level:0 offset:12 -- clause*/
                                                    /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (l.utf == 125/*[}]*/) {
                                                        /*peek*/
                                                        /*
                                                           94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                           94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { • }
                                                        */
                                                        /*peek_level:1 offset:12 -- clause*/
                                                        /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                        let pk = l.copy();
                                                        sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                        if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                            /*peek*/
                                                            /*
                                                               94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                               94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { • }
                                                            */
                                                            let mk = mark();
                                                            let anchor = l.copy();
                                                            let anchor_state = state;
                                                            /*249,8,6,258,7,6*/
                                                            /*154*/
                                                            /*peek_level:-1 offset:12*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--154--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 131);
                                                                    return $property_definition_goto(l, state, 154);
                                                                }
                                                            }
                                                            /*249,8,6,258,7,6*/
                                                            state = reset(mk, anchor, l, anchor_state);
                                                            /*peek_level:-1 offset:12 -- clause*/
                                                            /*}*/
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*consume*/
                                                                /*
                                                                   94:258 method_definition=>τasync property_name ( unique_formal_parameters ) { } •
                                                                */
                                                                /*--unique-id--154--DO-NOT-REPLACE*/
                                                                /*peek_level:-1 offset:12*/
                                                                add_reduce(state, 7, 140);
                                                                return $property_definition_goto(l, state, 154);
                                                            }
                                                        } else {
                                                            /*peek-production-closure*/
                                                            /*
                                                               94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                            */
                                                            /*peek_level:1 offset:12*/
                                                            if (state = $function_statement_list(l, state)) {
                                                                add_reduce(state, 1, 105);
                                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                    /*--unique-id--154--DO-NOT-REPLACE*/
                                                                    add_reduce(state, 8, 131);
                                                                    return $property_definition_goto(l, state, 154);
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           94:249 method_definition=>τasync property_name ( unique_formal_parameters ) { • function_body }
                                                        */
                                                        /*peek_level:0 offset:12*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--154--DO-NOT-REPLACE*/
                                                                add_reduce(state, 8, 131);
                                                                return $property_definition_goto(l, state, 154);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                /*assert-end*/
                                /*
                                   191:538 unreserved_word=>τasync •
                                */
                                /*--unique-id--191--DO-NOT-REPLACE*/
                                /*peek_level:0 offset:6*/
                                return $property_definition_goto(l, state, 191);
                            }
                        }
                    } else if ((((((((((((((((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || defined_token_f5b15d408b6280ad(pk)/*[?.] [??]*/) || defined_token_19cd74c69f5512e8(pk)/*[``]*/) || defined_token_8c647931e6bf0c07(pk)/*[--] [-=]*/) || defined_token_7330fb2be3dc26eb(pk)/*[++] [+=]*/) || defined_token_37edf5ebc00dbfe6(pk)/*[/=]*/) || defined_token_2c342d130718e813(pk)/*[%=]*/) || defined_token_318c95b1e64de46d(pk)/*[<<=] [<<] [<=]*/) || defined_token_3be2267a053f0395(pk)/*[>>=] [>>>=] [>>>] [>>] [>=]*/) || defined_token_2c51a4b82e64ba22(pk)/*[&=] [&&]*/) || defined_token_8c2d44d7057fe753(pk)/*[^=]*/) || defined_token_d1de557e71993f67(pk)/*[|=] [||]*/) || defined_token_485338d34f29b52a(pk)/*[asteriskasterisk=] [asteriskasterisk]*/) || defined_token_04e94f0279c3936b(pk)/*[!==] [!=]*/) || defined_token_4df9552a310b74e2(pk)/*[===] [==]*/) || defined_token_c6b5fbb944702d5a(pk)/*[of]*/) || assert_table(pk, 0x0, 0xfc00fb60, 0x60000000, 0x38000001)/*tbl:[ ( ] [ ` ] [ . ] [ = ] [ % ] [ / ] [ + ] [ - ] [ < ] [ > ] [ & ] [ ^ ] [ | ] [ ? ] [ ] ] [ : ] [ ) ] [ ; ] [ , ] [ } ] [ { ]*/) {
                        /*peek-production-closure*/
                        /*
                           191:538 unreserved_word=>• τasync
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $unreserved_word(l, state)) {
                            /*--unique-id--191--DO-NOT-REPLACE*/
                            return $property_definition_goto(l, state, 191);
                        }
                    } else {
                        /*assert-production-closure*/
                        /*
                           94:249 method_definition=>• τasync property_name ( unique_formal_parameters ) { function_body }
                        */
                        /*peek_level:1 offset:2*/
                        if (state = $method_definition(l, state)) {
                            /*--unique-id--154--DO-NOT-REPLACE*/
                            return $property_definition_goto(l, state, 154);
                        }
                    }
                } else if (defined_token_8f5d282f35165648(l)/*[get]*/) {
                    /*peek*/
                    /*
                       191:539 unreserved_word=>• τget
                       94:246 method_definition=>• τget property_name ( ) { function_body }
                       94:252 method_definition=>• τget property_name ( ) { }
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*get*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_8f5d282f35165648(l)/*[get]*/)) {
                        /*consume*/
                        /*
                           191:539 unreserved_word=>τget •
                           94:246 method_definition=>τget • property_name ( ) { function_body }
                           94:252 method_definition=>τget • property_name ( ) { }
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*155 from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        if (state = $property_name(l, state)) {
                            /*assert*/
                            /*
                               94:246 method_definition=>τget • property_name ( ) { function_body }
                               94:252 method_definition=>τget • property_name ( ) { }
                            */
                            /*peek_level:-1 offset:6 -- clause*/
                            /*(*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                /*consume*/
                                /*
                                   94:246 method_definition=>τget property_name ( • ) { function_body }
                                   94:252 method_definition=>τget property_name ( • ) { }
                                */
                                /*peek_level:-1 offset:7 -- clause*/
                                /*)*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                    /*consume*/
                                    /*
                                       94:246 method_definition=>τget property_name ( ) • { function_body }
                                       94:252 method_definition=>τget property_name ( ) • { }
                                    */
                                    /*peek_level:-1 offset:8 -- clause*/
                                    /*{*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                        /*consume*/
                                        /*
                                           94:246 method_definition=>τget property_name ( ) { • function_body }
                                           94:252 method_definition=>τget property_name ( ) { • }
                                        */
                                        /*peek_level:0 offset:9 -- clause*/
                                        /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (l.utf == 125/*[}]*/) {
                                            /*peek*/
                                            /*
                                               94:246 method_definition=>τget property_name ( ) { • function_body }
                                               94:252 method_definition=>τget property_name ( ) { • }
                                            */
                                            /*peek_level:1 offset:9 -- clause*/
                                            /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                            let pk = l.copy();
                                            sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                            if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                /*peek*/
                                                /*
                                                   94:246 method_definition=>τget property_name ( ) { • function_body }
                                                   94:252 method_definition=>τget property_name ( ) { • }
                                                */
                                                let mk = mark();
                                                let anchor = l.copy();
                                                let anchor_state = state;
                                                /*246,7,5,252,6,5*/
                                                /*154*/
                                                /*peek_level:-1 offset:9*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--154--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 128);
                                                        return $property_definition_goto(l, state, 154);
                                                    }
                                                }
                                                /*246,7,5,252,6,5*/
                                                state = reset(mk, anchor, l, anchor_state);
                                                /*peek_level:-1 offset:9 -- clause*/
                                                /*}*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*consume*/
                                                    /*
                                                       94:252 method_definition=>τget property_name ( ) { } •
                                                    */
                                                    /*--unique-id--154--DO-NOT-REPLACE*/
                                                    /*peek_level:-1 offset:9*/
                                                    add_reduce(state, 6, 134);
                                                    return $property_definition_goto(l, state, 154);
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:246 method_definition=>τget property_name ( ) { • function_body }
                                                */
                                                /*peek_level:1 offset:9*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--154--DO-NOT-REPLACE*/
                                                        add_reduce(state, 7, 128);
                                                        return $property_definition_goto(l, state, 154);
                                                    }
                                                }
                                            }
                                        } else {
                                            /*peek-production-closure*/
                                            /*
                                               94:246 method_definition=>τget property_name ( ) { • function_body }
                                            */
                                            /*peek_level:0 offset:9*/
                                            if (state = $function_statement_list(l, state)) {
                                                add_reduce(state, 1, 105);
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                    /*--unique-id--154--DO-NOT-REPLACE*/
                                                    add_reduce(state, 7, 128);
                                                    return $property_definition_goto(l, state, 154);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            /*assert-end*/
                            /*
                               191:539 unreserved_word=>τget •
                            */
                            /*--unique-id--191--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:6*/
                            return $property_definition_goto(l, state, 191);
                        }
                    }
                } else if (defined_token_5bca542dce980d9c(l)/*[set]*/) {
                    /*peek*/
                    /*
                       191:540 unreserved_word=>• τset
                       94:247 method_definition=>• τset property_name ( property_set_parameter_list ) { function_body }
                       94:253 method_definition=>• τset property_name ( property_set_parameter_list ) { }
                    */
                    /*peek_level:-1 offset:4 -- clause*/
                    /*set*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, defined_token_5bca542dce980d9c(l)/*[set]*/)) {
                        /*consume*/
                        /*
                           191:540 unreserved_word=>τset •
                           94:247 method_definition=>τset • property_name ( property_set_parameter_list ) { function_body }
                           94:253 method_definition=>τset • property_name ( property_set_parameter_list ) { }
                        */
                        /*peek_level:-1 offset:5 -- clause*/
                        /*155 from , as } = ] * ) /= ( : ; ?. %= extends { += [ . `` ` -= <<= >>= >>>= &= ^= |= **= ++ -- ** / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ?? ? { nl END_OF_FILE of END_OF_FILE*/
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        if (state = $property_name(l, state)) {
                            /*assert*/
                            /*
                               94:247 method_definition=>τset • property_name ( property_set_parameter_list ) { function_body }
                               94:253 method_definition=>τset • property_name ( property_set_parameter_list ) { }
                            */
                            /*peek_level:-1 offset:6 -- clause*/
                            /*(*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                /*consume*/
                                /*
                                   94:247 method_definition=>τset property_name ( • property_set_parameter_list ) { function_body }
                                   94:253 method_definition=>τset property_name ( • property_set_parameter_list ) { }
                                */
                                /*peek_level:-1 offset:7 -- clause*/
                                /*95*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (state = $property_set_parameter_list(l, state)) {
                                    /*assert*/
                                    /*
                                       94:247 method_definition=>τset property_name ( • property_set_parameter_list ) { function_body }
                                       94:253 method_definition=>τset property_name ( • property_set_parameter_list ) { }
                                    */
                                    /*peek_level:-1 offset:8 -- clause*/
                                    /*)*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*consume*/
                                        /*
                                           94:247 method_definition=>τset property_name ( property_set_parameter_list ) • { function_body }
                                           94:253 method_definition=>τset property_name ( property_set_parameter_list ) • { }
                                        */
                                        /*peek_level:-1 offset:9 -- clause*/
                                        /*{*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                            /*consume*/
                                            /*
                                               94:247 method_definition=>τset property_name ( property_set_parameter_list ) { • function_body }
                                               94:253 method_definition=>τset property_name ( property_set_parameter_list ) { • }
                                            */
                                            /*peek_level:0 offset:10 -- clause*/
                                            /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (l.utf == 125/*[}]*/) {
                                                /*peek*/
                                                /*
                                                   94:247 method_definition=>τset property_name ( property_set_parameter_list ) { • function_body }
                                                   94:253 method_definition=>τset property_name ( property_set_parameter_list ) { • }
                                                */
                                                /*peek_level:1 offset:10 -- clause*/
                                                /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                let pk = l.copy();
                                                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:247 method_definition=>τset property_name ( property_set_parameter_list ) { • function_body }
                                                       94:253 method_definition=>τset property_name ( property_set_parameter_list ) { • }
                                                    */
                                                    let mk = mark();
                                                    let anchor = l.copy();
                                                    let anchor_state = state;
                                                    /*247,8,6,253,7,6*/
                                                    /*154*/
                                                    /*peek_level:-1 offset:10*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--154--DO-NOT-REPLACE*/
                                                            add_reduce(state, 8, 129);
                                                            return $property_definition_goto(l, state, 154);
                                                        }
                                                    }
                                                    /*247,8,6,253,7,6*/
                                                    state = reset(mk, anchor, l, anchor_state);
                                                    /*peek_level:-1 offset:10 -- clause*/
                                                    /*}*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*consume*/
                                                        /*
                                                           94:253 method_definition=>τset property_name ( property_set_parameter_list ) { } •
                                                        */
                                                        /*--unique-id--154--DO-NOT-REPLACE*/
                                                        /*peek_level:-1 offset:10*/
                                                        add_reduce(state, 7, 135);
                                                        return $property_definition_goto(l, state, 154);
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:247 method_definition=>τset property_name ( property_set_parameter_list ) { • function_body }
                                                    */
                                                    /*peek_level:1 offset:10*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--154--DO-NOT-REPLACE*/
                                                            add_reduce(state, 8, 129);
                                                            return $property_definition_goto(l, state, 154);
                                                        }
                                                    }
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:247 method_definition=>τset property_name ( property_set_parameter_list ) { • function_body }
                                                */
                                                /*peek_level:0 offset:10*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--154--DO-NOT-REPLACE*/
                                                        add_reduce(state, 8, 129);
                                                        return $property_definition_goto(l, state, 154);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            /*assert-end*/
                            /*
                               191:540 unreserved_word=>τset •
                            */
                            /*--unique-id--191--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:6*/
                            return $property_definition_goto(l, state, 191);
                        }
                    }
                } else if (assert_consume(l, state, (defined_token_1cb42c7dd41b3a7e(l)/*[target]*/ || defined_token_fcc8b8fe09802878(l)/*[as]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/)) {
                    /*consume*/
                    /*
                       191:541 unreserved_word=>τtarget •
                       191:542 unreserved_word=>τas •
                       191:543 unreserved_word=>τfrom •
                    */
                    /*--unique-id--191--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:2*/
                    return $property_definition_goto(l, state, 191);
                }
            }
            debug_stack.push({ name: "property_definition RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $property_definition_goto(l, state, prod) {
            debug_stack.push({ name: "property_definition GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                switch (prod) {
                    case 155:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:0 offset:0 -- clause*/
                        /*( :*/
                        if (l.utf == 40/*[(]*/) {
                            /*peek*/
                            /*
                               94:254 method_definition=>property_name • ( unique_formal_parameters ) { function_body }
                               94:260 method_definition=>property_name • ( ) { function_body }
                               94:261 method_definition=>property_name • ( unique_formal_parameters ) { }
                               94:264 method_definition=>property_name • ( ) { }
                            */
                            /*peek_level:1 offset:1 -- clause*/
                            /*) ... { [ async get set target as from _ $ id*/
                            let pk = l.copy();
                            sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                            if (pk.utf == 41/*[)]*/) {
                                /*peek*/
                                /*
                                   94:260 method_definition=>property_name • ( ) { function_body }
                                   94:264 method_definition=>property_name • ( ) { }
                                */
                                /*peek_level:-1 offset:3 -- clause*/
                                /*(*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                    /*consume*/
                                    /*
                                       94:260 method_definition=>property_name ( • ) { function_body }
                                       94:264 method_definition=>property_name ( • ) { }
                                    */
                                    /*peek_level:-1 offset:4 -- clause*/
                                    /*)*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                        /*consume*/
                                        /*
                                           94:260 method_definition=>property_name ( ) • { function_body }
                                           94:264 method_definition=>property_name ( ) • { }
                                        */
                                        /*peek_level:-1 offset:5 -- clause*/
                                        /*{*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                            /*consume*/
                                            /*
                                               94:260 method_definition=>property_name ( ) { • function_body }
                                               94:264 method_definition=>property_name ( ) { • }
                                            */
                                            /*peek_level:0 offset:6 -- clause*/
                                            /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (l.utf == 125/*[}]*/) {
                                                /*peek*/
                                                /*
                                                   94:260 method_definition=>property_name ( ) { • function_body }
                                                   94:264 method_definition=>property_name ( ) { • }
                                                */
                                                /*peek_level:1 offset:6 -- clause*/
                                                /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                let pk = l.copy();
                                                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:260 method_definition=>property_name ( ) { • function_body }
                                                       94:264 method_definition=>property_name ( ) { • }
                                                    */
                                                    let mk = mark();
                                                    let anchor = l.copy();
                                                    let anchor_state = state;
                                                    /*260,6,4,264,5,4*/
                                                    /*154*/
                                                    /*peek_level:-1 offset:6*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--154--DO-NOT-REPLACE*/
                                                            add_reduce(state, 6, 142);
                                                            prod = 154;
                                                            continue;
                                                        }
                                                    }
                                                    /*260,6,4,264,5,4*/
                                                    state = reset(mk, anchor, l, anchor_state);
                                                    /*peek_level:-1 offset:6 -- clause*/
                                                    /*}*/
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*consume*/
                                                        /*
                                                           94:264 method_definition=>property_name ( ) { } •
                                                        */
                                                        /*--unique-id--154--DO-NOT-REPLACE*/
                                                        /*peek_level:-1 offset:6*/
                                                        add_reduce(state, 5, 146);
                                                        prod = 154;
                                                        continue;
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:260 method_definition=>property_name ( ) { • function_body }
                                                    */
                                                    /*peek_level:1 offset:6*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--154--DO-NOT-REPLACE*/
                                                            add_reduce(state, 6, 142);
                                                            prod = 154;
                                                            continue;
                                                        }
                                                    }
                                                }
                                            } else {
                                                /*peek-production-closure*/
                                                /*
                                                   94:260 method_definition=>property_name ( ) { • function_body }
                                                */
                                                /*peek_level:0 offset:6*/
                                                if (state = $function_statement_list(l, state)) {
                                                    add_reduce(state, 1, 105);
                                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                        /*--unique-id--154--DO-NOT-REPLACE*/
                                                        add_reduce(state, 6, 142);
                                                        prod = 154;
                                                        continue;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if ((defined_token_f47f6de2d28c24e5(pk)/*[...]*/ || assert_table(pk, 0x0, 0x10, 0x88000000, 0x8000000)/*tbl:[ { ] [ [ ] [ _ ] [ $ ]*/) || pk.isID()/*[id]*/) {
                                /*peek*/
                                /*
                                   94:254 method_definition=>property_name • ( unique_formal_parameters ) { function_body }
                                   94:261 method_definition=>property_name • ( unique_formal_parameters ) { }
                                */
                                /*peek_level:-1 offset:3 -- clause*/
                                /*(*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 40/*[(]*/)) {
                                    /*consume*/
                                    /*
                                       94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                                       94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                                    */
                                    /*peek_level:-1 offset:4 -- clause*/
                                    /*75*/
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $unique_formal_parameters(l, state)) {
                                        /*assert*/
                                        /*
                                           94:254 method_definition=>property_name ( • unique_formal_parameters ) { function_body }
                                           94:261 method_definition=>property_name ( • unique_formal_parameters ) { }
                                        */
                                        /*peek_level:-1 offset:5 -- clause*/
                                        /*)*/
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 41/*[)]*/)) {
                                            /*consume*/
                                            /*
                                               94:254 method_definition=>property_name ( unique_formal_parameters ) • { function_body }
                                               94:261 method_definition=>property_name ( unique_formal_parameters ) • { }
                                            */
                                            /*peek_level:-1 offset:6 -- clause*/
                                            /*{*/
                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                            if (assert_consume(l, state, l.utf == 123/*[{]*/)) {
                                                /*consume*/
                                                /*
                                                   94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                   94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                                */
                                                /*peek_level:0 offset:7 -- clause*/
                                                /*} { yield async new ( super import this [ / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ -- var ; if do while for switch continue break return with throw try debugger class function let const*/
                                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                if (l.utf == 125/*[}]*/) {
                                                    /*peek*/
                                                    /*
                                                       94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                       94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                                    */
                                                    /*peek_level:1 offset:7 -- clause*/
                                                    /*; { nl END_OF_FILE , } import export yield async new super this [ get set target as from true false null " ' num _ $ id delete void typeof await var if do while for switch continue break return with throw try debugger class function const case default else * in instanceof catch extends finally implements package protected interface private public static ] : ) { ( / `` ` + ~ ! - ++ -- let . ?. = /= %= += -= <<= >>= >>>= &= ^= |= **= of ** % >>> >> << < > <= >= !== === != == & ^ | && || ? ??*/
                                                    let pk = l.copy();
                                                    sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                                                    if (((non_capture_5730bfe813b6b040(pk)/*[{] [nl] [END_OF_FILE]*/ || assert_table(pk, 0x0, 0x8001494, 0x88000000, 0x20000000)/*tbl:[ ; ] [ , ] [ } ] [ [ ] [ " ] [ ' ] [ _ ] [ $ ] [ * ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                                                        /*peek*/
                                                        /*
                                                           94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                           94:261 method_definition=>property_name ( unique_formal_parameters ) { • }
                                                        */
                                                        let mk = mark();
                                                        let anchor = l.copy();
                                                        let anchor_state = state;
                                                        /*254,7,5,261,6,5*/
                                                        /*154*/
                                                        /*peek_level:-1 offset:7*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--154--DO-NOT-REPLACE*/
                                                                add_reduce(state, 7, 136);
                                                                prod = 154;
                                                                continue;
                                                            }
                                                        }
                                                        /*254,7,5,261,6,5*/
                                                        state = reset(mk, anchor, l, anchor_state);
                                                        /*peek_level:-1 offset:7 -- clause*/
                                                        /*}*/
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*consume*/
                                                            /*
                                                               94:261 method_definition=>property_name ( unique_formal_parameters ) { } •
                                                            */
                                                            /*--unique-id--154--DO-NOT-REPLACE*/
                                                            /*peek_level:-1 offset:7*/
                                                            add_reduce(state, 6, 143);
                                                            prod = 154;
                                                            continue;
                                                        }
                                                    } else {
                                                        /*peek-production-closure*/
                                                        /*
                                                           94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                        */
                                                        /*peek_level:1 offset:7*/
                                                        if (state = $function_statement_list(l, state)) {
                                                            add_reduce(state, 1, 105);
                                                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                                /*--unique-id--154--DO-NOT-REPLACE*/
                                                                add_reduce(state, 7, 136);
                                                                prod = 154;
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    /*peek-production-closure*/
                                                    /*
                                                       94:254 method_definition=>property_name ( unique_formal_parameters ) { • function_body }
                                                    */
                                                    /*peek_level:0 offset:7*/
                                                    if (state = $function_statement_list(l, state)) {
                                                        add_reduce(state, 1, 105);
                                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                                        if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                                                            /*--unique-id--154--DO-NOT-REPLACE*/
                                                            add_reduce(state, 7, 136);
                                                            prod = 154;
                                                            continue;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else if (assert_consume(l, state, l.utf == 58/*[:]*/)) {
                            /*consume*/
                            /*
                               154:455 property_definition=>property_name : • assignment_expression
                            */
                            /*peek_level:-1 offset:1*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                /*--unique-id--154--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 206);
                                prod = 154;
                                continue;
                            }
                        }
                        break;
                    case 187:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= , } END_OF_FILE*/
                        if (l.utf == 61/*[=]*/) {
                            /*assert-production-closure*/
                            /*
                               158:462 cover_initialized_name=>identifier_reference • initializer
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $initializer(l, state)) {
                                /*--unique-id--154--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 81);
                                prod = 154;
                                continue;
                            }
                        } else {
                            /*assert-end*/
                            /*
                               154:452 property_definition=>identifier_reference •
                            */
                            /*--unique-id--154--DO-NOT-REPLACE*/
                            /*peek_level:0 offset:2*/
                            add_reduce(state, 1, 214);
                            prod = 154;
                            continue;
                        }
                        break;
                    case 191:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= : (*/
                        if (l.utf == 61/*[=]*/) {
                            /*assert-end*/
                            /*
                               189:534 identifier=>unreserved_word •
                            */
                            /*--unique-id--187--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 245);
                            add_reduce(state, 1, 244);
                            prod = 187;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               190:537 identifier_name=>unreserved_word •
                            */
                            /*--unique-id--155--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 246);
                            add_reduce(state, 1, 214);
                            prod = 155;
                            continue;
                        }
                        break;
                    case 194:
                        sk_a0c13bfa5d5bd422(l/*[ ws ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*= ( :*/
                        if (l.utf == 61/*[=]*/) {
                            /*assert-end*/
                            /*
                               189:533 identifier=>composite_identifier •
                            */
                            /*--unique-id--187--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 245);
                            add_reduce(state, 1, 244);
                            prod = 187;
                            continue;
                        } else {
                            /*assert-end*/
                            /*
                               190:535 identifier_name=>composite_identifier •
                            */
                            /*--unique-id--155--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:1*/
                            add_reduce(state, 1, 246);
                            add_reduce(state, 1, 214);
                            prod = 155;
                            continue;
                        }
                        break;
                }
                break;
            }
            debug_stack.push({ name: "property_definition GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 154);
        }
/*production name: property_name
            grammar index: 155
            bodies:
	155:456 property_name=>• literal_property_name - 
		155:457 property_name=>• computed_property_name - 
            compile time: 8.989ms*/;
        function $property_name(l, state) {
            debug_stack.push({ name: "property_name RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*[ _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false async get set target as from " ' num*/
            if (l.utf == 91/*[[]*/) {
                /*peek-production-closure*/
                /*
                   155:457 property_name=>• computed_property_name
                */
                /*peek_level:0 offset:0*/
                if (state = $computed_property_name(l, state)) {
                    /*--unique-id--155--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 214);
                    debug_stack.push({ name: "property_name RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   155:456 property_name=>• literal_property_name
                */
                /*peek_level:0 offset:0*/
                if (state = $literal_property_name(l, state)) {
                    /*--unique-id--155--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 214);
                    debug_stack.push({ name: "property_name RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "property_name RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: literal_property_name
            grammar index: 156
            bodies:
	156:458 literal_property_name=>• identifier_name - 
		156:459 literal_property_name=>• string_literal - 
		156:460 literal_property_name=>• numeric_literal - 
            compile time: 10.33ms*/;
        function $literal_property_name(l, state) {
            debug_stack.push({ name: "literal_property_name RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*" ' num _ $ id await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false async get set target as from*/
            if ((l.utf == 34/*["]*/) || (l.utf == 39/*[']*/)) {
                /*peek-production-closure*/
                /*
                   156:459 literal_property_name=>• string_literal
                */
                /*peek_level:0 offset:0*/
                if (state = $string_literal(l, state)) {
                    /*--unique-id--156--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "literal_property_name RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (l.isNum()/*[num]*/) {
                /*peek-production-closure*/
                /*
                   156:460 literal_property_name=>• numeric_literal
                */
                /*peek_level:0 offset:0*/
                if (state = $numeric_literal(l, state)) {
                    /*--unique-id--156--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "literal_property_name RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   156:458 literal_property_name=>• identifier_name
                */
                /*peek_level:0 offset:0*/
                if (state = $identifier_name(l, state)) {
                    /*--unique-id--156--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "literal_property_name RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "literal_property_name RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: computed_property_name
            grammar index: 157
            bodies:
	157:461 computed_property_name=>• [ assignment_expression ] - 
            compile time: 3.806ms*/;
        function $computed_property_name(l, state) {
            debug_stack.push({ name: "computed_property_name RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*[*/
            if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                /*consume*/
                /*
                   157:461 computed_property_name=>[ • assignment_expression ]
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $assignment_expression(l, state)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                        /*--unique-id--157--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 215);
                        debug_stack.push({ name: "computed_property_name RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "computed_property_name RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: initializer
            grammar index: 159
            bodies:
	159:463 initializer=>• = assignment_expression - 
            compile time: 3.958ms*/;
        function $initializer(l, state) {
            debug_stack.push({ name: "initializer RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*=*/
            if (assert_consume(l, state, l.utf == 61/*[=]*/)) {
                /*consume*/
                /*
                   159:463 initializer=>= • assignment_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $assignment_expression(l, state)) {
                    /*--unique-id--159--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 216);
                    debug_stack.push({ name: "initializer RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "initializer RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: array_literal
            grammar index: 160
            bodies:
	160:464 array_literal=>• [ elision ] - 
		160:465 array_literal=>• [ element_list ] - 
		160:466 array_literal=>• [ element_list , elision ] - 
		160:467 array_literal=>• [ ] - 
		160:468 array_literal=>• [ element_list , ] - 
            compile time: 447.383ms*/;
        function $array_literal(l, state) {
            debug_stack.push({ name: "array_literal RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*[*/
            if (assert_consume(l, state, l.utf == 91/*[[]*/)) {
                /*consume*/
                /*
                   160:464 array_literal=>[ • elision ]
                   160:465 array_literal=>[ • element_list ]
                   160:466 array_literal=>[ • element_list , elision ]
                   160:467 array_literal=>[ • ]
                   160:468 array_literal=>[ • element_list , ]
                */
                /*peek_level:0 offset:1 -- clause*/
                /*, ] yield async new ... ( super import this function class [ { / get set target as from true false null " ' num `` _ $ id ` delete void typeof + ~ ! - await ++ --*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (l.utf == 44/*[,]*/) {
                    /*peek*/
                    /*
                       160:464 array_literal=>[ • elision ]
                       160:465 array_literal=>[ • element_list ]
                       160:466 array_literal=>[ • element_list , elision ]
                       160:468 array_literal=>[ • element_list , ]
                    */
                    let mk = mark();
                    let anchor = l.copy();
                    let anchor_state = state;
                    /*464,3,1,465,3,1,466,5,1,468,4,1*/
                    /*160*/
                    /*peek_level:-1 offset:1*/
                    if (state = $elision(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*--unique-id--160--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 217);
                            debug_stack.push({ name: "array_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                    /*464,3,1,465,3,1,466,5,1,468,4,1*/
                    state = reset(mk, anchor, l, anchor_state);
                    /*peek_level:-1 offset:1*/
                    if (state = $element_list(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*--unique-id--160--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 218);
                            debug_stack.push({ name: "array_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                    /*464,3,1,465,3,1,466,5,1,468,4,1*/
                    state = reset(mk, anchor, l, anchor_state);
                    /*peek_level:-1 offset:1 -- clause*/
                    /*161*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $element_list(l, state)) {
                        /*assert*/
                        /*
                           160:466 array_literal=>[ • element_list , elision ]
                           160:468 array_literal=>[ • element_list , ]
                        */
                        /*peek_level:-1 offset:2 -- clause*/
                        /*,*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            /*consume*/
                            /*
                               160:466 array_literal=>[ element_list , • elision ]
                               160:468 array_literal=>[ element_list , • ]
                            */
                            /*peek_level:0 offset:3 -- clause*/
                            /*, ]*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (l.utf == 44/*[,]*/) {
                                /*peek-production-closure*/
                                /*
                                   160:466 array_literal=>[ element_list , • elision ]
                                */
                                /*peek_level:0 offset:3*/
                                if (state = $elision(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                        /*--unique-id--160--DO-NOT-REPLACE*/
                                        add_reduce(state, 5, 219);
                                        debug_stack.push({ name: "array_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            } else if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                /*consume*/
                                /*
                                   160:468 array_literal=>[ element_list , ] •
                                */
                                /*--unique-id--160--DO-NOT-REPLACE*/
                                /*peek_level:-1 offset:3*/
                                add_reduce(state, 4, 221);
                                debug_stack.push({ name: "array_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                } else if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                    /*consume*/
                    /*
                       160:467 array_literal=>[ ] •
                    */
                    /*--unique-id--160--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 220);
                    debug_stack.push({ name: "array_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else {
                    /*peek-production-closure*/
                    /*
                       160:465 array_literal=>[ • element_list ]
                       160:466 array_literal=>[ • element_list , elision ]
                       160:468 array_literal=>[ • element_list , ]
                    */
                    /*peek_level:-1 offset:3 -- clause*/
                    /*161*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $element_list(l, state)) {
                        /*assert*/
                        /*
                           160:465 array_literal=>[ • element_list ]
                           160:466 array_literal=>[ • element_list , elision ]
                           160:468 array_literal=>[ • element_list , ]
                        */
                        /*peek_level:-1 offset:4 -- clause*/
                        /*] ,*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                            /*consume*/
                            /*
                               160:465 array_literal=>[ element_list ] •
                            */
                            /*--unique-id--160--DO-NOT-REPLACE*/
                            /*peek_level:-1 offset:4*/
                            add_reduce(state, 3, 218);
                            debug_stack.push({ name: "array_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        } else if (l.utf == 44/*[,]*/) {
                            /*peek*/
                            /*
                               160:466 array_literal=>[ element_list • , elision ]
                               160:468 array_literal=>[ element_list • , ]
                            */
                            /*peek_level:1 offset:4 -- clause*/
                            /*, ]*/
                            let pk = l.copy();
                            sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                            if (pk.utf == 44/*[,]*/) {
                                /*peek*/
                                /*
                                   160:466 array_literal=>[ element_list • , elision ]
                                */
                                /*peek_level:1 offset:4*/
                                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $elision(l, state)) {
                                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                        if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                            /*--unique-id--160--DO-NOT-REPLACE*/
                                            add_reduce(state, 5, 219);
                                            debug_stack.push({ name: "array_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                            return state;
                                        }
                                    }
                                }
                            } else if (pk.utf == 93/*[]]*/) {
                                /*peek*/
                                /*
                                   160:468 array_literal=>[ element_list • , ]
                                */
                                /*peek_level:1 offset:4*/
                                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (assert_consume(l, state, l.utf == 93/*[]]*/)) {
                                        /*--unique-id--160--DO-NOT-REPLACE*/
                                        add_reduce(state, 4, 221);
                                        debug_stack.push({ name: "array_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                        return state;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "array_literal RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: element_list
            grammar index: 161
            bodies:
	161:469 element_list=>• elision assignment_expression - 
		161:470 element_list=>• elision spread_element - 
		161:471 element_list=>• element_list , elision assignment_expression - 
		161:472 element_list=>• element_list , elision spread_element - 
		161:473 element_list=>• assignment_expression - 
		161:474 element_list=>• spread_element - 
		161:475 element_list=>• element_list , assignment_expression - 
		161:476 element_list=>• element_list , spread_element - 
            compile time: 529.938ms*/;
        function $element_list(l, state) {
            debug_stack.push({ name: "element_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*, ... ++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import*/
            if (l.utf == 44/*[,]*/) {
                /*peek-production-closure*/
                /*
                   161:469 element_list=>• elision assignment_expression
                   161:470 element_list=>• elision spread_element
                */
                /*peek_level:-1 offset:2 -- clause*/
                /*162*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $elision(l, state)) {
                    /*assert*/
                    /*
                       161:469 element_list=>• elision assignment_expression
                       161:470 element_list=>• elision spread_element
                    */
                    /*peek_level:0 offset:3 -- clause*/
                    /*... ++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                        /*peek-production-closure*/
                        /*
                           161:470 element_list=>elision • spread_element
                        */
                        /*peek_level:0 offset:3*/
                        if (state = $spread_element(l, state)) {
                            /*--unique-id--161--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 205);
                            return $element_list_goto(l, state, 161);
                        }
                    } else {
                        /*peek-production-closure*/
                        /*
                           161:469 element_list=>elision • assignment_expression
                        */
                        /*peek_level:0 offset:3*/
                        if (state = $assignment_expression(l, state)) {
                            /*--unique-id--161--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 205);
                            return $element_list_goto(l, state, 161);
                        }
                    }
                }
            } else if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                /*peek-production-closure*/
                /*
                   161:474 element_list=>• spread_element
                */
                /*peek_level:0 offset:0*/
                if (state = $spread_element(l, state)) {
                    /*--unique-id--161--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 4);
                    return $element_list_goto(l, state, 161);
                }
            } else {
                /*peek-production-closure*/
                /*
                   161:473 element_list=>• assignment_expression
                */
                /*peek_level:0 offset:0*/
                if (state = $assignment_expression(l, state)) {
                    /*--unique-id--161--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 4);
                    return $element_list_goto(l, state, 161);
                }
            }
            debug_stack.push({ name: "element_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $element_list_goto(l, state, prod) {
            debug_stack.push({ name: "element_list GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*,*/
                if (l.utf == 44/*[,]*/) {
                    /*peek*/
                    /*
                       161:471 element_list=>element_list • , elision assignment_expression
                       161:472 element_list=>element_list • , elision spread_element
                       161:475 element_list=>element_list • , assignment_expression
                       161:476 element_list=>element_list • , spread_element
                       160:466 array_literal=>[ element_list • , elision ]
                       160:468 array_literal=>[ element_list • , ]
                    */
                    /*peek_level:1 offset:1 -- clause*/
                    /*, ... ++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import*/
                    let pk = l.copy();
                    sk_2c33967dd3fbc823(pk.next()/*[ ws ][ nl ][ 6 ]*/);
                    if (pk.utf == 44/*[,]*/) {
                        /*peek*/
                        /*
                           161:471 element_list=>element_list • , elision assignment_expression
                           161:472 element_list=>element_list • , elision spread_element
                           160:466 array_literal=>[ element_list • , elision ]
                        */
                        /*peek_level:-1 offset:3 -- clause*/
                        /*,*/
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            /*consume*/
                            /*
                               161:471 element_list=>element_list , • elision assignment_expression
                               161:472 element_list=>element_list , • elision spread_element
                               160:466 array_literal=>[ element_list , • elision ]
                            */
                            /*peek_level:-1 offset:4 -- clause*/
                            /*162*/
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $elision(l, state)) {
                                /*assert*/
                                /*
                                   161:471 element_list=>element_list , • elision assignment_expression
                                   161:472 element_list=>element_list , • elision spread_element
                                   160:466 array_literal=>[ element_list , • elision ]
                                */
                                /*peek_level:0 offset:5 -- clause*/
                                /*... ++ -- delete void typeof + ~ ! - await new yield async _ $ id get set target as from ( this true false null " ' num [ { function class / `` ` super import*/
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (defined_token_f47f6de2d28c24e5(l)/*[...]*/) {
                                    /*peek-production-closure*/
                                    /*
                                       161:472 element_list=>element_list , elision • spread_element
                                    */
                                    /*peek_level:0 offset:5*/
                                    if (state = $spread_element(l, state)) {
                                        /*--unique-id--161--DO-NOT-REPLACE*/
                                        add_reduce(state, 4, 222);
                                        prod = 161;
                                        continue;
                                    }
                                } else {
                                    /*peek-production-closure*/
                                    /*
                                       161:471 element_list=>element_list , elision • assignment_expression
                                    */
                                    /*peek_level:0 offset:5*/
                                    if (state = $assignment_expression(l, state)) {
                                        /*--unique-id--161--DO-NOT-REPLACE*/
                                        add_reduce(state, 4, 222);
                                        prod = 161;
                                        continue;
                                    }
                                }
                            }
                        }
                    } else if (defined_token_f47f6de2d28c24e5(pk)/*[...]*/) {
                        /*peek*/
                        /*
                           161:476 element_list=>element_list • , spread_element
                        */
                        /*peek_level:1 offset:1*/
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $spread_element(l, state)) {
                                /*--unique-id--161--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 203);
                                prod = 161;
                                continue;
                            }
                        }
                    } else if (((((defined_token_6d4f77707d3e0e5a(pk)/*[++]*/ || defined_token_f2ef34011f64cef0(pk)/*[--]*/) || defined_token_19cd74c69f5512e8(pk)/*[``]*/) || assert_table(pk, 0x0, 0xa996, 0x88000000, 0x48000001)/*tbl:[ + ] [ ~ ] [ ! ] [ - ] [ _ ] [ $ ] [ ( ] [ " ] [ ' ] [ [ ] [ { ] [ / ] [ ` ]*/) || pk.isID()/*[id]*/) || pk.isNum()/*[num]*/) {
                        /*peek*/
                        /*
                           161:475 element_list=>element_list • , assignment_expression
                        */
                        /*peek_level:1 offset:1*/
                        if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $assignment_expression(l, state)) {
                                /*--unique-id--161--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 203);
                                prod = 161;
                                continue;
                            }
                        }
                    }
                }
                break;
            }
            debug_stack.push({ name: "element_list GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 161);
        }
/*production name: elision
            grammar index: 162
            bodies:
	162:477 elision=>• , - 
		162:478 elision=>• elision , - 
            compile time: 722.765ms*/;
        function $elision(l, state) {
            debug_stack.push({ name: "elision RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*,*/
            if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                /*consume*/
                /*
                   162:477 elision=>, •
                */
                /*--unique-id--162--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                add_reduce(state, 1, 223);
                return $elision_goto(l, state, 162);
            }
            debug_stack.push({ name: "elision RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $elision_goto(l, state, prod) {
            debug_stack.push({ name: "elision GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:-1 offset:0 -- clause*/
                /*,*/
                if (assert_consume(l, state, l.utf == 44/*[,]*/)) {
                    /*consume*/
                    /*
                       162:478 elision=>elision , •
                    */
                    /*--unique-id--162--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 224);
                    prod = 162;
                    continue;
                }
                break;
            }
            debug_stack.push({ name: "elision GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 162);
        }
/*production name: spread_element
            grammar index: 163
            bodies:
	163:479 spread_element=>• ... assignment_expression - 
            compile time: 3.776ms*/;
        function $spread_element(l, state) {
            debug_stack.push({ name: "spread_element RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*...*/
            if (assert_consume(l, state, defined_token_f47f6de2d28c24e5(l)/*[...]*/)) {
                /*consume*/
                /*
                   163:479 spread_element=>... • assignment_expression
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $assignment_expression(l, state)) {
                    /*--unique-id--163--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 163);
                    debug_stack.push({ name: "spread_element RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "spread_element RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: template_literal
            grammar index: 164
            bodies:
	164:480 template_literal=>• no_substitute_template - 
		164:481 template_literal=>• substitute_template - 
            compile time: 2.49ms*/;
        function $template_literal(l, state) {
            debug_stack.push({ name: "template_literal RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*` ``*/
            if (l.utf == 96/*[`]*/) {
                /*peek-production-closure*/
                /*
                   164:481 template_literal=>• substitute_template
                */
                /*peek_level:0 offset:0*/
                if (state = $substitute_template(l, state)) {
                    /*--unique-id--164--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "template_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   164:480 template_literal=>• no_substitute_template
                */
                /*peek_level:0 offset:0*/
                if (state = $no_substitute_template(l, state)) {
                    /*--unique-id--164--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "template_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "template_literal RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: no_substitute_template
            grammar index: 165
            bodies:
	165:482 no_substitute_template=>• `` - 
            compile time: 1.726ms*/;
        function $no_substitute_template(l, state) {
            debug_stack.push({ name: "no_substitute_template RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*``*/
            if (assert_consume(l, state, defined_token_1517f515b75e1bb7(l)/*[``]*/)) {
                /*consume*/
                /*
                   165:482 no_substitute_template=>`` •
                */
                /*--unique-id--165--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                add_reduce(state, 1, 225);
                debug_stack.push({ name: "no_substitute_template RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "no_substitute_template RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: substitute_template
            grammar index: 166
            bodies:
	166:483 substitute_template=>• template_head expression template_spans - 
            compile time: 3.071ms*/;
        function $substitute_template(l, state) {
            debug_stack.push({ name: "substitute_template RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $template_head(l, state)) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $expression(l, state)) {
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (state = $template_spans(l, state)) {
                        /*--unique-id--166--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 226);
                        debug_stack.push({ name: "substitute_template RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "substitute_template RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: template_spans
            grammar index: 167
            bodies:
	167:484 template_spans=>• template_tail - 
		167:485 template_spans=>• template_middle_list template_tail - 
            compile time: 988.646ms*/;
        function $template_spans(l, state) {
            debug_stack.push({ name: "template_spans RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*}*/
            if (l.utf == 125/*[}]*/) {
                /*peek*/
                /*
                   167:484 template_spans=>• template_tail
                   167:485 template_spans=>• template_middle_list template_tail
                */
                /*peek_level:1 offset:0 -- clause*/
                /*` ${ nl ws sym num id \*/
                let pk = l.copy();
                sk_d065c58d10ee093b(pk.next()/*[ 6 ]*/);
                if (pk.utf == 96/*[`]*/) {
                    /*peek-production-closure*/
                    /*
                       167:484 template_spans=>• template_tail
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $template_tail(l, state)) {
                        /*--unique-id--167--DO-NOT-REPLACE*/
                        add_reduce(state, 1, 4);
                        return $template_spans_goto(l, state, 167);
                    }
                } else if (defined_token_75d68ac65a42afc4(pk)/*[${]*/) {
                    /*peek-production-closure*/
                    /*
                       167:485 template_spans=>• template_middle_list template_tail
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $template_middle_list(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (state = $template_tail(l, state)) {
                            /*--unique-id--167--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 227);
                            return $template_spans_goto(l, state, 167);
                        }
                    }
                } else if ((((pk.isID()/*[id]*/ || pk.isNL()/*[nl]*/) || pk.isNum()/*[num]*/) || pk.isSym()/*[sym]*/) || pk.isSP()/*[ws]*/) {
                    /*peek*/
                    /*
                       167:484 template_spans=>• template_tail
                       167:485 template_spans=>• template_middle_list template_tail
                    */
                    /*peek_level:-1 offset:2 -- clause*/
                    /*}*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                        /*consume*/
                        /*
                           174:498 template_tail=>} • template_tail_HC_listbody1_123 `
                           172:494 template_middle=>} • template_middle_HC_listbody1_122 ${
                        */
                        /*peek_level:0 offset:3 -- clause*/
                        /*nl ws sym num id \*/
                        sk_d065c58d10ee093b(l/*[ 6 ]*/);
                        if ((((l.isID()/*[id]*/ || l.isNL()/*[nl]*/) || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/) {
                            /*peek*/
                            /*
                               174:498 template_tail=>} • template_tail_HC_listbody1_123 `
                               172:494 template_middle=>} • template_middle_HC_listbody1_122 ${
                            */
                            let mk = mark();
                            let anchor = l.copy();
                            let anchor_state = state;
                            /*498,3,1,494,3,1*/
                            /*167*/
                            /*peek_level:-1 offset:3*/
                            if (state = $template_tail_HC_listbody1_123(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, l.utf == 96/*[`]*/)) {
                                    /*--unique-id--167--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 235);
                                    add_reduce(state, 1, 4);
                                    return $template_spans_goto(l, state, 167);
                                }
                            }
                            /*498,3,1,494,3,1*/
                            state = reset(mk, anchor, l, anchor_state);
                            /*peek_level:-1 offset:3*/
                            if (state = $template_middle_HC_listbody1_122(l, state)) {
                                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                if (assert_consume(l, state, defined_token_75d68ac65a42afc4(l)/*[${]*/)) {
                                    /*--unique-id--172--DO-NOT-REPLACE*/
                                    add_reduce(state, 3, 233);
                                    return $template_spans_goto(l, state, 172);
                                }
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "template_spans RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $template_spans_goto(l, state, prod) {
            debug_stack.push({ name: "template_spans GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                switch (prod) {
                    case 168:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:0 offset:0 -- clause*/
                        /*}*/
                        if (l.utf == 125/*[}]*/) {
                            /*peek*/
                            /*
                               167:485 template_spans=>template_middle_list • template_tail
                               168:487 template_middle_list=>template_middle_list • template_middle expression
                            */
                            /*peek_level:1 offset:1 -- clause*/
                            /*` ${ nl ws sym num id \*/
                            let pk = l.copy();
                            sk_d065c58d10ee093b(pk.next()/*[ 6 ]*/);
                            if (pk.utf == 96/*[`]*/) {
                                /*peek-production-closure*/
                                /*
                                   167:485 template_spans=>template_middle_list • template_tail
                                */
                                /*peek_level:1 offset:1*/
                                if (state = $template_tail(l, state)) {
                                    /*--unique-id--167--DO-NOT-REPLACE*/
                                    add_reduce(state, 2, 227);
                                    prod = 167;
                                    continue;
                                }
                            } else if (defined_token_75d68ac65a42afc4(pk)/*[${]*/) {
                                /*peek-production-closure*/
                                /*
                                   168:487 template_middle_list=>template_middle_list • template_middle expression
                                */
                                /*peek_level:1 offset:1*/
                                if (state = $template_middle(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $expression(l, state)) {
                                        /*--unique-id--168--DO-NOT-REPLACE*/
                                        add_reduce(state, 3, 228);
                                        prod = 168;
                                        continue;
                                    }
                                }
                            } else if ((((pk.isID()/*[id]*/ || pk.isNL()/*[nl]*/) || pk.isNum()/*[num]*/) || pk.isSym()/*[sym]*/) || pk.isSP()/*[ws]*/) {
                                /*peek*/
                                /*
                                   167:485 template_spans=>template_middle_list • template_tail
                                   168:487 template_middle_list=>template_middle_list • template_middle expression
                                */
                                let mk = mark();
                                let anchor = l.copy();
                                let anchor_state = state;
                                /*485,2,1,487,3,1*/
                                /*167*/
                                /*peek_level:-1 offset:1*/
                                if (state = $template_tail(l, state)) {
                                    /*--unique-id--167--DO-NOT-REPLACE*/
                                    add_reduce(state, 2, 227);
                                    prod = 167;
                                    continue;
                                }
                                /*485,2,1,487,3,1*/
                                state = reset(mk, anchor, l, anchor_state);
                                /*peek_level:-1 offset:1*/
                                if (state = $template_middle(l, state)) {
                                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                                    if (state = $expression(l, state)) {
                                        /*--unique-id--168--DO-NOT-REPLACE*/
                                        add_reduce(state, 3, 228);
                                        prod = 168;
                                        continue;
                                    }
                                }
                            }
                        }
                        break;
                    case 172:
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        /*peek_level:-1 offset:0 -- clause*/
                        /*yield async new ( super import this function class [ { / get set target as from true false null " ' num `` 228 ` delete void typeof + ~ ! - await ++ --*/
                        if ((((((((((((((((def$js_id_symbols_tok_b3199095c9facd2b(l) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_670f23e41126e00b(l)/*[async] [as] [await]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_d38e0913b811b457(l)/*[super] [set]*/) || defined_token_2ed685dc4925cfa4(l)/*[import]*/) || defined_token_ca53d8e93addfaf5(l)/*[this] [target] [true] [typeof]*/) || defined_token_7b465f3c7dd55e63(l)/*[function] [from] [false]*/) || defined_token_2d05a4070a3ebcf4(l)/*[class]*/) || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_19cd74c69f5512e8(l)/*[``]*/) || defined_token_8ed5fb4bce429503(l)/*[delete]*/) || defined_token_042ea6dc9657ee07(l)/*[void]*/) || defined_token_6d4f77707d3e0e5a(l)/*[++]*/) || defined_token_f2ef34011f64cef0(l)/*[--]*/) || assert_table(l, 0x0, 0xa986, 0x8000000, 0x48000001)/*tbl:[ ( ] [ [ ] [ { ] [ / ] [ " ] [ ' ] [ ` ] [ + ] [ ~ ] [ ! ] [ - ]*/) || l.isNum()/*[num]*/) {
                            /*assert-production-closure*/
                            /*
                               168:486 template_middle_list=>template_middle • expression
                            */
                            /*peek_level:-1 offset:1*/
                            if (state = $expression(l, state)) {
                                /*--unique-id--168--DO-NOT-REPLACE*/
                                add_reduce(state, 2, 205);
                                prod = 168;
                                continue;
                            }
                        }
                        break;
                }
                break;
            }
            debug_stack.push({ name: "template_spans GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 167);
        }
/*production name: template_middle_list
            grammar index: 168
            bodies:
	168:486 template_middle_list=>• template_middle expression - 
		168:487 template_middle_list=>• template_middle_list template_middle expression - 
            compile time: 390.891ms*/;
        function $template_middle_list(l, state) {
            debug_stack.push({ name: "template_middle_list RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $template_middle(l, state)) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (state = $expression(l, state)) {
                    /*--unique-id--168--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 205);
                    return $template_middle_list_goto(l, state, 168);
                }
            }
            debug_stack.push({ name: "template_middle_list RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $template_middle_list_goto(l, state, prod) {
            debug_stack.push({ name: "template_middle_list GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                /*peek_level:0 offset:0 -- clause*/
                /*}*/
                if (l.utf == 125/*[}]*/) {
                    /*peek*/
                    /*
                       168:487 template_middle_list=>template_middle_list • template_middle expression
                       167:485 template_spans=>template_middle_list • template_tail
                    */
                    /*peek_level:1 offset:1 -- clause*/
                    /*${ nl ws sym num id \*/
                    let pk = l.copy();
                    sk_d065c58d10ee093b(pk.next()/*[ 6 ]*/);
                    if (defined_token_75d68ac65a42afc4(pk)/*[${]*/) {
                        /*peek-production-closure*/
                        /*
                           168:487 template_middle_list=>template_middle_list • template_middle expression
                        */
                        /*peek_level:1 offset:1*/
                        if (state = $template_middle(l, state)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                /*--unique-id--168--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 228);
                                prod = 168;
                                continue;
                            }
                        }
                    } else if ((((pk.isID()/*[id]*/ || pk.isNL()/*[nl]*/) || pk.isNum()/*[num]*/) || pk.isSym()/*[sym]*/) || pk.isSP()/*[ws]*/) {
                        /*peek*/
                        /*
                           168:487 template_middle_list=>template_middle_list • template_middle expression
                           167:485 template_spans=>template_middle_list • template_tail
                        */
                        let mk = mark();
                        let anchor = l.copy();
                        let anchor_state = state;
                        /*487,3,1,485,2,1*/
                        /*168*/
                        /*peek_level:-1 offset:1*/
                        if (state = $template_middle(l, state)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (state = $expression(l, state)) {
                                /*--unique-id--168--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 228);
                                prod = 168;
                                continue;
                            }
                        }
                        state = reset(mk, anchor, l, anchor_state);
                    }
                }
                break;
            }
            debug_stack.push({ name: "template_middle_list GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 168);
        }
/*production name: template_head_HC_listbody1_121
            grammar index: 169
            bodies:
	169:488 template_head_HC_listbody1_121=>• template_head_HC_listbody1_121 string_data - 
		169:489 template_head_HC_listbody1_121=>• string_data - 
            compile time: 5.855ms*/;
        function $template_head_HC_listbody1_121(l, state) {
            debug_stack.push({ name: "template_head_HC_listbody1_121 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $string_data(l, state)) {
                /*--unique-id--169--DO-NOT-REPLACE*/
                add_reduce(state, 1, 230);
                return $template_head_HC_listbody1_121_goto(l, state, 169);
            }
            debug_stack.push({ name: "template_head_HC_listbody1_121 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $template_head_HC_listbody1_121_goto(l, state, prod) {
            debug_stack.push({ name: "template_head_HC_listbody1_121 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (defined_token_75d68ac65a42afc4(l)/*[${]*/) {
                    return state;
                }
                /*peek_level:0 offset:0 -- clause*/
                /*nl ws sym num id \*/
                if ((((l.isID()/*[id]*/ || l.isNL()/*[nl]*/) || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/) {
                    /*peek-production-closure*/
                    /*
                       169:488 template_head_HC_listbody1_121=>template_head_HC_listbody1_121 • string_data
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $string_data(l, state)) {
                        /*--unique-id--169--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 229);
                        prod = 169;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "template_head_HC_listbody1_121 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 169);
        }
/*production name: template_head
            grammar index: 170
            bodies:
	170:490 template_head=>• ` template_head_HC_listbody1_121 ${ - 
		170:491 template_head=>• ` ${ - 
            compile time: 6.99ms*/;
        function $template_head(l, state) {
            debug_stack.push({ name: "template_head RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*`*/
            if (assert_consume(l, state, l.utf == 96/*[`]*/)) {
                /*consume*/
                /*
                   170:490 template_head=>` • template_head_HC_listbody1_121 ${
                   170:491 template_head=>` • ${
                */
                /*peek_level:0 offset:1 -- clause*/
                /*${ nl ws sym num id \*/
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (assert_consume(l, state, defined_token_75d68ac65a42afc4(l)/*[${]*/)) {
                    /*consume*/
                    /*
                       170:491 template_head=>` ${ •
                    */
                    /*--unique-id--170--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 232);
                    debug_stack.push({ name: "template_head RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else {
                    /*peek-production-closure*/
                    /*
                       170:490 template_head=>` • template_head_HC_listbody1_121 ${
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $template_head_HC_listbody1_121(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_75d68ac65a42afc4(l)/*[${]*/)) {
                            /*--unique-id--170--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 231);
                            debug_stack.push({ name: "template_head RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "template_head RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: template_middle_HC_listbody1_122
            grammar index: 171
            bodies:
	171:492 template_middle_HC_listbody1_122=>• template_middle_HC_listbody1_122 string_data - 
		171:493 template_middle_HC_listbody1_122=>• string_data - 
            compile time: 6.102ms*/;
        function $template_middle_HC_listbody1_122(l, state) {
            debug_stack.push({ name: "template_middle_HC_listbody1_122 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $string_data(l, state)) {
                /*--unique-id--171--DO-NOT-REPLACE*/
                add_reduce(state, 1, 230);
                return $template_middle_HC_listbody1_122_goto(l, state, 171);
            }
            debug_stack.push({ name: "template_middle_HC_listbody1_122 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $template_middle_HC_listbody1_122_goto(l, state, prod) {
            debug_stack.push({ name: "template_middle_HC_listbody1_122 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (defined_token_75d68ac65a42afc4(l)/*[${]*/) {
                    return state;
                }
                /*peek_level:0 offset:0 -- clause*/
                /*nl ws sym num id \*/
                if ((((l.isID()/*[id]*/ || l.isNL()/*[nl]*/) || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/) {
                    /*peek-production-closure*/
                    /*
                       171:492 template_middle_HC_listbody1_122=>template_middle_HC_listbody1_122 • string_data
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $string_data(l, state)) {
                        /*--unique-id--171--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 229);
                        prod = 171;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "template_middle_HC_listbody1_122 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 171);
        }
/*production name: template_middle
            grammar index: 172
            bodies:
	172:494 template_middle=>• } template_middle_HC_listbody1_122 ${ - 
		172:495 template_middle=>• } ${ - 
            compile time: 6.142ms*/;
        function $template_middle(l, state) {
            debug_stack.push({ name: "template_middle RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*}*/
            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                /*consume*/
                /*
                   172:494 template_middle=>} • template_middle_HC_listbody1_122 ${
                   172:495 template_middle=>} • ${
                */
                /*peek_level:0 offset:1 -- clause*/
                /*${ nl ws sym num id \*/
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (assert_consume(l, state, defined_token_75d68ac65a42afc4(l)/*[${]*/)) {
                    /*consume*/
                    /*
                       172:495 template_middle=>} ${ •
                    */
                    /*--unique-id--172--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 234);
                    debug_stack.push({ name: "template_middle RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else {
                    /*peek-production-closure*/
                    /*
                       172:494 template_middle=>} • template_middle_HC_listbody1_122 ${
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $template_middle_HC_listbody1_122(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, defined_token_75d68ac65a42afc4(l)/*[${]*/)) {
                            /*--unique-id--172--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 233);
                            debug_stack.push({ name: "template_middle RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "template_middle RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: template_tail_HC_listbody1_123
            grammar index: 173
            bodies:
	173:496 template_tail_HC_listbody1_123=>• template_tail_HC_listbody1_123 string_data - 
		173:497 template_tail_HC_listbody1_123=>• string_data - 
            compile time: 5.65ms*/;
        function $template_tail_HC_listbody1_123(l, state) {
            debug_stack.push({ name: "template_tail_HC_listbody1_123 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $string_data(l, state)) {
                /*--unique-id--173--DO-NOT-REPLACE*/
                add_reduce(state, 1, 230);
                return $template_tail_HC_listbody1_123_goto(l, state, 173);
            }
            debug_stack.push({ name: "template_tail_HC_listbody1_123 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $template_tail_HC_listbody1_123_goto(l, state, prod) {
            debug_stack.push({ name: "template_tail_HC_listbody1_123 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (l.utf == 96/*[`]*/) {
                    return state;
                }
                /*peek_level:0 offset:0 -- clause*/
                /*nl ws sym num id \*/
                if ((((l.isID()/*[id]*/ || l.isNL()/*[nl]*/) || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/) {
                    /*peek-production-closure*/
                    /*
                       173:496 template_tail_HC_listbody1_123=>template_tail_HC_listbody1_123 • string_data
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $string_data(l, state)) {
                        /*--unique-id--173--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 229);
                        prod = 173;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "template_tail_HC_listbody1_123 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 173);
        }
/*production name: template_tail
            grammar index: 174
            bodies:
	174:498 template_tail=>• } template_tail_HC_listbody1_123 ` - 
		174:499 template_tail=>• } ` - 
            compile time: 3.865ms*/;
        function $template_tail(l, state) {
            debug_stack.push({ name: "template_tail RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*}*/
            if (assert_consume(l, state, l.utf == 125/*[}]*/)) {
                /*consume*/
                /*
                   174:498 template_tail=>} • template_tail_HC_listbody1_123 `
                   174:499 template_tail=>} • `
                */
                /*peek_level:0 offset:1 -- clause*/
                /*` nl ws sym num id \*/
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (assert_consume(l, state, l.utf == 96/*[`]*/)) {
                    /*consume*/
                    /*
                       174:499 template_tail=>} ` •
                    */
                    /*--unique-id--174--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 236);
                    debug_stack.push({ name: "template_tail RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                } else {
                    /*peek-production-closure*/
                    /*
                       174:498 template_tail=>} • template_tail_HC_listbody1_123 `
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $template_tail_HC_listbody1_123(l, state)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 96/*[`]*/)) {
                            /*--unique-id--174--DO-NOT-REPLACE*/
                            add_reduce(state, 3, 235);
                            debug_stack.push({ name: "template_tail RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                }
            }
            debug_stack.push({ name: "template_tail RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: literal
            grammar index: 176
            bodies:
	176:505 literal=>• boolean_literal - 
		176:506 literal=>• null_literal - 
		176:507 literal=>• string_literal - 
		176:508 literal=>• numeric_literal - 
		176:509 literal=>• bigint - 
            compile time: 28.935ms*/;
        function $literal(l, state) {
            debug_stack.push({ name: "literal RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*null true false " ' num*/
            if (defined_token_6fe6f90f8fe15dd0(l)/*[null]*/) {
                /*peek-production-closure*/
                /*
                   176:506 literal=>• null_literal
                */
                /*peek_level:0 offset:0*/
                if (state = $null_literal(l, state)) {
                    /*--unique-id--176--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (defined_token_99376be254728810(l)/*[true]*/ || defined_token_57da255105f722f9(l)/*[false]*/) {
                /*peek-production-closure*/
                /*
                   176:505 literal=>• boolean_literal
                */
                /*peek_level:0 offset:0*/
                if (state = $boolean_literal(l, state)) {
                    /*--unique-id--176--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if ((l.utf == 34/*["]*/) || (l.utf == 39/*[']*/)) {
                /*peek-production-closure*/
                /*
                   176:507 literal=>• string_literal
                */
                /*peek_level:0 offset:0*/
                if (state = $string_literal(l, state)) {
                    /*--unique-id--176--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (l.isNum()/*[num]*/) {
                /*peek*/
                /*
                   176:508 literal=>• numeric_literal
                   176:509 literal=>• bigint
                */
                /*peek_level:1 offset:0 -- clause*/
                /*n ( [ . `` ` ?. = * /= %= += -= <<= >>= >>>= &= ^= |= **= ++ -- of in { ** % / + - >>> >> << < > <= >= instanceof !== === != == & ^ | && || ? ] : ) ; { nl END_OF_FILE , } ??*/
                let pk = l.copy();
                sk_a0c13bfa5d5bd422(pk.next()/*[ ws ][ 6 ]*/);
                if (pk.utf == 110/*[n]*/) {
                    /*peek-production-closure*/
                    /*
                       176:509 literal=>• bigint
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $bigint(l, state)) {
                        /*--unique-id--176--DO-NOT-REPLACE*/
                        debug_stack.push({ name: "literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       176:508 literal=>• numeric_literal
                    */
                    /*peek_level:1 offset:0*/
                    if (state = $numeric_literal(l, state)) {
                        /*--unique-id--176--DO-NOT-REPLACE*/
                        debug_stack.push({ name: "literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                }
            }
            debug_stack.push({ name: "literal RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: string_literal_HC_listbody1_124
            grammar index: 177
            bodies:
	177:510 string_literal_HC_listbody1_124=>• string_literal_HC_listbody1_124 string_data - 
		177:511 string_literal_HC_listbody1_124=>• string_data - 
            compile time: 7.085ms*/;
        function $string_literal_HC_listbody1_124(l, state) {
            debug_stack.push({ name: "string_literal_HC_listbody1_124 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $string_data(l, state)) {
                /*--unique-id--177--DO-NOT-REPLACE*/
                add_reduce(state, 1, 230);
                return $string_literal_HC_listbody1_124_goto(l, state, 177);
            }
            debug_stack.push({ name: "string_literal_HC_listbody1_124 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $string_literal_HC_listbody1_124_goto(l, state, prod) {
            debug_stack.push({ name: "string_literal_HC_listbody1_124 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (l.utf == 34/*["]*/) {
                    return state;
                }
                /*peek_level:0 offset:0 -- clause*/
                /*nl ws sym num id \*/
                if ((((l.isID()/*[id]*/ || l.isNL()/*[nl]*/) || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/) {
                    /*peek-production-closure*/
                    /*
                       177:510 string_literal_HC_listbody1_124=>string_literal_HC_listbody1_124 • string_data
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $string_data(l, state)) {
                        /*--unique-id--177--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 229);
                        prod = 177;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "string_literal_HC_listbody1_124 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 177);
        }
/*production name: string_literal_HC_listbody1_125
            grammar index: 178
            bodies:
	178:512 string_literal_HC_listbody1_125=>• string_literal_HC_listbody1_125 string_data - 
		178:513 string_literal_HC_listbody1_125=>• string_data - 
            compile time: 12.806ms*/;
        function $string_literal_HC_listbody1_125(l, state) {
            debug_stack.push({ name: "string_literal_HC_listbody1_125 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $string_data(l, state)) {
                /*--unique-id--178--DO-NOT-REPLACE*/
                add_reduce(state, 1, 230);
                return $string_literal_HC_listbody1_125_goto(l, state, 178);
            }
            debug_stack.push({ name: "string_literal_HC_listbody1_125 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $string_literal_HC_listbody1_125_goto(l, state, prod) {
            debug_stack.push({ name: "string_literal_HC_listbody1_125 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (l.utf == 39/*[']*/) {
                    return state;
                }
                /*peek_level:0 offset:0 -- clause*/
                /*nl ws sym num id \*/
                if ((((l.isID()/*[id]*/ || l.isNL()/*[nl]*/) || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/) {
                    /*peek-production-closure*/
                    /*
                       178:512 string_literal_HC_listbody1_125=>string_literal_HC_listbody1_125 • string_data
                    */
                    /*peek_level:0 offset:1*/
                    if (state = $string_data(l, state)) {
                        /*--unique-id--178--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 229);
                        prod = 178;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "string_literal_HC_listbody1_125 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 178);
        }
/*production name: string_literal
            grammar index: 179
            bodies:
	179:514 string_literal=>• " string_literal_HC_listbody1_124 " - 
		179:515 string_literal=>• ' string_literal_HC_listbody1_125 ' - 
		179:516 string_literal=>• " " - 
		179:517 string_literal=>• ' ' - 
            compile time: 12.843ms*/;
        function $string_literal(l, state) {
            debug_stack.push({ name: "string_literal RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*" '*/
            if (l.utf == 34/*["]*/) {
                /*peek*/
                /*
                   179:514 string_literal=>• " string_literal_HC_listbody1_124 "
                   179:516 string_literal=>• " "
                */
                /*peek_level:1 offset:0 -- clause*/
                /*" nl ws sym num id \*/
                let pk = l.copy();
                sk_d065c58d10ee093b(pk.next()/*[ 6 ]*/);
                if (pk.utf == 34/*["]*/) {
                    /*peek-production-closure*/
                    /*
                       179:516 string_literal=>• " "
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, l.utf == 34/*["]*/)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 34/*["]*/)) {
                            /*--unique-id--179--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 238);
                            debug_stack.push({ name: "string_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       179:514 string_literal=>• " string_literal_HC_listbody1_124 "
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, l.utf == 34/*["]*/)) {
                        sk_d065c58d10ee093b(l/*[ 6 ]*/);
                        if (state = $string_literal_HC_listbody1_124(l, state)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 34/*["]*/)) {
                                /*--unique-id--179--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 237);
                                debug_stack.push({ name: "string_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                }
            } else if (l.utf == 39/*[']*/) {
                /*peek*/
                /*
                   179:515 string_literal=>• ' string_literal_HC_listbody1_125 '
                   179:517 string_literal=>• ' '
                */
                /*peek_level:1 offset:0 -- clause*/
                /*' nl ws sym num id \*/
                let pk = l.copy();
                sk_d065c58d10ee093b(pk.next()/*[ 6 ]*/);
                if (pk.utf == 39/*[']*/) {
                    /*peek-production-closure*/
                    /*
                       179:517 string_literal=>• ' '
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, l.utf == 39/*[']*/)) {
                        sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                        if (assert_consume(l, state, l.utf == 39/*[']*/)) {
                            /*--unique-id--179--DO-NOT-REPLACE*/
                            add_reduce(state, 2, 238);
                            debug_stack.push({ name: "string_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                            return state;
                        }
                    }
                } else {
                    /*peek-production-closure*/
                    /*
                       179:515 string_literal=>• ' string_literal_HC_listbody1_125 '
                    */
                    /*peek_level:1 offset:0*/
                    if (assert_consume(l, state, l.utf == 39/*[']*/)) {
                        sk_d065c58d10ee093b(l/*[ 6 ]*/);
                        if (state = $string_literal_HC_listbody1_125(l, state)) {
                            sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                            if (assert_consume(l, state, l.utf == 39/*[']*/)) {
                                /*--unique-id--179--DO-NOT-REPLACE*/
                                add_reduce(state, 3, 237);
                                debug_stack.push({ name: "string_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                                return state;
                            }
                        }
                    }
                }
            }
            debug_stack.push({ name: "string_literal RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: string_data
            grammar index: 180
            bodies:
	180:518 string_data=>• θnl - 
		180:519 string_data=>• θws - 
		180:520 string_data=>• θsym - 
		180:521 string_data=>• θnum - 
		180:522 string_data=>• θid - 
		180:523 string_data=>• escaped_sequence - 
            compile time: 5.096ms*/;
        function $string_data(l, state) {
            debug_stack.push({ name: "string_data RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*\ nl ws sym num id*/
            if (l.utf == 92/*[\]*/) {
                /*peek-production-closure*/
                /*
                   180:523 string_data=>• escaped_sequence
                */
                /*peek_level:0 offset:0*/
                if (state = $escaped_sequence(l, state)) {
                    /*--unique-id--180--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "string_data RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if (assert_consume(l, state, (((l.isID()/*[id]*/ || l.isNL()/*[nl]*/) || l.isNum()/*[num]*/) || l.isSym()/*[sym]*/) || l.isSP()/*[ws]*/)) {
                /*consume*/
                /*
                   180:518 string_data=>θnl •
                   180:519 string_data=>θws •
                   180:520 string_data=>θsym •
                   180:521 string_data=>θnum •
                   180:522 string_data=>θid •
                */
                /*--unique-id--180--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "string_data RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "string_data RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: escaped_sequence
            grammar index: 181
            bodies:
	181:524 escaped_sequence=>• \ comments_group_07_100 - 
            compile time: 2.129ms*/;
        function $escaped_sequence(l, state) {
            debug_stack.push({ name: "escaped_sequence RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*\*/
            if (assert_consume(l, state, l.utf == 92/*[\]*/)) {
                /*consume*/
                /*
                   181:524 escaped_sequence=>\ • comments_group_07_100
                */
                /*peek_level:-1 offset:0*/
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (state = $comments_group_07_100(l, state)) {
                    /*--unique-id--181--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 229);
                    debug_stack.push({ name: "escaped_sequence RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "escaped_sequence RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: bigint
            grammar index: 182
            bodies:
	182:525 bigint=>• θnum τn - 
            compile time: 2.222ms*/;
        function $bigint(l, state) {
            debug_stack.push({ name: "bigint RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*num*/
            if (assert_consume(l, state, l.isNum()/*[num]*/)) {
                /*consume*/
                /*
                   182:525 bigint=>θnum • τn
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 110/*[n]*/)) {
                    /*--unique-id--182--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 239);
                    debug_stack.push({ name: "bigint RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "bigint RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: numeric_literal
            grammar index: 183
            bodies:
	183:526 numeric_literal=>• θnum - 
            compile time: 1.509ms*/;
        function $numeric_literal(l, state) {
            debug_stack.push({ name: "numeric_literal RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*num*/
            if (assert_consume(l, state, l.isNum()/*[num]*/)) {
                /*consume*/
                /*
                   183:526 numeric_literal=>θnum •
                */
                /*--unique-id--183--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                add_reduce(state, 1, 240);
                debug_stack.push({ name: "numeric_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "numeric_literal RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: null_literal
            grammar index: 184
            bodies:
	184:527 null_literal=>• τnull - 
            compile time: 2.104ms*/;
        function $null_literal(l, state) {
            debug_stack.push({ name: "null_literal RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*null*/
            if (assert_consume(l, state, defined_token_6fe6f90f8fe15dd0(l)/*[null]*/)) {
                /*consume*/
                /*
                   184:527 null_literal=>τnull •
                */
                /*--unique-id--184--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                add_reduce(state, 1, 241);
                debug_stack.push({ name: "null_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "null_literal RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: boolean_literal
            grammar index: 185
            bodies:
	185:528 boolean_literal=>• τtrue - 
		185:529 boolean_literal=>• τfalse - 
            compile time: 3.855ms*/;
        function $boolean_literal(l, state) {
            debug_stack.push({ name: "boolean_literal RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*true false*/
            if (assert_consume(l, state, defined_token_99376be254728810(l)/*[true]*/ || defined_token_57da255105f722f9(l)/*[false]*/)) {
                /*consume*/
                /*
                   185:528 boolean_literal=>τtrue •
                   185:529 boolean_literal=>τfalse •
                */
                /*--unique-id--185--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                add_reduce(state, 1, 242);
                debug_stack.push({ name: "boolean_literal RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "boolean_literal RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: binding_identifier
            grammar index: 188
            bodies:
	188:532 binding_identifier=>• identifier - 
            compile time: 2.734ms*/;
        function $binding_identifier(l, state) {
            debug_stack.push({ name: "binding_identifier RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $identifier(l, state)) {
                /*--unique-id--188--DO-NOT-REPLACE*/
                add_reduce(state, 1, 111);
                debug_stack.push({ name: "binding_identifier RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "binding_identifier RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: identifier
            grammar index: 189
            bodies:
	189:533 identifier=>• composite_identifier - 
		189:534 identifier=>• unreserved_word - 
            compile time: 2.709ms*/;
        function $identifier(l, state) {
            debug_stack.push({ name: "identifier RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*async get set target as from _ $ id*/
            if ((((defined_token_845a30f46ac258a6(l)/*[async] [as]*/ || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_5bca542dce980d9c(l)/*[set]*/) || defined_token_1cb42c7dd41b3a7e(l)/*[target]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/) {
                /*peek-production-closure*/
                /*
                   189:534 identifier=>• unreserved_word
                */
                /*peek_level:0 offset:0*/
                if (state = $unreserved_word(l, state)) {
                    /*--unique-id--189--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 245);
                    debug_stack.push({ name: "identifier RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   189:533 identifier=>• composite_identifier
                */
                /*peek_level:0 offset:0*/
                if (state = $def$js_identifier(l, state)) {
                    /*--unique-id--189--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 245);
                    debug_stack.push({ name: "identifier RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "identifier RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: identifier_name
            grammar index: 190
            bodies:
	190:535 identifier_name=>• composite_identifier - 
		190:536 identifier_name=>• reserved_word - 
		190:537 identifier_name=>• unreserved_word - 
            compile time: 16.402ms*/;
        function $identifier_name(l, state) {
            debug_stack.push({ name: "identifier_name RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*async get set target as from await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield implements package protected interface private public null true false _ $ id*/
            if ((((defined_token_845a30f46ac258a6(l)/*[async] [as]*/ || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_5bca542dce980d9c(l)/*[set]*/) || defined_token_1cb42c7dd41b3a7e(l)/*[target]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/) {
                /*peek-production-closure*/
                /*
                   190:537 identifier_name=>• unreserved_word
                */
                /*peek_level:0 offset:0*/
                if (state = $unreserved_word(l, state)) {
                    /*--unique-id--190--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 246);
                    debug_stack.push({ name: "identifier_name RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else if ((((((((((((((defined_token_ded0f96a7228c7c5(l)/*[await]*/ || defined_token_c3524ff0dce64492(l)/*[break]*/) || defined_token_c460df0c19b30757(l)/*[case] [catch] [class] [const] [continue]*/) || defined_token_0b6f38e897a6033b(l)/*[debugger] [default] [delete] [do]*/) || defined_token_eb7f69039a78f607(l)/*[else] [export] [extends]*/) || defined_token_5ae254f69676cbf1(l)/*[finally] [for] [function] [false]*/) || defined_token_b7730e2b48fe68f8(l)/*[if] [import] [in] [instanceof] [implements] [interface]*/) || defined_token_99035833d16742d9(l)/*[new] [null]*/) || defined_token_876f036172605c26(l)/*[return]*/) || defined_token_35cdf6168a8ead76(l)/*[super] [switch]*/) || defined_token_d4bc8ae8e31ef3aa(l)/*[this] [throw] [try] [typeof] [true]*/) || defined_token_b64c7c58a10dcef3(l)/*[var] [void]*/) || defined_token_aac16ca323764d7a(l)/*[while] [with]*/) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/) || defined_token_dc17de0546cfa0c9(l)/*[package] [protected] [private] [public]*/) {
                /*peek-production-closure*/
                /*
                   190:536 identifier_name=>• reserved_word
                */
                /*peek_level:0 offset:0*/
                if (state = $reserved_word(l, state)) {
                    /*--unique-id--190--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 246);
                    debug_stack.push({ name: "identifier_name RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   190:535 identifier_name=>• composite_identifier
                */
                /*peek_level:0 offset:0*/
                if (state = $def$js_identifier(l, state)) {
                    /*--unique-id--190--DO-NOT-REPLACE*/
                    add_reduce(state, 1, 246);
                    debug_stack.push({ name: "identifier_name RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "identifier_name RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: unreserved_word
            grammar index: 191
            bodies:
	191:538 unreserved_word=>• τasync - 
		191:539 unreserved_word=>• τget - 
		191:540 unreserved_word=>• τset - 
		191:541 unreserved_word=>• τtarget - 
		191:542 unreserved_word=>• τas - 
		191:543 unreserved_word=>• τfrom - 
            compile time: 7.316ms*/;
        function $unreserved_word(l, state) {
            debug_stack.push({ name: "unreserved_word RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*async get set target as from*/
            if (assert_consume(l, state, (((defined_token_845a30f46ac258a6(l)/*[async] [as]*/ || defined_token_8f5d282f35165648(l)/*[get]*/) || defined_token_5bca542dce980d9c(l)/*[set]*/) || defined_token_1cb42c7dd41b3a7e(l)/*[target]*/) || defined_token_14469127dc9c2c1f(l)/*[from]*/)) {
                /*consume*/
                /*
                   191:538 unreserved_word=>τasync •
                   191:539 unreserved_word=>τget •
                   191:540 unreserved_word=>τset •
                   191:541 unreserved_word=>τtarget •
                   191:542 unreserved_word=>τas •
                   191:543 unreserved_word=>τfrom •
                */
                /*--unique-id--191--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "unreserved_word RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "unreserved_word RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: reserved_word
            grammar index: 192
            bodies:
	192:544 reserved_word=>• keyword - 
		192:545 reserved_word=>• future_reserved_word - 
		192:546 reserved_word=>• τnull - 
		192:547 reserved_word=>• τtrue - 
		192:548 reserved_word=>• τfalse - 
            compile time: 20.749ms*/;
        function $reserved_word(l, state) {
            debug_stack.push({ name: "reserved_word RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:0 offset:0 -- clause*/
            /*null true false implements package protected interface private public await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield*/
            if (assert_consume(l, state, (defined_token_6fe6f90f8fe15dd0(l)/*[null]*/ || defined_token_99376be254728810(l)/*[true]*/) || defined_token_57da255105f722f9(l)/*[false]*/)) {
                /*consume*/
                /*
                   192:546 reserved_word=>τnull •
                   192:547 reserved_word=>τtrue •
                   192:548 reserved_word=>τfalse •
                */
                /*--unique-id--192--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "reserved_word RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            } else if (defined_token_93b20e8c3e2b885c(l)/*[implements] [interface]*/ || defined_token_dc17de0546cfa0c9(l)/*[package] [protected] [private] [public]*/) {
                /*peek-production-closure*/
                /*
                   192:545 reserved_word=>• future_reserved_word
                */
                /*peek_level:0 offset:0*/
                if (state = $future_reserved_word(l, state)) {
                    /*--unique-id--192--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "reserved_word RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            } else {
                /*peek-production-closure*/
                /*
                   192:544 reserved_word=>• keyword
                */
                /*peek_level:0 offset:0*/
                if (state = $keyword(l, state)) {
                    /*--unique-id--192--DO-NOT-REPLACE*/
                    debug_stack.push({ name: "reserved_word RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "reserved_word RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: future_reserved_word
            grammar index: 193
            bodies:
	193:549 future_reserved_word=>• τimplements - 
		193:550 future_reserved_word=>• τpackage - 
		193:551 future_reserved_word=>• τprotected - 
		193:552 future_reserved_word=>• τinterface - 
		193:553 future_reserved_word=>• τprivate - 
		193:554 future_reserved_word=>• τpublic - 
            compile time: 2.171ms*/;
        function $future_reserved_word(l, state) {
            debug_stack.push({ name: "future_reserved_word RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*implements package protected interface private public*/
            if (assert_consume(l, state, defined_token_6135305a1f53a41a(l)/*[implements] [interface]*/ || defined_token_dc17de0546cfa0c9(l)/*[package] [protected] [private] [public]*/)) {
                /*consume*/
                /*
                   193:549 future_reserved_word=>τimplements •
                   193:550 future_reserved_word=>τpackage •
                   193:551 future_reserved_word=>τprotected •
                   193:552 future_reserved_word=>τinterface •
                   193:553 future_reserved_word=>τprivate •
                   193:554 future_reserved_word=>τpublic •
                */
                /*--unique-id--193--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "future_reserved_word RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "future_reserved_word RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: keyword
            grammar index: 195
            bodies:
	195:556 keyword=>• τawait - 
		195:557 keyword=>• τbreak - 
		195:558 keyword=>• τcase - 
		195:559 keyword=>• τcatch - 
		195:560 keyword=>• τclass - 
		195:561 keyword=>• τconst - 
		195:562 keyword=>• τcontinue - 
		195:563 keyword=>• τdebugger - 
		195:564 keyword=>• τdefault - 
		195:565 keyword=>• τdelete - 
		195:566 keyword=>• τdo - 
		195:567 keyword=>• τelse - 
		195:568 keyword=>• τexport - 
		195:569 keyword=>• τextends - 
		195:570 keyword=>• τfinally - 
		195:571 keyword=>• τfor - 
		195:572 keyword=>• τfunction - 
		195:573 keyword=>• τif - 
		195:574 keyword=>• τimport - 
		195:575 keyword=>• τin - 
		195:576 keyword=>• τinstanceof - 
		195:577 keyword=>• τnew - 
		195:578 keyword=>• τreturn - 
		195:579 keyword=>• τsuper - 
		195:580 keyword=>• τswitch - 
		195:581 keyword=>• τthis - 
		195:582 keyword=>• τthrow - 
		195:583 keyword=>• τtry - 
		195:584 keyword=>• τtypeof - 
		195:585 keyword=>• τvar - 
		195:586 keyword=>• τvoid - 
		195:587 keyword=>• τwhile - 
		195:588 keyword=>• τwith - 
		195:589 keyword=>• τyield - 
            compile time: 12.905ms*/;
        function $keyword(l, state) {
            debug_stack.push({ name: "keyword RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yield*/
            if (assert_consume(l, state, ((((((((((((defined_token_ded0f96a7228c7c5(l)/*[await]*/ || defined_token_c3524ff0dce64492(l)/*[break]*/) || defined_token_c460df0c19b30757(l)/*[case] [catch] [class] [const] [continue]*/) || defined_token_0b6f38e897a6033b(l)/*[debugger] [default] [delete] [do]*/) || defined_token_eb7f69039a78f607(l)/*[else] [export] [extends]*/) || defined_token_cf0f887595c20618(l)/*[finally] [for] [function]*/) || defined_token_38bd1ef252233e12(l)/*[if] [import] [in] [instanceof]*/) || defined_token_79b82aa5b55f0605(l)/*[new]*/) || defined_token_876f036172605c26(l)/*[return]*/) || defined_token_35cdf6168a8ead76(l)/*[super] [switch]*/) || defined_token_53acc3dc3e0044c1(l)/*[this] [throw] [try] [typeof]*/) || defined_token_b64c7c58a10dcef3(l)/*[var] [void]*/) || defined_token_aac16ca323764d7a(l)/*[while] [with]*/) || defined_token_d8f9d336d83ac87c(l)/*[yield]*/)) {
                /*consume*/
                /*
                   195:556 keyword=>τawait •
                   195:557 keyword=>τbreak •
                   195:558 keyword=>τcase •
                   195:559 keyword=>τcatch •
                   195:560 keyword=>τclass •
                   195:561 keyword=>τconst •
                   195:562 keyword=>τcontinue •
                   195:563 keyword=>τdebugger •
                   195:564 keyword=>τdefault •
                   195:565 keyword=>τdelete •
                   195:566 keyword=>τdo •
                   195:567 keyword=>τelse •
                   195:568 keyword=>τexport •
                   195:569 keyword=>τextends •
                   195:570 keyword=>τfinally •
                   195:571 keyword=>τfor •
                   195:572 keyword=>τfunction •
                   195:573 keyword=>τif •
                   195:574 keyword=>τimport •
                   195:575 keyword=>τin •
                   195:576 keyword=>τinstanceof •
                   195:577 keyword=>τnew •
                   195:578 keyword=>τreturn •
                   195:579 keyword=>τsuper •
                   195:580 keyword=>τswitch •
                   195:581 keyword=>τthis •
                   195:582 keyword=>τthrow •
                   195:583 keyword=>τtry •
                   195:584 keyword=>τtypeof •
                   195:585 keyword=>τvar •
                   195:586 keyword=>τvoid •
                   195:587 keyword=>τwhile •
                   195:588 keyword=>τwith •
                   195:589 keyword=>τyield •
                */
                /*--unique-id--195--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "keyword RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "keyword RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$scientific_token_group_027_101
            grammar index: 205
            bodies:
	205:618 def$scientific_token_group_027_101=>• e - 
		205:619 def$scientific_token_group_027_101=>• E - 
            compile time: 3.535ms*/;
        function $def$scientific_token_group_027_101(l, state) {
            debug_stack.push({ name: "def$scientific_token_group_027_101 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*e E*/
            if (assert_consume(l, state, (l.utf == 101/*[e]*/) || (l.utf == 69/*[E]*/))) {
                /*consume*/
                /*
                   205:618 def$scientific_token_group_027_101=>e •
                   205:619 def$scientific_token_group_027_101=>E •
                */
                /*--unique-id--205--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "def$scientific_token_group_027_101 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "def$scientific_token_group_027_101 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$scientific_token_group_228_102
            grammar index: 206
            bodies:
	206:620 def$scientific_token_group_228_102=>• def$scientific_token_group_027_101 - θnum - 
		206:621 def$scientific_token_group_228_102=>• def$scientific_token_group_027_101 θnum - 
            compile time: 6.45ms*/;
        function $def$scientific_token_group_228_102(l, state) {
            debug_stack.push({ name: "def$scientific_token_group_228_102 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*205*/
            if (state = $def$scientific_token_group_027_101(l, state)) {
                /*assert*/
                /*
                   206:620 def$scientific_token_group_228_102=>• def$scientific_token_group_027_101 - θnum
                   206:621 def$scientific_token_group_228_102=>• def$scientific_token_group_027_101 θnum
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*- num*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.utf == 45/*[-]*/)) {
                    /*consume*/
                    /*
                       206:620 def$scientific_token_group_228_102=>def$scientific_token_group_027_101 - • θnum
                    */
                    /*peek_level:-1 offset:1*/
                    sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                    if (assert_consume(l, state, l.isNum()/*[num]*/)) {
                        /*--unique-id--206--DO-NOT-REPLACE*/
                        add_reduce(state, 3, 0);
                        debug_stack.push({ name: "def$scientific_token_group_228_102 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else if (assert_consume(l, state, l.isNum()/*[num]*/)) {
                    /*consume*/
                    /*
                       206:621 def$scientific_token_group_228_102=>def$scientific_token_group_027_101 θnum •
                    */
                    /*--unique-id--206--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, 2, 0);
                    debug_stack.push({ name: "def$scientific_token_group_228_102 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "def$scientific_token_group_228_102 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$scientific_token
            grammar index: 207
            bodies:
	207:622 def$scientific_token=>• def$float_token def$scientific_token_group_228_102 - 
		207:623 def$scientific_token=>• def$float_token - 
            compile time: 5.86ms*/;
        function $def$scientific_token(l, state) {
            debug_stack.push({ name: "def$scientific_token RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*209*/
            if (state = $def$float_token(l, state)) {
                /*assert*/
                /*
                   207:622 def$scientific_token=>• def$float_token def$scientific_token_group_228_102
                   207:623 def$scientific_token=>• def$float_token
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*e E ws END_OF_FILE*/
                sk_b9190bf1b860503a(l/*[ nl ][ 6 ]*/);
                if ((l.utf == 101/*[e]*/) || (l.utf == 69/*[E]*/)) {
                    /*assert-production-closure*/
                    /*
                       207:622 def$scientific_token=>def$float_token • def$scientific_token_group_228_102
                    */
                    /*peek_level:-1 offset:1*/
                    if (state = $def$scientific_token_group_228_102(l, state)) {
                        /*--unique-id--207--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 0);
                        debug_stack.push({ name: "def$scientific_token RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*assert-end*/
                    /*
                       207:623 def$scientific_token=>def$float_token •
                    */
                    /*--unique-id--207--DO-NOT-REPLACE*/
                    /*peek_level:0 offset:2*/
                    debug_stack.push({ name: "def$scientific_token RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "def$scientific_token RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$float_token_group_130_103
            grammar index: 208
            bodies:
	208:624 def$float_token_group_130_103=>• . θnum - 
            compile time: 5.414ms*/;
        function $def$float_token_group_130_103(l, state) {
            debug_stack.push({ name: "def$float_token_group_130_103 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*.*/
            if (assert_consume(l, state, l.utf == 46/*[.]*/)) {
                /*consume*/
                /*
                   208:624 def$float_token_group_130_103=>. • θnum
                */
                /*peek_level:-1 offset:0*/
                sk_2c33967dd3fbc823(l/*[ ws ][ nl ][ 6 ]*/);
                if (assert_consume(l, state, l.isNum()/*[num]*/)) {
                    /*--unique-id--208--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 0);
                    debug_stack.push({ name: "def$float_token_group_130_103 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "def$float_token_group_130_103 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$float_token
            grammar index: 209
            bodies:
	209:625 def$float_token=>• θnum def$float_token_group_130_103 - 
		209:626 def$float_token=>• θnum - 
            compile time: 2.011ms*/;
        function $def$float_token(l, state) {
            debug_stack.push({ name: "def$float_token RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*num*/
            if (assert_consume(l, state, l.isNum()/*[num]*/)) {
                /*consume*/
                /*
                   209:625 def$float_token=>θnum • def$float_token_group_130_103
                   209:626 def$float_token=>θnum •
                */
                /*peek_level:-1 offset:1 -- clause*/
                /*. e E ws END_OF_FILE*/
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (l.utf == 46/*[.]*/) {
                    /*assert-production-closure*/
                    /*
                       209:625 def$float_token=>θnum • def$float_token_group_130_103
                    */
                    /*peek_level:-1 offset:1*/
                    if (state = $def$float_token_group_130_103(l, state)) {
                        /*--unique-id--209--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 0);
                        debug_stack.push({ name: "def$float_token RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                        return state;
                    }
                } else {
                    /*assert-end*/
                    /*
                       209:626 def$float_token=>θnum •
                    */
                    /*--unique-id--209--DO-NOT-REPLACE*/
                    /*peek_level:0 offset:2*/
                    debug_stack.push({ name: "def$float_token RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "def$float_token RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$hex_token_group_044_104
            grammar index: 210
            bodies:
	210:627 def$hex_token_group_044_104=>• θnum - 
		210:628 def$hex_token_group_044_104=>• a - 
		210:629 def$hex_token_group_044_104=>• b - 
		210:630 def$hex_token_group_044_104=>• c - 
		210:631 def$hex_token_group_044_104=>• d - 
		210:632 def$hex_token_group_044_104=>• e - 
		210:633 def$hex_token_group_044_104=>• f - 
		210:634 def$hex_token_group_044_104=>• A - 
		210:635 def$hex_token_group_044_104=>• B - 
		210:636 def$hex_token_group_044_104=>• C - 
		210:637 def$hex_token_group_044_104=>• D - 
		210:638 def$hex_token_group_044_104=>• E - 
		210:639 def$hex_token_group_044_104=>• F - 
            compile time: 6.041ms*/;
        function $def$hex_token_group_044_104(l, state) {
            debug_stack.push({ name: "def$hex_token_group_044_104 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*num a b c d e f A B C D E F*/
            if (assert_consume(l, state, assert_table(l, 0x0, 0x0, 0x7e, 0x7e)/*tbl:[ a ] [ b ] [ c ] [ d ] [ e ] [ f ] [ A ] [ B ] [ C ] [ D ] [ E ] [ F ]*/ || l.isNum()/*[num]*/)) {
                /*consume*/
                /*
                   210:627 def$hex_token_group_044_104=>θnum •
                   210:628 def$hex_token_group_044_104=>a •
                   210:629 def$hex_token_group_044_104=>b •
                   210:630 def$hex_token_group_044_104=>c •
                   210:631 def$hex_token_group_044_104=>d •
                   210:632 def$hex_token_group_044_104=>e •
                   210:633 def$hex_token_group_044_104=>f •
                   210:634 def$hex_token_group_044_104=>A •
                   210:635 def$hex_token_group_044_104=>B •
                   210:636 def$hex_token_group_044_104=>C •
                   210:637 def$hex_token_group_044_104=>D •
                   210:638 def$hex_token_group_044_104=>E •
                   210:639 def$hex_token_group_044_104=>F •
                */
                /*--unique-id--210--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "def$hex_token_group_044_104 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "def$hex_token_group_044_104 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$hex_token_HC_listbody1_105
            grammar index: 211
            bodies:
	211:640 def$hex_token_HC_listbody1_105=>• def$hex_token_HC_listbody1_105 def$hex_token_group_044_104 - 
		211:641 def$hex_token_HC_listbody1_105=>• def$hex_token_group_044_104 - 
            compile time: 7.417ms*/;
        function $def$hex_token_HC_listbody1_105(l, state) {
            debug_stack.push({ name: "def$hex_token_HC_listbody1_105 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $def$hex_token_group_044_104(l, state)) {
                /*--unique-id--211--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $def$hex_token_HC_listbody1_105_goto(l, state, 211);
            }
            debug_stack.push({ name: "def$hex_token_HC_listbody1_105 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $def$hex_token_HC_listbody1_105_goto(l, state, prod) {
            debug_stack.push({ name: "def$hex_token_HC_listbody1_105 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_b9190bf1b860503a(l/*[ nl ][ 6 ]*/);
                if (l.isSP()/*[ws]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*num a b c d e f A B C D E F*/
                if (assert_table(l, 0x0, 0x0, 0x7e, 0x7e)/*tbl:[ a ] [ b ] [ c ] [ d ] [ e ] [ f ] [ A ] [ B ] [ C ] [ D ] [ E ] [ F ]*/ || l.isNum()/*[num]*/) {
                    /*assert-production-closure*/
                    /*
                       211:640 def$hex_token_HC_listbody1_105=>def$hex_token_HC_listbody1_105 • def$hex_token_group_044_104
                    */
                    /*peek_level:-1 offset:1*/
                    if (state = $def$hex_token_group_044_104(l, state)) {
                        /*--unique-id--211--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 3);
                        prod = 211;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "def$hex_token_HC_listbody1_105 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 211);
        }
/*production name: def$hex_token
            grammar index: 212
            bodies:
	212:642 def$hex_token=>• 0x def$hex_token_HC_listbody1_105 - 
            compile time: 5.169ms*/;
        function $def$hex_token(l, state) {
            debug_stack.push({ name: "def$hex_token RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*0x*/
            if (assert_consume(l, state, defined_token_60c8247a60511d72(l)/*[0x]*/)) {
                /*consume*/
                /*
                   212:642 def$hex_token=>0x • def$hex_token_HC_listbody1_105
                */
                /*peek_level:-1 offset:0*/
                sk_b9190bf1b860503a(l/*[ nl ][ 6 ]*/);
                if (state = $def$hex_token_HC_listbody1_105(l, state)) {
                    /*--unique-id--212--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 0);
                    debug_stack.push({ name: "def$hex_token RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "def$hex_token RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$binary_token_group_047_106
            grammar index: 213
            bodies:
	213:643 def$binary_token_group_047_106=>• 0 - 
		213:644 def$binary_token_group_047_106=>• 1 - 
            compile time: 3.789ms*/;
        function $def$binary_token_group_047_106(l, state) {
            debug_stack.push({ name: "def$binary_token_group_047_106 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*0 1*/
            if (assert_consume(l, state, (l.utf == 48/*[0]*/) || (l.utf == 49/*[1]*/))) {
                /*consume*/
                /*
                   213:643 def$binary_token_group_047_106=>0 •
                   213:644 def$binary_token_group_047_106=>1 •
                */
                /*--unique-id--213--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "def$binary_token_group_047_106 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "def$binary_token_group_047_106 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$binary_token_HC_listbody1_107
            grammar index: 214
            bodies:
	214:645 def$binary_token_HC_listbody1_107=>• def$binary_token_HC_listbody1_107 def$binary_token_group_047_106 - 
		214:646 def$binary_token_HC_listbody1_107=>• def$binary_token_group_047_106 - 
            compile time: 7.734ms*/;
        function $def$binary_token_HC_listbody1_107(l, state) {
            debug_stack.push({ name: "def$binary_token_HC_listbody1_107 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $def$binary_token_group_047_106(l, state)) {
                /*--unique-id--214--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $def$binary_token_HC_listbody1_107_goto(l, state, 214);
            }
            debug_stack.push({ name: "def$binary_token_HC_listbody1_107 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $def$binary_token_HC_listbody1_107_goto(l, state, prod) {
            debug_stack.push({ name: "def$binary_token_HC_listbody1_107 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_b9190bf1b860503a(l/*[ nl ][ 6 ]*/);
                if (l.isSP()/*[ws]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*0 1*/
                if ((l.utf == 48/*[0]*/) || (l.utf == 49/*[1]*/)) {
                    /*assert-production-closure*/
                    /*
                       214:645 def$binary_token_HC_listbody1_107=>def$binary_token_HC_listbody1_107 • def$binary_token_group_047_106
                    */
                    /*peek_level:-1 offset:1*/
                    if (state = $def$binary_token_group_047_106(l, state)) {
                        /*--unique-id--214--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 3);
                        prod = 214;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "def$binary_token_HC_listbody1_107 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 214);
        }
/*production name: def$binary_token
            grammar index: 215
            bodies:
	215:647 def$binary_token=>• 0b def$binary_token_HC_listbody1_107 - 
            compile time: 2.47ms*/;
        function $def$binary_token(l, state) {
            debug_stack.push({ name: "def$binary_token RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*0b*/
            if (assert_consume(l, state, defined_token_33b1e9553bafe159(l)/*[0b]*/)) {
                /*consume*/
                /*
                   215:647 def$binary_token=>0b • def$binary_token_HC_listbody1_107
                */
                /*peek_level:-1 offset:0*/
                sk_b9190bf1b860503a(l/*[ nl ][ 6 ]*/);
                if (state = $def$binary_token_HC_listbody1_107(l, state)) {
                    /*--unique-id--215--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 0);
                    debug_stack.push({ name: "def$binary_token RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "def$binary_token RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$octal_token_group_050_108
            grammar index: 216
            bodies:
	216:648 def$octal_token_group_050_108=>• 0o - 
		216:649 def$octal_token_group_050_108=>• 0O - 
            compile time: 2.617ms*/;
        function $def$octal_token_group_050_108(l, state) {
            debug_stack.push({ name: "def$octal_token_group_050_108 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*0o 0O*/
            if (assert_consume(l, state, defined_token_ad665389bc23e01f(l)/*[0o] [0O]*/)) {
                /*consume*/
                /*
                   216:648 def$octal_token_group_050_108=>0o •
                   216:649 def$octal_token_group_050_108=>0O •
                */
                /*--unique-id--216--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "def$octal_token_group_050_108 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "def$octal_token_group_050_108 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$octal_token_group_058_109
            grammar index: 217
            bodies:
	217:650 def$octal_token_group_058_109=>• 0 - 
		217:651 def$octal_token_group_058_109=>• 1 - 
		217:652 def$octal_token_group_058_109=>• 2 - 
		217:653 def$octal_token_group_058_109=>• 3 - 
		217:654 def$octal_token_group_058_109=>• 4 - 
		217:655 def$octal_token_group_058_109=>• 5 - 
		217:656 def$octal_token_group_058_109=>• 6 - 
		217:657 def$octal_token_group_058_109=>• 7 - 
            compile time: 5.342ms*/;
        function $def$octal_token_group_058_109(l, state) {
            debug_stack.push({ name: "def$octal_token_group_058_109 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*0 1 2 3 4 5 6 7*/
            if (assert_consume(l, state, assert_table(l, 0x0, 0xff0000, 0x0, 0x0)/*tbl:[ 0 ] [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ 7 ]*/)) {
                /*consume*/
                /*
                   217:650 def$octal_token_group_058_109=>0 •
                   217:651 def$octal_token_group_058_109=>1 •
                   217:652 def$octal_token_group_058_109=>2 •
                   217:653 def$octal_token_group_058_109=>3 •
                   217:654 def$octal_token_group_058_109=>4 •
                   217:655 def$octal_token_group_058_109=>5 •
                   217:656 def$octal_token_group_058_109=>6 •
                   217:657 def$octal_token_group_058_109=>7 •
                */
                /*--unique-id--217--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "def$octal_token_group_058_109 RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "def$octal_token_group_058_109 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$octal_token_HC_listbody1_110
            grammar index: 218
            bodies:
	218:658 def$octal_token_HC_listbody1_110=>• def$octal_token_HC_listbody1_110 def$octal_token_group_058_109 - 
		218:659 def$octal_token_HC_listbody1_110=>• def$octal_token_group_058_109 - 
            compile time: 4.579ms*/;
        function $def$octal_token_HC_listbody1_110(l, state) {
            debug_stack.push({ name: "def$octal_token_HC_listbody1_110 RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $def$octal_token_group_058_109(l, state)) {
                /*--unique-id--218--DO-NOT-REPLACE*/
                add_reduce(state, 1, 4);
                return $def$octal_token_HC_listbody1_110_goto(l, state, 218);
            }
            debug_stack.push({ name: "def$octal_token_HC_listbody1_110 RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $def$octal_token_HC_listbody1_110_goto(l, state, prod) {
            debug_stack.push({ name: "def$octal_token_HC_listbody1_110 GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_b9190bf1b860503a(l/*[ nl ][ 6 ]*/);
                if (l.isSP()/*[ws]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*0 1 2 3 4 5 6 7*/
                if (assert_table(l, 0x0, 0xff0000, 0x0, 0x0)/*tbl:[ 0 ] [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ 7 ]*/) {
                    /*assert-production-closure*/
                    /*
                       218:658 def$octal_token_HC_listbody1_110=>def$octal_token_HC_listbody1_110 • def$octal_token_group_058_109
                    */
                    /*peek_level:-1 offset:1*/
                    if (state = $def$octal_token_group_058_109(l, state)) {
                        /*--unique-id--218--DO-NOT-REPLACE*/
                        add_reduce(state, 2, 3);
                        prod = 218;
                        continue;
                    }
                }
                break;
            }
            debug_stack.push({ name: "def$octal_token_HC_listbody1_110 GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 218);
        }
/*production name: def$octal_token
            grammar index: 219
            bodies:
	219:660 def$octal_token=>• def$octal_token_group_050_108 def$octal_token_HC_listbody1_110 - 
            compile time: 6.418ms*/;
        function $def$octal_token(l, state) {
            debug_stack.push({ name: "def$octal_token RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0*/
            if (state = $def$octal_token_group_050_108(l, state)) {
                sk_b9190bf1b860503a(l/*[ nl ][ 6 ]*/);
                if (state = $def$octal_token_HC_listbody1_110(l, state)) {
                    /*--unique-id--219--DO-NOT-REPLACE*/
                    add_reduce(state, 2, 0);
                    debug_stack.push({ name: "def$octal_token RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                    return state;
                }
            }
            debug_stack.push({ name: "def$octal_token RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$js_identifier
            grammar index: 227
            bodies:
	227:681 def$js_identifier=>• tk:def$js_id_symbols - 
            compile time: 1.407ms*/;
        function $def$js_identifier(l, state) {
            debug_stack.push({ name: "def$js_identifier RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*228*/
            if (assert_consume(l, state, def$js_id_symbols_tok_b3199095c9facd2b(l))) {
                /*consume*/
                /*
                   227:681 def$js_identifier=>tk:def$js_id_symbols •
                */
                /*--unique-id--227--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                debug_stack.push({ name: "def$js_identifier RD return", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
                return state;
            }
            debug_stack.push({ name: "def$js_identifier RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
/*production name: def$js_id_symbols
            grammar index: 228
            bodies:
	228:682 def$js_id_symbols=>• def$js_id_symbols θid - 
		228:683 def$js_id_symbols=>• def$js_id_symbols _ - 
		228:684 def$js_id_symbols=>• def$js_id_symbols $ - 
		228:685 def$js_id_symbols=>• def$js_id_symbols θnum - 
		228:686 def$js_id_symbols=>• _ - 
		228:687 def$js_id_symbols=>• $ - 
		228:688 def$js_id_symbols=>• θid - 
            compile time: 10.047ms*/;
        function $def$js_id_symbols(l, state) {
            debug_stack.push({ name: "def$js_id_symbols RD START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            /*peek_level:-1 offset:0 -- clause*/
            /*_ $ id*/
            if (assert_consume(l, state, ((l.utf == 95/*[_]*/) || (l.utf == 36/*[$]*/)) || l.isID()/*[id]*/)) {
                /*consume*/
                /*
                   228:686 def$js_id_symbols=>_ •
                   228:687 def$js_id_symbols=>$ •
                   228:688 def$js_id_symbols=>θid •
                */
                /*--unique-id--228--DO-NOT-REPLACE*/
                /*peek_level:-1 offset:0*/
                return $def$js_id_symbols_goto(l, state, 228);
            }
            debug_stack.push({ name: "def$js_id_symbols RD FAILED", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return 0;
        }
        function $def$js_id_symbols_goto(l, state, prod) {
            debug_stack.push({ name: "def$js_id_symbols GOTO START", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            while (1) {
                sk_d065c58d10ee093b(l/*[ 6 ]*/);
                if (non_capture_bde7550a3d6b8d46(l)/*[nl]*/) {
                    return state;
                }
                /*peek_level:-1 offset:0 -- clause*/
                /*id _ $ num*/
                if (assert_consume(l, state, (((l.utf == 95/*[_]*/) || (l.utf == 36/*[$]*/)) || l.isID()/*[id]*/) || l.isNum()/*[num]*/)) {
                    /*consume*/
                    /*
                       228:682 def$js_id_symbols=>def$js_id_symbols θid •
                       228:683 def$js_id_symbols=>def$js_id_symbols _ •
                       228:684 def$js_id_symbols=>def$js_id_symbols $ •
                       228:685 def$js_id_symbols=>def$js_id_symbols θnum •
                    */
                    /*--unique-id--228--DO-NOT-REPLACE*/
                    /*peek_level:-1 offset:1*/
                    add_reduce(state, null2, 229);
                    prod = 228;
                    continue;
                }
                break;
            }
            debug_stack.push({ name: "def$js_id_symbols GOTO END", state, tx: str.slice(l.off, l.off + l.tl), ty: l.ty, tl: l.tl, utf: l.getUTF(), FAILED: state == 0, offset: l.off });
            return assertSuccess(l, state, prod == 228);
        }
        function main(input_string) {
            str = input_string;
            const l = new Lexer();
            l.next();
            reset_counters_and_pointers();
            sk_0496d836f85249a7(l/*[ ws ][ nl ][ 6 ]*/);
            let state = $javascript(l, createState(1));
            set_action(0);
            set_error(0);
            return hasStateFailed(state) || !l.END();
        }
        return main;
    })(shared_memory, debug_stack);

const fns = [(e, sym) => sym[sym.length - 1],
(env, sym, pos) => (env.IS_MODULE = false, sym[0])/*0*/
    , (env, sym, pos) => ({ type: (env.IS_MODULE) ? env.typ.Module : env.typ.Script, nodes: sym[0], pos })/*1*/
    , (env, sym, pos) => ((sym[0].push(sym[1]), sym[0]))/*2*/
    , (env, sym, pos) => ([sym[0]])/*3*/
    , (env, sym, pos) => ({ type: env.typ.ImportDeclaration, nodes: [sym[1], sym[2]], pos })/*4*/
    , (env, sym, pos) => ({ type: env.typ.ImportDeclaration, nodes: [null, sym[1]], pos })/*5*/
    , (env, sym, pos) => ({ type: env.typ.ImportClause, nodes: [sym[0]], pos })/*6*/
    , (env, sym, pos) => ({ type: env.typ.ImportClause, nodes: [sym[0], sym[2]], pos })/*7*/
    , (env, sym, pos) => (sym[0].type = env.typ.IdentifierDefault, sym[0])/*8*/
    , (env, sym, pos) => ({ type: env.typ.NameSpaceImport, nodes: [sym[2]], pos })/*9*/
    , (env, sym, pos) => ((sym[0].push(sym[2]), sym[0]))/*10*/
    , (env, sym, pos) => ({ type: env.typ.NamedImports, nodes: sym[1] || [], pos })/*11*/
    , (env, sym, pos) => ({ type: env.typ.NamedImports, nodes: null || [], pos })/*12*/
    , (env, sym, pos) => ({ type: env.typ.FromClause, nodes: [sym[1]], pos })/*13*/
    , (env, sym, pos) => ({ type: env.typ.Specifier, nodes: [sym[0]], pos })/*14*/
    , (env, sym, pos) => ({ type: env.typ.Specifier, nodes: [sym[0], sym[2]], pos })/*15*/
    , (env, sym, pos) => (sym[0].type = env.typ.IdentifierModule, sym[0])/*16*/
    , (env, sym, pos) => ({ type: env.typ.ExportDeclaration, nodes: [null, sym[2]], DEFAULT: false, pos })/*17*/
    , (env, sym, pos) => ({ type: env.typ.ExportDeclaration, nodes: [sym[1], sym[2]], DEFAULT: false, pos })/*18*/
    , (env, sym, pos) => ({ type: env.typ.ExportDeclaration, nodes: [sym[1]], DEFAULT: false, pos })/*19*/
    , (env, sym, pos) => ({ type: env.typ.ExportDeclaration, nodes: [sym[2]], DEFAULT: true, pos })/*20*/
    , (env, sym, pos) => ({ type: env.typ.ExportDeclaration, nodes: [sym[1], null], DEFAULT: false, pos })/*21*/
    , (env, sym, pos) => ({ type: env.typ.ExportClause, nodes: sym[1] || [], pos })/*22*/
    , (env, sym, pos) => ({ type: env.typ.ExportClause, nodes: null || [], pos })/*23*/
    , (env, sym, pos) => ({ type: env.typ.Script, nodes: sym[0], pos })/*24*/
    , (env, sym, pos) => ([...sym[0], sym[1]])/*25*/
    , (env, sym, pos) => ({ type: env.typ.BlockStatement, nodes: sym[1] || [], pos })/*26*/
    , (env, sym, pos) => ({ type: env.typ.BlockStatement, nodes: null || [], pos })/*27*/
    , (env, sym, pos) => ({ type: env.typ.EmptyStatement, pos })/*28*/
    , (env, sym, pos) => ({ type: env.typ.ExpressionStatement, nodes: [sym[0]], pos })/*29*/
    , (env, sym, pos) => ({ type: env.typ.IfStatement, nodes: [sym[2], sym[4], sym[5]], pos })/*30*/
    , (env, sym, pos) => ({ type: env.typ.IfStatement, nodes: [sym[2], sym[4], null], pos })/*31*/
    , (env, sym, pos) => ({ type: env.typ.VariableDeclaration, nodes: sym[1], pos })/*32*/
    , (env, sym, pos) => ({ type: env.typ.VariableDeclaration, nodes: [sym[0]], pos })/*33*/
    , (env, sym, pos) => ({ type: env.typ.DoStatement, nodes: [sym[1], sym[4]], pos })/*34*/
    , (env, sym, pos) => ({ type: env.typ.WhileStatement, nodes: [sym[2], sym[4]], pos })/*35*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [sym[2], sym[4], sym[6], sym[8]], LEX: false, pos })/*36*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [sym[2], sym[3], sym[5], sym[7]], LEX: true, pos })/*37*/
    , (env, sym, pos) => ({ type: env.typ.ForInStatement, nodes: [sym[2], sym[4], sym[6]], pos })/*38*/
    , (env, sym, pos) => ({ type: env.typ.ForOfStatement, nodes: [sym[3], sym[5], sym[7]], pos, AWAIT: !!sym[1] })/*39*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [null, sym[3], sym[5], sym[7]], LEX: false, pos })/*40*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [sym[2], null, sym[5], sym[7]], LEX: false, pos })/*41*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [sym[2], sym[4], null, sym[7]], LEX: false, pos })/*42*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [sym[2], null, sym[4], sym[6]], LEX: true, pos })/*43*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [sym[2], sym[3], null, sym[6]], LEX: true, pos })/*44*/
    , (env, sym, pos) => ({ type: env.typ.ForOfStatement, nodes: [sym[2], sym[4], sym[6]], pos, AWAIT: !!null })/*45*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [null, null, sym[4], sym[6]], LEX: false, pos })/*46*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [null, sym[3], null, sym[6]], LEX: false, pos })/*47*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [sym[2], null, null, sym[6]], LEX: false, pos })/*48*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [sym[2], null, null, sym[5]], LEX: true, pos })/*49*/
    , (env, sym, pos) => ({ type: env.typ.ForStatement, nodes: [null, null, null, sym[5]], LEX: false, pos })/*50*/
    , (env, sym, pos) => ({ type: env.typ.LexicalBinding, nodes: [sym[1]], symbol: sym[0], pos })/*51*/
    , (env, sym, pos) => ({ type: env.typ.ContinueStatement, nodes: sym[1] ? [sym[1]] : [], pos })/*52*/
    , (env, sym, pos) => ({ type: env.typ.ContinueStatement, nodes: null ? [null] : [], pos })/*53*/
    , (env, sym, pos) => ({ type: env.typ.BreakStatement, nodes: [sym[1]], pos })/*54*/
    , (env, sym, pos) => ({ type: env.typ.BreakStatement, nodes: [null], pos })/*55*/
    , (env, sym, pos) => ({ type: env.typ.ReturnStatement, nodes: [sym[1]], pos })/*56*/
    , (env, sym, pos) => ({ type: env.typ.ReturnStatement, nodes: [], pos })/*57*/
    , (env, sym, pos) => ({ type: env.typ.ThrowStatement, nodes: [sym[1]], pos })/*58*/
    , (env, sym, pos) => ({ type: env.typ.WithStatement, nodes: [sym[2], sym[4]], pos })/*59*/
    , (env, sym, pos) => ({ type: env.typ.SwitchStatement, nodes: [sym[2], sym[4]], pos })/*60*/
    , (env, sym, pos) => ({ type: env.typ.CaseBlock, nodes: [...sym[1], sym[2], ...sym[3]], pos })/*61*/
    , (env, sym, pos) => ({ type: env.typ.CaseBlock, nodes: [sym[1], ...sym[2]], pos })/*62*/
    , (env, sym, pos) => ({ type: env.typ.CaseBlock, nodes: [...sym[1], ...sym[2]], pos })/*63*/
    , (env, sym, pos) => ({ type: env.typ.CaseBlock, nodes: [...sym[1], sym[2]], pos })/*64*/
    , (env, sym, pos) => ({ type: env.typ.CaseBlock, nodes: [...sym[1]], pos })/*65*/
    , (env, sym, pos) => ({ type: env.typ.CaseBlock, nodes: [sym[1]], pos })/*66*/
    , (env, sym, pos) => ({ type: env.typ.CaseBlock, nodes: [], pos })/*67*/
    , (env, sym, pos) => ({ type: env.typ.CaseClause, nodes: [sym[1], ...sym[3]], pos })/*68*/
    , (env, sym, pos) => ({ type: env.typ.CaseClause, nodes: [sym[1]], pos })/*69*/
    , (env, sym, pos) => ({ type: env.typ.DefaultClause, nodes: [...sym[2]], pos })/*70*/
    , (env, sym, pos) => ({ type: env.typ.DefaultClause, nodes: [], pos })/*71*/
    , (env, sym, pos) => ({ type: env.typ.LabeledStatement, nodes: [sym[0], sym[2]], pos })/*72*/
    , (env, sym, pos) => ({ type: env.typ.TryStatement, nodes: [sym[1], sym[2], null], pos })/*73*/
    , (env, sym, pos) => ({ type: env.typ.TryStatement, nodes: [sym[1], null, sym[2]], pos })/*74*/
    , (env, sym, pos) => ({ type: env.typ.TryStatement, nodes: [sym[1], sym[2], sym[3]], pos })/*75*/
    , (env, sym, pos) => ({ type: env.typ.CatchClause, nodes: [sym[2], sym[4]], pos })/*76*/
    , (env, sym, pos) => ({ type: env.typ.FinallyClause, nodes: [sym[1]], pos })/*77*/
    , (env, sym, pos) => ({ type: env.typ.DebuggerStatement, pos })/*78*/
    , (env, sym, pos) => ({ type: env.typ.VariableStatement, nodes: sym[1], pos })/*79*/
    , (env, sym, pos) => ({ type: env.typ.BindingExpression, symbol: "=", nodes: [sym[0], sym[1]], pos })/*80*/
    , (env, sym, pos) => ({ type: env.typ.LexicalDeclaration, symbol: sym[0], nodes: sym[1], pos })/*81*/
    , (env, sym, pos) => ("let")/*82*/
    , (env, sym, pos) => ("const")/*83*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!sym[0], GENERATOR: !!sym[2], nodes: [sym[3], sym[5], sym[8]], pos })/*84*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!null, GENERATOR: !!sym[1], nodes: [sym[2], sym[4], sym[7]], pos })/*85*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!sym[0], GENERATOR: !!null, nodes: [sym[2], sym[4], sym[7]], pos })/*86*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!sym[0], GENERATOR: !!sym[2], nodes: [null, sym[4], sym[7]], pos })/*87*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!sym[0], GENERATOR: !!sym[2], nodes: [sym[3], null, sym[7]], pos })/*88*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!null, GENERATOR: !!null, nodes: [sym[1], sym[3], sym[6]], pos })/*89*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!null, GENERATOR: !!sym[1], nodes: [null, sym[3], sym[6]], pos })/*90*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!null, GENERATOR: !!sym[1], nodes: [sym[2], null, sym[6]], pos })/*91*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!sym[0], GENERATOR: !!null, nodes: [null, sym[3], sym[6]], pos })/*92*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!sym[0], GENERATOR: !!null, nodes: [sym[2], null, sym[6]], pos })/*93*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!sym[0], GENERATOR: !!sym[2], nodes: [null, null, sym[6]], pos })/*94*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!null, GENERATOR: !!null, nodes: [null, sym[2], sym[5]], pos })/*95*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!null, GENERATOR: !!null, nodes: [sym[1], null, sym[5]], pos })/*96*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!null, GENERATOR: !!sym[1], nodes: [null, null, sym[5]], pos })/*97*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!sym[0], GENERATOR: !!null, nodes: [null, null, sym[5]], pos })/*98*/
    , (env, sym, pos) => ({ type: env.typ.FunctionDeclaration, ASYNC: !!null, GENERATOR: !!null, nodes: [null, null, sym[4]], pos })/*99*/
    , (env, sym, pos) => ((sym1.type = env.typ.FunctionExpression, sym1))/*100*/
    , (env, sym, pos) => ({ type: env.typ.FormalParameters, nodes: [sym[0]], pos })/*101*/
    , (env, sym, pos) => ({ type: env.typ.FormalParameters, nodes: sym[0], pos })/*102*/
    , (env, sym, pos) => ({ type: env.typ.FormalParameters, nodes: [...sym[0], sym[2]], pos })/*103*/
    , (env, sym, pos) => ({ type: env.typ.FunctionBody, nodes: sym[0] || [], pos })/*104*/
    , (env, sym, pos) => ({ type: env.typ.YieldExpression, nodes: [], pos })/*105*/
    , (env, sym, pos) => ({ type: env.typ.YieldExpression, nodes: [sym[2]], pos, GENERATOR: !!sym[1] })/*106*/
    , (env, sym, pos) => ({ type: env.typ.YieldExpression, nodes: [sym[1]], pos, GENERATOR: !!null })/*107*/
    , (env, sym, pos) => ({ type: env.typ.ArrowFunction, ASYNC: !!sym[0], nodes: [sym[1], sym[3]], pos })/*108*/
    , (env, sym, pos) => ({ type: env.typ.ArrowFunction, ASYNC: !!null, nodes: [sym[0], sym[2]], pos })/*109*/
    , (env, sym, pos) => (sym[0].type = env.typ.IdentifierBinding, sym[0])/*110*/
    , (env, sym, pos) => (env.functions.reinterpretArrowParameters(sym, env, pos))/*111*/
    , (env, sym, pos) => ({ type: env.typ.BlockStatement, nodes: sym[1], pos })/*112*/
    , (env, sym, pos) => ({ type: env.typ.CallExpression, nodes: [sym[0], sym[1]], pos })/*113*/
    , (env, sym, pos) => ({ type: env.typ.Class, nodes: [sym[1], sym[2], ...sym[4]], pos })/*114*/
    , (env, sym, pos) => ({ type: env.typ.Class, nodes: [null, sym[1], ...sym[3]], pos })/*115*/
    , (env, sym, pos) => ({ type: env.typ.Class, nodes: [sym[1], null, ...sym[3]], pos })/*116*/
    , (env, sym, pos) => ({ type: env.typ.Class, nodes: [sym[1], sym[2]], pos })/*117*/
    , (env, sym, pos) => ({ type: env.typ.Class, nodes: [null, null, ...sym[2]], pos })/*118*/
    , (env, sym, pos) => ({ type: env.typ.Class, nodes: [null, sym[1]], pos })/*119*/
    , (env, sym, pos) => ({ type: env.typ.Class, nodes: [sym[1], null], pos })/*120*/
    , (env, sym, pos) => ({ type: env.typ.Class, nodes: [null, null], pos })/*121*/
    , (env, sym, pos) => (sym[0].concat(sym[1]))/*122*/
    , (env, sym, pos) => (sym[0])/*123*/
    , (env, sym, pos) => ([])/*124*/
    , (env, sym, pos) => ((sym[1].STATIC = true, sym[1]))/*125*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!sym[0], GENERATOR: !!sym[1], nodes: [sym[2], sym[4], sym[7]], pos })/*126*/
    , (env, sym, pos) => ({ type: env.typ.GetterMethod, nodes: [sym[1], sym[5]], pos })/*127*/
    , (env, sym, pos) => ({ type: env.typ.SetterMethod, nodes: [sym[1], sym[3], sym[6]], pos })/*128*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!null, GENERATOR: !!sym[0], nodes: [sym[1], sym[3], sym[6]], pos })/*129*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!sym[0], GENERATOR: !!null, nodes: [sym[1], sym[3], sym[6]], pos })/*130*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!sym[0], GENERATOR: !!sym[1], nodes: [sym[2], null, sym[6]], pos })/*131*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!sym[0], GENERATOR: !!sym[1], nodes: [sym[2], sym[4], null], pos })/*132*/
    , (env, sym, pos) => ({ type: env.typ.GetterMethod, nodes: [sym[1]], pos })/*133*/
    , (env, sym, pos) => ({ type: env.typ.SetterMethod, nodes: [sym[1], sym[3]], pos })/*134*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!null, GENERATOR: !!null, nodes: [sym[0], sym[2], sym[5]], pos })/*135*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!null, GENERATOR: !!sym[0], nodes: [sym[1], null, sym[5]], pos })/*136*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!null, GENERATOR: !!sym[0], nodes: [sym[1], sym[3], null], pos })/*137*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!sym[0], GENERATOR: !!null, nodes: [sym[1], null, sym[5]], pos })/*138*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!sym[0], GENERATOR: !!null, nodes: [sym[1], sym[3], null], pos })/*139*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!sym[0], GENERATOR: !!sym[1], nodes: [sym[2], null, null], pos })/*140*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!null, GENERATOR: !!null, nodes: [sym[0], null, sym[4]], pos })/*141*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!null, GENERATOR: !!null, nodes: [sym[0], sym[2], null], pos })/*142*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!null, GENERATOR: !!sym[0], nodes: [sym[1], null, null], pos })/*143*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!sym[0], GENERATOR: !!null, nodes: [sym[1], null, null], pos })/*144*/
    , (env, sym, pos) => ({ type: env.typ.Method, ASYNC: !!null, GENERATOR: !!null, nodes: [sym[0], null, null], pos })/*145*/
    , (env, sym, pos) => ((sym[0].type == env.typ.ExpressionList ? (sym[0].nodes.push(sym[2]), sym[0]) : { type: env.typ.ExpressionList, nodes: [sym[0], sym[2]], pos }))/*146*/
    , (env, sym, pos) => ({ type: env.typ.NewExpression, nodes: [sym[1]], pos })/*147*/
    , (env, sym, pos) => ({ type: env.typ.MemberExpression, nodes: [sym[0], sym[2]], pos, COMPUTED: true })/*148*/
    , (env, sym, pos) => ((sym[2].type |= env.cls.PROPERTY_NAME, { type: env.typ.MemberExpression, nodes: [sym[0], sym[2]], pos, COMPUTED: false }))/*149*/
    , (env, sym, pos) => ({ type: env.typ.CallExpression, nodes: [sym[0], sym[1]], pos, TEMPLATE: true })/*150*/
    , (env, sym, pos) => ({ type: env.typ.NewInstanceExpression, nodes: [sym[1], sym[2]], pos })/*151*/
    , (env, sym, pos) => ((sym[2].type |= env.cls.PROPERTY_NAME, { type: env.typ.SuperExpression, nodes: [sym[2]], pos, COMPUTED: false }))/*152*/
    , (env, sym, pos) => ({ type: env.typ.SuperExpression, nodes: [sym[2]], pos, COMPUTED: true })/*153*/
    , (env, sym, pos) => ({ type: env.typ.ImportMeta, pos })/*154*/
    , (env, sym, pos) => ({ type: env.typ.NewTarget, pos })/*155*/
    , (env, sym, pos) => ({ type: env.typ.CallExpression, nodes: [sym[0], sym[1]], pos, TEMPLATE: false })/*156*/
    , (env, sym, pos) => ({ type: env.typ.CallExpression, nodes: [sym[0], null], pos, TEMPLATE: true })/*157*/
    , (env, sym, pos) => ({ type: env.typ.SuperCall, nodes: [sym[1]], pos })/*158*/
    , (env, sym, pos) => ({ type: env.typ.ImportCall, nodes: [sym[2]], pos })/*159*/
    , (env, sym, pos) => ({ type: env.typ.Arguments, nodes: sym[1] || [], pos })/*160*/
    , (env, sym, pos) => ({ type: env.typ.Arguments, nodes: null || [], pos })/*161*/
    , (env, sym, pos) => ({ type: env.typ.Spread, nodes: [sym[1]], pos })/*162*/
    , (env, sym, pos) => ({ type: env.typ.OptionalMemberExpression, nodes: [sym[0], sym[1]], pos, COMPUTED: false })/*163*/
    , (env, sym, pos) => (sym[2])/*164*/
    , (env, sym, pos) => ({ type: env.typ.ThisLiteral, pos })/*165*/
    , (env, sym, pos) => (env.functions.reinterpretParenthesized(sym, env, pos))/*166*/
    , (env, sym, pos) => ({ type: env.typ.AwaitExpression, nodes: [sym[1]], pos })/*167*/
    , (env, sym, pos) => ({ type: env.typ.AssignmentExpression, symbol: "=", nodes: [sym[0], sym[2]], pos })/*168*/
    , (env, sym, pos) => ({ type: env.typ.AssignmentExpression, symbol: sym[1], nodes: [sym[0], sym[2]], pos })/*169*/
    , (env, sym, pos) => ({ type: env.typ.ConditionalExpression, nodes: [sym[0], sym[2], sym[4]], pos })/*170*/
    , (env, sym, pos) => ({ type: env.typ.LogicalExpression, symbol: sym[1], nodes: [sym[0], sym[2]], pos })/*171*/
    , (env, sym, pos) => ({ type: env.typ.CoalesceExpression, nodes: [sym[0], sym[2]], pos })/*172*/
    , (env, sym, pos) => ({ type: env.typ.BitwiseExpression, symbol: sym[1], nodes: [sym[0], sym[2]], pos })/*173*/
    , (env, sym, pos) => ({ type: env.typ.EqualityExpression, symbol: sym[1], nodes: [sym[0], sym[2]], pos })/*174*/
    , (env, sym, pos) => ({ type: env.typ.RelationalExpression, symbol: sym[1], nodes: [sym[0], sym[2]], pos })/*175*/
    , (env, sym, pos) => ({ type: env.typ.InstanceOfExpression, nodes: [sym[0], sym[2]], pos })/*176*/
    , (env, sym, pos) => ({ type: env.typ.InExpression, nodes: [sym[0], sym[2]], pos })/*177*/
    , (env, sym, pos) => ({ type: env.typ.ShiftExpression, symbol: sym[1], nodes: [sym[0], sym[2]], pos })/*178*/
    , (env, sym, pos) => ({ type: env.typ.AdditiveExpression, symbol: sym[1], nodes: [sym[0], sym[2]], pos })/*179*/
    , (env, sym, pos) => ({ type: env.typ.MultiplicativeExpression, symbol: sym[1], nodes: [sym[0], sym[2]], pos })/*180*/
    , (env, sym, pos) => ({ type: env.typ.ExponentiationExpression, nodes: [sym[0], sym[2]], pos })/*181*/
    , (env, sym, pos) => ({ type: env.typ.DeleteExpression, nodes: [sym[1]], pos })/*182*/
    , (env, sym, pos) => ({ type: env.typ.VoidExpression, nodes: [sym[1]], pos })/*183*/
    , (env, sym, pos) => ({ type: env.typ.TypeofExpression, nodes: [sym[1]], pos })/*184*/
    , (env, sym, pos) => ({ type: env.typ.UnaryExpression, symbol: sym[0], nodes: [sym[1]], pos })/*185*/
    , (env, sym, pos) => ((sym[1].type == env.typ.NumericLiteral || sym[1].type == env.typ.BigIntLiteral) ? (sym[1].NEGATIVE = true, sym[1]) : ({ type: env.typ.UnaryExpression, symbol: sym[0], nodes: [sym[1]], pos }))/*186*/
    , (env, sym, pos) => ({ type: env.typ.PostExpression, symbol: sym[1], nodes: [sym[0]], pos })/*187*/
    , (env, sym, pos) => ({ type: env.typ.PreExpression, symbol: sym[0], nodes: [sym[1]], pos })/*188*/
    , (env, sym, pos) => ({ type: env.typ.Parenthesized, nodes: [], pos })/*189*/
    , (env, sym, pos) => ({ type: env.typ.Parenthesized, nodes: [sym[1]], pos })/*190*/
    , (env, sym, pos) => ({ type: env.typ.Parenthesized, nodes: [sym[1], sym[3]], pos })/*191*/
    , (env, sym, pos) => ({ type: env.typ.ObjectBinding, nodes: [], pos })/*192*/
    , (env, sym, pos) => ({ type: env.typ.ObjectBinding, nodes: [sym[1]], pos })/*193*/
    , (env, sym, pos) => ({ type: env.typ.ObjectBinding, nodes: [...sym[1]], pos })/*194*/
    , (env, sym, pos) => ({ type: env.typ.ObjectBinding, nodes: [...sym[1], sym[3]], pos })/*195*/
    , (env, sym, pos) => ({ type: env.typ.ArrayBinding, nodes: [sym[1], sym[2]], pos })/*196*/
    , (env, sym, pos) => ({ type: env.typ.ArrayBinding, nodes: [...sym[1]], pos })/*197*/
    , (env, sym, pos) => ({ type: env.typ.ArrayBinding, nodes: [...sym[1], sym[3], sym[4]], pos })/*198*/
    , (env, sym, pos) => ({ type: env.typ.ArrayBinding, nodes: [sym[1]], pos })/*199*/
    , (env, sym, pos) => ({ type: env.typ.ArrayBinding, nodes: [...sym[1], sym[3]], pos })/*200*/
    , (env, sym, pos) => ({ type: env.typ.ArrayBinding, nodes: [], pos })/*201*/
    , (env, sym, pos) => ([...sym[0], sym[2]])/*202*/
    , (env, sym, pos) => ([...sym[0], ...sym[2]])/*203*/
    , (env, sym, pos) => ([sym[0], sym[1]])/*204*/
    , (env, sym, pos) => ({ type: env.typ.PropertyBinding, nodes: [sym[0], sym[2]], pos })/*205*/
    , (env, sym, pos) => (sym[1] ? { type: env.typ.BindingExpression, nodes: [sym[0], sym[1]], pos } : sym[0])/*206*/
    , (env, sym, pos) => (null ? { type: env.typ.BindingExpression, nodes: [sym[0]], pos } : sym[0])/*207*/
    , (env, sym, pos) => ({ type: env.typ.RegexLiteral, value: sym[0], flags: sym[2], pos })/*208*/
    , (env, sym, pos) => ({ type: env.typ.RegexLiteral, value: sym[0], pos })/*209*/
    , (env, sym, pos) => ({ type: env.typ.ObjectLiteral, nodes: [], pos })/*210*/
    , (env, sym, pos) => ({ type: env.typ.ObjectLiteral, nodes: sym[1], pos })/*211*/
    , (env, sym, pos) => (sym[0].push(sym[2]), sym[0])/*212*/
    , (env, sym, pos) => (sym[0].type |= env.cls.PROPERTY_NAME, sym[0])/*213*/
    , (env, sym, pos) => ({ type: env.typ.ComputedProperty, nodes: [sym[1]], pos })/*214*/
    , (env, sym, pos) => (sym[1])/*215*/
    , (env, sym, pos) => ({ type: env.typ.ArrayLiteral, nodes: [sym[1]], pos })/*216*/
    , (env, sym, pos) => ({ type: env.typ.ArrayLiteral, nodes: sym[1], pos })/*217*/
    , (env, sym, pos) => ({ type: env.typ.ArrayLiteral, nodes: [...sym[1], sym[3]], pos })/*218*/
    , (env, sym, pos) => ({ type: env.typ.ArrayLiteral, nodes: [], pos })/*219*/
    , (env, sym, pos) => ({ type: env.typ.ArrayLiteral, nodes: [...sym[1]], pos })/*220*/
    , (env, sym, pos) => ([...sym[0], sym[2], sym[3]])/*221*/
    , (env, sym, pos) => ({ type: env.typ.Elision, count: 0, pos })/*222*/
    , (env, sym, pos) => ({ type: env.typ.Elision, count: sym[0].count + 1, pos })/*223*/
    , (env, sym, pos) => ({ type: env.typ.Template, nodes: [{ quote_type: "", type: env.typ.StringLiteral, value: sym[0], pos }], NO_SUBSTITUTE: true, pos })/*224*/
    , (env, sym, pos) => (sym[2].unshift(sym[0], sym[1]), { type: env.typ.Template, nodes: sym[2], pos })/*225*/
    , (env, sym, pos) => (sym[0].push(sym[1]), sym[0])/*226*/
    , (env, sym, pos) => (sym[0].push(sym[1], sym[2]), sym[0])/*227*/
    , (env, sym, pos) => (sym[0] + sym[1])/*228*/
    , (env, sym, pos) => (sym[0] + "")/*229*/
    , (env, sym, pos) => ({ type: env.typ.TemplateHead, value: sym[1], pos })/*230*/
    , (env, sym, pos) => ({ type: env.typ.TemplateHead, pos })/*231*/
    , (env, sym, pos) => ({ type: env.typ.TemplateMiddle, value: sym[1], pos })/*232*/
    , (env, sym, pos) => ({ type: env.typ.TemplateMiddle, pos })/*233*/
    , (env, sym, pos) => ({ type: env.typ.TemplateTail, value: sym[1], pos })/*234*/
    , (env, sym, pos) => ({ type: env.typ.TemplateTail, pos })/*235*/
    , (env, sym, pos) => ({ quote_type: sym[0], type: env.typ.StringLiteral, value: sym[1], pos })/*236*/
    , (env, sym, pos) => ({ quote_type: sym[0], type: env.typ.StringLiteral, value: null, pos })/*237*/
    , (env, sym, pos) => ({ type: env.typ.BigIntLiteral, value: sym[0], pos, NEGATIVE: false })/*238*/
    , (env, sym, pos) => ({ type: env.typ.NumericLiteral, value: sym[0], computed_value: parseFloat(sym[0]), pos, NEGATIVE: false })/*239*/
    , (env, sym, pos) => ({ type: env.typ.NullLiteral, pos })/*240*/
    , (env, sym, pos) => ({ type: env.typ.BooleanLiteral, value: sym[0], pos })/*241*/
    , (env, sym, pos) => (sym[0].type = env.typ.IdentifierLabel, sym[0])/*242*/
    , (env, sym, pos) => (sym[0].type = env.typ.IdentifierReference, sym[0])/*243*/
    , (env, sym, pos) => ({ type: env.typ.Identifier, value: sym[0], pos })/*244*/
    , (env, sym, pos) => ({ type: env.typ.IdentifierName, value: sym[0], pos })/*245*/];

export default function (str, env = {}) {

    debug_stack.length = 0;
    const
        FAILED = recognizer(str), // call with pointers
        stack = [];

    let action_length = 0,
        error_message = "",
        review_stack = [];


    if (FAILED) {

        for (let i = debug_stack.length - 1, j = 0; i >= 0; i--) {
            if (!debug_stack[i].FAILED && j++ > 80)
                break;
            review_stack.push(debug_stack[i]);
        }

        review_stack.reverse();

        if (review_stack.length > 0)
            console.log({ review_stack });

        let error_off = 10000000000000;
        let error_set = false;


        const lexer = new Lexer(str);

        for (let i = 0; i < error_array.length; i++) {
            if (error_array[i] > 0) {
                if (!error_set) {
                    error_set = true;
                    error_off = 0;
                }
                error_off = Math.max(error_off, error_array[i]);
            }
        }

        if (error_off == 10000000000000)
            error_off = 0;

        while (lexer.off < error_off && !lexer.END) lexer.next();

        error_message = lexer.errorMessage(`Unexpected token[${lexer.tx}]`);


    } else {

        let offset = 0, pos = [];

        for (const action of action_array) {

            action_length++;

            if (action == 0) break;

            switch (action & 1) {
                case 0: //REDUCE;
                    {
                        const
                            DO_NOT_PUSH_TO_STACK = (action >> 1) & 1,
                            body = action >> 16,
                            len = ((action >> 2) & 0x3FFF);

                        const pos_a = pos[pos.length - len] || { off: 0, tl: 0 };
                        const pos_b = pos[pos.length - 1] || { off: 0, tl: 0 };
                        pos[stack.length - len] = { off: pos_a.off, tl: pos_b.off - pos_a.off + pos_b.tl };
                        const e = stack.slice(-len);
                        stack[stack.length - len] = fns[body](env, e, { off: pos_a.off, tl: pos_b.off - pos_a.off + pos_b.tl });

                        if (!DO_NOT_PUSH_TO_STACK) {
                            stack.length = stack.length - len + 1;
                            pos.length = pos.length - len + 1;
                        } else {
                            stack.length = stack.length - len;
                            pos.length = pos.length - len;
                        }

                    } break;

                case 1: { //SHIFT;
                    const
                        has_len = (action >>> 1) & 1,
                        has_skip = (action >>> 2) & 1,
                        len = action >>> (3 + (has_skip * 15)),
                        skip = has_skip * ((action >>> 3) & (~(has_len * 0xFFFF8000)));
                    offset += skip;
                    if (has_len) {
                        stack.push(str.slice(offset, offset + len));
                        pos.push({ off: offset, tl: len });
                        offset += len;
                    } else {
                        stack.push("");
                        pos.push({ off: offset, tl: 0 });
                    }
                } break;
            }
        }
    }

    return { result: stack, FAILED: !!FAILED, action_length, error_message, review_stack };
}